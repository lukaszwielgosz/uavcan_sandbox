
uavcan_sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000840c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008630  08008630  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08008630  08008630  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008630  08008630  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008634  08008634  00018634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b04  20000180  080087b8  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c84  080087b8  00022c84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f89  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004313  00000000  00000000  00041132  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  00045448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001508  00000000  00000000  00046b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001909a  00000000  00000000  00048040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001426f  00000000  00000000  000610da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e3f1  00000000  00000000  00075349  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f373a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e68  00000000  00000000  000f37b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08008504 	.word	0x08008504

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08008504 	.word	0x08008504

08000150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <HAL_Init+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a07      	ldr	r2, [pc, #28]	; (8000178 <HAL_Init+0x28>)
 800015a:	f043 0310 	orr.w	r3, r3, #16
 800015e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000160:	2003      	movs	r0, #3
 8000162:	f000 f8d1 	bl	8000308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000166:	2000      	movs	r0, #0
 8000168:	f007 fc28 	bl	80079bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800016c:	f007 fbee 	bl	800794c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40022000 	.word	0x40022000

0800017c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <HAL_IncTick+0x1c>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	461a      	mov	r2, r3
 8000186:	4b05      	ldr	r3, [pc, #20]	; (800019c <HAL_IncTick+0x20>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4413      	add	r3, r2
 800018c:	4a03      	ldr	r2, [pc, #12]	; (800019c <HAL_IncTick+0x20>)
 800018e:	6013      	str	r3, [r2, #0]
}
 8000190:	bf00      	nop
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000004 	.word	0x20000004
 800019c:	20001ccc 	.word	0x20001ccc

080001a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
  return uwTick;
 80001a4:	4b02      	ldr	r3, [pc, #8]	; (80001b0 <HAL_GetTick+0x10>)
 80001a6:	681b      	ldr	r3, [r3, #0]
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	20001ccc 	.word	0x20001ccc

080001b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	f003 0307 	and.w	r3, r3, #7
 80001c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001c4:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <__NVIC_SetPriorityGrouping+0x44>)
 80001c6:	68db      	ldr	r3, [r3, #12]
 80001c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001ca:	68ba      	ldr	r2, [r7, #8]
 80001cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001d0:	4013      	ands	r3, r2
 80001d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001e6:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <__NVIC_SetPriorityGrouping+0x44>)
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	60d3      	str	r3, [r2, #12]
}
 80001ec:	bf00      	nop
 80001ee:	3714      	adds	r7, #20
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__NVIC_GetPriorityGrouping+0x18>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	0a1b      	lsrs	r3, r3, #8
 8000206:	f003 0307 	and.w	r3, r3, #7
}
 800020a:	4618      	mov	r0, r3
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4906      	ldr	r1, [pc, #24]	; (800024c <__NVIC_EnableIRQ+0x34>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800025c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000260:	2b00      	cmp	r3, #0
 8000262:	db0a      	blt.n	800027a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	b2da      	uxtb	r2, r3
 8000268:	490c      	ldr	r1, [pc, #48]	; (800029c <__NVIC_SetPriority+0x4c>)
 800026a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026e:	0112      	lsls	r2, r2, #4
 8000270:	b2d2      	uxtb	r2, r2
 8000272:	440b      	add	r3, r1
 8000274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000278:	e00a      	b.n	8000290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	b2da      	uxtb	r2, r3
 800027e:	4908      	ldr	r1, [pc, #32]	; (80002a0 <__NVIC_SetPriority+0x50>)
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	f003 030f 	and.w	r3, r3, #15
 8000286:	3b04      	subs	r3, #4
 8000288:	0112      	lsls	r2, r2, #4
 800028a:	b2d2      	uxtb	r2, r2
 800028c:	440b      	add	r3, r1
 800028e:	761a      	strb	r2, [r3, #24]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000e100 	.word	0xe000e100
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b089      	sub	sp, #36	; 0x24
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	f003 0307 	and.w	r3, r3, #7
 80002b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	f1c3 0307 	rsb	r3, r3, #7
 80002be:	2b04      	cmp	r3, #4
 80002c0:	bf28      	it	cs
 80002c2:	2304      	movcs	r3, #4
 80002c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	3304      	adds	r3, #4
 80002ca:	2b06      	cmp	r3, #6
 80002cc:	d902      	bls.n	80002d4 <NVIC_EncodePriority+0x30>
 80002ce:	69fb      	ldr	r3, [r7, #28]
 80002d0:	3b03      	subs	r3, #3
 80002d2:	e000      	b.n	80002d6 <NVIC_EncodePriority+0x32>
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	fa02 f303 	lsl.w	r3, r2, r3
 80002e2:	43da      	mvns	r2, r3
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	401a      	ands	r2, r3
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	fa01 f303 	lsl.w	r3, r1, r3
 80002f6:	43d9      	mvns	r1, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	4313      	orrs	r3, r2
         );
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3724      	adds	r7, #36	; 0x24
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr

08000308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f7ff ff4f 	bl	80001b4 <__NVIC_SetPriorityGrouping>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800031e:	b580      	push	{r7, lr}
 8000320:	b086      	sub	sp, #24
 8000322:	af00      	add	r7, sp, #0
 8000324:	4603      	mov	r3, r0
 8000326:	60b9      	str	r1, [r7, #8]
 8000328:	607a      	str	r2, [r7, #4]
 800032a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000330:	f7ff ff64 	bl	80001fc <__NVIC_GetPriorityGrouping>
 8000334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	68b9      	ldr	r1, [r7, #8]
 800033a:	6978      	ldr	r0, [r7, #20]
 800033c:	f7ff ffb2 	bl	80002a4 <NVIC_EncodePriority>
 8000340:	4602      	mov	r2, r0
 8000342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000346:	4611      	mov	r1, r2
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff81 	bl	8000250 <__NVIC_SetPriority>
}
 800034e:	bf00      	nop
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	b082      	sub	sp, #8
 800035a:	af00      	add	r7, sp, #0
 800035c:	4603      	mov	r3, r0
 800035e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ff57 	bl	8000218 <__NVIC_EnableIRQ>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000374:	b480      	push	{r7}
 8000376:	b08b      	sub	sp, #44	; 0x2c
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800037e:	2300      	movs	r3, #0
 8000380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000382:	2300      	movs	r3, #0
 8000384:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000386:	e127      	b.n	80005d8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000388:	2201      	movs	r2, #1
 800038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800038c:	fa02 f303 	lsl.w	r3, r2, r3
 8000390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	69fa      	ldr	r2, [r7, #28]
 8000398:	4013      	ands	r3, r2
 800039a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800039c:	69ba      	ldr	r2, [r7, #24]
 800039e:	69fb      	ldr	r3, [r7, #28]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	f040 8116 	bne.w	80005d2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	2b12      	cmp	r3, #18
 80003ac:	d034      	beq.n	8000418 <HAL_GPIO_Init+0xa4>
 80003ae:	2b12      	cmp	r3, #18
 80003b0:	d80d      	bhi.n	80003ce <HAL_GPIO_Init+0x5a>
 80003b2:	2b02      	cmp	r3, #2
 80003b4:	d02b      	beq.n	800040e <HAL_GPIO_Init+0x9a>
 80003b6:	2b02      	cmp	r3, #2
 80003b8:	d804      	bhi.n	80003c4 <HAL_GPIO_Init+0x50>
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d031      	beq.n	8000422 <HAL_GPIO_Init+0xae>
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d01c      	beq.n	80003fc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80003c2:	e048      	b.n	8000456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d043      	beq.n	8000450 <HAL_GPIO_Init+0xdc>
 80003c8:	2b11      	cmp	r3, #17
 80003ca:	d01b      	beq.n	8000404 <HAL_GPIO_Init+0x90>
          break;
 80003cc:	e043      	b.n	8000456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80003ce:	4a89      	ldr	r2, [pc, #548]	; (80005f4 <HAL_GPIO_Init+0x280>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d026      	beq.n	8000422 <HAL_GPIO_Init+0xae>
 80003d4:	4a87      	ldr	r2, [pc, #540]	; (80005f4 <HAL_GPIO_Init+0x280>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d806      	bhi.n	80003e8 <HAL_GPIO_Init+0x74>
 80003da:	4a87      	ldr	r2, [pc, #540]	; (80005f8 <HAL_GPIO_Init+0x284>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d020      	beq.n	8000422 <HAL_GPIO_Init+0xae>
 80003e0:	4a86      	ldr	r2, [pc, #536]	; (80005fc <HAL_GPIO_Init+0x288>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d01d      	beq.n	8000422 <HAL_GPIO_Init+0xae>
          break;
 80003e6:	e036      	b.n	8000456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80003e8:	4a85      	ldr	r2, [pc, #532]	; (8000600 <HAL_GPIO_Init+0x28c>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d019      	beq.n	8000422 <HAL_GPIO_Init+0xae>
 80003ee:	4a85      	ldr	r2, [pc, #532]	; (8000604 <HAL_GPIO_Init+0x290>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d016      	beq.n	8000422 <HAL_GPIO_Init+0xae>
 80003f4:	4a84      	ldr	r2, [pc, #528]	; (8000608 <HAL_GPIO_Init+0x294>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d013      	beq.n	8000422 <HAL_GPIO_Init+0xae>
          break;
 80003fa:	e02c      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	623b      	str	r3, [r7, #32]
          break;
 8000402:	e028      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	3304      	adds	r3, #4
 800040a:	623b      	str	r3, [r7, #32]
          break;
 800040c:	e023      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	3308      	adds	r3, #8
 8000414:	623b      	str	r3, [r7, #32]
          break;
 8000416:	e01e      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	330c      	adds	r3, #12
 800041e:	623b      	str	r3, [r7, #32]
          break;
 8000420:	e019      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d102      	bne.n	8000430 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800042a:	2304      	movs	r3, #4
 800042c:	623b      	str	r3, [r7, #32]
          break;
 800042e:	e012      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d105      	bne.n	8000444 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000438:	2308      	movs	r3, #8
 800043a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	69fa      	ldr	r2, [r7, #28]
 8000440:	611a      	str	r2, [r3, #16]
          break;
 8000442:	e008      	b.n	8000456 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000444:	2308      	movs	r3, #8
 8000446:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	69fa      	ldr	r2, [r7, #28]
 800044c:	615a      	str	r2, [r3, #20]
          break;
 800044e:	e002      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000450:	2300      	movs	r3, #0
 8000452:	623b      	str	r3, [r7, #32]
          break;
 8000454:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000456:	69bb      	ldr	r3, [r7, #24]
 8000458:	2bff      	cmp	r3, #255	; 0xff
 800045a:	d801      	bhi.n	8000460 <HAL_GPIO_Init+0xec>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	e001      	b.n	8000464 <HAL_GPIO_Init+0xf0>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3304      	adds	r3, #4
 8000464:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	2bff      	cmp	r3, #255	; 0xff
 800046a:	d802      	bhi.n	8000472 <HAL_GPIO_Init+0xfe>
 800046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	e002      	b.n	8000478 <HAL_GPIO_Init+0x104>
 8000472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000474:	3b08      	subs	r3, #8
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	210f      	movs	r1, #15
 8000480:	693b      	ldr	r3, [r7, #16]
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	43db      	mvns	r3, r3
 8000488:	401a      	ands	r2, r3
 800048a:	6a39      	ldr	r1, [r7, #32]
 800048c:	693b      	ldr	r3, [r7, #16]
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	431a      	orrs	r2, r3
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	f000 8096 	beq.w	80005d2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004a6:	4b59      	ldr	r3, [pc, #356]	; (800060c <HAL_GPIO_Init+0x298>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a58      	ldr	r2, [pc, #352]	; (800060c <HAL_GPIO_Init+0x298>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b56      	ldr	r3, [pc, #344]	; (800060c <HAL_GPIO_Init+0x298>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80004be:	4a54      	ldr	r2, [pc, #336]	; (8000610 <HAL_GPIO_Init+0x29c>)
 80004c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c2:	089b      	lsrs	r3, r3, #2
 80004c4:	3302      	adds	r3, #2
 80004c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80004cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ce:	f003 0303 	and.w	r3, r3, #3
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	220f      	movs	r2, #15
 80004d6:	fa02 f303 	lsl.w	r3, r2, r3
 80004da:	43db      	mvns	r3, r3
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	4013      	ands	r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a4b      	ldr	r2, [pc, #300]	; (8000614 <HAL_GPIO_Init+0x2a0>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d013      	beq.n	8000512 <HAL_GPIO_Init+0x19e>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a4a      	ldr	r2, [pc, #296]	; (8000618 <HAL_GPIO_Init+0x2a4>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d00d      	beq.n	800050e <HAL_GPIO_Init+0x19a>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a49      	ldr	r2, [pc, #292]	; (800061c <HAL_GPIO_Init+0x2a8>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d007      	beq.n	800050a <HAL_GPIO_Init+0x196>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a48      	ldr	r2, [pc, #288]	; (8000620 <HAL_GPIO_Init+0x2ac>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d101      	bne.n	8000506 <HAL_GPIO_Init+0x192>
 8000502:	2303      	movs	r3, #3
 8000504:	e006      	b.n	8000514 <HAL_GPIO_Init+0x1a0>
 8000506:	2304      	movs	r3, #4
 8000508:	e004      	b.n	8000514 <HAL_GPIO_Init+0x1a0>
 800050a:	2302      	movs	r3, #2
 800050c:	e002      	b.n	8000514 <HAL_GPIO_Init+0x1a0>
 800050e:	2301      	movs	r3, #1
 8000510:	e000      	b.n	8000514 <HAL_GPIO_Init+0x1a0>
 8000512:	2300      	movs	r3, #0
 8000514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000516:	f002 0203 	and.w	r2, r2, #3
 800051a:	0092      	lsls	r2, r2, #2
 800051c:	4093      	lsls	r3, r2
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	4313      	orrs	r3, r2
 8000522:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000524:	493a      	ldr	r1, [pc, #232]	; (8000610 <HAL_GPIO_Init+0x29c>)
 8000526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000528:	089b      	lsrs	r3, r3, #2
 800052a:	3302      	adds	r3, #2
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800053a:	2b00      	cmp	r3, #0
 800053c:	d006      	beq.n	800054c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800053e:	4b39      	ldr	r3, [pc, #228]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4938      	ldr	r1, [pc, #224]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000544:	69bb      	ldr	r3, [r7, #24]
 8000546:	4313      	orrs	r3, r2
 8000548:	600b      	str	r3, [r1, #0]
 800054a:	e006      	b.n	800055a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800054c:	4b35      	ldr	r3, [pc, #212]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	43db      	mvns	r3, r3
 8000554:	4933      	ldr	r1, [pc, #204]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000556:	4013      	ands	r3, r2
 8000558:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000562:	2b00      	cmp	r3, #0
 8000564:	d006      	beq.n	8000574 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000566:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000568:	685a      	ldr	r2, [r3, #4]
 800056a:	492e      	ldr	r1, [pc, #184]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	4313      	orrs	r3, r2
 8000570:	604b      	str	r3, [r1, #4]
 8000572:	e006      	b.n	8000582 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000574:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	43db      	mvns	r3, r3
 800057c:	4929      	ldr	r1, [pc, #164]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 800057e:	4013      	ands	r3, r2
 8000580:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800058a:	2b00      	cmp	r3, #0
 800058c:	d006      	beq.n	800059c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800058e:	4b25      	ldr	r3, [pc, #148]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000590:	689a      	ldr	r2, [r3, #8]
 8000592:	4924      	ldr	r1, [pc, #144]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	4313      	orrs	r3, r2
 8000598:	608b      	str	r3, [r1, #8]
 800059a:	e006      	b.n	80005aa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 800059e:	689a      	ldr	r2, [r3, #8]
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	43db      	mvns	r3, r3
 80005a4:	491f      	ldr	r1, [pc, #124]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 80005a6:	4013      	ands	r3, r2
 80005a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d006      	beq.n	80005c4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 80005b8:	68da      	ldr	r2, [r3, #12]
 80005ba:	491a      	ldr	r1, [pc, #104]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	4313      	orrs	r3, r2
 80005c0:	60cb      	str	r3, [r1, #12]
 80005c2:	e006      	b.n	80005d2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 80005c6:	68da      	ldr	r2, [r3, #12]
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	43db      	mvns	r3, r3
 80005cc:	4915      	ldr	r1, [pc, #84]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 80005ce:	4013      	ands	r3, r2
 80005d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80005d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d4:	3301      	adds	r3, #1
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005de:	fa22 f303 	lsr.w	r3, r2, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	f47f aed0 	bne.w	8000388 <HAL_GPIO_Init+0x14>
  }
}
 80005e8:	bf00      	nop
 80005ea:	372c      	adds	r7, #44	; 0x2c
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	10210000 	.word	0x10210000
 80005f8:	10110000 	.word	0x10110000
 80005fc:	10120000 	.word	0x10120000
 8000600:	10310000 	.word	0x10310000
 8000604:	10320000 	.word	0x10320000
 8000608:	10220000 	.word	0x10220000
 800060c:	40021000 	.word	0x40021000
 8000610:	40010000 	.word	0x40010000
 8000614:	40010800 	.word	0x40010800
 8000618:	40010c00 	.word	0x40010c00
 800061c:	40011000 	.word	0x40011000
 8000620:	40011400 	.word	0x40011400
 8000624:	40010400 	.word	0x40010400

08000628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	807b      	strh	r3, [r7, #2]
 8000634:	4613      	mov	r3, r2
 8000636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000638:	787b      	ldrb	r3, [r7, #1]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800063e:	887a      	ldrh	r2, [r7, #2]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000644:	e003      	b.n	800064e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000646:	887b      	ldrh	r3, [r7, #2]
 8000648:	041a      	lsls	r2, r3, #16
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	611a      	str	r2, [r3, #16]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68da      	ldr	r2, [r3, #12]
 8000668:	887b      	ldrh	r3, [r7, #2]
 800066a:	4013      	ands	r3, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	d003      	beq.n	8000678 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000670:	887a      	ldrh	r2, [r7, #2]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000676:	e002      	b.n	800067e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000678:	887a      	ldrh	r2, [r7, #2]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	611a      	str	r2, [r3, #16]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068a:	b08b      	sub	sp, #44	; 0x2c
 800068c:	af06      	add	r7, sp, #24
 800068e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d101      	bne.n	800069a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	e0d3      	b.n	8000842 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d106      	bne.n	80006b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f007 fb1e 	bl	8007cf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2203      	movs	r2, #3
 80006b8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 fdd0 	bl	8002266 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	687e      	ldr	r6, [r7, #4]
 80006ce:	466d      	mov	r5, sp
 80006d0:	f106 0410 	add.w	r4, r6, #16
 80006d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d8:	6823      	ldr	r3, [r4, #0]
 80006da:	602b      	str	r3, [r5, #0]
 80006dc:	1d33      	adds	r3, r6, #4
 80006de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f001 fd99 	bl	8002218 <USB_CoreInit>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d005      	beq.n	80006f8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2202      	movs	r2, #2
 80006f0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80006f4:	2301      	movs	r3, #1
 80006f6:	e0a4      	b.n	8000842 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fdcd 	bl	800229e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000704:	2300      	movs	r3, #0
 8000706:	73fb      	strb	r3, [r7, #15]
 8000708:	e035      	b.n	8000776 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	015b      	lsls	r3, r3, #5
 8000710:	4413      	add	r3, r2
 8000712:	3329      	adds	r3, #41	; 0x29
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	015b      	lsls	r3, r3, #5
 800071e:	4413      	add	r3, r2
 8000720:	3328      	adds	r3, #40	; 0x28
 8000722:	7bfa      	ldrb	r2, [r7, #15]
 8000724:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	7bfa      	ldrb	r2, [r7, #15]
 800072a:	b291      	uxth	r1, r2
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	015b      	lsls	r3, r3, #5
 8000730:	4413      	add	r3, r2
 8000732:	3336      	adds	r3, #54	; 0x36
 8000734:	460a      	mov	r2, r1
 8000736:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	015b      	lsls	r3, r3, #5
 800073e:	4413      	add	r3, r2
 8000740:	332b      	adds	r3, #43	; 0x2b
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	015b      	lsls	r3, r3, #5
 800074c:	4413      	add	r3, r2
 800074e:	3338      	adds	r3, #56	; 0x38
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	015b      	lsls	r3, r3, #5
 800075a:	4413      	add	r3, r2
 800075c:	333c      	adds	r3, #60	; 0x3c
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	3302      	adds	r3, #2
 8000768:	015b      	lsls	r3, r3, #5
 800076a:	4413      	add	r3, r2
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	3301      	adds	r3, #1
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	7bfa      	ldrb	r2, [r7, #15]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	429a      	cmp	r2, r3
 800077e:	d3c4      	bcc.n	800070a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]
 8000784:	e031      	b.n	80007ea <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	015b      	lsls	r3, r3, #5
 800078c:	4413      	add	r3, r2
 800078e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	015b      	lsls	r3, r3, #5
 800079c:	4413      	add	r3, r2
 800079e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80007a2:	7bfa      	ldrb	r2, [r7, #15]
 80007a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	015b      	lsls	r3, r3, #5
 80007ac:	4413      	add	r3, r2
 80007ae:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	015b      	lsls	r3, r3, #5
 80007bc:	4413      	add	r3, r2
 80007be:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	015b      	lsls	r3, r3, #5
 80007cc:	4413      	add	r3, r2
 80007ce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	330a      	adds	r3, #10
 80007dc:	015b      	lsls	r3, r3, #5
 80007de:	4413      	add	r3, r2
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	3301      	adds	r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	7bfa      	ldrb	r2, [r7, #15]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3c8      	bcc.n	8000786 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	687e      	ldr	r6, [r7, #4]
 80007fc:	466d      	mov	r5, sp
 80007fe:	f106 0410 	add.w	r4, r6, #16
 8000802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	602b      	str	r3, [r5, #0]
 800080a:	1d33      	adds	r3, r6, #4
 800080c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800080e:	6838      	ldr	r0, [r7, #0]
 8000810:	f001 fd51 	bl	80022b6 <USB_DevInit>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d005      	beq.n	8000826 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2202      	movs	r2, #2
 800081e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00d      	b.n	8000842 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2201      	movs	r2, #1
 8000832:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fd8f 	bl	800335e <USB_DevDisconnect>

  return HAL_OK;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800084a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000858:	2b01      	cmp	r3, #1
 800085a:	d101      	bne.n	8000860 <HAL_PCD_Start+0x16>
 800085c:	2302      	movs	r3, #2
 800085e:	e016      	b.n	800088e <HAL_PCD_Start+0x44>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2201      	movs	r2, #1
 8000864:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000868:	2101      	movs	r1, #1
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f007 fca7 	bl	80081be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f002 fd68 	bl	800334a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f001 fcda 	bl	8002238 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fd65 	bl	8003372 <USB_ReadInterrupts>
 80008a8:	4603      	mov	r3, r0
 80008aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008b2:	d102      	bne.n	80008ba <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 faf3 	bl	8000ea0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 fd57 	bl	8003372 <USB_ReadInterrupts>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008ce:	d112      	bne.n	80008f6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80008d8:	b29a      	uxth	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80008e2:	b292      	uxth	r2, r2
 80008e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f007 fa76 	bl	8007dda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80008ee:	2100      	movs	r1, #0
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 f8de 	bl	8000ab2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 fd39 	bl	8003372 <USB_ReadInterrupts>
 8000900:	4603      	mov	r3, r0
 8000902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800090a:	d10b      	bne.n	8000924 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000914:	b29a      	uxth	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800091e:	b292      	uxth	r2, r2
 8000920:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f002 fd22 	bl	8003372 <USB_ReadInterrupts>
 800092e:	4603      	mov	r3, r0
 8000930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000938:	d10b      	bne.n	8000952 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000942:	b29a      	uxth	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800094c:	b292      	uxth	r2, r2
 800094e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f002 fd0b 	bl	8003372 <USB_ReadInterrupts>
 800095c:	4603      	mov	r3, r0
 800095e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000966:	d126      	bne.n	80009b6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000970:	b29a      	uxth	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f022 0204 	bic.w	r2, r2, #4
 800097a:	b292      	uxth	r2, r2
 800097c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000988:	b29a      	uxth	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f022 0208 	bic.w	r2, r2, #8
 8000992:	b292      	uxth	r2, r2
 8000994:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f007 fa57 	bl	8007e4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009b0:	b292      	uxth	r2, r2
 80009b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fcd9 	bl	8003372 <USB_ReadInterrupts>
 80009c0:	4603      	mov	r3, r0
 80009c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009ca:	d13d      	bne.n	8000a48 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f042 0208 	orr.w	r2, r2, #8
 80009de:	b292      	uxth	r2, r2
 80009e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009f6:	b292      	uxth	r2, r2
 80009f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f042 0204 	orr.w	r2, r2, #4
 8000a0e:	b292      	uxth	r2, r2
 8000a10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 fcaa 	bl	8003372 <USB_ReadInterrupts>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a28:	d10b      	bne.n	8000a42 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a3c:	b292      	uxth	r2, r2
 8000a3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f007 f9e8 	bl	8007e18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 fc90 	bl	8003372 <USB_ReadInterrupts>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a5c:	d10e      	bne.n	8000a7c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a70:	b292      	uxth	r2, r2
 8000a72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f007 f9a1 	bl	8007dbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 fc76 	bl	8003372 <USB_ReadInterrupts>
 8000a86:	4603      	mov	r3, r0
 8000a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a90:	d10b      	bne.n	8000aaa <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000aa4:	b292      	uxth	r2, r2
 8000aa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	460b      	mov	r3, r1
 8000abc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d101      	bne.n	8000acc <HAL_PCD_SetAddress+0x1a>
 8000ac8:	2302      	movs	r3, #2
 8000aca:	e013      	b.n	8000af4 <HAL_PCD_SetAddress+0x42>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	78fa      	ldrb	r2, [r7, #3]
 8000ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	78fa      	ldrb	r2, [r7, #3]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f002 fc1d 	bl	8003324 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	4608      	mov	r0, r1
 8000b06:	4611      	mov	r1, r2
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	70fb      	strb	r3, [r7, #3]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	803b      	strh	r3, [r7, #0]
 8000b12:	4613      	mov	r3, r2
 8000b14:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	da0b      	bge.n	8000b3a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b22:	78fb      	ldrb	r3, [r7, #3]
 8000b24:	f003 0307 	and.w	r3, r3, #7
 8000b28:	015b      	lsls	r3, r3, #5
 8000b2a:	3328      	adds	r3, #40	; 0x28
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2201      	movs	r2, #1
 8000b36:	705a      	strb	r2, [r3, #1]
 8000b38:	e00b      	b.n	8000b52 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	f003 0307 	and.w	r3, r3, #7
 8000b40:	015b      	lsls	r3, r3, #5
 8000b42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000b5e:	883a      	ldrh	r2, [r7, #0]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	78ba      	ldrb	r2, [r7, #2]
 8000b68:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d004      	beq.n	8000b7c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000b7c:	78bb      	ldrb	r3, [r7, #2]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d102      	bne.n	8000b88 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2200      	movs	r2, #0
 8000b86:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d101      	bne.n	8000b96 <HAL_PCD_EP_Open+0x9a>
 8000b92:	2302      	movs	r3, #2
 8000b94:	e00e      	b.n	8000bb4 <HAL_PCD_EP_Open+0xb8>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	68f9      	ldr	r1, [r7, #12]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fbab 	bl	8002300 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8000bb2:	7afb      	ldrb	r3, [r7, #11]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	da0b      	bge.n	8000be8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	015b      	lsls	r3, r3, #5
 8000bd8:	3328      	adds	r3, #40	; 0x28
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2201      	movs	r2, #1
 8000be4:	705a      	strb	r2, [r3, #1]
 8000be6:	e00b      	b.n	8000c00 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000be8:	78fb      	ldrb	r3, [r7, #3]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	015b      	lsls	r3, r3, #5
 8000bf0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d101      	bne.n	8000c1a <HAL_PCD_EP_Close+0x5e>
 8000c16:	2302      	movs	r3, #2
 8000c18:	e00e      	b.n	8000c38 <HAL_PCD_EP_Close+0x7c>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68f9      	ldr	r1, [r7, #12]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fe57 	bl	80028dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c50:	7afb      	ldrb	r3, [r7, #11]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	015b      	lsls	r3, r3, #5
 8000c58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	2200      	movs	r2, #0
 8000c78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c7a:	7afb      	ldrb	r3, [r7, #11]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000c86:	7afb      	ldrb	r3, [r7, #11]
 8000c88:	f003 0307 	and.w	r3, r3, #7
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d106      	bne.n	8000c9e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6979      	ldr	r1, [r7, #20]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 ffb6 	bl	8002c08 <USB_EPStartXfer>
 8000c9c:	e005      	b.n	8000caa <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6979      	ldr	r1, [r7, #20]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 ffaf 	bl	8002c08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	330a      	adds	r3, #10
 8000cca:	015b      	lsls	r3, r3, #5
 8000ccc:	4413      	add	r3, r2
 8000cce:	3304      	adds	r3, #4
 8000cd0:	681b      	ldr	r3, [r3, #0]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cec:	7afb      	ldrb	r3, [r7, #11]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	015b      	lsls	r3, r3, #5
 8000cf4:	3328      	adds	r3, #40	; 0x28
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	2201      	movs	r2, #1
 8000d12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d14:	7afb      	ldrb	r3, [r7, #11]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d106      	bne.n	8000d38 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6979      	ldr	r1, [r7, #20]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 ff69 	bl	8002c08 <USB_EPStartXfer>
 8000d36:	e005      	b.n	8000d44 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6979      	ldr	r1, [r7, #20]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 ff62 	bl	8002c08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	460b      	mov	r3, r1
 8000d58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	f003 0207 	and.w	r2, r3, #7
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d901      	bls.n	8000d6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e046      	b.n	8000dfa <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	da0b      	bge.n	8000d8c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	015b      	lsls	r3, r3, #5
 8000d7c:	3328      	adds	r3, #40	; 0x28
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2201      	movs	r2, #1
 8000d88:	705a      	strb	r2, [r3, #1]
 8000d8a:	e009      	b.n	8000da0 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	015b      	lsls	r3, r3, #5
 8000d90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2201      	movs	r2, #1
 8000da4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d101      	bne.n	8000dc0 <HAL_PCD_EP_SetStall+0x72>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e01c      	b.n	8000dfa <HAL_PCD_EP_SetStall+0xac>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	68f9      	ldr	r1, [r7, #12]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 f9d2 	bl	8003178 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d108      	bne.n	8000df0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000de8:	4619      	mov	r1, r3
 8000dea:	4610      	mov	r0, r2
 8000dec:	f002 fad0 	bl	8003390 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b084      	sub	sp, #16
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	f003 020f 	and.w	r2, r3, #15
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d901      	bls.n	8000e20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e03a      	b.n	8000e96 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da0b      	bge.n	8000e40 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	015b      	lsls	r3, r3, #5
 8000e30:	3328      	adds	r3, #40	; 0x28
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	705a      	strb	r2, [r3, #1]
 8000e3e:	e00b      	b.n	8000e58 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	015b      	lsls	r3, r3, #5
 8000e48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2200      	movs	r2, #0
 8000e56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d101      	bne.n	8000e78 <HAL_PCD_EP_ClrStall+0x76>
 8000e74:	2302      	movs	r3, #2
 8000e76:	e00e      	b.n	8000e96 <HAL_PCD_EP_ClrStall+0x94>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f002 f9b8 	bl	80031fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000ea8:	e282      	b.n	80013b0 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eb2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000eb4:	8afb      	ldrh	r3, [r7, #22]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	f003 030f 	and.w	r3, r3, #15
 8000ebc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8000ebe:	7d7b      	ldrb	r3, [r7, #21]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f040 8142 	bne.w	800114a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ec6:	8afb      	ldrh	r3, [r7, #22]
 8000ec8:	f003 0310 	and.w	r3, r3, #16
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d151      	bne.n	8000f74 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ee0:	b29c      	uxth	r4, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8000eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3328      	adds	r3, #40	; 0x28
 8000ef6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6812      	ldr	r2, [r2, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	695a      	ldr	r2, [r3, #20]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	441a      	add	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f32:	2100      	movs	r1, #0
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f006 ff2b 	bl	8007d90 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 8234 	beq.w	80013b0 <PCD_EP_ISR_Handler+0x510>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f040 822f 	bne.w	80013b0 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	b292      	uxth	r2, r2
 8000f66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000f72:	e21d      	b.n	80013b0 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f7a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000f84:	8a7b      	ldrh	r3, [r7, #18]
 8000f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d033      	beq.n	8000ff6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3306      	adds	r3, #6
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	f002 fa2e 	bl	800342e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000fde:	4013      	ands	r3, r2
 8000fe0:	b29c      	uxth	r4, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8000fea:	b292      	uxth	r2, r2
 8000fec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f006 fea4 	bl	8007d3c <HAL_PCD_SetupStageCallback>
 8000ff4:	e1dc      	b.n	80013b0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000ff6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f280 81d8 	bge.w	80013b0 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	b29a      	uxth	r2, r3
 8001008:	f640 738f 	movw	r3, #3983	; 0xf8f
 800100c:	4013      	ands	r3, r2
 800100e:	b29c      	uxth	r4, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001018:	b292      	uxth	r2, r2
 800101a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001024:	b29b      	uxth	r3, r3
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4413      	add	r3, r2
 8001030:	3306      	adds	r3, #6
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	4413      	add	r3, r2
 800103a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d019      	beq.n	8001084 <PCD_EP_ISR_Handler+0x1e4>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d015      	beq.n	8001084 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6959      	ldr	r1, [r3, #20]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001068:	b29b      	uxth	r3, r3
 800106a:	f002 f9e0 	bl	800342e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	695a      	ldr	r2, [r3, #20]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	441a      	add	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800107c:	2100      	movs	r1, #0
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f006 fe6e 	bl	8007d60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	461c      	mov	r4, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001092:	b29b      	uxth	r3, r3
 8001094:	441c      	add	r4, r3
 8001096:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800109a:	461c      	mov	r4, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10e      	bne.n	80010c2 <PCD_EP_ISR_Handler+0x222>
 80010a4:	8823      	ldrh	r3, [r4, #0]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	8023      	strh	r3, [r4, #0]
 80010b0:	8823      	ldrh	r3, [r4, #0]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010bc:	b29b      	uxth	r3, r3
 80010be:	8023      	strh	r3, [r4, #0]
 80010c0:	e02d      	b.n	800111e <PCD_EP_ISR_Handler+0x27e>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	2b3e      	cmp	r3, #62	; 0x3e
 80010c8:	d812      	bhi.n	80010f0 <PCD_EP_ISR_Handler+0x250>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	085b      	lsrs	r3, r3, #1
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <PCD_EP_ISR_Handler+0x244>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	3301      	adds	r3, #1
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	029b      	lsls	r3, r3, #10
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	8023      	strh	r3, [r4, #0]
 80010ee:	e016      	b.n	800111e <PCD_EP_ISR_Handler+0x27e>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	095b      	lsrs	r3, r3, #5
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	f003 031f 	and.w	r3, r3, #31
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <PCD_EP_ISR_Handler+0x26a>
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	3b01      	subs	r3, #1
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	b29b      	uxth	r3, r3
 800110e:	029b      	lsls	r3, r3, #10
 8001110:	b29b      	uxth	r3, r3
 8001112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800111a:	b29b      	uxth	r3, r3
 800111c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800112a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800112e:	b29c      	uxth	r4, r3
 8001130:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001134:	b29c      	uxth	r4, r3
 8001136:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800113a:	b29c      	uxth	r4, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4ba2      	ldr	r3, [pc, #648]	; (80013cc <PCD_EP_ISR_Handler+0x52c>)
 8001142:	4323      	orrs	r3, r4
 8001144:	b29b      	uxth	r3, r3
 8001146:	8013      	strh	r3, [r2, #0]
 8001148:	e132      	b.n	80013b0 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	7d7b      	ldrb	r3, [r7, #21]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800115a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f280 80d1 	bge.w	8001306 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	7d7b      	ldrb	r3, [r7, #21]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	b29a      	uxth	r2, r3
 8001174:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001178:	4013      	ands	r3, r2
 800117a:	b29c      	uxth	r4, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	7d7b      	ldrb	r3, [r7, #21]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800118c:	b292      	uxth	r2, r2
 800118e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001190:	7d7b      	ldrb	r3, [r7, #21]
 8001192:	015b      	lsls	r3, r3, #5
 8001194:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	7b1b      	ldrb	r3, [r3, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d121      	bne.n	80011ea <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4413      	add	r3, r2
 80011ba:	3306      	adds	r3, #6
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011ce:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80011d0:	8bfb      	ldrh	r3, [r7, #30]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d072      	beq.n	80012bc <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6959      	ldr	r1, [r3, #20]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	88da      	ldrh	r2, [r3, #6]
 80011e2:	8bfb      	ldrh	r3, [r7, #30]
 80011e4:	f002 f923 	bl	800342e <USB_ReadPMA>
 80011e8:	e068      	b.n	80012bc <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d021      	beq.n	8001248 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800120c:	b29b      	uxth	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4413      	add	r3, r2
 8001218:	3302      	adds	r3, #2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	4413      	add	r3, r2
 8001222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800122c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800122e:	8bfb      	ldrh	r3, [r7, #30]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d02a      	beq.n	800128a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6959      	ldr	r1, [r3, #20]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	891a      	ldrh	r2, [r3, #8]
 8001240:	8bfb      	ldrh	r3, [r7, #30]
 8001242:	f002 f8f4 	bl	800342e <USB_ReadPMA>
 8001246:	e020      	b.n	800128a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001250:	b29b      	uxth	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4413      	add	r3, r2
 800125c:	3306      	adds	r3, #6
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	4413      	add	r3, r2
 8001266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001270:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001272:	8bfb      	ldrh	r3, [r7, #30]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d008      	beq.n	800128a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6959      	ldr	r1, [r3, #20]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	895a      	ldrh	r2, [r3, #10]
 8001284:	8bfb      	ldrh	r3, [r7, #30]
 8001286:	f002 f8d2 	bl	800342e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012a4:	b29c      	uxth	r4, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	441a      	add	r2, r3
 80012b4:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <PCD_EP_ISR_Handler+0x530>)
 80012b6:	4323      	orrs	r3, r4
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	69da      	ldr	r2, [r3, #28]
 80012c0:	8bfb      	ldrh	r3, [r7, #30]
 80012c2:	441a      	add	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	695a      	ldr	r2, [r3, #20]
 80012cc:	8bfb      	ldrh	r3, [r7, #30]
 80012ce:	441a      	add	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d004      	beq.n	80012e6 <PCD_EP_ISR_Handler+0x446>
 80012dc:	8bfa      	ldrh	r2, [r7, #30]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d206      	bcs.n	80012f4 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f006 fd37 	bl	8007d60 <HAL_PCD_DataOutStageCallback>
 80012f2:	e008      	b.n	8001306 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	7819      	ldrb	r1, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	695a      	ldr	r2, [r3, #20]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fc9d 	bl	8000c40 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001306:	8a7b      	ldrh	r3, [r7, #18]
 8001308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130c:	2b00      	cmp	r3, #0
 800130e:	d04f      	beq.n	80013b0 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001310:	7d7b      	ldrb	r3, [r7, #21]
 8001312:	015b      	lsls	r3, r3, #5
 8001314:	3328      	adds	r3, #40	; 0x28
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	7d7b      	ldrb	r3, [r7, #21]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001334:	b29c      	uxth	r4, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	7d7b      	ldrb	r3, [r7, #21]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	441a      	add	r2, r3
 8001342:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800134a:	b29b      	uxth	r3, r3
 800134c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001356:	b29b      	uxth	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4413      	add	r3, r2
 8001362:	3302      	adds	r3, #2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	4413      	add	r3, r2
 800136c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	441a      	add	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d106      	bne.n	800139e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f006 fcfa 	bl	8007d90 <HAL_PCD_DataInStageCallback>
 800139c:	e008      	b.n	80013b0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	7819      	ldrb	r1, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fc96 	bl	8000cdc <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f6ff ad74 	blt.w	8000eaa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3724      	adds	r7, #36	; 0x24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	ffff8080 	.word	0xffff8080
 80013d0:	ffff80c0 	.word	0xffff80c0

080013d4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	817b      	strh	r3, [r7, #10]
 80013e2:	4613      	mov	r3, r2
 80013e4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80013e6:	897b      	ldrh	r3, [r7, #10]
 80013e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d008      	beq.n	8001404 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013f2:	897b      	ldrh	r3, [r7, #10]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	015b      	lsls	r3, r3, #5
 80013fa:	3328      	adds	r3, #40	; 0x28
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4413      	add	r3, r2
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	e006      	b.n	8001412 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001404:	897b      	ldrh	r3, [r7, #10]
 8001406:	015b      	lsls	r3, r3, #5
 8001408:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001412:	893b      	ldrh	r3, [r7, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d107      	bne.n	8001428 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2200      	movs	r2, #0
 800141c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	b29a      	uxth	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	80da      	strh	r2, [r3, #6]
 8001426:	e00b      	b.n	8001440 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2201      	movs	r2, #1
 800142c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	b29a      	uxth	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0c1b      	lsrs	r3, r3, #16
 800143a:	b29a      	uxth	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	371c      	adds	r7, #28
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e26c      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8087 	beq.w	800157a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800146c:	4b92      	ldr	r3, [pc, #584]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b04      	cmp	r3, #4
 8001476:	d00c      	beq.n	8001492 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001478:	4b8f      	ldr	r3, [pc, #572]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b08      	cmp	r3, #8
 8001482:	d112      	bne.n	80014aa <HAL_RCC_OscConfig+0x5e>
 8001484:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001490:	d10b      	bne.n	80014aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001492:	4b89      	ldr	r3, [pc, #548]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d06c      	beq.n	8001578 <HAL_RCC_OscConfig+0x12c>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d168      	bne.n	8001578 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e246      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x76>
 80014b4:	4b80      	ldr	r3, [pc, #512]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a7f      	ldr	r2, [pc, #508]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e02e      	b.n	8001520 <HAL_RCC_OscConfig+0xd4>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x98>
 80014ca:	4b7b      	ldr	r3, [pc, #492]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a7a      	ldr	r2, [pc, #488]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b78      	ldr	r3, [pc, #480]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a77      	ldr	r2, [pc, #476]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e01d      	b.n	8001520 <HAL_RCC_OscConfig+0xd4>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0xbc>
 80014ee:	4b72      	ldr	r3, [pc, #456]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a71      	ldr	r2, [pc, #452]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b6f      	ldr	r3, [pc, #444]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a6e      	ldr	r2, [pc, #440]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0xd4>
 8001508:	4b6b      	ldr	r3, [pc, #428]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a6a      	ldr	r2, [pc, #424]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800150e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a67      	ldr	r2, [pc, #412]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7fe fe3a 	bl	80001a0 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001530:	f7fe fe36 	bl	80001a0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1fa      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0xe4>
 800154e:	e014      	b.n	800157a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7fe fe26 	bl	80001a0 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001558:	f7fe fe22 	bl	80001a0 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1e6      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x10c>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d063      	beq.n	800164e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001586:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001592:	4b49      	ldr	r3, [pc, #292]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b08      	cmp	r3, #8
 800159c:	d11c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x18c>
 800159e:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d116      	bne.n	80015d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x176>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e1ba      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4939      	ldr	r1, [pc, #228]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	e03a      	b.n	800164e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e0:	4b36      	ldr	r3, [pc, #216]	; (80016bc <HAL_RCC_OscConfig+0x270>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7fe fddb 	bl	80001a0 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ee:	f7fe fdd7 	bl	80001a0 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e19b      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4927      	ldr	r1, [pc, #156]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <HAL_RCC_OscConfig+0x270>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7fe fdba 	bl	80001a0 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001630:	f7fe fdb6 	bl	80001a0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e17a      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d03a      	beq.n	80016d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d019      	beq.n	8001696 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_RCC_OscConfig+0x274>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001668:	f7fe fd9a 	bl	80001a0 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001670:	f7fe fd96 	bl	80001a0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e15a      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f000 faf6 	bl	8001c80 <RCC_Delay>
 8001694:	e01c      	b.n	80016d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_RCC_OscConfig+0x274>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169c:	f7fe fd80 	bl	80001a0 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a2:	e00f      	b.n	80016c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a4:	f7fe fd7c 	bl	80001a0 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d908      	bls.n	80016c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e140      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	42420000 	.word	0x42420000
 80016c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c4:	4b9e      	ldr	r3, [pc, #632]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1e9      	bne.n	80016a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80a6 	beq.w	800182a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e2:	4b97      	ldr	r3, [pc, #604]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10d      	bne.n	800170a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b94      	ldr	r3, [pc, #592]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a93      	ldr	r2, [pc, #588]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b91      	ldr	r3, [pc, #580]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001706:	2301      	movs	r3, #1
 8001708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170a:	4b8e      	ldr	r3, [pc, #568]	; (8001944 <HAL_RCC_OscConfig+0x4f8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d118      	bne.n	8001748 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001716:	4b8b      	ldr	r3, [pc, #556]	; (8001944 <HAL_RCC_OscConfig+0x4f8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a8a      	ldr	r2, [pc, #552]	; (8001944 <HAL_RCC_OscConfig+0x4f8>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001722:	f7fe fd3d 	bl	80001a0 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7fe fd39 	bl	80001a0 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b64      	cmp	r3, #100	; 0x64
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e0fd      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	4b81      	ldr	r3, [pc, #516]	; (8001944 <HAL_RCC_OscConfig+0x4f8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x312>
 8001750:	4b7b      	ldr	r3, [pc, #492]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4a7a      	ldr	r2, [pc, #488]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6213      	str	r3, [r2, #32]
 800175c:	e02d      	b.n	80017ba <HAL_RCC_OscConfig+0x36e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x334>
 8001766:	4b76      	ldr	r3, [pc, #472]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4a75      	ldr	r2, [pc, #468]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6213      	str	r3, [r2, #32]
 8001772:	4b73      	ldr	r3, [pc, #460]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4a72      	ldr	r2, [pc, #456]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 8001778:	f023 0304 	bic.w	r3, r3, #4
 800177c:	6213      	str	r3, [r2, #32]
 800177e:	e01c      	b.n	80017ba <HAL_RCC_OscConfig+0x36e>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b05      	cmp	r3, #5
 8001786:	d10c      	bne.n	80017a2 <HAL_RCC_OscConfig+0x356>
 8001788:	4b6d      	ldr	r3, [pc, #436]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4a6c      	ldr	r2, [pc, #432]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6213      	str	r3, [r2, #32]
 8001794:	4b6a      	ldr	r3, [pc, #424]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4a69      	ldr	r2, [pc, #420]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6213      	str	r3, [r2, #32]
 80017a0:	e00b      	b.n	80017ba <HAL_RCC_OscConfig+0x36e>
 80017a2:	4b67      	ldr	r3, [pc, #412]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4a66      	ldr	r2, [pc, #408]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	6213      	str	r3, [r2, #32]
 80017ae:	4b64      	ldr	r3, [pc, #400]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4a63      	ldr	r2, [pc, #396]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	f023 0304 	bic.w	r3, r3, #4
 80017b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d015      	beq.n	80017ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7fe fced 	bl	80001a0 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7fe fce9 	bl	80001a0 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0ab      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	4b57      	ldr	r3, [pc, #348]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0ee      	beq.n	80017ca <HAL_RCC_OscConfig+0x37e>
 80017ec:	e014      	b.n	8001818 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ee:	f7fe fcd7 	bl	80001a0 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f4:	e00a      	b.n	800180c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f6:	f7fe fcd3 	bl	80001a0 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	f241 3288 	movw	r2, #5000	; 0x1388
 8001804:	4293      	cmp	r3, r2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e095      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	4b4c      	ldr	r3, [pc, #304]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1ee      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d105      	bne.n	800182a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800181e:	4b48      	ldr	r3, [pc, #288]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a47      	ldr	r2, [pc, #284]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001828:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8081 	beq.w	8001936 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001834:	4b42      	ldr	r3, [pc, #264]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b08      	cmp	r3, #8
 800183e:	d061      	beq.n	8001904 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d146      	bne.n	80018d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001848:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <HAL_RCC_OscConfig+0x4fc>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7fe fca7 	bl	80001a0 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001856:	f7fe fca3 	bl	80001a0 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e067      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001868:	4b35      	ldr	r3, [pc, #212]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187c:	d108      	bne.n	8001890 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	492d      	ldr	r1, [pc, #180]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a19      	ldr	r1, [r3, #32]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	430b      	orrs	r3, r1
 80018a2:	4927      	ldr	r1, [pc, #156]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a8:	4b27      	ldr	r3, [pc, #156]	; (8001948 <HAL_RCC_OscConfig+0x4fc>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7fe fc77 	bl	80001a0 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b6:	f7fe fc73 	bl	80001a0 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e037      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x46a>
 80018d4:	e02f      	b.n	8001936 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_RCC_OscConfig+0x4fc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7fe fc60 	bl	80001a0 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e4:	f7fe fc5c 	bl	80001a0 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e020      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x498>
 8001902:	e018      	b.n	8001936 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e013      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	429a      	cmp	r2, r3
 8001922:	d106      	bne.n	8001932 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d001      	beq.n	8001936 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000
 8001944:	40007000 	.word	0x40007000
 8001948:	42420060 	.word	0x42420060

0800194c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0d0      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b6a      	ldr	r3, [pc, #424]	; (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d910      	bls.n	8001990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 0207 	bic.w	r2, r3, #7
 8001976:	4965      	ldr	r1, [pc, #404]	; (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0b8      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a8:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a58      	ldr	r2, [pc, #352]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c0:	4b53      	ldr	r3, [pc, #332]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	494d      	ldr	r1, [pc, #308]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d040      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d115      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e07f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0a:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e073      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1a:	4b3d      	ldr	r3, [pc, #244]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e06b      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2a:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f023 0203 	bic.w	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4936      	ldr	r1, [pc, #216]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a3c:	f7fe fbb0 	bl	80001a0 <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a44:	f7fe fbac 	bl	80001a0 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e053      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 020c 	and.w	r2, r3, #12
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1eb      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d210      	bcs.n	8001a9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 0207 	bic.w	r2, r3, #7
 8001a82:	4922      	ldr	r1, [pc, #136]	; (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e032      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4916      	ldr	r1, [pc, #88]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d009      	beq.n	8001ada <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	490e      	ldr	r1, [pc, #56]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ada:	f000 f821 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001ade:	4601      	mov	r1, r0
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_RCC_ClockConfig+0x1c8>)
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	fa21 f303 	lsr.w	r3, r1, r3
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <HAL_RCC_ClockConfig+0x1cc>)
 8001af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_RCC_ClockConfig+0x1d0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f005 ff5e 	bl	80079bc <HAL_InitTick>

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40022000 	.word	0x40022000
 8001b10:	40021000 	.word	0x40021000
 8001b14:	08008618 	.word	0x08008618
 8001b18:	2000011c 	.word	0x2000011c
 8001b1c:	20000000 	.word	0x20000000

08001b20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b20:	b490      	push	{r4, r7}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b26:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b28:	1d3c      	adds	r4, r7, #4
 8001b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d002      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x40>
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d003      	beq.n	8001b66 <HAL_RCC_GetSysClockFreq+0x46>
 8001b5e:	e02d      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b62:	623b      	str	r3, [r7, #32]
      break;
 8001b64:	e02d      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	0c9b      	lsrs	r3, r3, #18
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b72:	4413      	add	r3, r2
 8001b74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d013      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0c5b      	lsrs	r3, r3, #17
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b92:	4413      	add	r3, r2
 8001b94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b9e:	fb02 f203 	mul.w	r2, r2, r3
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8001baa:	e004      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	623b      	str	r3, [r7, #32]
      break;
 8001bba:	e002      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bbe:	623b      	str	r3, [r7, #32]
      break;
 8001bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3728      	adds	r7, #40	; 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc90      	pop	{r4, r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	0800851c 	.word	0x0800851c
 8001bd4:	0800852c 	.word	0x0800852c
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	007a1200 	.word	0x007a1200
 8001be0:	003d0900 	.word	0x003d0900

08001be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be8:	4b02      	ldr	r3, [pc, #8]	; (8001bf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	2000011c 	.word	0x2000011c

08001bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bfc:	f7ff fff2 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c00:	4601      	mov	r1, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	0adb      	lsrs	r3, r3, #11
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	08008628 	.word	0x08008628

08001c20 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_RCC_GetClockConfig+0x58>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_RCC_GetClockConfig+0x58>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_GetClockConfig+0x58>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_RCC_GetClockConfig+0x58>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	08db      	lsrs	r3, r3, #3
 8001c5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_GetClockConfig+0x5c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0207 	and.w	r2, r3, #7
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40022000 	.word	0x40022000

08001c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <RCC_Delay+0x34>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <RCC_Delay+0x38>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0a5b      	lsrs	r3, r3, #9
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c9c:	bf00      	nop
  }
  while (Delay --);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1e5a      	subs	r2, r3, #1
 8001ca2:	60fa      	str	r2, [r7, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f9      	bne.n	8001c9c <RCC_Delay+0x1c>
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	2000011c 	.word	0x2000011c
 8001cb8:	10624dd3 	.word	0x10624dd3

08001cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d07d      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cdc:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10d      	bne.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4a4b      	ldr	r2, [pc, #300]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	61d3      	str	r3, [r2, #28]
 8001cf4:	4b49      	ldr	r3, [pc, #292]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d118      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d10:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a42      	ldr	r2, [pc, #264]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1c:	f7fe fa40 	bl	80001a0 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	e008      	b.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d24:	f7fe fa3c 	bl	80001a0 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e06d      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d42:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d02e      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d027      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d60:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d70:	4b2c      	ldr	r3, [pc, #176]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d76:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d014      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7fe fa0b 	bl	80001a0 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7fe fa07 	bl	80001a0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e036      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ee      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4917      	ldr	r1, [pc, #92]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	490b      	ldr	r1, [pc, #44]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4904      	ldr	r1, [pc, #16]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40007000 	.word	0x40007000
 8001e24:	42420440 	.word	0x42420440

08001e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e01d      	b.n	8001e76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f815 	bl	8001e7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3304      	adds	r3, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f000 f962 	bl	8002130 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d007      	beq.n	8001eca <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0201 	orr.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d122      	bne.n	8001f32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d11b      	bne.n	8001f32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f06f 0202 	mvn.w	r2, #2
 8001f02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f8ed 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001f1e:	e005      	b.n	8001f2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8e0 	bl	80020e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8ef 	bl	800210a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d122      	bne.n	8001f86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d11b      	bne.n	8001f86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f06f 0204 	mvn.w	r2, #4
 8001f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f8c3 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001f72:	e005      	b.n	8001f80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8b6 	bl	80020e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8c5 	bl	800210a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d122      	bne.n	8001fda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d11b      	bne.n	8001fda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f06f 0208 	mvn.w	r2, #8
 8001faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f899 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001fc6:	e005      	b.n	8001fd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f88c 	bl	80020e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f89b 	bl	800210a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d122      	bne.n	800202e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d11b      	bne.n	800202e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f06f 0210 	mvn.w	r2, #16
 8001ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2208      	movs	r2, #8
 8002004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f86f 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 800201a:	e005      	b.n	8002028 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f862 	bl	80020e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f871 	bl	800210a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b01      	cmp	r3, #1
 800203a:	d10e      	bne.n	800205a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b01      	cmp	r3, #1
 8002048:	d107      	bne.n	800205a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f06f 0201 	mvn.w	r2, #1
 8002052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f005 fc61 	bl	800791c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002064:	2b80      	cmp	r3, #128	; 0x80
 8002066:	d10e      	bne.n	8002086 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002072:	2b80      	cmp	r3, #128	; 0x80
 8002074:	d107      	bne.n	8002086 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800207e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f8c0 	bl	8002206 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002090:	2b40      	cmp	r3, #64	; 0x40
 8002092:	d10e      	bne.n	80020b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209e:	2b40      	cmp	r3, #64	; 0x40
 80020a0:	d107      	bne.n	80020b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f835 	bl	800211c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d10e      	bne.n	80020de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d107      	bne.n	80020de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f06f 0220 	mvn.w	r2, #32
 80020d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f88b 	bl	80021f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
	...

08002130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <TIM_Base_SetConfig+0xb8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00b      	beq.n	8002160 <TIM_Base_SetConfig+0x30>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214e:	d007      	beq.n	8002160 <TIM_Base_SetConfig+0x30>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a26      	ldr	r2, [pc, #152]	; (80021ec <TIM_Base_SetConfig+0xbc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d003      	beq.n	8002160 <TIM_Base_SetConfig+0x30>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <TIM_Base_SetConfig+0xc0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d108      	bne.n	8002172 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <TIM_Base_SetConfig+0xb8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00b      	beq.n	8002192 <TIM_Base_SetConfig+0x62>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d007      	beq.n	8002192 <TIM_Base_SetConfig+0x62>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <TIM_Base_SetConfig+0xbc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d003      	beq.n	8002192 <TIM_Base_SetConfig+0x62>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <TIM_Base_SetConfig+0xc0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d108      	bne.n	80021a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <TIM_Base_SetConfig+0xb8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d103      	bne.n	80021d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	615a      	str	r2, [r3, #20]
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	40012c00 	.word	0x40012c00
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40000800 	.word	0x40000800

080021f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002218:	b084      	sub	sp, #16
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	f107 0014 	add.w	r0, r7, #20
 8002226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	b004      	add	sp, #16
 8002236:	4770      	bx	lr

08002238 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002240:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002244:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800224c:	b29a      	uxth	r2, r3
 800224e:	89fb      	ldrh	r3, [r7, #14]
 8002250:	4313      	orrs	r3, r2
 8002252:	b29a      	uxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800226e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002272:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800227a:	b29b      	uxth	r3, r3
 800227c:	b21a      	sxth	r2, r3
 800227e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002282:	43db      	mvns	r3, r3
 8002284:	b21b      	sxth	r3, r3
 8002286:	4013      	ands	r3, r2
 8002288:	b21b      	sxth	r3, r3
 800228a:	b29a      	uxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80022b6:	b084      	sub	sp, #16
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	f107 0014 	add.w	r0, r7, #20
 80022c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ffa5 	bl	8002238 <USB_EnableGlobalInt>

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022fa:	b004      	add	sp, #16
 80022fc:	4770      	bx	lr
	...

08002300 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002300:	b490      	push	{r4, r7}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002324:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	78db      	ldrb	r3, [r3, #3]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d819      	bhi.n	8002362 <USB_ActivateEndpoint+0x62>
 800232e:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <USB_ActivateEndpoint+0x34>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002345 	.word	0x08002345
 8002338:	08002359 	.word	0x08002359
 800233c:	08002369 	.word	0x08002369
 8002340:	0800234f 	.word	0x0800234f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002344:	89bb      	ldrh	r3, [r7, #12]
 8002346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234a:	81bb      	strh	r3, [r7, #12]
      break;
 800234c:	e00d      	b.n	800236a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800234e:	89bb      	ldrh	r3, [r7, #12]
 8002350:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002354:	81bb      	strh	r3, [r7, #12]
      break;
 8002356:	e008      	b.n	800236a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002358:	89bb      	ldrh	r3, [r7, #12]
 800235a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800235e:	81bb      	strh	r3, [r7, #12]
      break;
 8002360:	e003      	b.n	800236a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
      break;
 8002366:	e000      	b.n	800236a <USB_ActivateEndpoint+0x6a>
      break;
 8002368:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	441a      	add	r2, r3
 8002374:	89bb      	ldrh	r3, [r7, #12]
 8002376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800237a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800237e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002386:	b29b      	uxth	r3, r3
 8002388:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800239c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b29c      	uxth	r4, r3
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	441a      	add	r2, r3
 80023b6:	4b8a      	ldr	r3, [pc, #552]	; (80025e0 <USB_ActivateEndpoint+0x2e0>)
 80023b8:	4323      	orrs	r3, r4
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	7b1b      	ldrb	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 8112 	bne.w	80025ec <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	785b      	ldrb	r3, [r3, #1]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d067      	beq.n	80024a0 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80023d0:	687c      	ldr	r4, [r7, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d8:	b29b      	uxth	r3, r3
 80023da:	441c      	add	r4, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4423      	add	r3, r4
 80023e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e8:	461c      	mov	r4, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	88db      	ldrh	r3, [r3, #6]
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29c      	uxth	r4, r3
 8002406:	4623      	mov	r3, r4
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d014      	beq.n	800243a <USB_ActivateEndpoint+0x13a>
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002426:	b29c      	uxth	r4, r3
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	441a      	add	r2, r3
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <USB_ActivateEndpoint+0x2e4>)
 8002434:	4323      	orrs	r3, r4
 8002436:	b29b      	uxth	r3, r3
 8002438:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	78db      	ldrb	r3, [r3, #3]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d018      	beq.n	8002474 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002458:	b29c      	uxth	r4, r3
 800245a:	f084 0320 	eor.w	r3, r4, #32
 800245e:	b29c      	uxth	r4, r3
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	441a      	add	r2, r3
 800246a:	4b5d      	ldr	r3, [pc, #372]	; (80025e0 <USB_ActivateEndpoint+0x2e0>)
 800246c:	4323      	orrs	r3, r4
 800246e:	b29b      	uxth	r3, r3
 8002470:	8013      	strh	r3, [r2, #0]
 8002472:	e22b      	b.n	80028cc <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800248a:	b29c      	uxth	r4, r3
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	441a      	add	r2, r3
 8002496:	4b52      	ldr	r3, [pc, #328]	; (80025e0 <USB_ActivateEndpoint+0x2e0>)
 8002498:	4323      	orrs	r3, r4
 800249a:	b29b      	uxth	r3, r3
 800249c:	8013      	strh	r3, [r2, #0]
 800249e:	e215      	b.n	80028cc <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80024a0:	687c      	ldr	r4, [r7, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	441c      	add	r4, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	4423      	add	r3, r4
 80024b4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80024b8:	461c      	mov	r4, r3
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	88db      	ldrh	r3, [r3, #6]
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80024c8:	687c      	ldr	r4, [r7, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	441c      	add	r4, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	4423      	add	r3, r4
 80024dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024e0:	461c      	mov	r4, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10e      	bne.n	8002508 <USB_ActivateEndpoint+0x208>
 80024ea:	8823      	ldrh	r3, [r4, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	8023      	strh	r3, [r4, #0]
 80024f6:	8823      	ldrh	r3, [r4, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002502:	b29b      	uxth	r3, r3
 8002504:	8023      	strh	r3, [r4, #0]
 8002506:	e02d      	b.n	8002564 <USB_ActivateEndpoint+0x264>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b3e      	cmp	r3, #62	; 0x3e
 800250e:	d812      	bhi.n	8002536 <USB_ActivateEndpoint+0x236>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <USB_ActivateEndpoint+0x22a>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	3301      	adds	r3, #1
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	b29b      	uxth	r3, r3
 800252e:	029b      	lsls	r3, r3, #10
 8002530:	b29b      	uxth	r3, r3
 8002532:	8023      	strh	r3, [r4, #0]
 8002534:	e016      	b.n	8002564 <USB_ActivateEndpoint+0x264>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <USB_ActivateEndpoint+0x250>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	3b01      	subs	r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	b29b      	uxth	r3, r3
 8002554:	029b      	lsls	r3, r3, #10
 8002556:	b29b      	uxth	r3, r3
 8002558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800255c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002560:	b29b      	uxth	r3, r3
 8002562:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b29c      	uxth	r4, r3
 8002572:	4623      	mov	r3, r4
 8002574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d014      	beq.n	80025a6 <USB_ActivateEndpoint+0x2a6>
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800258e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002592:	b29c      	uxth	r4, r3
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	441a      	add	r2, r3
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <USB_ActivateEndpoint+0x2e8>)
 80025a0:	4323      	orrs	r3, r4
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025bc:	b29c      	uxth	r4, r3
 80025be:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80025c2:	b29c      	uxth	r4, r3
 80025c4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80025c8:	b29c      	uxth	r4, r3
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	441a      	add	r2, r3
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <USB_ActivateEndpoint+0x2e0>)
 80025d6:	4323      	orrs	r3, r4
 80025d8:	b29b      	uxth	r3, r3
 80025da:	8013      	strh	r3, [r2, #0]
 80025dc:	e176      	b.n	80028cc <USB_ActivateEndpoint+0x5cc>
 80025de:	bf00      	nop
 80025e0:	ffff8080 	.word	0xffff8080
 80025e4:	ffff80c0 	.word	0xffff80c0
 80025e8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	b29c      	uxth	r4, r3
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	441a      	add	r2, r3
 800260e:	4b96      	ldr	r3, [pc, #600]	; (8002868 <USB_ActivateEndpoint+0x568>)
 8002610:	4323      	orrs	r3, r4
 8002612:	b29b      	uxth	r3, r3
 8002614:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002616:	687c      	ldr	r4, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261e:	b29b      	uxth	r3, r3
 8002620:	441c      	add	r4, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	4423      	add	r3, r4
 800262a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800262e:	461c      	mov	r4, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	891b      	ldrh	r3, [r3, #8]
 8002634:	085b      	lsrs	r3, r3, #1
 8002636:	b29b      	uxth	r3, r3
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	b29b      	uxth	r3, r3
 800263c:	8023      	strh	r3, [r4, #0]
 800263e:	687c      	ldr	r4, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002646:	b29b      	uxth	r3, r3
 8002648:	441c      	add	r4, r3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	4423      	add	r3, r4
 8002652:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002656:	461c      	mov	r4, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	895b      	ldrh	r3, [r3, #10]
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	b29b      	uxth	r3, r3
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	b29b      	uxth	r3, r3
 8002664:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	785b      	ldrb	r3, [r3, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 8088 	bne.w	8002780 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29c      	uxth	r4, r3
 800267e:	4623      	mov	r3, r4
 8002680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d014      	beq.n	80026b2 <USB_ActivateEndpoint+0x3b2>
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800269a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269e:	b29c      	uxth	r4, r3
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	441a      	add	r2, r3
 80026aa:	4b70      	ldr	r3, [pc, #448]	; (800286c <USB_ActivateEndpoint+0x56c>)
 80026ac:	4323      	orrs	r3, r4
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29c      	uxth	r4, r3
 80026c0:	4623      	mov	r3, r4
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d014      	beq.n	80026f4 <USB_ActivateEndpoint+0x3f4>
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e0:	b29c      	uxth	r4, r3
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	441a      	add	r2, r3
 80026ec:	4b60      	ldr	r3, [pc, #384]	; (8002870 <USB_ActivateEndpoint+0x570>)
 80026ee:	4323      	orrs	r3, r4
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270a:	b29c      	uxth	r4, r3
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	441a      	add	r2, r3
 8002716:	4b56      	ldr	r3, [pc, #344]	; (8002870 <USB_ActivateEndpoint+0x570>)
 8002718:	4323      	orrs	r3, r4
 800271a:	b29b      	uxth	r3, r3
 800271c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002734:	b29c      	uxth	r4, r3
 8002736:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800273a:	b29c      	uxth	r4, r3
 800273c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002740:	b29c      	uxth	r4, r3
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	441a      	add	r2, r3
 800274c:	4b49      	ldr	r3, [pc, #292]	; (8002874 <USB_ActivateEndpoint+0x574>)
 800274e:	4323      	orrs	r3, r4
 8002750:	b29b      	uxth	r3, r3
 8002752:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	b29b      	uxth	r3, r3
 8002762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800276a:	b29c      	uxth	r4, r3
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	441a      	add	r2, r3
 8002776:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <USB_ActivateEndpoint+0x574>)
 8002778:	4323      	orrs	r3, r4
 800277a:	b29b      	uxth	r3, r3
 800277c:	8013      	strh	r3, [r2, #0]
 800277e:	e0a5      	b.n	80028cc <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b29c      	uxth	r4, r3
 800278e:	4623      	mov	r3, r4
 8002790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d014      	beq.n	80027c2 <USB_ActivateEndpoint+0x4c2>
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ae:	b29c      	uxth	r4, r3
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	441a      	add	r2, r3
 80027ba:	4b2c      	ldr	r3, [pc, #176]	; (800286c <USB_ActivateEndpoint+0x56c>)
 80027bc:	4323      	orrs	r3, r4
 80027be:	b29b      	uxth	r3, r3
 80027c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29c      	uxth	r4, r3
 80027d0:	4623      	mov	r3, r4
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d014      	beq.n	8002804 <USB_ActivateEndpoint+0x504>
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f0:	b29c      	uxth	r4, r3
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	441a      	add	r2, r3
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <USB_ActivateEndpoint+0x570>)
 80027fe:	4323      	orrs	r3, r4
 8002800:	b29b      	uxth	r3, r3
 8002802:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281a:	b29c      	uxth	r4, r3
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	441a      	add	r2, r3
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <USB_ActivateEndpoint+0x56c>)
 8002828:	4323      	orrs	r3, r4
 800282a:	b29b      	uxth	r3, r3
 800282c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	78db      	ldrb	r3, [r3, #3]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d020      	beq.n	8002878 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800284c:	b29c      	uxth	r4, r3
 800284e:	f084 0320 	eor.w	r3, r4, #32
 8002852:	b29c      	uxth	r4, r3
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	441a      	add	r2, r3
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <USB_ActivateEndpoint+0x574>)
 8002860:	4323      	orrs	r3, r4
 8002862:	b29b      	uxth	r3, r3
 8002864:	8013      	strh	r3, [r2, #0]
 8002866:	e01c      	b.n	80028a2 <USB_ActivateEndpoint+0x5a2>
 8002868:	ffff8180 	.word	0xffff8180
 800286c:	ffffc080 	.word	0xffffc080
 8002870:	ffff80c0 	.word	0xffff80c0
 8002874:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800288a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800288e:	b29c      	uxth	r4, r3
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	441a      	add	r2, r3
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <USB_ActivateEndpoint+0x5d8>)
 800289c:	4323      	orrs	r3, r4
 800289e:	b29b      	uxth	r3, r3
 80028a0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b8:	b29c      	uxth	r4, r3
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	441a      	add	r2, r3
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <USB_ActivateEndpoint+0x5d8>)
 80028c6:	4323      	orrs	r3, r4
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc90      	pop	{r4, r7}
 80028d6:	4770      	bx	lr
 80028d8:	ffff8080 	.word	0xffff8080

080028dc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80028dc:	b490      	push	{r4, r7}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	7b1b      	ldrb	r3, [r3, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d171      	bne.n	80029d2 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	785b      	ldrb	r3, [r3, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d036      	beq.n	8002964 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	b29c      	uxth	r4, r3
 8002904:	4623      	mov	r3, r4
 8002906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d014      	beq.n	8002938 <USB_DeactivateEndpoint+0x5c>
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002924:	b29c      	uxth	r4, r3
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	441a      	add	r2, r3
 8002930:	4b6b      	ldr	r3, [pc, #428]	; (8002ae0 <USB_DeactivateEndpoint+0x204>)
 8002932:	4323      	orrs	r3, r4
 8002934:	b29b      	uxth	r3, r3
 8002936:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800294a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800294e:	b29c      	uxth	r4, r3
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	441a      	add	r2, r3
 800295a:	4b62      	ldr	r3, [pc, #392]	; (8002ae4 <USB_DeactivateEndpoint+0x208>)
 800295c:	4323      	orrs	r3, r4
 800295e:	b29b      	uxth	r3, r3
 8002960:	8013      	strh	r3, [r2, #0]
 8002962:	e144      	b.n	8002bee <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	b29c      	uxth	r4, r3
 8002972:	4623      	mov	r3, r4
 8002974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d014      	beq.n	80029a6 <USB_DeactivateEndpoint+0xca>
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800298e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002992:	b29c      	uxth	r4, r3
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	441a      	add	r2, r3
 800299e:	4b52      	ldr	r3, [pc, #328]	; (8002ae8 <USB_DeactivateEndpoint+0x20c>)
 80029a0:	4323      	orrs	r3, r4
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029bc:	b29c      	uxth	r4, r3
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	441a      	add	r2, r3
 80029c8:	4b46      	ldr	r3, [pc, #280]	; (8002ae4 <USB_DeactivateEndpoint+0x208>)
 80029ca:	4323      	orrs	r3, r4
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	8013      	strh	r3, [r2, #0]
 80029d0:	e10d      	b.n	8002bee <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	785b      	ldrb	r3, [r3, #1]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 8088 	bne.w	8002aec <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29c      	uxth	r4, r3
 80029ea:	4623      	mov	r3, r4
 80029ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d014      	beq.n	8002a1e <USB_DeactivateEndpoint+0x142>
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	b29c      	uxth	r4, r3
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	441a      	add	r2, r3
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <USB_DeactivateEndpoint+0x20c>)
 8002a18:	4323      	orrs	r3, r4
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29c      	uxth	r4, r3
 8002a2c:	4623      	mov	r3, r4
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d014      	beq.n	8002a60 <USB_DeactivateEndpoint+0x184>
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4c:	b29c      	uxth	r4, r3
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	441a      	add	r2, r3
 8002a58:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <USB_DeactivateEndpoint+0x204>)
 8002a5a:	4323      	orrs	r3, r4
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a76:	b29c      	uxth	r4, r3
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <USB_DeactivateEndpoint+0x204>)
 8002a84:	4323      	orrs	r3, r4
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa0:	b29c      	uxth	r4, r3
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	441a      	add	r2, r3
 8002aac:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <USB_DeactivateEndpoint+0x208>)
 8002aae:	4323      	orrs	r3, r4
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aca:	b29c      	uxth	r4, r3
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	441a      	add	r2, r3
 8002ad6:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <USB_DeactivateEndpoint+0x208>)
 8002ad8:	4323      	orrs	r3, r4
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	8013      	strh	r3, [r2, #0]
 8002ade:	e086      	b.n	8002bee <USB_DeactivateEndpoint+0x312>
 8002ae0:	ffff80c0 	.word	0xffff80c0
 8002ae4:	ffff8080 	.word	0xffff8080
 8002ae8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b29c      	uxth	r4, r3
 8002afa:	4623      	mov	r3, r4
 8002afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d014      	beq.n	8002b2e <USB_DeactivateEndpoint+0x252>
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1a:	b29c      	uxth	r4, r3
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	441a      	add	r2, r3
 8002b26:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <USB_DeactivateEndpoint+0x320>)
 8002b28:	4323      	orrs	r3, r4
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29c      	uxth	r4, r3
 8002b3c:	4623      	mov	r3, r4
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d014      	beq.n	8002b70 <USB_DeactivateEndpoint+0x294>
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5c:	b29c      	uxth	r4, r3
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	441a      	add	r2, r3
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <USB_DeactivateEndpoint+0x324>)
 8002b6a:	4323      	orrs	r3, r4
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b86:	b29c      	uxth	r4, r3
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	441a      	add	r2, r3
 8002b92:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <USB_DeactivateEndpoint+0x320>)
 8002b94:	4323      	orrs	r3, r4
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb0:	b29c      	uxth	r4, r3
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	441a      	add	r2, r3
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <USB_DeactivateEndpoint+0x328>)
 8002bbe:	4323      	orrs	r3, r4
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bda:	b29c      	uxth	r4, r3
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <USB_DeactivateEndpoint+0x328>)
 8002be8:	4323      	orrs	r3, r4
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc90      	pop	{r4, r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	ffffc080 	.word	0xffffc080
 8002c00:	ffff80c0 	.word	0xffff80c0
 8002c04:	ffff8080 	.word	0xffff8080

08002c08 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b08d      	sub	sp, #52	; 0x34
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	785b      	ldrb	r3, [r3, #1]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	f040 8160 	bne.w	8002edc <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d909      	bls.n	8002c3c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	1ad2      	subs	r2, r2, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	619a      	str	r2, [r3, #24]
 8002c3a:	e005      	b.n	8002c48 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	7b1b      	ldrb	r3, [r3, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d119      	bne.n	8002c84 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	6959      	ldr	r1, [r3, #20]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	88da      	ldrh	r2, [r3, #6]
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fba2 	bl	80033a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002c62:	687c      	ldr	r4, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	441c      	add	r4, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	4423      	add	r3, r4
 8002c76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c7a:	461c      	mov	r4, r3
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	8023      	strh	r3, [r4, #0]
 8002c82:	e10f      	b.n	8002ea4 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d065      	beq.n	8002d66 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c9a:	687c      	ldr	r4, [r7, #4]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	785b      	ldrb	r3, [r3, #1]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d148      	bne.n	8002d36 <USB_EPStartXfer+0x12e>
 8002ca4:	687c      	ldr	r4, [r7, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	441c      	add	r4, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	4423      	add	r3, r4
 8002cb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cbc:	461c      	mov	r4, r3
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10e      	bne.n	8002ce2 <USB_EPStartXfer+0xda>
 8002cc4:	8823      	ldrh	r3, [r4, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	8023      	strh	r3, [r4, #0]
 8002cd0:	8823      	ldrh	r3, [r4, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	8023      	strh	r3, [r4, #0]
 8002ce0:	e03d      	b.n	8002d5e <USB_EPStartXfer+0x156>
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	2b3e      	cmp	r3, #62	; 0x3e
 8002ce6:	d810      	bhi.n	8002d0a <USB_EPStartXfer+0x102>
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <USB_EPStartXfer+0xf6>
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	029b      	lsls	r3, r3, #10
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	8023      	strh	r3, [r4, #0]
 8002d08:	e029      	b.n	8002d5e <USB_EPStartXfer+0x156>
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <USB_EPStartXfer+0x118>
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	029b      	lsls	r3, r3, #10
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	8023      	strh	r3, [r4, #0]
 8002d34:	e013      	b.n	8002d5e <USB_EPStartXfer+0x156>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	785b      	ldrb	r3, [r3, #1]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10f      	bne.n	8002d5e <USB_EPStartXfer+0x156>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	441c      	add	r4, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	4423      	add	r3, r4
 8002d50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	895b      	ldrh	r3, [r3, #10]
 8002d62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002d64:	e063      	b.n	8002e2e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	785b      	ldrb	r3, [r3, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d148      	bne.n	8002e00 <USB_EPStartXfer+0x1f8>
 8002d6e:	687c      	ldr	r4, [r7, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	441c      	add	r4, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	4423      	add	r3, r4
 8002d82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d86:	461c      	mov	r4, r3
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10e      	bne.n	8002dac <USB_EPStartXfer+0x1a4>
 8002d8e:	8823      	ldrh	r3, [r4, #0]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	8023      	strh	r3, [r4, #0]
 8002d9a:	8823      	ldrh	r3, [r4, #0]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	8023      	strh	r3, [r4, #0]
 8002daa:	e03d      	b.n	8002e28 <USB_EPStartXfer+0x220>
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	2b3e      	cmp	r3, #62	; 0x3e
 8002db0:	d810      	bhi.n	8002dd4 <USB_EPStartXfer+0x1cc>
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	623b      	str	r3, [r7, #32]
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <USB_EPStartXfer+0x1c0>
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	029b      	lsls	r3, r3, #10
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	8023      	strh	r3, [r4, #0]
 8002dd2:	e029      	b.n	8002e28 <USB_EPStartXfer+0x220>
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	623b      	str	r3, [r7, #32]
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <USB_EPStartXfer+0x1e2>
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	623b      	str	r3, [r7, #32]
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	029b      	lsls	r3, r3, #10
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	8023      	strh	r3, [r4, #0]
 8002dfe:	e013      	b.n	8002e28 <USB_EPStartXfer+0x220>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	785b      	ldrb	r3, [r3, #1]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d10f      	bne.n	8002e28 <USB_EPStartXfer+0x220>
 8002e08:	687c      	ldr	r4, [r7, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	441c      	add	r4, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	4423      	add	r3, r4
 8002e1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e20:	461c      	mov	r4, r3
 8002e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	891b      	ldrh	r3, [r3, #8]
 8002e2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6959      	ldr	r1, [r3, #20]
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fab4 	bl	80033a6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	785b      	ldrb	r3, [r3, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d115      	bne.n	8002e72 <USB_EPStartXfer+0x26a>
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5c:	b29c      	uxth	r4, r3
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	441a      	add	r2, r3
 8002e68:	4b9a      	ldr	r3, [pc, #616]	; (80030d4 <USB_EPStartXfer+0x4cc>)
 8002e6a:	4323      	orrs	r3, r4
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	8013      	strh	r3, [r2, #0]
 8002e70:	e018      	b.n	8002ea4 <USB_EPStartXfer+0x29c>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d114      	bne.n	8002ea4 <USB_EPStartXfer+0x29c>
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e90:	b29c      	uxth	r4, r3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	441a      	add	r2, r3
 8002e9c:	4b8e      	ldr	r3, [pc, #568]	; (80030d8 <USB_EPStartXfer+0x4d0>)
 8002e9e:	4323      	orrs	r3, r4
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eba:	b29c      	uxth	r4, r3
 8002ebc:	f084 0310 	eor.w	r3, r4, #16
 8002ec0:	b29c      	uxth	r4, r3
 8002ec2:	f084 0320 	eor.w	r3, r4, #32
 8002ec6:	b29c      	uxth	r4, r3
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	441a      	add	r2, r3
 8002ed2:	4b82      	ldr	r3, [pc, #520]	; (80030dc <USB_EPStartXfer+0x4d4>)
 8002ed4:	4323      	orrs	r3, r4
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	8013      	strh	r3, [r2, #0]
 8002eda:	e146      	b.n	800316a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	699a      	ldr	r2, [r3, #24]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d909      	bls.n	8002efc <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	1ad2      	subs	r2, r2, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	619a      	str	r2, [r3, #24]
 8002efa:	e005      	b.n	8002f08 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	7b1b      	ldrb	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d148      	bne.n	8002fa2 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002f10:	687c      	ldr	r4, [r7, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	441c      	add	r4, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	4423      	add	r3, r4
 8002f24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f28:	461c      	mov	r4, r3
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10e      	bne.n	8002f4e <USB_EPStartXfer+0x346>
 8002f30:	8823      	ldrh	r3, [r4, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	8023      	strh	r3, [r4, #0]
 8002f3c:	8823      	ldrh	r3, [r4, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	8023      	strh	r3, [r4, #0]
 8002f4c:	e0f2      	b.n	8003134 <USB_EPStartXfer+0x52c>
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	2b3e      	cmp	r3, #62	; 0x3e
 8002f52:	d810      	bhi.n	8002f76 <USB_EPStartXfer+0x36e>
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <USB_EPStartXfer+0x362>
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	3301      	adds	r3, #1
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	029b      	lsls	r3, r3, #10
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	8023      	strh	r3, [r4, #0]
 8002f74:	e0de      	b.n	8003134 <USB_EPStartXfer+0x52c>
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <USB_EPStartXfer+0x384>
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	029b      	lsls	r3, r3, #10
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	8023      	strh	r3, [r4, #0]
 8002fa0:	e0c8      	b.n	8003134 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d148      	bne.n	800303c <USB_EPStartXfer+0x434>
 8002faa:	687c      	ldr	r4, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	441c      	add	r4, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	4423      	add	r3, r4
 8002fbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fc2:	461c      	mov	r4, r3
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10e      	bne.n	8002fe8 <USB_EPStartXfer+0x3e0>
 8002fca:	8823      	ldrh	r3, [r4, #0]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	8023      	strh	r3, [r4, #0]
 8002fd6:	8823      	ldrh	r3, [r4, #0]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	8023      	strh	r3, [r4, #0]
 8002fe6:	e03d      	b.n	8003064 <USB_EPStartXfer+0x45c>
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	2b3e      	cmp	r3, #62	; 0x3e
 8002fec:	d810      	bhi.n	8003010 <USB_EPStartXfer+0x408>
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	61bb      	str	r3, [r7, #24]
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <USB_EPStartXfer+0x3fc>
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	3301      	adds	r3, #1
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	b29b      	uxth	r3, r3
 8003008:	029b      	lsls	r3, r3, #10
 800300a:	b29b      	uxth	r3, r3
 800300c:	8023      	strh	r3, [r4, #0]
 800300e:	e029      	b.n	8003064 <USB_EPStartXfer+0x45c>
 8003010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <USB_EPStartXfer+0x41e>
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	3b01      	subs	r3, #1
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	b29b      	uxth	r3, r3
 800302a:	029b      	lsls	r3, r3, #10
 800302c:	b29b      	uxth	r3, r3
 800302e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003036:	b29b      	uxth	r3, r3
 8003038:	8023      	strh	r3, [r4, #0]
 800303a:	e013      	b.n	8003064 <USB_EPStartXfer+0x45c>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	785b      	ldrb	r3, [r3, #1]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d10f      	bne.n	8003064 <USB_EPStartXfer+0x45c>
 8003044:	687c      	ldr	r4, [r7, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304c:	b29b      	uxth	r3, r3
 800304e:	441c      	add	r4, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	4423      	add	r3, r4
 8003058:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800305c:	461c      	mov	r4, r3
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	b29b      	uxth	r3, r3
 8003062:	8023      	strh	r3, [r4, #0]
 8003064:	687c      	ldr	r4, [r7, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	785b      	ldrb	r3, [r3, #1]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d14e      	bne.n	800310c <USB_EPStartXfer+0x504>
 800306e:	687c      	ldr	r4, [r7, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003076:	b29b      	uxth	r3, r3
 8003078:	441c      	add	r4, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	4423      	add	r3, r4
 8003082:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003086:	461c      	mov	r4, r3
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10e      	bne.n	80030ac <USB_EPStartXfer+0x4a4>
 800308e:	8823      	ldrh	r3, [r4, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003096:	b29b      	uxth	r3, r3
 8003098:	8023      	strh	r3, [r4, #0]
 800309a:	8823      	ldrh	r3, [r4, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	8023      	strh	r3, [r4, #0]
 80030aa:	e043      	b.n	8003134 <USB_EPStartXfer+0x52c>
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ae:	2b3e      	cmp	r3, #62	; 0x3e
 80030b0:	d816      	bhi.n	80030e0 <USB_EPStartXfer+0x4d8>
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <USB_EPStartXfer+0x4c0>
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3301      	adds	r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	029b      	lsls	r3, r3, #10
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	8023      	strh	r3, [r4, #0]
 80030d2:	e02f      	b.n	8003134 <USB_EPStartXfer+0x52c>
 80030d4:	ffff80c0 	.word	0xffff80c0
 80030d8:	ffffc080 	.word	0xffffc080
 80030dc:	ffff8080 	.word	0xffff8080
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <USB_EPStartXfer+0x4ee>
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	029b      	lsls	r3, r3, #10
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003106:	b29b      	uxth	r3, r3
 8003108:	8023      	strh	r3, [r4, #0]
 800310a:	e013      	b.n	8003134 <USB_EPStartXfer+0x52c>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	785b      	ldrb	r3, [r3, #1]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d10f      	bne.n	8003134 <USB_EPStartXfer+0x52c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311a:	b29b      	uxth	r3, r3
 800311c:	441c      	add	r4, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	4423      	add	r3, r4
 8003126:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	b29a      	uxth	r2, r3
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314a:	b29c      	uxth	r4, r3
 800314c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003150:	b29c      	uxth	r4, r3
 8003152:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003156:	b29c      	uxth	r4, r3
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	441a      	add	r2, r3
 8003162:	4b04      	ldr	r3, [pc, #16]	; (8003174 <USB_EPStartXfer+0x56c>)
 8003164:	4323      	orrs	r3, r4
 8003166:	b29b      	uxth	r3, r3
 8003168:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3734      	adds	r7, #52	; 0x34
 8003170:	46bd      	mov	sp, r7
 8003172:	bd90      	pop	{r4, r7, pc}
 8003174:	ffff8080 	.word	0xffff8080

08003178 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003178:	b490      	push	{r4, r7}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d018      	beq.n	80031bc <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a0:	b29c      	uxth	r4, r3
 80031a2:	f084 0310 	eor.w	r3, r4, #16
 80031a6:	b29c      	uxth	r4, r3
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	441a      	add	r2, r3
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <USB_EPSetStall+0x80>)
 80031b4:	4323      	orrs	r3, r4
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	8013      	strh	r3, [r2, #0]
 80031ba:	e017      	b.n	80031ec <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	b29c      	uxth	r4, r3
 80031d4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80031d8:	b29c      	uxth	r4, r3
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	441a      	add	r2, r3
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <USB_EPSetStall+0x80>)
 80031e6:	4323      	orrs	r3, r4
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc90      	pop	{r4, r7}
 80031f6:	4770      	bx	lr
 80031f8:	ffff8080 	.word	0xffff8080

080031fc <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80031fc:	b490      	push	{r4, r7}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	7b1b      	ldrb	r3, [r3, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d17d      	bne.n	800330a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	785b      	ldrb	r3, [r3, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d03d      	beq.n	8003292 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b29c      	uxth	r4, r3
 8003224:	4623      	mov	r3, r4
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d014      	beq.n	8003258 <USB_EPClearStall+0x5c>
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003244:	b29c      	uxth	r4, r3
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	441a      	add	r2, r3
 8003250:	4b31      	ldr	r3, [pc, #196]	; (8003318 <USB_EPClearStall+0x11c>)
 8003252:	4323      	orrs	r3, r4
 8003254:	b29b      	uxth	r3, r3
 8003256:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	78db      	ldrb	r3, [r3, #3]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d054      	beq.n	800330a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003276:	b29c      	uxth	r4, r3
 8003278:	f084 0320 	eor.w	r3, r4, #32
 800327c:	b29c      	uxth	r4, r3
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	441a      	add	r2, r3
 8003288:	4b24      	ldr	r3, [pc, #144]	; (800331c <USB_EPClearStall+0x120>)
 800328a:	4323      	orrs	r3, r4
 800328c:	b29b      	uxth	r3, r3
 800328e:	8013      	strh	r3, [r2, #0]
 8003290:	e03b      	b.n	800330a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29c      	uxth	r4, r3
 80032a0:	4623      	mov	r3, r4
 80032a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d014      	beq.n	80032d4 <USB_EPClearStall+0xd8>
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c0:	b29c      	uxth	r4, r3
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	441a      	add	r2, r3
 80032cc:	4b14      	ldr	r3, [pc, #80]	; (8003320 <USB_EPClearStall+0x124>)
 80032ce:	4323      	orrs	r3, r4
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	b29c      	uxth	r4, r3
 80032ec:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80032f0:	b29c      	uxth	r4, r3
 80032f2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80032f6:	b29c      	uxth	r4, r3
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	441a      	add	r2, r3
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <USB_EPClearStall+0x120>)
 8003304:	4323      	orrs	r3, r4
 8003306:	b29b      	uxth	r3, r3
 8003308:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bc90      	pop	{r4, r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	ffff80c0 	.word	0xffff80c0
 800331c:	ffff8080 	.word	0xffff8080
 8003320:	ffffc080 	.word	0xffffc080

08003324 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d103      	bne.n	800333e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2280      	movs	r2, #128	; 0x80
 800333a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003380:	b29b      	uxth	r3, r3
 8003382:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003384:	68fb      	ldr	r3, [r7, #12]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b08d      	sub	sp, #52	; 0x34
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	4611      	mov	r1, r2
 80033b2:	461a      	mov	r2, r3
 80033b4:	460b      	mov	r3, r1
 80033b6:	80fb      	strh	r3, [r7, #6]
 80033b8:	4613      	mov	r3, r2
 80033ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80033bc:	88bb      	ldrh	r3, [r7, #4]
 80033be:	3301      	adds	r3, #1
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	005a      	lsls	r2, r3, #1
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033de:	e01e      	b.n	800341e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	3301      	adds	r3, #1
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	b29a      	uxth	r2, r3
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	3302      	adds	r3, #2
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	3302      	adds	r3, #2
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	3301      	adds	r3, #1
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341a:	3b01      	subs	r3, #1
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1dd      	bne.n	80033e0 <USB_WritePMA+0x3a>
  }
}
 8003424:	bf00      	nop
 8003426:	3734      	adds	r7, #52	; 0x34
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800342e:	b480      	push	{r7}
 8003430:	b08b      	sub	sp, #44	; 0x2c
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	4611      	mov	r1, r2
 800343a:	461a      	mov	r2, r3
 800343c:	460b      	mov	r3, r1
 800343e:	80fb      	strh	r3, [r7, #6]
 8003440:	4613      	mov	r3, r2
 8003442:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003444:	88bb      	ldrh	r3, [r7, #4]
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	b29b      	uxth	r3, r3
 800344a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	005a      	lsls	r2, r3, #1
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003460:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
 8003466:	e01b      	b.n	80034a0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	3302      	adds	r3, #2
 8003474:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3301      	adds	r3, #1
 8003482:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	b2da      	uxtb	r2, r3
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3301      	adds	r3, #1
 8003492:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	3302      	adds	r3, #2
 8003498:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	3b01      	subs	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1e0      	bne.n	8003468 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80034a6:	88bb      	ldrh	r3, [r7, #4]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	701a      	strb	r2, [r3, #0]
  }
}
 80034c2:	bf00      	nop
 80034c4:	372c      	adds	r7, #44	; 0x2c
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	7c1b      	ldrb	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d115      	bne.n	8003510 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80034e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e8:	2202      	movs	r2, #2
 80034ea:	2181      	movs	r1, #129	; 0x81
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f004 fd30 	bl	8007f52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80034f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034fc:	2202      	movs	r2, #2
 80034fe:	2101      	movs	r1, #1
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f004 fd26 	bl	8007f52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800350e:	e012      	b.n	8003536 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003510:	2340      	movs	r3, #64	; 0x40
 8003512:	2202      	movs	r2, #2
 8003514:	2181      	movs	r1, #129	; 0x81
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f004 fd1b 	bl	8007f52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003522:	2340      	movs	r3, #64	; 0x40
 8003524:	2202      	movs	r2, #2
 8003526:	2101      	movs	r1, #1
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f004 fd12 	bl	8007f52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003536:	2308      	movs	r3, #8
 8003538:	2203      	movs	r2, #3
 800353a:	2182      	movs	r1, #130	; 0x82
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f004 fd08 	bl	8007f52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003548:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800354c:	f004 fe22 	bl	8008194 <USBD_static_malloc>
 8003550:	4602      	mov	r2, r0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d102      	bne.n	8003568 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
 8003566:	e026      	b.n	80035b6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800356e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2200      	movs	r2, #0
 800357e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2200      	movs	r2, #0
 8003586:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	7c1b      	ldrb	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800359c:	2101      	movs	r1, #1
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f004 fdc1 	bl	8008126 <USBD_LL_PrepareReceive>
 80035a4:	e007      	b.n	80035b6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035ac:	2340      	movs	r3, #64	; 0x40
 80035ae:	2101      	movs	r1, #1
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f004 fdb8 	bl	8008126 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80035d0:	2181      	movs	r1, #129	; 0x81
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f004 fce3 	bl	8007f9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80035de:	2101      	movs	r1, #1
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f004 fcdc 	bl	8007f9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80035ee:	2182      	movs	r1, #130	; 0x82
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f004 fcd4 	bl	8007f9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00e      	beq.n	8003624 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003616:	4618      	mov	r0, r3
 8003618:	f004 fdc8 	bl	80081ac <USBD_static_free>
    pdev->pClassData = NULL;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800363e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003654:	2b00      	cmp	r3, #0
 8003656:	d039      	beq.n	80036cc <USBD_CDC_Setup+0x9e>
 8003658:	2b20      	cmp	r3, #32
 800365a:	d17c      	bne.n	8003756 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	88db      	ldrh	r3, [r3, #6]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d029      	beq.n	80036b8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	b25b      	sxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	da11      	bge.n	8003692 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800367a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	88d2      	ldrh	r2, [r2, #6]
 8003680:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003682:	6939      	ldr	r1, [r7, #16]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	88db      	ldrh	r3, [r3, #6]
 8003688:	461a      	mov	r2, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f001 f9f6 	bl	8004a7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8003690:	e068      	b.n	8003764 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	785a      	ldrb	r2, [r3, #1]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	88db      	ldrh	r3, [r3, #6]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80036a8:	6939      	ldr	r1, [r7, #16]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	88db      	ldrh	r3, [r3, #6]
 80036ae:	461a      	mov	r2, r3
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f001 fa11 	bl	8004ad8 <USBD_CtlPrepareRx>
      break;
 80036b6:	e055      	b.n	8003764 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	7850      	ldrb	r0, [r2, #1]
 80036c4:	2200      	movs	r2, #0
 80036c6:	6839      	ldr	r1, [r7, #0]
 80036c8:	4798      	blx	r3
      break;
 80036ca:	e04b      	b.n	8003764 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	785b      	ldrb	r3, [r3, #1]
 80036d0:	2b0a      	cmp	r3, #10
 80036d2:	d017      	beq.n	8003704 <USBD_CDC_Setup+0xd6>
 80036d4:	2b0b      	cmp	r3, #11
 80036d6:	d029      	beq.n	800372c <USBD_CDC_Setup+0xfe>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d133      	bne.n	8003744 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d107      	bne.n	80036f6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80036e6:	f107 030c 	add.w	r3, r7, #12
 80036ea:	2202      	movs	r2, #2
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f001 f9c4 	bl	8004a7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80036f4:	e02e      	b.n	8003754 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80036f6:	6839      	ldr	r1, [r7, #0]
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f001 f955 	bl	80049a8 <USBD_CtlError>
            ret = USBD_FAIL;
 80036fe:	2302      	movs	r3, #2
 8003700:	75fb      	strb	r3, [r7, #23]
          break;
 8003702:	e027      	b.n	8003754 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800370a:	2b03      	cmp	r3, #3
 800370c:	d107      	bne.n	800371e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800370e:	f107 030f 	add.w	r3, r7, #15
 8003712:	2201      	movs	r2, #1
 8003714:	4619      	mov	r1, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f001 f9b0 	bl	8004a7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800371c:	e01a      	b.n	8003754 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800371e:	6839      	ldr	r1, [r7, #0]
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f001 f941 	bl	80049a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8003726:	2302      	movs	r3, #2
 8003728:	75fb      	strb	r3, [r7, #23]
          break;
 800372a:	e013      	b.n	8003754 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003732:	2b03      	cmp	r3, #3
 8003734:	d00d      	beq.n	8003752 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8003736:	6839      	ldr	r1, [r7, #0]
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f001 f935 	bl	80049a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800373e:	2302      	movs	r3, #2
 8003740:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8003742:	e006      	b.n	8003752 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8003744:	6839      	ldr	r1, [r7, #0]
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f001 f92e 	bl	80049a8 <USBD_CtlError>
          ret = USBD_FAIL;
 800374c:	2302      	movs	r3, #2
 800374e:	75fb      	strb	r3, [r7, #23]
          break;
 8003750:	e000      	b.n	8003754 <USBD_CDC_Setup+0x126>
          break;
 8003752:	bf00      	nop
      }
      break;
 8003754:	e006      	b.n	8003764 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8003756:	6839      	ldr	r1, [r7, #0]
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f001 f925 	bl	80049a8 <USBD_CtlError>
      ret = USBD_FAIL;
 800375e:	2302      	movs	r3, #2
 8003760:	75fb      	strb	r3, [r7, #23]
      break;
 8003762:	bf00      	nop
  }

  return ret;
 8003764:	7dfb      	ldrb	r3, [r7, #23]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	460b      	mov	r3, r1
 8003778:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003780:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003788:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d037      	beq.n	8003804 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	331c      	adds	r3, #28
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d026      	beq.n	80037f8 <USBD_CDC_DataIn+0x8a>
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	331c      	adds	r3, #28
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	0152      	lsls	r2, r2, #5
 80037c2:	440a      	add	r2, r1
 80037c4:	3238      	adds	r2, #56	; 0x38
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80037cc:	fb02 f201 	mul.w	r2, r2, r1
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d110      	bne.n	80037f8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	331c      	adds	r3, #28
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80037ea:	78f9      	ldrb	r1, [r7, #3]
 80037ec:	2300      	movs	r3, #0
 80037ee:	2200      	movs	r2, #0
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f004 fc75 	bl	80080e0 <USBD_LL_Transmit>
 80037f6:	e003      	b.n	8003800 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	e000      	b.n	8003806 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8003804:	2302      	movs	r3, #2
  }
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003820:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	4619      	mov	r1, r3
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f004 fca0 	bl	800816c <USBD_LL_GetRxDataSize>
 800382c:	4602      	mov	r2, r0
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00d      	beq.n	800385a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8003852:	4611      	mov	r1, r2
 8003854:	4798      	blx	r3

    return USBD_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e000      	b.n	800385c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800385a:	2302      	movs	r3, #2
  }
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003872:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800387a:	2b00      	cmp	r3, #0
 800387c:	d015      	beq.n	80038aa <USBD_CDC_EP0_RxReady+0x46>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003884:	2bff      	cmp	r3, #255	; 0xff
 8003886:	d010      	beq.n	80038aa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8003896:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800389e:	b292      	uxth	r2, r2
 80038a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	22ff      	movs	r2, #255	; 0xff
 80038a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2243      	movs	r2, #67	; 0x43
 80038c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80038c2:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000090 	.word	0x20000090

080038d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2243      	movs	r2, #67	; 0x43
 80038e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80038e2:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	2000004c 	.word	0x2000004c

080038f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2243      	movs	r2, #67	; 0x43
 8003900:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8003902:	4b03      	ldr	r3, [pc, #12]	; (8003910 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	200000d4 	.word	0x200000d4

08003914 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	220a      	movs	r2, #10
 8003920:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8003922:	4b03      	ldr	r3, [pc, #12]	; (8003930 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000008 	.word	0x20000008

08003934 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800393e:	2302      	movs	r3, #2
 8003940:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr

08003960 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003974:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800397e:	88fa      	ldrh	r2, [r7, #6]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80039a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80039c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01c      	beq.n	8003a0c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d115      	bne.n	8003a08 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2201      	movs	r2, #1
 80039e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2181      	movs	r1, #129	; 0x81
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f004 fb6e 	bl	80080e0 <USBD_LL_Transmit>

      return USBD_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e002      	b.n	8003a0e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d017      	beq.n	8003a60 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7c1b      	ldrb	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d109      	bne.n	8003a4c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a42:	2101      	movs	r1, #1
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f004 fb6e 	bl	8008126 <USBD_LL_PrepareReceive>
 8003a4a:	e007      	b.n	8003a5c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a52:	2340      	movs	r3, #64	; 0x40
 8003a54:	2101      	movs	r1, #1
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f004 fb65 	bl	8008126 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	4613      	mov	r3, r2
 8003a76:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e01a      	b.n	8003ab8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	79fa      	ldrb	r2, [r7, #7]
 8003aae:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f004 f9d9 	bl	8007e68 <USBD_LL_Init>

  return USBD_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d006      	beq.n	8003ae2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	73fb      	strb	r3, [r7, #15]
 8003ae0:	e001      	b.n	8003ae6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f004 fa0e 	bl	8007f1c <USBD_LL_Start>

  return USBD_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00c      	beq.n	8003b52 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	4611      	mov	r1, r2
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	4611      	mov	r1, r2
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3

  return USBD_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003b92:	6839      	ldr	r1, [r7, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fecb 	bl	8004930 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8003ba8:	461a      	mov	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d00c      	beq.n	8003bd8 <USBD_LL_SetupStage+0x56>
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d302      	bcc.n	8003bc8 <USBD_LL_SetupStage+0x46>
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d010      	beq.n	8003be8 <USBD_LL_SetupStage+0x66>
 8003bc6:	e017      	b.n	8003bf8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f9cb 	bl	8003f6c <USBD_StdDevReq>
      break;
 8003bd6:	e01a      	b.n	8003c0e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003bde:	4619      	mov	r1, r3
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fa2d 	bl	8004040 <USBD_StdItfReq>
      break;
 8003be6:	e012      	b.n	8003c0e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fa6b 	bl	80040cc <USBD_StdEPReq>
      break;
 8003bf6:	e00a      	b.n	8003c0e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003bfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	4619      	mov	r1, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f004 f9e8 	bl	8007fdc <USBD_LL_StallEP>
      break;
 8003c0c:	bf00      	nop
  }

  return USBD_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	460b      	mov	r3, r1
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003c26:	7afb      	ldrb	r3, [r7, #11]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d14b      	bne.n	8003cc4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003c32:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d134      	bne.n	8003ca8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d919      	bls.n	8003c7e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	1ad2      	subs	r2, r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d203      	bcs.n	8003c6c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	e002      	b.n	8003c72 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 ff4c 	bl	8004b14 <USBD_CtlContinueRx>
 8003c7c:	e038      	b.n	8003cf0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d105      	bne.n	8003ca0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 ff49 	bl	8004b38 <USBD_CtlSendStatus>
 8003ca6:	e023      	b.n	8003cf0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d11e      	bne.n	8003cf0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003cba:	2100      	movs	r1, #0
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f004 f98d 	bl	8007fdc <USBD_LL_StallEP>
 8003cc2:	e015      	b.n	8003cf0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d108      	bne.n	8003cec <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	7afa      	ldrb	r2, [r7, #11]
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	4798      	blx	r3
 8003cea:	e001      	b.n	8003cf0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003cec:	2302      	movs	r3, #2
 8003cee:	e000      	b.n	8003cf2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	460b      	mov	r3, r1
 8003d04:	607a      	str	r2, [r7, #4]
 8003d06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003d08:	7afb      	ldrb	r3, [r7, #11]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d17f      	bne.n	8003e0e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3314      	adds	r3, #20
 8003d12:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d15c      	bne.n	8003dd8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d915      	bls.n	8003d56 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	1ad2      	subs	r2, r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 feb6 	bl	8004ab4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f004 f9e9 	bl	8008126 <USBD_LL_PrepareReceive>
 8003d54:	e04e      	b.n	8003df4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	6912      	ldr	r2, [r2, #16]
 8003d5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d62:	fb02 f201 	mul.w	r2, r2, r1
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d11c      	bne.n	8003da6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d316      	bcc.n	8003da6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d20f      	bcs.n	8003da6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003d86:	2200      	movs	r2, #0
 8003d88:	2100      	movs	r1, #0
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fe92 	bl	8004ab4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003d98:	2300      	movs	r3, #0
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f004 f9c1 	bl	8008126 <USBD_LL_PrepareReceive>
 8003da4:	e026      	b.n	8003df4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d105      	bne.n	8003dc8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8003dc8:	2180      	movs	r1, #128	; 0x80
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f004 f906 	bl	8007fdc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fec4 	bl	8004b5e <USBD_CtlReceiveStatus>
 8003dd6:	e00d      	b.n	8003df4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d004      	beq.n	8003dec <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d103      	bne.n	8003df4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003dec:	2180      	movs	r1, #128	; 0x80
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f004 f8f4 	bl	8007fdc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d11d      	bne.n	8003e3a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f7ff fe83 	bl	8003b0a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8003e0c:	e015      	b.n	8003e3a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00d      	beq.n	8003e36 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d108      	bne.n	8003e36 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	7afa      	ldrb	r2, [r7, #11]
 8003e2e:	4611      	mov	r1, r2
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	4798      	blx	r3
 8003e34:	e001      	b.n	8003e3a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003e36:	2302      	movs	r3, #2
 8003e38:	e000      	b.n	8003e3c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003e4c:	2340      	movs	r3, #64	; 0x40
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2100      	movs	r1, #0
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f004 f87d 	bl	8007f52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2240      	movs	r2, #64	; 0x40
 8003e64:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003e68:	2340      	movs	r3, #64	; 0x40
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2180      	movs	r1, #128	; 0x80
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f004 f86f 	bl	8007f52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2240      	movs	r2, #64	; 0x40
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6852      	ldr	r2, [r2, #4]
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
  }

  return USBD_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	78fa      	ldrb	r2, [r7, #3]
 8003ed6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2204      	movs	r2, #4
 8003efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d105      	bne.n	8003f2a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d10b      	bne.n	8003f60 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d004      	beq.n	8003f90 <USBD_StdDevReq+0x24>
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d002      	beq.n	8003f90 <USBD_StdDevReq+0x24>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <USBD_StdDevReq+0x34>
 8003f8e:	e04c      	b.n	800402a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	6839      	ldr	r1, [r7, #0]
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	4798      	blx	r3
      break;
 8003f9e:	e049      	b.n	8004034 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	785b      	ldrb	r3, [r3, #1]
 8003fa4:	2b09      	cmp	r3, #9
 8003fa6:	d83a      	bhi.n	800401e <USBD_StdDevReq+0xb2>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <USBD_StdDevReq+0x44>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08004001 	.word	0x08004001
 8003fb4:	08004015 	.word	0x08004015
 8003fb8:	0800401f 	.word	0x0800401f
 8003fbc:	0800400b 	.word	0x0800400b
 8003fc0:	0800401f 	.word	0x0800401f
 8003fc4:	08003fe3 	.word	0x08003fe3
 8003fc8:	08003fd9 	.word	0x08003fd9
 8003fcc:	0800401f 	.word	0x0800401f
 8003fd0:	08003ff7 	.word	0x08003ff7
 8003fd4:	08003fed 	.word	0x08003fed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8003fd8:	6839      	ldr	r1, [r7, #0]
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f9d4 	bl	8004388 <USBD_GetDescriptor>
          break;
 8003fe0:	e022      	b.n	8004028 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8003fe2:	6839      	ldr	r1, [r7, #0]
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fb37 	bl	8004658 <USBD_SetAddress>
          break;
 8003fea:	e01d      	b.n	8004028 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8003fec:	6839      	ldr	r1, [r7, #0]
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fb74 	bl	80046dc <USBD_SetConfig>
          break;
 8003ff4:	e018      	b.n	8004028 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8003ff6:	6839      	ldr	r1, [r7, #0]
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fbfd 	bl	80047f8 <USBD_GetConfig>
          break;
 8003ffe:	e013      	b.n	8004028 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fc2c 	bl	8004860 <USBD_GetStatus>
          break;
 8004008:	e00e      	b.n	8004028 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800400a:	6839      	ldr	r1, [r7, #0]
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fc5a 	bl	80048c6 <USBD_SetFeature>
          break;
 8004012:	e009      	b.n	8004028 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004014:	6839      	ldr	r1, [r7, #0]
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fc69 	bl	80048ee <USBD_ClrFeature>
          break;
 800401c:	e004      	b.n	8004028 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800401e:	6839      	ldr	r1, [r7, #0]
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fcc1 	bl	80049a8 <USBD_CtlError>
          break;
 8004026:	bf00      	nop
      }
      break;
 8004028:	e004      	b.n	8004034 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800402a:	6839      	ldr	r1, [r7, #0]
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fcbb 	bl	80049a8 <USBD_CtlError>
      break;
 8004032:	bf00      	nop
  }

  return ret;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop

08004040 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004056:	2b20      	cmp	r3, #32
 8004058:	d003      	beq.n	8004062 <USBD_StdItfReq+0x22>
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d001      	beq.n	8004062 <USBD_StdItfReq+0x22>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d12a      	bne.n	80040b8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004068:	3b01      	subs	r3, #1
 800406a:	2b02      	cmp	r3, #2
 800406c:	d81d      	bhi.n	80040aa <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	889b      	ldrh	r3, [r3, #4]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d813      	bhi.n	80040a0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	6839      	ldr	r1, [r7, #0]
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	4798      	blx	r3
 8004086:	4603      	mov	r3, r0
 8004088:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	88db      	ldrh	r3, [r3, #6]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d110      	bne.n	80040b4 <USBD_StdItfReq+0x74>
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10d      	bne.n	80040b4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fd4d 	bl	8004b38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800409e:	e009      	b.n	80040b4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80040a0:	6839      	ldr	r1, [r7, #0]
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fc80 	bl	80049a8 <USBD_CtlError>
          break;
 80040a8:	e004      	b.n	80040b4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80040aa:	6839      	ldr	r1, [r7, #0]
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fc7b 	bl	80049a8 <USBD_CtlError>
          break;
 80040b2:	e000      	b.n	80040b6 <USBD_StdItfReq+0x76>
          break;
 80040b4:	bf00      	nop
      }
      break;
 80040b6:	e004      	b.n	80040c2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80040b8:	6839      	ldr	r1, [r7, #0]
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fc74 	bl	80049a8 <USBD_CtlError>
      break;
 80040c0:	bf00      	nop
  }

  return USBD_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	889b      	ldrh	r3, [r3, #4]
 80040de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d004      	beq.n	80040f6 <USBD_StdEPReq+0x2a>
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d002      	beq.n	80040f6 <USBD_StdEPReq+0x2a>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <USBD_StdEPReq+0x3a>
 80040f4:	e13d      	b.n	8004372 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	6839      	ldr	r1, [r7, #0]
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
      break;
 8004104:	e13a      	b.n	800437c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800410e:	2b20      	cmp	r3, #32
 8004110:	d10a      	bne.n	8004128 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	6839      	ldr	r1, [r7, #0]
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
 8004120:	4603      	mov	r3, r0
 8004122:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	e12a      	b.n	800437e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d03e      	beq.n	80041ae <USBD_StdEPReq+0xe2>
 8004130:	2b03      	cmp	r3, #3
 8004132:	d002      	beq.n	800413a <USBD_StdEPReq+0x6e>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d070      	beq.n	800421a <USBD_StdEPReq+0x14e>
 8004138:	e115      	b.n	8004366 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004140:	2b02      	cmp	r3, #2
 8004142:	d002      	beq.n	800414a <USBD_StdEPReq+0x7e>
 8004144:	2b03      	cmp	r3, #3
 8004146:	d015      	beq.n	8004174 <USBD_StdEPReq+0xa8>
 8004148:	e02b      	b.n	80041a2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800414a:	7bbb      	ldrb	r3, [r7, #14]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00c      	beq.n	800416a <USBD_StdEPReq+0x9e>
 8004150:	7bbb      	ldrb	r3, [r7, #14]
 8004152:	2b80      	cmp	r3, #128	; 0x80
 8004154:	d009      	beq.n	800416a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004156:	7bbb      	ldrb	r3, [r7, #14]
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f003 ff3e 	bl	8007fdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004160:	2180      	movs	r1, #128	; 0x80
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f003 ff3a 	bl	8007fdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004168:	e020      	b.n	80041ac <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800416a:	6839      	ldr	r1, [r7, #0]
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fc1b 	bl	80049a8 <USBD_CtlError>
              break;
 8004172:	e01b      	b.n	80041ac <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	885b      	ldrh	r3, [r3, #2]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10e      	bne.n	800419a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800417c:	7bbb      	ldrb	r3, [r7, #14]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00b      	beq.n	800419a <USBD_StdEPReq+0xce>
 8004182:	7bbb      	ldrb	r3, [r7, #14]
 8004184:	2b80      	cmp	r3, #128	; 0x80
 8004186:	d008      	beq.n	800419a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	88db      	ldrh	r3, [r3, #6]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d104      	bne.n	800419a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004190:	7bbb      	ldrb	r3, [r7, #14]
 8004192:	4619      	mov	r1, r3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f003 ff21 	bl	8007fdc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fccc 	bl	8004b38 <USBD_CtlSendStatus>

              break;
 80041a0:	e004      	b.n	80041ac <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80041a2:	6839      	ldr	r1, [r7, #0]
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fbff 	bl	80049a8 <USBD_CtlError>
              break;
 80041aa:	bf00      	nop
          }
          break;
 80041ac:	e0e0      	b.n	8004370 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d002      	beq.n	80041be <USBD_StdEPReq+0xf2>
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d015      	beq.n	80041e8 <USBD_StdEPReq+0x11c>
 80041bc:	e026      	b.n	800420c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80041be:	7bbb      	ldrb	r3, [r7, #14]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00c      	beq.n	80041de <USBD_StdEPReq+0x112>
 80041c4:	7bbb      	ldrb	r3, [r7, #14]
 80041c6:	2b80      	cmp	r3, #128	; 0x80
 80041c8:	d009      	beq.n	80041de <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80041ca:	7bbb      	ldrb	r3, [r7, #14]
 80041cc:	4619      	mov	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f003 ff04 	bl	8007fdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80041d4:	2180      	movs	r1, #128	; 0x80
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f003 ff00 	bl	8007fdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80041dc:	e01c      	b.n	8004218 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80041de:	6839      	ldr	r1, [r7, #0]
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fbe1 	bl	80049a8 <USBD_CtlError>
              break;
 80041e6:	e017      	b.n	8004218 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	885b      	ldrh	r3, [r3, #2]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d112      	bne.n	8004216 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80041f0:	7bbb      	ldrb	r3, [r7, #14]
 80041f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d004      	beq.n	8004204 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80041fa:	7bbb      	ldrb	r3, [r7, #14]
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f003 ff0b 	bl	800801a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fc97 	bl	8004b38 <USBD_CtlSendStatus>
              }
              break;
 800420a:	e004      	b.n	8004216 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800420c:	6839      	ldr	r1, [r7, #0]
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fbca 	bl	80049a8 <USBD_CtlError>
              break;
 8004214:	e000      	b.n	8004218 <USBD_StdEPReq+0x14c>
              break;
 8004216:	bf00      	nop
          }
          break;
 8004218:	e0aa      	b.n	8004370 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004220:	2b02      	cmp	r3, #2
 8004222:	d002      	beq.n	800422a <USBD_StdEPReq+0x15e>
 8004224:	2b03      	cmp	r3, #3
 8004226:	d032      	beq.n	800428e <USBD_StdEPReq+0x1c2>
 8004228:	e097      	b.n	800435a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800422a:	7bbb      	ldrb	r3, [r7, #14]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <USBD_StdEPReq+0x174>
 8004230:	7bbb      	ldrb	r3, [r7, #14]
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d004      	beq.n	8004240 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004236:	6839      	ldr	r1, [r7, #0]
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fbb5 	bl	80049a8 <USBD_CtlError>
                break;
 800423e:	e091      	b.n	8004364 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004244:	2b00      	cmp	r3, #0
 8004246:	da0b      	bge.n	8004260 <USBD_StdEPReq+0x194>
 8004248:	7bbb      	ldrb	r3, [r7, #14]
 800424a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	3310      	adds	r3, #16
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4413      	add	r3, r2
 800425c:	3304      	adds	r3, #4
 800425e:	e00b      	b.n	8004278 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004260:	7bbb      	ldrb	r3, [r7, #14]
 8004262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4413      	add	r3, r2
 8004276:	3304      	adds	r3, #4
 8004278:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2202      	movs	r2, #2
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fbf8 	bl	8004a7c <USBD_CtlSendData>
              break;
 800428c:	e06a      	b.n	8004364 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800428e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004292:	2b00      	cmp	r3, #0
 8004294:	da11      	bge.n	80042ba <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004296:	7bbb      	ldrb	r3, [r7, #14]
 8004298:	f003 020f 	and.w	r2, r3, #15
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	3318      	adds	r3, #24
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d117      	bne.n	80042e0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80042b0:	6839      	ldr	r1, [r7, #0]
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fb78 	bl	80049a8 <USBD_CtlError>
                  break;
 80042b8:	e054      	b.n	8004364 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80042ba:	7bbb      	ldrb	r3, [r7, #14]
 80042bc:	f003 020f 	and.w	r2, r3, #15
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d104      	bne.n	80042e0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80042d6:	6839      	ldr	r1, [r7, #0]
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fb65 	bl	80049a8 <USBD_CtlError>
                  break;
 80042de:	e041      	b.n	8004364 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80042e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	da0b      	bge.n	8004300 <USBD_StdEPReq+0x234>
 80042e8:	7bbb      	ldrb	r3, [r7, #14]
 80042ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	3310      	adds	r3, #16
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	3304      	adds	r3, #4
 80042fe:	e00b      	b.n	8004318 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004300:	7bbb      	ldrb	r3, [r7, #14]
 8004302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	3304      	adds	r3, #4
 8004318:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800431a:	7bbb      	ldrb	r3, [r7, #14]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <USBD_StdEPReq+0x25a>
 8004320:	7bbb      	ldrb	r3, [r7, #14]
 8004322:	2b80      	cmp	r3, #128	; 0x80
 8004324:	d103      	bne.n	800432e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e00e      	b.n	800434c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800432e:	7bbb      	ldrb	r3, [r7, #14]
 8004330:	4619      	mov	r1, r3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f003 fe90 	bl	8008058 <USBD_LL_IsStallEP>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e002      	b.n	800434c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2202      	movs	r2, #2
 8004350:	4619      	mov	r1, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fb92 	bl	8004a7c <USBD_CtlSendData>
              break;
 8004358:	e004      	b.n	8004364 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800435a:	6839      	ldr	r1, [r7, #0]
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fb23 	bl	80049a8 <USBD_CtlError>
              break;
 8004362:	bf00      	nop
          }
          break;
 8004364:	e004      	b.n	8004370 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004366:	6839      	ldr	r1, [r7, #0]
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fb1d 	bl	80049a8 <USBD_CtlError>
          break;
 800436e:	bf00      	nop
      }
      break;
 8004370:	e004      	b.n	800437c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004372:	6839      	ldr	r1, [r7, #0]
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fb17 	bl	80049a8 <USBD_CtlError>
      break;
 800437a:	bf00      	nop
  }

  return ret;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	885b      	ldrh	r3, [r3, #2]
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	2b06      	cmp	r3, #6
 80043aa:	f200 8128 	bhi.w	80045fe <USBD_GetDescriptor+0x276>
 80043ae:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <USBD_GetDescriptor+0x2c>)
 80043b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b4:	080043d1 	.word	0x080043d1
 80043b8:	080043e9 	.word	0x080043e9
 80043bc:	08004429 	.word	0x08004429
 80043c0:	080045ff 	.word	0x080045ff
 80043c4:	080045ff 	.word	0x080045ff
 80043c8:	0800459f 	.word	0x0800459f
 80043cc:	080045cb 	.word	0x080045cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	7c12      	ldrb	r2, [r2, #16]
 80043dc:	f107 0108 	add.w	r1, r7, #8
 80043e0:	4610      	mov	r0, r2
 80043e2:	4798      	blx	r3
 80043e4:	60f8      	str	r0, [r7, #12]
      break;
 80043e6:	e112      	b.n	800460e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	7c1b      	ldrb	r3, [r3, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10d      	bne.n	800440c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	f107 0208 	add.w	r2, r7, #8
 80043fc:	4610      	mov	r0, r2
 80043fe:	4798      	blx	r3
 8004400:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3301      	adds	r3, #1
 8004406:	2202      	movs	r2, #2
 8004408:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800440a:	e100      	b.n	800460e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	f107 0208 	add.w	r2, r7, #8
 8004418:	4610      	mov	r0, r2
 800441a:	4798      	blx	r3
 800441c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3301      	adds	r3, #1
 8004422:	2202      	movs	r2, #2
 8004424:	701a      	strb	r2, [r3, #0]
      break;
 8004426:	e0f2      	b.n	800460e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	885b      	ldrh	r3, [r3, #2]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b05      	cmp	r3, #5
 8004430:	f200 80ac 	bhi.w	800458c <USBD_GetDescriptor+0x204>
 8004434:	a201      	add	r2, pc, #4	; (adr r2, 800443c <USBD_GetDescriptor+0xb4>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	08004455 	.word	0x08004455
 8004440:	08004489 	.word	0x08004489
 8004444:	080044bd 	.word	0x080044bd
 8004448:	080044f1 	.word	0x080044f1
 800444c:	08004525 	.word	0x08004525
 8004450:	08004559 	.word	0x08004559
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00b      	beq.n	8004478 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	7c12      	ldrb	r2, [r2, #16]
 800446c:	f107 0108 	add.w	r1, r7, #8
 8004470:	4610      	mov	r0, r2
 8004472:	4798      	blx	r3
 8004474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004476:	e091      	b.n	800459c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004478:	6839      	ldr	r1, [r7, #0]
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fa94 	bl	80049a8 <USBD_CtlError>
            err++;
 8004480:	7afb      	ldrb	r3, [r7, #11]
 8004482:	3301      	adds	r3, #1
 8004484:	72fb      	strb	r3, [r7, #11]
          break;
 8004486:	e089      	b.n	800459c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00b      	beq.n	80044ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	7c12      	ldrb	r2, [r2, #16]
 80044a0:	f107 0108 	add.w	r1, r7, #8
 80044a4:	4610      	mov	r0, r2
 80044a6:	4798      	blx	r3
 80044a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80044aa:	e077      	b.n	800459c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80044ac:	6839      	ldr	r1, [r7, #0]
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fa7a 	bl	80049a8 <USBD_CtlError>
            err++;
 80044b4:	7afb      	ldrb	r3, [r7, #11]
 80044b6:	3301      	adds	r3, #1
 80044b8:	72fb      	strb	r3, [r7, #11]
          break;
 80044ba:	e06f      	b.n	800459c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00b      	beq.n	80044e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	7c12      	ldrb	r2, [r2, #16]
 80044d4:	f107 0108 	add.w	r1, r7, #8
 80044d8:	4610      	mov	r0, r2
 80044da:	4798      	blx	r3
 80044dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80044de:	e05d      	b.n	800459c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fa60 	bl	80049a8 <USBD_CtlError>
            err++;
 80044e8:	7afb      	ldrb	r3, [r7, #11]
 80044ea:	3301      	adds	r3, #1
 80044ec:	72fb      	strb	r3, [r7, #11]
          break;
 80044ee:	e055      	b.n	800459c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	7c12      	ldrb	r2, [r2, #16]
 8004508:	f107 0108 	add.w	r1, r7, #8
 800450c:	4610      	mov	r0, r2
 800450e:	4798      	blx	r3
 8004510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004512:	e043      	b.n	800459c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004514:	6839      	ldr	r1, [r7, #0]
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa46 	bl	80049a8 <USBD_CtlError>
            err++;
 800451c:	7afb      	ldrb	r3, [r7, #11]
 800451e:	3301      	adds	r3, #1
 8004520:	72fb      	strb	r3, [r7, #11]
          break;
 8004522:	e03b      	b.n	800459c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	7c12      	ldrb	r2, [r2, #16]
 800453c:	f107 0108 	add.w	r1, r7, #8
 8004540:	4610      	mov	r0, r2
 8004542:	4798      	blx	r3
 8004544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004546:	e029      	b.n	800459c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fa2c 	bl	80049a8 <USBD_CtlError>
            err++;
 8004550:	7afb      	ldrb	r3, [r7, #11]
 8004552:	3301      	adds	r3, #1
 8004554:	72fb      	strb	r3, [r7, #11]
          break;
 8004556:	e021      	b.n	800459c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	7c12      	ldrb	r2, [r2, #16]
 8004570:	f107 0108 	add.w	r1, r7, #8
 8004574:	4610      	mov	r0, r2
 8004576:	4798      	blx	r3
 8004578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800457a:	e00f      	b.n	800459c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800457c:	6839      	ldr	r1, [r7, #0]
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa12 	bl	80049a8 <USBD_CtlError>
            err++;
 8004584:	7afb      	ldrb	r3, [r7, #11]
 8004586:	3301      	adds	r3, #1
 8004588:	72fb      	strb	r3, [r7, #11]
          break;
 800458a:	e007      	b.n	800459c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800458c:	6839      	ldr	r1, [r7, #0]
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fa0a 	bl	80049a8 <USBD_CtlError>
          err++;
 8004594:	7afb      	ldrb	r3, [r7, #11]
 8004596:	3301      	adds	r3, #1
 8004598:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800459a:	e038      	b.n	800460e <USBD_GetDescriptor+0x286>
 800459c:	e037      	b.n	800460e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	7c1b      	ldrb	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ae:	f107 0208 	add.w	r2, r7, #8
 80045b2:	4610      	mov	r0, r2
 80045b4:	4798      	blx	r3
 80045b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80045b8:	e029      	b.n	800460e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80045ba:	6839      	ldr	r1, [r7, #0]
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f9f3 	bl	80049a8 <USBD_CtlError>
        err++;
 80045c2:	7afb      	ldrb	r3, [r7, #11]
 80045c4:	3301      	adds	r3, #1
 80045c6:	72fb      	strb	r3, [r7, #11]
      break;
 80045c8:	e021      	b.n	800460e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	7c1b      	ldrb	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10d      	bne.n	80045ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	f107 0208 	add.w	r2, r7, #8
 80045de:	4610      	mov	r0, r2
 80045e0:	4798      	blx	r3
 80045e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3301      	adds	r3, #1
 80045e8:	2207      	movs	r2, #7
 80045ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80045ec:	e00f      	b.n	800460e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80045ee:	6839      	ldr	r1, [r7, #0]
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f9d9 	bl	80049a8 <USBD_CtlError>
        err++;
 80045f6:	7afb      	ldrb	r3, [r7, #11]
 80045f8:	3301      	adds	r3, #1
 80045fa:	72fb      	strb	r3, [r7, #11]
      break;
 80045fc:	e007      	b.n	800460e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80045fe:	6839      	ldr	r1, [r7, #0]
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f9d1 	bl	80049a8 <USBD_CtlError>
      err++;
 8004606:	7afb      	ldrb	r3, [r7, #11]
 8004608:	3301      	adds	r3, #1
 800460a:	72fb      	strb	r3, [r7, #11]
      break;
 800460c:	bf00      	nop
  }

  if (err != 0U)
 800460e:	7afb      	ldrb	r3, [r7, #11]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d11c      	bne.n	800464e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004614:	893b      	ldrh	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d011      	beq.n	800463e <USBD_GetDescriptor+0x2b6>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	88db      	ldrh	r3, [r3, #6]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	88da      	ldrh	r2, [r3, #6]
 8004626:	893b      	ldrh	r3, [r7, #8]
 8004628:	4293      	cmp	r3, r2
 800462a:	bf28      	it	cs
 800462c:	4613      	movcs	r3, r2
 800462e:	b29b      	uxth	r3, r3
 8004630:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004632:	893b      	ldrh	r3, [r7, #8]
 8004634:	461a      	mov	r2, r3
 8004636:	68f9      	ldr	r1, [r7, #12]
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fa1f 	bl	8004a7c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	88db      	ldrh	r3, [r3, #6]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d104      	bne.n	8004650 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fa76 	bl	8004b38 <USBD_CtlSendStatus>
 800464c:	e000      	b.n	8004650 <USBD_GetDescriptor+0x2c8>
    return;
 800464e:	bf00      	nop
    }
  }
}
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop

08004658 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	889b      	ldrh	r3, [r3, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d130      	bne.n	80046cc <USBD_SetAddress+0x74>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	88db      	ldrh	r3, [r3, #6]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d12c      	bne.n	80046cc <USBD_SetAddress+0x74>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	885b      	ldrh	r3, [r3, #2]
 8004676:	2b7f      	cmp	r3, #127	; 0x7f
 8004678:	d828      	bhi.n	80046cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	885b      	ldrh	r3, [r3, #2]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004684:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800468c:	2b03      	cmp	r3, #3
 800468e:	d104      	bne.n	800469a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004690:	6839      	ldr	r1, [r7, #0]
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f988 	bl	80049a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004698:	e01c      	b.n	80046d4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f003 fcfb 	bl	80080a2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fa43 	bl	8004b38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046c0:	e008      	b.n	80046d4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046ca:	e003      	b.n	80046d4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f96a 	bl	80049a8 <USBD_CtlError>
  }
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	885b      	ldrh	r3, [r3, #2]
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	4b41      	ldr	r3, [pc, #260]	; (80047f4 <USBD_SetConfig+0x118>)
 80046ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80046f0:	4b40      	ldr	r3, [pc, #256]	; (80047f4 <USBD_SetConfig+0x118>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d904      	bls.n	8004702 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f954 	bl	80049a8 <USBD_CtlError>
 8004700:	e075      	b.n	80047ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004708:	2b02      	cmp	r3, #2
 800470a:	d002      	beq.n	8004712 <USBD_SetConfig+0x36>
 800470c:	2b03      	cmp	r3, #3
 800470e:	d023      	beq.n	8004758 <USBD_SetConfig+0x7c>
 8004710:	e062      	b.n	80047d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004712:	4b38      	ldr	r3, [pc, #224]	; (80047f4 <USBD_SetConfig+0x118>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d01a      	beq.n	8004750 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800471a:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <USBD_SetConfig+0x118>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2203      	movs	r2, #3
 8004728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800472c:	4b31      	ldr	r3, [pc, #196]	; (80047f4 <USBD_SetConfig+0x118>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff f9f3 	bl	8003b1e <USBD_SetClassConfig>
 8004738:	4603      	mov	r3, r0
 800473a:	2b02      	cmp	r3, #2
 800473c:	d104      	bne.n	8004748 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800473e:	6839      	ldr	r1, [r7, #0]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f931 	bl	80049a8 <USBD_CtlError>
            return;
 8004746:	e052      	b.n	80047ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f9f5 	bl	8004b38 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800474e:	e04e      	b.n	80047ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f9f1 	bl	8004b38 <USBD_CtlSendStatus>
        break;
 8004756:	e04a      	b.n	80047ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004758:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <USBD_SetConfig+0x118>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d112      	bne.n	8004786 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004768:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <USBD_SetConfig+0x118>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004772:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <USBD_SetConfig+0x118>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	4619      	mov	r1, r3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff f9ef 	bl	8003b5c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f9da 	bl	8004b38 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004784:	e033      	b.n	80047ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004786:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <USBD_SetConfig+0x118>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	429a      	cmp	r2, r3
 8004792:	d01d      	beq.n	80047d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	4619      	mov	r1, r3
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff f9dd 	bl	8003b5c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80047a2:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <USBD_SetConfig+0x118>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80047ac:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <USBD_SetConfig+0x118>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff f9b3 	bl	8003b1e <USBD_SetClassConfig>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d104      	bne.n	80047c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80047be:	6839      	ldr	r1, [r7, #0]
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f8f1 	bl	80049a8 <USBD_CtlError>
            return;
 80047c6:	e012      	b.n	80047ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f9b5 	bl	8004b38 <USBD_CtlSendStatus>
        break;
 80047ce:	e00e      	b.n	80047ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f9b1 	bl	8004b38 <USBD_CtlSendStatus>
        break;
 80047d6:	e00a      	b.n	80047ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80047d8:	6839      	ldr	r1, [r7, #0]
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f8e4 	bl	80049a8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80047e0:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <USBD_SetConfig+0x118>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	4619      	mov	r1, r3
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff f9b8 	bl	8003b5c <USBD_ClrClassConfig>
        break;
 80047ec:	bf00      	nop
    }
  }
}
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	2000019c 	.word	0x2000019c

080047f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	88db      	ldrh	r3, [r3, #6]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d004      	beq.n	8004814 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800480a:	6839      	ldr	r1, [r7, #0]
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f8cb 	bl	80049a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004812:	e021      	b.n	8004858 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800481a:	2b01      	cmp	r3, #1
 800481c:	db17      	blt.n	800484e <USBD_GetConfig+0x56>
 800481e:	2b02      	cmp	r3, #2
 8004820:	dd02      	ble.n	8004828 <USBD_GetConfig+0x30>
 8004822:	2b03      	cmp	r3, #3
 8004824:	d00b      	beq.n	800483e <USBD_GetConfig+0x46>
 8004826:	e012      	b.n	800484e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3308      	adds	r3, #8
 8004832:	2201      	movs	r2, #1
 8004834:	4619      	mov	r1, r3
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f920 	bl	8004a7c <USBD_CtlSendData>
        break;
 800483c:	e00c      	b.n	8004858 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3304      	adds	r3, #4
 8004842:	2201      	movs	r2, #1
 8004844:	4619      	mov	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f918 	bl	8004a7c <USBD_CtlSendData>
        break;
 800484c:	e004      	b.n	8004858 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f8a9 	bl	80049a8 <USBD_CtlError>
        break;
 8004856:	bf00      	nop
}
 8004858:	bf00      	nop
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004870:	3b01      	subs	r3, #1
 8004872:	2b02      	cmp	r3, #2
 8004874:	d81e      	bhi.n	80048b4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	88db      	ldrh	r3, [r3, #6]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d004      	beq.n	8004888 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800487e:	6839      	ldr	r1, [r7, #0]
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f891 	bl	80049a8 <USBD_CtlError>
        break;
 8004886:	e01a      	b.n	80048be <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f043 0202 	orr.w	r2, r3, #2
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	330c      	adds	r3, #12
 80048a8:	2202      	movs	r2, #2
 80048aa:	4619      	mov	r1, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f8e5 	bl	8004a7c <USBD_CtlSendData>
      break;
 80048b2:	e004      	b.n	80048be <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80048b4:	6839      	ldr	r1, [r7, #0]
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f876 	bl	80049a8 <USBD_CtlError>
      break;
 80048bc:	bf00      	nop
  }
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	885b      	ldrh	r3, [r3, #2]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d106      	bne.n	80048e6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f929 	bl	8004b38 <USBD_CtlSendStatus>
  }
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048fe:	3b01      	subs	r3, #1
 8004900:	2b02      	cmp	r3, #2
 8004902:	d80b      	bhi.n	800491c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	885b      	ldrh	r3, [r3, #2]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d10c      	bne.n	8004926 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f90f 	bl	8004b38 <USBD_CtlSendStatus>
      }
      break;
 800491a:	e004      	b.n	8004926 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f842 	bl	80049a8 <USBD_CtlError>
      break;
 8004924:	e000      	b.n	8004928 <USBD_ClrFeature+0x3a>
      break;
 8004926:	bf00      	nop
  }
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781a      	ldrb	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	785a      	ldrb	r2, [r3, #1]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	3302      	adds	r3, #2
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	b29a      	uxth	r2, r3
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	3303      	adds	r3, #3
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	b29b      	uxth	r3, r3
 800495e:	4413      	add	r3, r2
 8004960:	b29a      	uxth	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	3304      	adds	r3, #4
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	b29a      	uxth	r2, r3
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	3305      	adds	r3, #5
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	b29b      	uxth	r3, r3
 800497a:	4413      	add	r3, r2
 800497c:	b29a      	uxth	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	3306      	adds	r3, #6
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b29a      	uxth	r2, r3
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	3307      	adds	r3, #7
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	b29b      	uxth	r3, r3
 8004996:	4413      	add	r3, r2
 8004998:	b29a      	uxth	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	80da      	strh	r2, [r3, #6]

}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr

080049a8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80049b2:	2180      	movs	r1, #128	; 0x80
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f003 fb11 	bl	8007fdc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80049ba:	2100      	movs	r1, #0
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f003 fb0d 	bl	8007fdc <USBD_LL_StallEP>
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b086      	sub	sp, #24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d032      	beq.n	8004a46 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f834 	bl	8004a4e <USBD_GetLen>
 80049e6:	4603      	mov	r3, r0
 80049e8:	3301      	adds	r3, #1
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	75fa      	strb	r2, [r7, #23]
 80049fa:	461a      	mov	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4413      	add	r3, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	7812      	ldrb	r2, [r2, #0]
 8004a04:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004a06:	7dfb      	ldrb	r3, [r7, #23]
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	75fa      	strb	r2, [r7, #23]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4413      	add	r3, r2
 8004a12:	2203      	movs	r2, #3
 8004a14:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8004a16:	e012      	b.n	8004a3e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	60fa      	str	r2, [r7, #12]
 8004a1e:	7dfa      	ldrb	r2, [r7, #23]
 8004a20:	1c51      	adds	r1, r2, #1
 8004a22:	75f9      	strb	r1, [r7, #23]
 8004a24:	4611      	mov	r1, r2
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	440a      	add	r2, r1
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	75fa      	strb	r2, [r7, #23]
 8004a34:	461a      	mov	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4413      	add	r3, r2
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e8      	bne.n	8004a18 <USBD_GetString+0x4e>
    }
  }
}
 8004a46:	bf00      	nop
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8004a5a:	e005      	b.n	8004a68 <USBD_GetLen+0x1a>
  {
    len++;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
    buf++;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3301      	adds	r3, #1
 8004a66:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f5      	bne.n	8004a5c <USBD_GetLen+0xe>
  }

  return len;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	4613      	mov	r3, r2
 8004a88:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004a92:	88fa      	ldrh	r2, [r7, #6]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f003 fb1b 	bl	80080e0 <USBD_LL_Transmit>

  return USBD_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f003 fb09 	bl	80080e0 <USBD_LL_Transmit>

  return USBD_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2203      	movs	r2, #3
 8004aea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004aee:	88fa      	ldrh	r2, [r7, #6]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004af6:	88fa      	ldrh	r2, [r7, #6]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	2100      	movs	r1, #0
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f003 fb0e 	bl	8008126 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	2100      	movs	r1, #0
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f003 fafc 	bl	8008126 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2204      	movs	r2, #4
 8004b44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f003 fac6 	bl	80080e0 <USBD_LL_Transmit>

  return USBD_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2205      	movs	r2, #5
 8004b6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	2200      	movs	r2, #0
 8004b72:	2100      	movs	r1, #0
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f003 fad6 	bl	8008126 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b8a:	f3ef 8305 	mrs	r3, IPSR
 8004b8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10f      	bne.n	8004bb6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b96:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9a:	607b      	str	r3, [r7, #4]
  return(result);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <osKernelInitialize+0x32>
 8004ba2:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <osKernelInitialize+0x60>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d109      	bne.n	8004bbe <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004baa:	f3ef 8311 	mrs	r3, BASEPRI
 8004bae:	603b      	str	r3, [r7, #0]
  return(result);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004bb6:	f06f 0305 	mvn.w	r3, #5
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	e00c      	b.n	8004bd8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004bbe:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <osKernelInitialize+0x60>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d105      	bne.n	8004bd2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004bc6:	4b07      	ldr	r3, [pc, #28]	; (8004be4 <osKernelInitialize+0x60>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	e002      	b.n	8004bd8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bd6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr
 8004be4:	200001a0 	.word	0x200001a0

08004be8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bee:	f3ef 8305 	mrs	r3, IPSR
 8004bf2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfe:	607b      	str	r3, [r7, #4]
  return(result);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <osKernelStart+0x32>
 8004c06:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <osKernelStart+0x64>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d109      	bne.n	8004c22 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c12:	603b      	str	r3, [r7, #0]
  return(result);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004c1a:	f06f 0305 	mvn.w	r3, #5
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	e00e      	b.n	8004c40 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c22:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <osKernelStart+0x64>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d107      	bne.n	8004c3a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004c2a:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <osKernelStart+0x64>)
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004c30:	f001 f988 	bl	8005f44 <vTaskStartScheduler>
      stat = osOK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	e002      	b.n	8004c40 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004c40:	68fb      	ldr	r3, [r7, #12]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	200001a0 	.word	0x200001a0

08004c50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b092      	sub	sp, #72	; 0x48
 8004c54:	af04      	add	r7, sp, #16
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c60:	f3ef 8305 	mrs	r3, IPSR
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f040 8094 	bne.w	8004d96 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c72:	623b      	str	r3, [r7, #32]
  return(result);
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f040 808d 	bne.w	8004d96 <osThreadNew+0x146>
 8004c7c:	4b48      	ldr	r3, [pc, #288]	; (8004da0 <osThreadNew+0x150>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d106      	bne.n	8004c92 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c84:	f3ef 8311 	mrs	r3, BASEPRI
 8004c88:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f040 8082 	bne.w	8004d96 <osThreadNew+0x146>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d07e      	beq.n	8004d96 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004c98:	2380      	movs	r3, #128	; 0x80
 8004c9a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004c9c:	2318      	movs	r3, #24
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004ca4:	f107 031b 	add.w	r3, r7, #27
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cae:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d045      	beq.n	8004d42 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <osThreadNew+0x74>
        name = attr->name;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <osThreadNew+0x9a>
 8004cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cda:	2b38      	cmp	r3, #56	; 0x38
 8004cdc:	d805      	bhi.n	8004cea <osThreadNew+0x9a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <osThreadNew+0x9e>
        return (NULL);
 8004cea:	2300      	movs	r3, #0
 8004cec:	e054      	b.n	8004d98 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	089b      	lsrs	r3, r3, #2
 8004cfc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00e      	beq.n	8004d24 <osThreadNew+0xd4>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b5b      	cmp	r3, #91	; 0x5b
 8004d0c:	d90a      	bls.n	8004d24 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d006      	beq.n	8004d24 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <osThreadNew+0xd4>
        mem = 1;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d22:	e010      	b.n	8004d46 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10c      	bne.n	8004d46 <osThreadNew+0xf6>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d108      	bne.n	8004d46 <osThreadNew+0xf6>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d104      	bne.n	8004d46 <osThreadNew+0xf6>
          mem = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d40:	e001      	b.n	8004d46 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d110      	bne.n	8004d6e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d54:	9202      	str	r2, [sp, #8]
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 ff26 	bl	8005bb4 <xTaskCreateStatic>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e013      	b.n	8004d96 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d110      	bne.n	8004d96 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	f107 0314 	add.w	r3, r7, #20
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 ff6d 	bl	8005c66 <xTaskCreate>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d001      	beq.n	8004d96 <osThreadNew+0x146>
          hTask = NULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d96:	697b      	ldr	r3, [r7, #20]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3738      	adds	r7, #56	; 0x38
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	200001a0 	.word	0x200001a0

08004da4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dac:	f3ef 8305 	mrs	r3, IPSR
 8004db0:	613b      	str	r3, [r7, #16]
  return(result);
 8004db2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10f      	bne.n	8004dd8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d109      	bne.n	8004dd8 <osDelay+0x34>
 8004dc4:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <osDelay+0x58>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d109      	bne.n	8004de0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8004dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <osDelay+0x3c>
    stat = osErrorISR;
 8004dd8:	f06f 0305 	mvn.w	r3, #5
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	e007      	b.n	8004df0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f001 f876 	bl	8005edc <vTaskDelay>
    }
  }

  return (stat);
 8004df0:	697b      	ldr	r3, [r7, #20]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	200001a0 	.word	0x200001a0

08004e00 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	; 0x28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e0c:	f3ef 8305 	mrs	r3, IPSR
 8004e10:	613b      	str	r3, [r7, #16]
  return(result);
 8004e12:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f040 8085 	bne.w	8004f24 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d17e      	bne.n	8004f24 <osMutexNew+0x124>
 8004e26:	4b42      	ldr	r3, [pc, #264]	; (8004f30 <osMutexNew+0x130>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d105      	bne.n	8004e3a <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e32:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d174      	bne.n	8004f24 <osMutexNew+0x124>
    if (attr != NULL) {
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	623b      	str	r3, [r7, #32]
 8004e46:	e001      	b.n	8004e4c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <osMutexNew+0x5c>
      rmtx = 1U;
 8004e56:	2301      	movs	r3, #1
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	e001      	b.n	8004e60 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d15c      	bne.n	8004f24 <osMutexNew+0x124>
      mem = -1;
 8004e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e6e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d015      	beq.n	8004ea2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <osMutexNew+0x8c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b4f      	cmp	r3, #79	; 0x4f
 8004e84:	d902      	bls.n	8004e8c <osMutexNew+0x8c>
          mem = 1;
 8004e86:	2301      	movs	r3, #1
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	e00c      	b.n	8004ea6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d108      	bne.n	8004ea6 <osMutexNew+0xa6>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <osMutexNew+0xa6>
            mem = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	e001      	b.n	8004ea6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d112      	bne.n	8004ed2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	2004      	movs	r0, #4
 8004eba:	f000 fa89 	bl	80053d0 <xQueueCreateMutexStatic>
 8004ebe:	6278      	str	r0, [r7, #36]	; 0x24
 8004ec0:	e016      	b.n	8004ef0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	2001      	movs	r0, #1
 8004eca:	f000 fa81 	bl	80053d0 <xQueueCreateMutexStatic>
 8004ece:	6278      	str	r0, [r7, #36]	; 0x24
 8004ed0:	e00e      	b.n	8004ef0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10b      	bne.n	8004ef0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004ede:	2004      	movs	r0, #4
 8004ee0:	f000 fa5e 	bl	80053a0 <xQueueCreateMutex>
 8004ee4:	6278      	str	r0, [r7, #36]	; 0x24
 8004ee6:	e003      	b.n	8004ef0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004ee8:	2001      	movs	r0, #1
 8004eea:	f000 fa59 	bl	80053a0 <xQueueCreateMutex>
 8004eee:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00c      	beq.n	8004f10 <osMutexNew+0x110>
        if (attr != NULL) {
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <osMutexNew+0x104>
          name = attr->name;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e001      	b.n	8004f08 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004f08:	6979      	ldr	r1, [r7, #20]
 8004f0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f0c:	f000 fdf6 	bl	8005afc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <osMutexNew+0x124>
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3728      	adds	r7, #40	; 0x28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	200001a0 	.word	0x200001a0

08004f34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a06      	ldr	r2, [pc, #24]	; (8004f5c <vApplicationGetIdleTaskMemory+0x28>)
 8004f44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4a05      	ldr	r2, [pc, #20]	; (8004f60 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2280      	movs	r2, #128	; 0x80
 8004f50:	601a      	str	r2, [r3, #0]
}
 8004f52:	bf00      	nop
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr
 8004f5c:	200001a4 	.word	0x200001a4
 8004f60:	20000200 	.word	0x20000200

08004f64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4a07      	ldr	r2, [pc, #28]	; (8004f90 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4a06      	ldr	r2, [pc, #24]	; (8004f94 <vApplicationGetTimerTaskMemory+0x30>)
 8004f7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f82:	601a      	str	r2, [r3, #0]
}
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	20000400 	.word	0x20000400
 8004f94:	2000045c 	.word	0x2000045c

08004f98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f103 0208 	add.w	r2, r3, #8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f103 0208 	add.w	r2, r3, #8
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f103 0208 	add.w	r2, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr

08004fd6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr

08004fee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	601a      	str	r2, [r3, #0]
}
 800502a:	bf00      	nop
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800504a:	d103      	bne.n	8005054 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e00c      	b.n	800506e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3308      	adds	r3, #8
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	e002      	b.n	8005062 <vListInsert+0x2e>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	d2f6      	bcs.n	800505c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr

080050a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6892      	ldr	r2, [r2, #8]
 80050ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6852      	ldr	r2, [r2, #4]
 80050c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d103      	bne.n	80050d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	1e5a      	subs	r2, r3, #1
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr
	...

080050f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d109      	bne.n	8005120 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	e7fe      	b.n	800511e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005120:	f002 f822 	bl	8007168 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	68f9      	ldr	r1, [r7, #12]
 800512e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	441a      	add	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	3b01      	subs	r3, #1
 8005152:	68f9      	ldr	r1, [r7, #12]
 8005154:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005156:	fb01 f303 	mul.w	r3, r1, r3
 800515a:	441a      	add	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	22ff      	movs	r2, #255	; 0xff
 8005164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	22ff      	movs	r2, #255	; 0xff
 800516c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d114      	bne.n	80051a0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d01a      	beq.n	80051b4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3310      	adds	r3, #16
 8005182:	4618      	mov	r0, r3
 8005184:	f001 f962 	bl	800644c <xTaskRemoveFromEventList>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d012      	beq.n	80051b4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <xQueueGenericReset+0xcc>)
 8005190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	e009      	b.n	80051b4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3310      	adds	r3, #16
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fef7 	bl	8004f98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3324      	adds	r3, #36	; 0x24
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fef2 	bl	8004f98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051b4:	f002 f806 	bl	80071c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051b8:	2301      	movs	r3, #1
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	; 0x38
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d109      	bne.n	80051f0 <xQueueGenericCreateStatic+0x28>
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ee:	e7fe      	b.n	80051ee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <xQueueGenericCreateStatic+0x42>
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
 8005208:	e7fe      	b.n	8005208 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <xQueueGenericCreateStatic+0x4e>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <xQueueGenericCreateStatic+0x52>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueGenericCreateStatic+0x54>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d109      	bne.n	8005234 <xQueueGenericCreateStatic+0x6c>
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
 8005232:	e7fe      	b.n	8005232 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d102      	bne.n	8005240 <xQueueGenericCreateStatic+0x78>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <xQueueGenericCreateStatic+0x7c>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <xQueueGenericCreateStatic+0x7e>
 8005244:	2300      	movs	r3, #0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <xQueueGenericCreateStatic+0x96>
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	e7fe      	b.n	800525c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800525e:	2350      	movs	r3, #80	; 0x50
 8005260:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d009      	beq.n	800527c <xQueueGenericCreateStatic+0xb4>
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	e7fe      	b.n	800527a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00d      	beq.n	80052a2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800528e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	4613      	mov	r3, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 f842 	bl	8005326 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3730      	adds	r7, #48	; 0x30
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08a      	sub	sp, #40	; 0x28
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	4613      	mov	r3, r2
 80052b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <xQueueGenericCreate+0x28>
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	e7fe      	b.n	80052d2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d102      	bne.n	80052e0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	e004      	b.n	80052ea <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	fb02 f303 	mul.w	r3, r2, r3
 80052e8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3350      	adds	r3, #80	; 0x50
 80052ee:	4618      	mov	r0, r3
 80052f0:	f002 f830 	bl	8007354 <pvPortMalloc>
 80052f4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00f      	beq.n	800531c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	3350      	adds	r3, #80	; 0x50
 8005300:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800530a:	79fa      	ldrb	r2, [r7, #7]
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f805 	bl	8005326 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800531c:	69bb      	ldr	r3, [r7, #24]
	}
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	607a      	str	r2, [r7, #4]
 8005332:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d103      	bne.n	8005342 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e002      	b.n	8005348 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005354:	2101      	movs	r1, #1
 8005356:	69b8      	ldr	r0, [r7, #24]
 8005358:	f7ff fece 	bl	80050f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	78fa      	ldrb	r2, [r7, #3]
 8005360:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00e      	beq.n	8005398 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800538c:	2300      	movs	r3, #0
 800538e:	2200      	movs	r2, #0
 8005390:	2100      	movs	r1, #0
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f838 	bl	8005408 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053aa:	2301      	movs	r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	461a      	mov	r2, r3
 80053b6:	6939      	ldr	r1, [r7, #16]
 80053b8:	6978      	ldr	r0, [r7, #20]
 80053ba:	f7ff ff77 	bl	80052ac <xQueueGenericCreate>
 80053be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff ffd3 	bl	800536c <prvInitialiseMutex>

		return pxNewQueue;
 80053c6:	68fb      	ldr	r3, [r7, #12]
	}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	4603      	mov	r3, r0
 80053d8:	6039      	str	r1, [r7, #0]
 80053da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053dc:	2301      	movs	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2200      	movs	r2, #0
 80053ec:	6939      	ldr	r1, [r7, #16]
 80053ee:	6978      	ldr	r0, [r7, #20]
 80053f0:	f7ff feea 	bl	80051c8 <xQueueGenericCreateStatic>
 80053f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f7ff ffb8 	bl	800536c <prvInitialiseMutex>

		return pxNewQueue;
 80053fc:	68fb      	ldr	r3, [r7, #12]
	}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08e      	sub	sp, #56	; 0x38
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005416:	2300      	movs	r3, #0
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	2b00      	cmp	r3, #0
 8005422:	d109      	bne.n	8005438 <xQueueGenericSend+0x30>
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
 8005436:	e7fe      	b.n	8005436 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <xQueueGenericSend+0x3e>
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <xQueueGenericSend+0x42>
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <xQueueGenericSend+0x44>
 800544a:	2300      	movs	r3, #0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d109      	bne.n	8005464 <xQueueGenericSend+0x5c>
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
 8005462:	e7fe      	b.n	8005462 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d103      	bne.n	8005472 <xQueueGenericSend+0x6a>
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <xQueueGenericSend+0x6e>
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <xQueueGenericSend+0x70>
 8005476:	2300      	movs	r3, #0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d109      	bne.n	8005490 <xQueueGenericSend+0x88>
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	623b      	str	r3, [r7, #32]
 800548e:	e7fe      	b.n	800548e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005490:	f001 f996 	bl	80067c0 <xTaskGetSchedulerState>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d102      	bne.n	80054a0 <xQueueGenericSend+0x98>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <xQueueGenericSend+0x9c>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <xQueueGenericSend+0x9e>
 80054a4:	2300      	movs	r3, #0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d109      	bne.n	80054be <xQueueGenericSend+0xb6>
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	61fb      	str	r3, [r7, #28]
 80054bc:	e7fe      	b.n	80054bc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054be:	f001 fe53 	bl	8007168 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d302      	bcc.n	80054d4 <xQueueGenericSend+0xcc>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d129      	bne.n	8005528 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054da:	f000 f9ff 	bl	80058dc <prvCopyDataToQueue>
 80054de:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d010      	beq.n	800550a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	3324      	adds	r3, #36	; 0x24
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 ffad 	bl	800644c <xTaskRemoveFromEventList>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d013      	beq.n	8005520 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054f8:	4b3f      	ldr	r3, [pc, #252]	; (80055f8 <xQueueGenericSend+0x1f0>)
 80054fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	e00a      	b.n	8005520 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d007      	beq.n	8005520 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005510:	4b39      	ldr	r3, [pc, #228]	; (80055f8 <xQueueGenericSend+0x1f0>)
 8005512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005520:	f001 fe50 	bl	80071c4 <vPortExitCritical>
				return pdPASS;
 8005524:	2301      	movs	r3, #1
 8005526:	e063      	b.n	80055f0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800552e:	f001 fe49 	bl	80071c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005532:	2300      	movs	r3, #0
 8005534:	e05c      	b.n	80055f0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	2b00      	cmp	r3, #0
 800553a:	d106      	bne.n	800554a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800553c:	f107 0314 	add.w	r3, r7, #20
 8005540:	4618      	mov	r0, r3
 8005542:	f000 ffe5 	bl	8006510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005546:	2301      	movs	r3, #1
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800554a:	f001 fe3b 	bl	80071c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800554e:	f000 fd5d 	bl	800600c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005552:	f001 fe09 	bl	8007168 <vPortEnterCritical>
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800555c:	b25b      	sxtb	r3, r3
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005562:	d103      	bne.n	800556c <xQueueGenericSend+0x164>
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005572:	b25b      	sxtb	r3, r3
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005578:	d103      	bne.n	8005582 <xQueueGenericSend+0x17a>
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005582:	f001 fe1f 	bl	80071c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005586:	1d3a      	adds	r2, r7, #4
 8005588:	f107 0314 	add.w	r3, r7, #20
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f000 ffd4 	bl	800653c <xTaskCheckForTimeOut>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d124      	bne.n	80055e4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800559a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800559c:	f000 fa96 	bl	8005acc <prvIsQueueFull>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d018      	beq.n	80055d8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	3310      	adds	r3, #16
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	4611      	mov	r1, r2
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fefe 	bl	80063b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055b6:	f000 fa21 	bl	80059fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055ba:	f000 fd35 	bl	8006028 <xTaskResumeAll>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f47f af7c 	bne.w	80054be <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80055c6:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <xQueueGenericSend+0x1f0>)
 80055c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	e772      	b.n	80054be <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055da:	f000 fa0f 	bl	80059fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055de:	f000 fd23 	bl	8006028 <xTaskResumeAll>
 80055e2:	e76c      	b.n	80054be <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055e6:	f000 fa09 	bl	80059fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055ea:	f000 fd1d 	bl	8006028 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055ee:	2300      	movs	r3, #0
		}
	}
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3738      	adds	r7, #56	; 0x38
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08e      	sub	sp, #56	; 0x38
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d109      	bne.n	8005628 <xQueueGenericSendFromISR+0x2c>
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
 8005626:	e7fe      	b.n	8005626 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d103      	bne.n	8005636 <xQueueGenericSendFromISR+0x3a>
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <xQueueGenericSendFromISR+0x3e>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <xQueueGenericSendFromISR+0x40>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d109      	bne.n	8005654 <xQueueGenericSendFromISR+0x58>
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	623b      	str	r3, [r7, #32]
 8005652:	e7fe      	b.n	8005652 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d103      	bne.n	8005662 <xQueueGenericSendFromISR+0x66>
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <xQueueGenericSendFromISR+0x6a>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <xQueueGenericSendFromISR+0x6c>
 8005666:	2300      	movs	r3, #0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <xQueueGenericSendFromISR+0x84>
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	e7fe      	b.n	800567e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005680:	f001 fe2c 	bl	80072dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005684:	f3ef 8211 	mrs	r2, BASEPRI
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	61ba      	str	r2, [r7, #24]
 800569a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800569c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d302      	bcc.n	80056b2 <xQueueGenericSendFromISR+0xb6>
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d12c      	bne.n	800570c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056c2:	f000 f90b 	bl	80058dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ce:	d112      	bne.n	80056f6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d016      	beq.n	8005706 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	3324      	adds	r3, #36	; 0x24
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 feb5 	bl	800644c <xTaskRemoveFromEventList>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00e      	beq.n	8005706 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	e007      	b.n	8005706 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056fa:	3301      	adds	r3, #1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	b25a      	sxtb	r2, r3
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005706:	2301      	movs	r3, #1
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800570a:	e001      	b.n	8005710 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800570c:	2300      	movs	r3, #0
 800570e:	637b      	str	r3, [r7, #52]	; 0x34
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800571a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800571c:	4618      	mov	r0, r3
 800571e:	3738      	adds	r7, #56	; 0x38
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08c      	sub	sp, #48	; 0x30
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005730:	2300      	movs	r3, #0
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <xQueueReceive+0x2e>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	623b      	str	r3, [r7, #32]
 8005750:	e7fe      	b.n	8005750 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d103      	bne.n	8005760 <xQueueReceive+0x3c>
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <xQueueReceive+0x40>
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <xQueueReceive+0x42>
 8005764:	2300      	movs	r3, #0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <xQueueReceive+0x5a>
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	e7fe      	b.n	800577c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800577e:	f001 f81f 	bl	80067c0 <xTaskGetSchedulerState>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d102      	bne.n	800578e <xQueueReceive+0x6a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <xQueueReceive+0x6e>
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <xQueueReceive+0x70>
 8005792:	2300      	movs	r3, #0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d109      	bne.n	80057ac <xQueueReceive+0x88>
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	e7fe      	b.n	80057aa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80057ac:	f001 fcdc 	bl	8007168 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01f      	beq.n	80057fc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057c0:	f000 f8f6 	bl	80059b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	1e5a      	subs	r2, r3, #1
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00f      	beq.n	80057f4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	3310      	adds	r3, #16
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fe37 	bl	800644c <xTaskRemoveFromEventList>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d007      	beq.n	80057f4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057e4:	4b3c      	ldr	r3, [pc, #240]	; (80058d8 <xQueueReceive+0x1b4>)
 80057e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057f4:	f001 fce6 	bl	80071c4 <vPortExitCritical>
				return pdPASS;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e069      	b.n	80058d0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d103      	bne.n	800580a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005802:	f001 fcdf 	bl	80071c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005806:	2300      	movs	r3, #0
 8005808:	e062      	b.n	80058d0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d106      	bne.n	800581e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005810:	f107 0310 	add.w	r3, r7, #16
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fe7b 	bl	8006510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800581a:	2301      	movs	r3, #1
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800581e:	f001 fcd1 	bl	80071c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005822:	f000 fbf3 	bl	800600c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005826:	f001 fc9f 	bl	8007168 <vPortEnterCritical>
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005830:	b25b      	sxtb	r3, r3
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005836:	d103      	bne.n	8005840 <xQueueReceive+0x11c>
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005846:	b25b      	sxtb	r3, r3
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800584c:	d103      	bne.n	8005856 <xQueueReceive+0x132>
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005856:	f001 fcb5 	bl	80071c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800585a:	1d3a      	adds	r2, r7, #4
 800585c:	f107 0310 	add.w	r3, r7, #16
 8005860:	4611      	mov	r1, r2
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fe6a 	bl	800653c <xTaskCheckForTimeOut>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d123      	bne.n	80058b6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800586e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005870:	f000 f916 	bl	8005aa0 <prvIsQueueEmpty>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d017      	beq.n	80058aa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	3324      	adds	r3, #36	; 0x24
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	4611      	mov	r1, r2
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fd94 	bl	80063b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800588a:	f000 f8b7 	bl	80059fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800588e:	f000 fbcb 	bl	8006028 <xTaskResumeAll>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d189      	bne.n	80057ac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005898:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <xQueueReceive+0x1b4>)
 800589a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	e780      	b.n	80057ac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ac:	f000 f8a6 	bl	80059fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058b0:	f000 fbba 	bl	8006028 <xTaskResumeAll>
 80058b4:	e77a      	b.n	80057ac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058b8:	f000 f8a0 	bl	80059fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058bc:	f000 fbb4 	bl	8006028 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058c2:	f000 f8ed 	bl	8005aa0 <prvIsQueueEmpty>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f43f af6f 	beq.w	80057ac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3730      	adds	r7, #48	; 0x30
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	e000ed04 	.word	0xe000ed04

080058dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10d      	bne.n	8005916 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d14d      	bne.n	800599e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 ff78 	bl	80067fc <xTaskPriorityDisinherit>
 800590c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	605a      	str	r2, [r3, #4]
 8005914:	e043      	b.n	800599e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d119      	bne.n	8005950 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6898      	ldr	r0, [r3, #8]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	461a      	mov	r2, r3
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	f002 fdd8 	bl	80084dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	441a      	add	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	429a      	cmp	r2, r3
 8005944:	d32b      	bcc.n	800599e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	609a      	str	r2, [r3, #8]
 800594e:	e026      	b.n	800599e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68d8      	ldr	r0, [r3, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	461a      	mov	r2, r3
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	f002 fdbe 	bl	80084dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	425b      	negs	r3, r3
 800596a:	441a      	add	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d207      	bcs.n	800598c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	425b      	negs	r3, r3
 8005986:	441a      	add	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d105      	bne.n	800599e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	3b01      	subs	r3, #1
 800599c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059a6:	697b      	ldr	r3, [r7, #20]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d018      	beq.n	80059f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	441a      	add	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d303      	bcc.n	80059e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68d9      	ldr	r1, [r3, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	461a      	mov	r2, r3
 80059ee:	6838      	ldr	r0, [r7, #0]
 80059f0:	f002 fd74 	bl	80084dc <memcpy>
	}
}
 80059f4:	bf00      	nop
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a04:	f001 fbb0 	bl	8007168 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a10:	e011      	b.n	8005a36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d012      	beq.n	8005a40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3324      	adds	r3, #36	; 0x24
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fd14 	bl	800644c <xTaskRemoveFromEventList>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a2a:	f000 fde7 	bl	80065fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	dce9      	bgt.n	8005a12 <prvUnlockQueue+0x16>
 8005a3e:	e000      	b.n	8005a42 <prvUnlockQueue+0x46>
					break;
 8005a40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	22ff      	movs	r2, #255	; 0xff
 8005a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a4a:	f001 fbbb 	bl	80071c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a4e:	f001 fb8b 	bl	8007168 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a5a:	e011      	b.n	8005a80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d012      	beq.n	8005a8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3310      	adds	r3, #16
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fcef 	bl	800644c <xTaskRemoveFromEventList>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a74:	f000 fdc2 	bl	80065fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	dce9      	bgt.n	8005a5c <prvUnlockQueue+0x60>
 8005a88:	e000      	b.n	8005a8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	22ff      	movs	r2, #255	; 0xff
 8005a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a94:	f001 fb96 	bl	80071c4 <vPortExitCritical>
}
 8005a98:	bf00      	nop
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005aa8:	f001 fb5e 	bl	8007168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	e001      	b.n	8005abe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005abe:	f001 fb81 	bl	80071c4 <vPortExitCritical>

	return xReturn;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ad4:	f001 fb48 	bl	8007168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d102      	bne.n	8005aea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	e001      	b.n	8005aee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005aee:	f001 fb69 	bl	80071c4 <vPortExitCritical>

	return xReturn;
 8005af2:	68fb      	ldr	r3, [r7, #12]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	e014      	b.n	8005b36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b0c:	4a0e      	ldr	r2, [pc, #56]	; (8005b48 <vQueueAddToRegistry+0x4c>)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10b      	bne.n	8005b30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b18:	490b      	ldr	r1, [pc, #44]	; (8005b48 <vQueueAddToRegistry+0x4c>)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b22:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <vQueueAddToRegistry+0x4c>)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4413      	add	r3, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b2e:	e005      	b.n	8005b3c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3301      	adds	r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b07      	cmp	r3, #7
 8005b3a:	d9e7      	bls.n	8005b0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b3c:	bf00      	nop
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	20001cd0 	.word	0x20001cd0

08005b4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b5c:	f001 fb04 	bl	8007168 <vPortEnterCritical>
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b66:	b25b      	sxtb	r3, r3
 8005b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b6c:	d103      	bne.n	8005b76 <vQueueWaitForMessageRestricted+0x2a>
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b7c:	b25b      	sxtb	r3, r3
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b82:	d103      	bne.n	8005b8c <vQueueWaitForMessageRestricted+0x40>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b8c:	f001 fb1a 	bl	80071c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d106      	bne.n	8005ba6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	3324      	adds	r3, #36	; 0x24
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 fc29 	bl	80063f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ba6:	6978      	ldr	r0, [r7, #20]
 8005ba8:	f7ff ff28 	bl	80059fc <prvUnlockQueue>
	}
 8005bac:	bf00      	nop
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08e      	sub	sp, #56	; 0x38
 8005bb8:	af04      	add	r7, sp, #16
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <xTaskCreateStatic+0x28>
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	623b      	str	r3, [r7, #32]
 8005bda:	e7fe      	b.n	8005bda <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <xTaskCreateStatic+0x42>
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	e7fe      	b.n	8005bf4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bf6:	235c      	movs	r3, #92	; 0x5c
 8005bf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	2b5c      	cmp	r3, #92	; 0x5c
 8005bfe:	d009      	beq.n	8005c14 <xTaskCreateStatic+0x60>
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	e7fe      	b.n	8005c12 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01e      	beq.n	8005c58 <xTaskCreateStatic+0xa4>
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d01b      	beq.n	8005c58 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c32:	2300      	movs	r3, #0
 8005c34:	9303      	str	r3, [sp, #12]
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	9302      	str	r3, [sp, #8]
 8005c3a:	f107 0314 	add.w	r3, r7, #20
 8005c3e:	9301      	str	r3, [sp, #4]
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 f850 	bl	8005cf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c52:	f000 f8d3 	bl	8005dfc <prvAddNewTaskToReadyList>
 8005c56:	e001      	b.n	8005c5c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c5c:	697b      	ldr	r3, [r7, #20]
	}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3728      	adds	r7, #40	; 0x28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b08c      	sub	sp, #48	; 0x30
 8005c6a:	af04      	add	r7, sp, #16
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	603b      	str	r3, [r7, #0]
 8005c72:	4613      	mov	r3, r2
 8005c74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 fb6a 	bl	8007354 <pvPortMalloc>
 8005c80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00e      	beq.n	8005ca6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005c88:	205c      	movs	r0, #92	; 0x5c
 8005c8a:	f001 fb63 	bl	8007354 <pvPortMalloc>
 8005c8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c9c:	e005      	b.n	8005caa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c9e:	6978      	ldr	r0, [r7, #20]
 8005ca0:	f001 fc1a 	bl	80074d8 <vPortFree>
 8005ca4:	e001      	b.n	8005caa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d017      	beq.n	8005ce0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005cb8:	88fa      	ldrh	r2, [r7, #6]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	9303      	str	r3, [sp, #12]
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	9302      	str	r3, [sp, #8]
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	9301      	str	r3, [sp, #4]
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 f80e 	bl	8005cf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cd4:	69f8      	ldr	r0, [r7, #28]
 8005cd6:	f000 f891 	bl	8005dfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	61bb      	str	r3, [r7, #24]
 8005cde:	e002      	b.n	8005ce6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ce4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	461a      	mov	r2, r3
 8005d08:	21a5      	movs	r1, #165	; 0xa5
 8005d0a:	f002 fbf2 	bl	80084f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f023 0307 	bic.w	r3, r3, #7
 8005d26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <prvInitialiseNewTask+0x56>
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	e7fe      	b.n	8005d44 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d46:	2300      	movs	r3, #0
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	e012      	b.n	8005d72 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	4413      	add	r3, r2
 8005d52:	7819      	ldrb	r1, [r3, #0]
 8005d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	4413      	add	r3, r2
 8005d5a:	3334      	adds	r3, #52	; 0x34
 8005d5c:	460a      	mov	r2, r1
 8005d5e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	4413      	add	r3, r2
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d006      	beq.n	8005d7a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	61fb      	str	r3, [r7, #28]
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	2b0f      	cmp	r3, #15
 8005d76:	d9e9      	bls.n	8005d4c <prvInitialiseNewTask+0x5c>
 8005d78:	e000      	b.n	8005d7c <prvInitialiseNewTask+0x8c>
		{
			break;
 8005d7a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	2b37      	cmp	r3, #55	; 0x37
 8005d88:	d901      	bls.n	8005d8e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d8a:	2337      	movs	r3, #55	; 0x37
 8005d8c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d98:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	3304      	adds	r3, #4
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff f916 	bl	8004fd6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	3318      	adds	r3, #24
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff f911 	bl	8004fd6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	2200      	movs	r2, #0
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	69b8      	ldr	r0, [r7, #24]
 8005dde:	f001 f8d7 	bl	8006f90 <pxPortInitialiseStack>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005df4:	bf00      	nop
 8005df6:	3720      	adds	r7, #32
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e04:	f001 f9b0 	bl	8007168 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e08:	4b2d      	ldr	r3, [pc, #180]	; (8005ec0 <prvAddNewTaskToReadyList+0xc4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	4a2c      	ldr	r2, [pc, #176]	; (8005ec0 <prvAddNewTaskToReadyList+0xc4>)
 8005e10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e12:	4b2c      	ldr	r3, [pc, #176]	; (8005ec4 <prvAddNewTaskToReadyList+0xc8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e1a:	4a2a      	ldr	r2, [pc, #168]	; (8005ec4 <prvAddNewTaskToReadyList+0xc8>)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e20:	4b27      	ldr	r3, [pc, #156]	; (8005ec0 <prvAddNewTaskToReadyList+0xc4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d110      	bne.n	8005e4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e28:	f000 fc0c 	bl	8006644 <prvInitialiseTaskLists>
 8005e2c:	e00d      	b.n	8005e4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e2e:	4b26      	ldr	r3, [pc, #152]	; (8005ec8 <prvAddNewTaskToReadyList+0xcc>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d109      	bne.n	8005e4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e36:	4b23      	ldr	r3, [pc, #140]	; (8005ec4 <prvAddNewTaskToReadyList+0xc8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d802      	bhi.n	8005e4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e44:	4a1f      	ldr	r2, [pc, #124]	; (8005ec4 <prvAddNewTaskToReadyList+0xc8>)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e4a:	4b20      	ldr	r3, [pc, #128]	; (8005ecc <prvAddNewTaskToReadyList+0xd0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	4a1e      	ldr	r2, [pc, #120]	; (8005ecc <prvAddNewTaskToReadyList+0xd0>)
 8005e52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e54:	4b1d      	ldr	r3, [pc, #116]	; (8005ecc <prvAddNewTaskToReadyList+0xd0>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e60:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <prvAddNewTaskToReadyList+0xd4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d903      	bls.n	8005e70 <prvAddNewTaskToReadyList+0x74>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	4a18      	ldr	r2, [pc, #96]	; (8005ed0 <prvAddNewTaskToReadyList+0xd4>)
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4a15      	ldr	r2, [pc, #84]	; (8005ed4 <prvAddNewTaskToReadyList+0xd8>)
 8005e7e:	441a      	add	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4619      	mov	r1, r3
 8005e86:	4610      	mov	r0, r2
 8005e88:	f7ff f8b1 	bl	8004fee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e8c:	f001 f99a 	bl	80071c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e90:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <prvAddNewTaskToReadyList+0xcc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00e      	beq.n	8005eb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <prvAddNewTaskToReadyList+0xc8>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d207      	bcs.n	8005eb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <prvAddNewTaskToReadyList+0xdc>)
 8005ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eb6:	bf00      	nop
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000d30 	.word	0x20000d30
 8005ec4:	2000085c 	.word	0x2000085c
 8005ec8:	20000d3c 	.word	0x20000d3c
 8005ecc:	20000d4c 	.word	0x20000d4c
 8005ed0:	20000d38 	.word	0x20000d38
 8005ed4:	20000860 	.word	0x20000860
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d016      	beq.n	8005f1c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005eee:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <vTaskDelay+0x60>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d009      	beq.n	8005f0a <vTaskDelay+0x2e>
 8005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	60bb      	str	r3, [r7, #8]
 8005f08:	e7fe      	b.n	8005f08 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005f0a:	f000 f87f 	bl	800600c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f0e:	2100      	movs	r1, #0
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fcdf 	bl	80068d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f16:	f000 f887 	bl	8006028 <xTaskResumeAll>
 8005f1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d107      	bne.n	8005f32 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005f22:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <vTaskDelay+0x64>)
 8005f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000d58 	.word	0x20000d58
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08a      	sub	sp, #40	; 0x28
 8005f48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f52:	463a      	mov	r2, r7
 8005f54:	1d39      	adds	r1, r7, #4
 8005f56:	f107 0308 	add.w	r3, r7, #8
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe ffea 	bl	8004f34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f60:	6839      	ldr	r1, [r7, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	9202      	str	r2, [sp, #8]
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	460a      	mov	r2, r1
 8005f72:	4920      	ldr	r1, [pc, #128]	; (8005ff4 <vTaskStartScheduler+0xb0>)
 8005f74:	4820      	ldr	r0, [pc, #128]	; (8005ff8 <vTaskStartScheduler+0xb4>)
 8005f76:	f7ff fe1d 	bl	8005bb4 <xTaskCreateStatic>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	4b1f      	ldr	r3, [pc, #124]	; (8005ffc <vTaskStartScheduler+0xb8>)
 8005f7e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f80:	4b1e      	ldr	r3, [pc, #120]	; (8005ffc <vTaskStartScheduler+0xb8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	e001      	b.n	8005f92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d102      	bne.n	8005f9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f98:	f000 fcf0 	bl	800697c <xTimerCreateTimerTask>
 8005f9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d115      	bne.n	8005fd0 <vTaskStartScheduler+0x8c>
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005fb6:	4b12      	ldr	r3, [pc, #72]	; (8006000 <vTaskStartScheduler+0xbc>)
 8005fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fbe:	4b11      	ldr	r3, [pc, #68]	; (8006004 <vTaskStartScheduler+0xc0>)
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005fc4:	4b10      	ldr	r3, [pc, #64]	; (8006008 <vTaskStartScheduler+0xc4>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fca:	f001 f85d 	bl	8007088 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fce:	e00d      	b.n	8005fec <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fd6:	d109      	bne.n	8005fec <vTaskStartScheduler+0xa8>
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	e7fe      	b.n	8005fea <vTaskStartScheduler+0xa6>
}
 8005fec:	bf00      	nop
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	08008530 	.word	0x08008530
 8005ff8:	08006615 	.word	0x08006615
 8005ffc:	20000d54 	.word	0x20000d54
 8006000:	20000d50 	.word	0x20000d50
 8006004:	20000d3c 	.word	0x20000d3c
 8006008:	20000d34 	.word	0x20000d34

0800600c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006010:	4b04      	ldr	r3, [pc, #16]	; (8006024 <vTaskSuspendAll+0x18>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3301      	adds	r3, #1
 8006016:	4a03      	ldr	r2, [pc, #12]	; (8006024 <vTaskSuspendAll+0x18>)
 8006018:	6013      	str	r3, [r2, #0]
}
 800601a:	bf00      	nop
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20000d58 	.word	0x20000d58

08006028 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006032:	2300      	movs	r3, #0
 8006034:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006036:	4b41      	ldr	r3, [pc, #260]	; (800613c <xTaskResumeAll+0x114>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <xTaskResumeAll+0x2a>
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	e7fe      	b.n	8006050 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006052:	f001 f889 	bl	8007168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006056:	4b39      	ldr	r3, [pc, #228]	; (800613c <xTaskResumeAll+0x114>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3b01      	subs	r3, #1
 800605c:	4a37      	ldr	r2, [pc, #220]	; (800613c <xTaskResumeAll+0x114>)
 800605e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006060:	4b36      	ldr	r3, [pc, #216]	; (800613c <xTaskResumeAll+0x114>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d162      	bne.n	800612e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006068:	4b35      	ldr	r3, [pc, #212]	; (8006140 <xTaskResumeAll+0x118>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d05e      	beq.n	800612e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006070:	e02f      	b.n	80060d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006072:	4b34      	ldr	r3, [pc, #208]	; (8006144 <xTaskResumeAll+0x11c>)
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3318      	adds	r3, #24
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff f810 	bl	80050a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3304      	adds	r3, #4
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff f80b 	bl	80050a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006092:	4b2d      	ldr	r3, [pc, #180]	; (8006148 <xTaskResumeAll+0x120>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d903      	bls.n	80060a2 <xTaskResumeAll+0x7a>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	4a2a      	ldr	r2, [pc, #168]	; (8006148 <xTaskResumeAll+0x120>)
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4a27      	ldr	r2, [pc, #156]	; (800614c <xTaskResumeAll+0x124>)
 80060b0:	441a      	add	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f7fe ff98 	bl	8004fee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c2:	4b23      	ldr	r3, [pc, #140]	; (8006150 <xTaskResumeAll+0x128>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d302      	bcc.n	80060d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80060cc:	4b21      	ldr	r3, [pc, #132]	; (8006154 <xTaskResumeAll+0x12c>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060d2:	4b1c      	ldr	r3, [pc, #112]	; (8006144 <xTaskResumeAll+0x11c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1cb      	bne.n	8006072 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060e0:	f000 fb4a 	bl	8006778 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060e4:	4b1c      	ldr	r3, [pc, #112]	; (8006158 <xTaskResumeAll+0x130>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d010      	beq.n	8006112 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060f0:	f000 f844 	bl	800617c <xTaskIncrementTick>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80060fa:	4b16      	ldr	r3, [pc, #88]	; (8006154 <xTaskResumeAll+0x12c>)
 80060fc:	2201      	movs	r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3b01      	subs	r3, #1
 8006104:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1f1      	bne.n	80060f0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800610c:	4b12      	ldr	r3, [pc, #72]	; (8006158 <xTaskResumeAll+0x130>)
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006112:	4b10      	ldr	r3, [pc, #64]	; (8006154 <xTaskResumeAll+0x12c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800611a:	2301      	movs	r3, #1
 800611c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800611e:	4b0f      	ldr	r3, [pc, #60]	; (800615c <xTaskResumeAll+0x134>)
 8006120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800612e:	f001 f849 	bl	80071c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006132:	68bb      	ldr	r3, [r7, #8]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000d58 	.word	0x20000d58
 8006140:	20000d30 	.word	0x20000d30
 8006144:	20000cf0 	.word	0x20000cf0
 8006148:	20000d38 	.word	0x20000d38
 800614c:	20000860 	.word	0x20000860
 8006150:	2000085c 	.word	0x2000085c
 8006154:	20000d44 	.word	0x20000d44
 8006158:	20000d40 	.word	0x20000d40
 800615c:	e000ed04 	.word	0xe000ed04

08006160 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006166:	4b04      	ldr	r3, [pc, #16]	; (8006178 <xTaskGetTickCount+0x18>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800616c:	687b      	ldr	r3, [r7, #4]
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	bc80      	pop	{r7}
 8006176:	4770      	bx	lr
 8006178:	20000d34 	.word	0x20000d34

0800617c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006182:	2300      	movs	r3, #0
 8006184:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006186:	4b51      	ldr	r3, [pc, #324]	; (80062cc <xTaskIncrementTick+0x150>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	f040 808d 	bne.w	80062aa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006190:	4b4f      	ldr	r3, [pc, #316]	; (80062d0 <xTaskIncrementTick+0x154>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006198:	4a4d      	ldr	r2, [pc, #308]	; (80062d0 <xTaskIncrementTick+0x154>)
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d11f      	bne.n	80061e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80061a4:	4b4b      	ldr	r3, [pc, #300]	; (80062d4 <xTaskIncrementTick+0x158>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d009      	beq.n	80061c2 <xTaskIncrementTick+0x46>
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	e7fe      	b.n	80061c0 <xTaskIncrementTick+0x44>
 80061c2:	4b44      	ldr	r3, [pc, #272]	; (80062d4 <xTaskIncrementTick+0x158>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	4b43      	ldr	r3, [pc, #268]	; (80062d8 <xTaskIncrementTick+0x15c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a41      	ldr	r2, [pc, #260]	; (80062d4 <xTaskIncrementTick+0x158>)
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	4a41      	ldr	r2, [pc, #260]	; (80062d8 <xTaskIncrementTick+0x15c>)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	4b41      	ldr	r3, [pc, #260]	; (80062dc <xTaskIncrementTick+0x160>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3301      	adds	r3, #1
 80061dc:	4a3f      	ldr	r2, [pc, #252]	; (80062dc <xTaskIncrementTick+0x160>)
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	f000 faca 	bl	8006778 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061e4:	4b3e      	ldr	r3, [pc, #248]	; (80062e0 <xTaskIncrementTick+0x164>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d34e      	bcc.n	800628c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ee:	4b39      	ldr	r3, [pc, #228]	; (80062d4 <xTaskIncrementTick+0x158>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <xTaskIncrementTick+0x80>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e000      	b.n	80061fe <xTaskIncrementTick+0x82>
 80061fc:	2300      	movs	r3, #0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d004      	beq.n	800620c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006202:	4b37      	ldr	r3, [pc, #220]	; (80062e0 <xTaskIncrementTick+0x164>)
 8006204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006208:	601a      	str	r2, [r3, #0]
					break;
 800620a:	e03f      	b.n	800628c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800620c:	4b31      	ldr	r3, [pc, #196]	; (80062d4 <xTaskIncrementTick+0x158>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d203      	bcs.n	800622c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006224:	4a2e      	ldr	r2, [pc, #184]	; (80062e0 <xTaskIncrementTick+0x164>)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6013      	str	r3, [r2, #0]
						break;
 800622a:	e02f      	b.n	800628c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	3304      	adds	r3, #4
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe ff37 	bl	80050a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	3318      	adds	r3, #24
 8006242:	4618      	mov	r0, r3
 8006244:	f7fe ff2e 	bl	80050a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624c:	4b25      	ldr	r3, [pc, #148]	; (80062e4 <xTaskIncrementTick+0x168>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d903      	bls.n	800625c <xTaskIncrementTick+0xe0>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	4a22      	ldr	r2, [pc, #136]	; (80062e4 <xTaskIncrementTick+0x168>)
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4a1f      	ldr	r2, [pc, #124]	; (80062e8 <xTaskIncrementTick+0x16c>)
 800626a:	441a      	add	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	3304      	adds	r3, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f7fe febb 	bl	8004fee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627c:	4b1b      	ldr	r3, [pc, #108]	; (80062ec <xTaskIncrementTick+0x170>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006282:	429a      	cmp	r2, r3
 8006284:	d3b3      	bcc.n	80061ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006286:	2301      	movs	r3, #1
 8006288:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800628a:	e7b0      	b.n	80061ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800628c:	4b17      	ldr	r3, [pc, #92]	; (80062ec <xTaskIncrementTick+0x170>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006292:	4915      	ldr	r1, [pc, #84]	; (80062e8 <xTaskIncrementTick+0x16c>)
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d907      	bls.n	80062b4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80062a4:	2301      	movs	r3, #1
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	e004      	b.n	80062b4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80062aa:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <xTaskIncrementTick+0x174>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3301      	adds	r3, #1
 80062b0:	4a0f      	ldr	r2, [pc, #60]	; (80062f0 <xTaskIncrementTick+0x174>)
 80062b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80062b4:	4b0f      	ldr	r3, [pc, #60]	; (80062f4 <xTaskIncrementTick+0x178>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80062bc:	2301      	movs	r3, #1
 80062be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80062c0:	697b      	ldr	r3, [r7, #20]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000d58 	.word	0x20000d58
 80062d0:	20000d34 	.word	0x20000d34
 80062d4:	20000ce8 	.word	0x20000ce8
 80062d8:	20000cec 	.word	0x20000cec
 80062dc:	20000d48 	.word	0x20000d48
 80062e0:	20000d50 	.word	0x20000d50
 80062e4:	20000d38 	.word	0x20000d38
 80062e8:	20000860 	.word	0x20000860
 80062ec:	2000085c 	.word	0x2000085c
 80062f0:	20000d40 	.word	0x20000d40
 80062f4:	20000d44 	.word	0x20000d44

080062f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062fe:	4b27      	ldr	r3, [pc, #156]	; (800639c <vTaskSwitchContext+0xa4>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006306:	4b26      	ldr	r3, [pc, #152]	; (80063a0 <vTaskSwitchContext+0xa8>)
 8006308:	2201      	movs	r2, #1
 800630a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800630c:	e040      	b.n	8006390 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800630e:	4b24      	ldr	r3, [pc, #144]	; (80063a0 <vTaskSwitchContext+0xa8>)
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006314:	4b23      	ldr	r3, [pc, #140]	; (80063a4 <vTaskSwitchContext+0xac>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	e00f      	b.n	800633c <vTaskSwitchContext+0x44>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <vTaskSwitchContext+0x3e>
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	607b      	str	r3, [r7, #4]
 8006334:	e7fe      	b.n	8006334 <vTaskSwitchContext+0x3c>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3b01      	subs	r3, #1
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	491a      	ldr	r1, [pc, #104]	; (80063a8 <vTaskSwitchContext+0xb0>)
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	440b      	add	r3, r1
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0e5      	beq.n	800631c <vTaskSwitchContext+0x24>
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4613      	mov	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4a13      	ldr	r2, [pc, #76]	; (80063a8 <vTaskSwitchContext+0xb0>)
 800635c:	4413      	add	r3, r2
 800635e:	60bb      	str	r3, [r7, #8]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	605a      	str	r2, [r3, #4]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	3308      	adds	r3, #8
 8006372:	429a      	cmp	r2, r3
 8006374:	d104      	bne.n	8006380 <vTaskSwitchContext+0x88>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	605a      	str	r2, [r3, #4]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	4a09      	ldr	r2, [pc, #36]	; (80063ac <vTaskSwitchContext+0xb4>)
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	4a06      	ldr	r2, [pc, #24]	; (80063a4 <vTaskSwitchContext+0xac>)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6013      	str	r3, [r2, #0]
}
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	bc80      	pop	{r7}
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	20000d58 	.word	0x20000d58
 80063a0:	20000d44 	.word	0x20000d44
 80063a4:	20000d38 	.word	0x20000d38
 80063a8:	20000860 	.word	0x20000860
 80063ac:	2000085c 	.word	0x2000085c

080063b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d109      	bne.n	80063d4 <vTaskPlaceOnEventList+0x24>
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e7fe      	b.n	80063d2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063d4:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <vTaskPlaceOnEventList+0x44>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3318      	adds	r3, #24
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7fe fe29 	bl	8005034 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063e2:	2101      	movs	r1, #1
 80063e4:	6838      	ldr	r0, [r7, #0]
 80063e6:	f000 fa75 	bl	80068d4 <prvAddCurrentTaskToDelayedList>
}
 80063ea:	bf00      	nop
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	2000085c 	.word	0x2000085c

080063f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <vTaskPlaceOnEventListRestricted+0x26>
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	e7fe      	b.n	800641c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800641e:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <vTaskPlaceOnEventListRestricted+0x50>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3318      	adds	r3, #24
 8006424:	4619      	mov	r1, r3
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7fe fde1 	bl	8004fee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006436:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	68b8      	ldr	r0, [r7, #8]
 800643c:	f000 fa4a 	bl	80068d4 <prvAddCurrentTaskToDelayedList>
	}
 8006440:	bf00      	nop
 8006442:	3718      	adds	r7, #24
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	2000085c 	.word	0x2000085c

0800644c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d109      	bne.n	8006476 <xTaskRemoveFromEventList+0x2a>
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	e7fe      	b.n	8006474 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	3318      	adds	r3, #24
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe fe12 	bl	80050a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006480:	4b1d      	ldr	r3, [pc, #116]	; (80064f8 <xTaskRemoveFromEventList+0xac>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d11d      	bne.n	80064c4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	3304      	adds	r3, #4
 800648c:	4618      	mov	r0, r3
 800648e:	f7fe fe09 	bl	80050a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006496:	4b19      	ldr	r3, [pc, #100]	; (80064fc <xTaskRemoveFromEventList+0xb0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d903      	bls.n	80064a6 <xTaskRemoveFromEventList+0x5a>
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a2:	4a16      	ldr	r2, [pc, #88]	; (80064fc <xTaskRemoveFromEventList+0xb0>)
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4a13      	ldr	r2, [pc, #76]	; (8006500 <xTaskRemoveFromEventList+0xb4>)
 80064b4:	441a      	add	r2, r3
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	3304      	adds	r3, #4
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f7fe fd96 	bl	8004fee <vListInsertEnd>
 80064c2:	e005      	b.n	80064d0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	3318      	adds	r3, #24
 80064c8:	4619      	mov	r1, r3
 80064ca:	480e      	ldr	r0, [pc, #56]	; (8006504 <xTaskRemoveFromEventList+0xb8>)
 80064cc:	f7fe fd8f 	bl	8004fee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d4:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <xTaskRemoveFromEventList+0xbc>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064da:	429a      	cmp	r2, r3
 80064dc:	d905      	bls.n	80064ea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064de:	2301      	movs	r3, #1
 80064e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064e2:	4b0a      	ldr	r3, [pc, #40]	; (800650c <xTaskRemoveFromEventList+0xc0>)
 80064e4:	2201      	movs	r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	e001      	b.n	80064ee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80064ee:	697b      	ldr	r3, [r7, #20]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20000d58 	.word	0x20000d58
 80064fc:	20000d38 	.word	0x20000d38
 8006500:	20000860 	.word	0x20000860
 8006504:	20000cf0 	.word	0x20000cf0
 8006508:	2000085c 	.word	0x2000085c
 800650c:	20000d44 	.word	0x20000d44

08006510 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <vTaskInternalSetTimeOutState+0x24>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006520:	4b05      	ldr	r3, [pc, #20]	; (8006538 <vTaskInternalSetTimeOutState+0x28>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	605a      	str	r2, [r3, #4]
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000d48 	.word	0x20000d48
 8006538:	20000d34 	.word	0x20000d34

0800653c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d109      	bne.n	8006560 <xTaskCheckForTimeOut+0x24>
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	e7fe      	b.n	800655e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <xTaskCheckForTimeOut+0x3e>
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e7fe      	b.n	8006578 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800657a:	f000 fdf5 	bl	8007168 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800657e:	4b1d      	ldr	r3, [pc, #116]	; (80065f4 <xTaskCheckForTimeOut+0xb8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006596:	d102      	bne.n	800659e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006598:	2300      	movs	r3, #0
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	e023      	b.n	80065e6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4b15      	ldr	r3, [pc, #84]	; (80065f8 <xTaskCheckForTimeOut+0xbc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d007      	beq.n	80065ba <xTaskCheckForTimeOut+0x7e>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d302      	bcc.n	80065ba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065b4:	2301      	movs	r3, #1
 80065b6:	61fb      	str	r3, [r7, #28]
 80065b8:	e015      	b.n	80065e6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d20b      	bcs.n	80065dc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	1ad2      	subs	r2, r2, r3
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff ff9d 	bl	8006510 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	e004      	b.n	80065e6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065e2:	2301      	movs	r3, #1
 80065e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065e6:	f000 fded 	bl	80071c4 <vPortExitCritical>

	return xReturn;
 80065ea:	69fb      	ldr	r3, [r7, #28]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3720      	adds	r7, #32
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	20000d34 	.word	0x20000d34
 80065f8:	20000d48 	.word	0x20000d48

080065fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006600:	4b03      	ldr	r3, [pc, #12]	; (8006610 <vTaskMissedYield+0x14>)
 8006602:	2201      	movs	r2, #1
 8006604:	601a      	str	r2, [r3, #0]
}
 8006606:	bf00      	nop
 8006608:	46bd      	mov	sp, r7
 800660a:	bc80      	pop	{r7}
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	20000d44 	.word	0x20000d44

08006614 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800661c:	f000 f852 	bl	80066c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <prvIdleTask+0x28>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d9f9      	bls.n	800661c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006628:	4b05      	ldr	r3, [pc, #20]	; (8006640 <prvIdleTask+0x2c>)
 800662a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006638:	e7f0      	b.n	800661c <prvIdleTask+0x8>
 800663a:	bf00      	nop
 800663c:	20000860 	.word	0x20000860
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800664a:	2300      	movs	r3, #0
 800664c:	607b      	str	r3, [r7, #4]
 800664e:	e00c      	b.n	800666a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4a12      	ldr	r2, [pc, #72]	; (80066a4 <prvInitialiseTaskLists+0x60>)
 800665c:	4413      	add	r3, r2
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fc9a 	bl	8004f98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3301      	adds	r3, #1
 8006668:	607b      	str	r3, [r7, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b37      	cmp	r3, #55	; 0x37
 800666e:	d9ef      	bls.n	8006650 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006670:	480d      	ldr	r0, [pc, #52]	; (80066a8 <prvInitialiseTaskLists+0x64>)
 8006672:	f7fe fc91 	bl	8004f98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006676:	480d      	ldr	r0, [pc, #52]	; (80066ac <prvInitialiseTaskLists+0x68>)
 8006678:	f7fe fc8e 	bl	8004f98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800667c:	480c      	ldr	r0, [pc, #48]	; (80066b0 <prvInitialiseTaskLists+0x6c>)
 800667e:	f7fe fc8b 	bl	8004f98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006682:	480c      	ldr	r0, [pc, #48]	; (80066b4 <prvInitialiseTaskLists+0x70>)
 8006684:	f7fe fc88 	bl	8004f98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006688:	480b      	ldr	r0, [pc, #44]	; (80066b8 <prvInitialiseTaskLists+0x74>)
 800668a:	f7fe fc85 	bl	8004f98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800668e:	4b0b      	ldr	r3, [pc, #44]	; (80066bc <prvInitialiseTaskLists+0x78>)
 8006690:	4a05      	ldr	r2, [pc, #20]	; (80066a8 <prvInitialiseTaskLists+0x64>)
 8006692:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006694:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <prvInitialiseTaskLists+0x7c>)
 8006696:	4a05      	ldr	r2, [pc, #20]	; (80066ac <prvInitialiseTaskLists+0x68>)
 8006698:	601a      	str	r2, [r3, #0]
}
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000860 	.word	0x20000860
 80066a8:	20000cc0 	.word	0x20000cc0
 80066ac:	20000cd4 	.word	0x20000cd4
 80066b0:	20000cf0 	.word	0x20000cf0
 80066b4:	20000d04 	.word	0x20000d04
 80066b8:	20000d1c 	.word	0x20000d1c
 80066bc:	20000ce8 	.word	0x20000ce8
 80066c0:	20000cec 	.word	0x20000cec

080066c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066ca:	e019      	b.n	8006700 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066cc:	f000 fd4c 	bl	8007168 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80066d0:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <prvCheckTasksWaitingTermination+0x4c>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3304      	adds	r3, #4
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe fce1 	bl	80050a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066e2:	4b0c      	ldr	r3, [pc, #48]	; (8006714 <prvCheckTasksWaitingTermination+0x50>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	4a0a      	ldr	r2, [pc, #40]	; (8006714 <prvCheckTasksWaitingTermination+0x50>)
 80066ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <prvCheckTasksWaitingTermination+0x54>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	4a09      	ldr	r2, [pc, #36]	; (8006718 <prvCheckTasksWaitingTermination+0x54>)
 80066f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066f6:	f000 fd65 	bl	80071c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f80e 	bl	800671c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006700:	4b05      	ldr	r3, [pc, #20]	; (8006718 <prvCheckTasksWaitingTermination+0x54>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e1      	bne.n	80066cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006708:	bf00      	nop
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20000d04 	.word	0x20000d04
 8006714:	20000d30 	.word	0x20000d30
 8006718:	20000d18 	.word	0x20000d18

0800671c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800672a:	2b00      	cmp	r3, #0
 800672c:	d108      	bne.n	8006740 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fed0 	bl	80074d8 <vPortFree>
				vPortFree( pxTCB );
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fecd 	bl	80074d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800673e:	e017      	b.n	8006770 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006746:	2b01      	cmp	r3, #1
 8006748:	d103      	bne.n	8006752 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fec4 	bl	80074d8 <vPortFree>
	}
 8006750:	e00e      	b.n	8006770 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006758:	2b02      	cmp	r3, #2
 800675a:	d009      	beq.n	8006770 <prvDeleteTCB+0x54>
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	e7fe      	b.n	800676e <prvDeleteTCB+0x52>
	}
 8006770:	bf00      	nop
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800677e:	4b0e      	ldr	r3, [pc, #56]	; (80067b8 <prvResetNextTaskUnblockTime+0x40>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <prvResetNextTaskUnblockTime+0x14>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <prvResetNextTaskUnblockTime+0x16>
 800678c:	2300      	movs	r3, #0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006792:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <prvResetNextTaskUnblockTime+0x44>)
 8006794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006798:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800679a:	e008      	b.n	80067ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800679c:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <prvResetNextTaskUnblockTime+0x40>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	4a04      	ldr	r2, [pc, #16]	; (80067bc <prvResetNextTaskUnblockTime+0x44>)
 80067ac:	6013      	str	r3, [r2, #0]
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr
 80067b8:	20000ce8 	.word	0x20000ce8
 80067bc:	20000d50 	.word	0x20000d50

080067c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067c6:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <xTaskGetSchedulerState+0x34>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067ce:	2301      	movs	r3, #1
 80067d0:	607b      	str	r3, [r7, #4]
 80067d2:	e008      	b.n	80067e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067d4:	4b08      	ldr	r3, [pc, #32]	; (80067f8 <xTaskGetSchedulerState+0x38>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067dc:	2302      	movs	r3, #2
 80067de:	607b      	str	r3, [r7, #4]
 80067e0:	e001      	b.n	80067e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067e2:	2300      	movs	r3, #0
 80067e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067e6:	687b      	ldr	r3, [r7, #4]
	}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20000d3c 	.word	0x20000d3c
 80067f8:	20000d58 	.word	0x20000d58

080067fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d054      	beq.n	80068bc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006812:	4b2d      	ldr	r3, [pc, #180]	; (80068c8 <xTaskPriorityDisinherit+0xcc>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	429a      	cmp	r2, r3
 800681a:	d009      	beq.n	8006830 <xTaskPriorityDisinherit+0x34>
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	e7fe      	b.n	800682e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006834:	2b00      	cmp	r3, #0
 8006836:	d109      	bne.n	800684c <xTaskPriorityDisinherit+0x50>
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	60bb      	str	r3, [r7, #8]
 800684a:	e7fe      	b.n	800684a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006850:	1e5a      	subs	r2, r3, #1
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685e:	429a      	cmp	r2, r3
 8006860:	d02c      	beq.n	80068bc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006866:	2b00      	cmp	r3, #0
 8006868:	d128      	bne.n	80068bc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	3304      	adds	r3, #4
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe fc18 	bl	80050a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688c:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <xTaskPriorityDisinherit+0xd0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <xTaskPriorityDisinherit+0xa0>
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	4a0c      	ldr	r2, [pc, #48]	; (80068cc <xTaskPriorityDisinherit+0xd0>)
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <xTaskPriorityDisinherit+0xd4>)
 80068aa:	441a      	add	r2, r3
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f7fe fb9b 	bl	8004fee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068b8:	2301      	movs	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068bc:	697b      	ldr	r3, [r7, #20]
	}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	2000085c 	.word	0x2000085c
 80068cc:	20000d38 	.word	0x20000d38
 80068d0:	20000860 	.word	0x20000860

080068d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80068de:	4b21      	ldr	r3, [pc, #132]	; (8006964 <prvAddCurrentTaskToDelayedList+0x90>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068e4:	4b20      	ldr	r3, [pc, #128]	; (8006968 <prvAddCurrentTaskToDelayedList+0x94>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3304      	adds	r3, #4
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe fbda 	bl	80050a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f6:	d10a      	bne.n	800690e <prvAddCurrentTaskToDelayedList+0x3a>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068fe:	4b1a      	ldr	r3, [pc, #104]	; (8006968 <prvAddCurrentTaskToDelayedList+0x94>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3304      	adds	r3, #4
 8006904:	4619      	mov	r1, r3
 8006906:	4819      	ldr	r0, [pc, #100]	; (800696c <prvAddCurrentTaskToDelayedList+0x98>)
 8006908:	f7fe fb71 	bl	8004fee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800690c:	e026      	b.n	800695c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4413      	add	r3, r2
 8006914:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006916:	4b14      	ldr	r3, [pc, #80]	; (8006968 <prvAddCurrentTaskToDelayedList+0x94>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	429a      	cmp	r2, r3
 8006924:	d209      	bcs.n	800693a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006926:	4b12      	ldr	r3, [pc, #72]	; (8006970 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <prvAddCurrentTaskToDelayedList+0x94>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3304      	adds	r3, #4
 8006930:	4619      	mov	r1, r3
 8006932:	4610      	mov	r0, r2
 8006934:	f7fe fb7e 	bl	8005034 <vListInsert>
}
 8006938:	e010      	b.n	800695c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800693a:	4b0e      	ldr	r3, [pc, #56]	; (8006974 <prvAddCurrentTaskToDelayedList+0xa0>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4b0a      	ldr	r3, [pc, #40]	; (8006968 <prvAddCurrentTaskToDelayedList+0x94>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3304      	adds	r3, #4
 8006944:	4619      	mov	r1, r3
 8006946:	4610      	mov	r0, r2
 8006948:	f7fe fb74 	bl	8005034 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <prvAddCurrentTaskToDelayedList+0xa4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	429a      	cmp	r2, r3
 8006954:	d202      	bcs.n	800695c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006956:	4a08      	ldr	r2, [pc, #32]	; (8006978 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	6013      	str	r3, [r2, #0]
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20000d34 	.word	0x20000d34
 8006968:	2000085c 	.word	0x2000085c
 800696c:	20000d1c 	.word	0x20000d1c
 8006970:	20000cec 	.word	0x20000cec
 8006974:	20000ce8 	.word	0x20000ce8
 8006978:	20000d50 	.word	0x20000d50

0800697c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08a      	sub	sp, #40	; 0x28
 8006980:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006986:	f000 fac3 	bl	8006f10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800698a:	4b1c      	ldr	r3, [pc, #112]	; (80069fc <xTimerCreateTimerTask+0x80>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d021      	beq.n	80069d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800699a:	1d3a      	adds	r2, r7, #4
 800699c:	f107 0108 	add.w	r1, r7, #8
 80069a0:	f107 030c 	add.w	r3, r7, #12
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe fadd 	bl	8004f64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	9202      	str	r2, [sp, #8]
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	2302      	movs	r3, #2
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	2300      	movs	r3, #0
 80069ba:	460a      	mov	r2, r1
 80069bc:	4910      	ldr	r1, [pc, #64]	; (8006a00 <xTimerCreateTimerTask+0x84>)
 80069be:	4811      	ldr	r0, [pc, #68]	; (8006a04 <xTimerCreateTimerTask+0x88>)
 80069c0:	f7ff f8f8 	bl	8005bb4 <xTaskCreateStatic>
 80069c4:	4602      	mov	r2, r0
 80069c6:	4b10      	ldr	r3, [pc, #64]	; (8006a08 <xTimerCreateTimerTask+0x8c>)
 80069c8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80069ca:	4b0f      	ldr	r3, [pc, #60]	; (8006a08 <xTimerCreateTimerTask+0x8c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80069d2:	2301      	movs	r3, #1
 80069d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d109      	bne.n	80069f0 <xTimerCreateTimerTask+0x74>
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	e7fe      	b.n	80069ee <xTimerCreateTimerTask+0x72>
	return xReturn;
 80069f0:	697b      	ldr	r3, [r7, #20]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000d8c 	.word	0x20000d8c
 8006a00:	08008538 	.word	0x08008538
 8006a04:	08006b25 	.word	0x08006b25
 8006a08:	20000d90 	.word	0x20000d90

08006a0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08a      	sub	sp, #40	; 0x28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d109      	bne.n	8006a38 <xTimerGenericCommand+0x2c>
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	623b      	str	r3, [r7, #32]
 8006a36:	e7fe      	b.n	8006a36 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a38:	4b19      	ldr	r3, [pc, #100]	; (8006aa0 <xTimerGenericCommand+0x94>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d02a      	beq.n	8006a96 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b05      	cmp	r3, #5
 8006a50:	dc18      	bgt.n	8006a84 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a52:	f7ff feb5 	bl	80067c0 <xTaskGetSchedulerState>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d109      	bne.n	8006a70 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a5c:	4b10      	ldr	r3, [pc, #64]	; (8006aa0 <xTimerGenericCommand+0x94>)
 8006a5e:	6818      	ldr	r0, [r3, #0]
 8006a60:	f107 0110 	add.w	r1, r7, #16
 8006a64:	2300      	movs	r3, #0
 8006a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a68:	f7fe fcce 	bl	8005408 <xQueueGenericSend>
 8006a6c:	6278      	str	r0, [r7, #36]	; 0x24
 8006a6e:	e012      	b.n	8006a96 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <xTimerGenericCommand+0x94>)
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	f107 0110 	add.w	r1, r7, #16
 8006a78:	2300      	movs	r3, #0
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f7fe fcc4 	bl	8005408 <xQueueGenericSend>
 8006a80:	6278      	str	r0, [r7, #36]	; 0x24
 8006a82:	e008      	b.n	8006a96 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a84:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <xTimerGenericCommand+0x94>)
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	f107 0110 	add.w	r1, r7, #16
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	f7fe fdb4 	bl	80055fc <xQueueGenericSendFromISR>
 8006a94:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3728      	adds	r7, #40	; 0x28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20000d8c 	.word	0x20000d8c

08006aa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006aae:	4b1c      	ldr	r3, [pc, #112]	; (8006b20 <prvProcessExpiredTimer+0x7c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe faf1 	bl	80050a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d121      	bne.n	8006b0e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	18d1      	adds	r1, r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	6978      	ldr	r0, [r7, #20]
 8006ad8:	f000 f8c8 	bl	8006c6c <prvInsertTimerInActiveList>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d015      	beq.n	8006b0e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	2100      	movs	r1, #0
 8006aec:	6978      	ldr	r0, [r7, #20]
 8006aee:	f7ff ff8d 	bl	8006a0c <xTimerGenericCommand>
 8006af2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d109      	bne.n	8006b0e <prvProcessExpiredTimer+0x6a>
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	e7fe      	b.n	8006b0c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	6978      	ldr	r0, [r7, #20]
 8006b14:	4798      	blx	r3
}
 8006b16:	bf00      	nop
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000d84 	.word	0x20000d84

08006b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b2c:	f107 0308 	add.w	r3, r7, #8
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 f857 	bl	8006be4 <prvGetNextExpireTime>
 8006b36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 f803 	bl	8006b48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b42:	f000 f8d5 	bl	8006cf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b46:	e7f1      	b.n	8006b2c <prvTimerTask+0x8>

08006b48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006b52:	f7ff fa5b 	bl	800600c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b56:	f107 0308 	add.w	r3, r7, #8
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f866 	bl	8006c2c <prvSampleTimeNow>
 8006b60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d130      	bne.n	8006bca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <prvProcessTimerOrBlockTask+0x3c>
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d806      	bhi.n	8006b84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b76:	f7ff fa57 	bl	8006028 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff ff91 	bl	8006aa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b82:	e024      	b.n	8006bce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d008      	beq.n	8006b9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b8a:	4b13      	ldr	r3, [pc, #76]	; (8006bd8 <prvProcessTimerOrBlockTask+0x90>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bf0c      	ite	eq
 8006b94:	2301      	moveq	r3, #1
 8006b96:	2300      	movne	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b9c:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <prvProcessTimerOrBlockTask+0x94>)
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	f7fe ffcf 	bl	8005b4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006bae:	f7ff fa3b 	bl	8006028 <xTaskResumeAll>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <prvProcessTimerOrBlockTask+0x98>)
 8006bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	f3bf 8f6f 	isb	sy
}
 8006bc8:	e001      	b.n	8006bce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006bca:	f7ff fa2d 	bl	8006028 <xTaskResumeAll>
}
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000d88 	.word	0x20000d88
 8006bdc:	20000d8c 	.word	0x20000d8c
 8006be0:	e000ed04 	.word	0xe000ed04

08006be4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006bec:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <prvGetNextExpireTime+0x44>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d105      	bne.n	8006c16 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c0a:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <prvGetNextExpireTime+0x44>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	e001      	b.n	8006c1a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bc80      	pop	{r7}
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	20000d84 	.word	0x20000d84

08006c2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c34:	f7ff fa94 	bl	8006160 <xTaskGetTickCount>
 8006c38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c3a:	4b0b      	ldr	r3, [pc, #44]	; (8006c68 <prvSampleTimeNow+0x3c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d205      	bcs.n	8006c50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006c44:	f000 f904 	bl	8006e50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e002      	b.n	8006c56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006c56:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <prvSampleTimeNow+0x3c>)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000d94 	.word	0x20000d94

08006c6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d812      	bhi.n	8006cb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	1ad2      	subs	r2, r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d302      	bcc.n	8006ca6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e01b      	b.n	8006cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ca6:	4b10      	ldr	r3, [pc, #64]	; (8006ce8 <prvInsertTimerInActiveList+0x7c>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3304      	adds	r3, #4
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	f7fe f9bf 	bl	8005034 <vListInsert>
 8006cb6:	e012      	b.n	8006cde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d206      	bcs.n	8006cce <prvInsertTimerInActiveList+0x62>
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d302      	bcc.n	8006cce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	e007      	b.n	8006cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cce:	4b07      	ldr	r3, [pc, #28]	; (8006cec <prvInsertTimerInActiveList+0x80>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f7fe f9ab 	bl	8005034 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006cde:	697b      	ldr	r3, [r7, #20]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20000d88 	.word	0x20000d88
 8006cec:	20000d84 	.word	0x20000d84

08006cf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08e      	sub	sp, #56	; 0x38
 8006cf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cf6:	e099      	b.n	8006e2c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da17      	bge.n	8006d2e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	3304      	adds	r3, #4
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d109      	bne.n	8006d1e <prvProcessReceivedCommands+0x2e>
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	e7fe      	b.n	8006d1c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d24:	6850      	ldr	r0, [r2, #4]
 8006d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d28:	6892      	ldr	r2, [r2, #8]
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	db7a      	blt.n	8006e2a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d004      	beq.n	8006d4a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	3304      	adds	r3, #4
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fe f9ad 	bl	80050a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d4a:	463b      	mov	r3, r7
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff ff6d 	bl	8006c2c <prvSampleTimeNow>
 8006d52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b09      	cmp	r3, #9
 8006d58:	d868      	bhi.n	8006e2c <prvProcessReceivedCommands+0x13c>
 8006d5a:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <prvProcessReceivedCommands+0x70>)
 8006d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d60:	08006d89 	.word	0x08006d89
 8006d64:	08006d89 	.word	0x08006d89
 8006d68:	08006d89 	.word	0x08006d89
 8006d6c:	08006e2d 	.word	0x08006e2d
 8006d70:	08006de3 	.word	0x08006de3
 8006d74:	08006e19 	.word	0x08006e19
 8006d78:	08006d89 	.word	0x08006d89
 8006d7c:	08006d89 	.word	0x08006d89
 8006d80:	08006e2d 	.word	0x08006e2d
 8006d84:	08006de3 	.word	0x08006de3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	18d1      	adds	r1, r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d96:	f7ff ff69 	bl	8006c6c <prvInsertTimerInActiveList>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d045      	beq.n	8006e2c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006da6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d13d      	bne.n	8006e2c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	441a      	add	r2, r3
 8006db8:	2300      	movs	r3, #0
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc2:	f7ff fe23 	bl	8006a0c <xTimerGenericCommand>
 8006dc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d12e      	bne.n	8006e2c <prvProcessReceivedCommands+0x13c>
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	e7fe      	b.n	8006de0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d109      	bne.n	8006e04 <prvProcessReceivedCommands+0x114>
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	e7fe      	b.n	8006e02 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	699a      	ldr	r2, [r3, #24]
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	18d1      	adds	r1, r2, r3
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e12:	f7ff ff2b 	bl	8006c6c <prvInsertTimerInActiveList>
					break;
 8006e16:	e009      	b.n	8006e2c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d104      	bne.n	8006e2c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e24:	f000 fb58 	bl	80074d8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e28:	e000      	b.n	8006e2c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006e2a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e2c:	4b07      	ldr	r3, [pc, #28]	; (8006e4c <prvProcessReceivedCommands+0x15c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	1d39      	adds	r1, r7, #4
 8006e32:	2200      	movs	r2, #0
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fe fc75 	bl	8005724 <xQueueReceive>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f47f af5b 	bne.w	8006cf8 <prvProcessReceivedCommands+0x8>
	}
}
 8006e42:	bf00      	nop
 8006e44:	3730      	adds	r7, #48	; 0x30
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000d8c 	.word	0x20000d8c

08006e50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e56:	e044      	b.n	8006ee2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e58:	4b2b      	ldr	r3, [pc, #172]	; (8006f08 <prvSwitchTimerLists+0xb8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e62:	4b29      	ldr	r3, [pc, #164]	; (8006f08 <prvSwitchTimerLists+0xb8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe f917 	bl	80050a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d12d      	bne.n	8006ee2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d90e      	bls.n	8006eb6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ea4:	4b18      	ldr	r3, [pc, #96]	; (8006f08 <prvSwitchTimerLists+0xb8>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4619      	mov	r1, r3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	f7fe f8c0 	bl	8005034 <vListInsert>
 8006eb4:	e015      	b.n	8006ee2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7ff fda3 	bl	8006a0c <xTimerGenericCommand>
 8006ec6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d109      	bne.n	8006ee2 <prvSwitchTimerLists+0x92>
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	e7fe      	b.n	8006ee0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ee2:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <prvSwitchTimerLists+0xb8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1b5      	bne.n	8006e58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <prvSwitchTimerLists+0xb8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <prvSwitchTimerLists+0xbc>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <prvSwitchTimerLists+0xb8>)
 8006ef8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006efa:	4a04      	ldr	r2, [pc, #16]	; (8006f0c <prvSwitchTimerLists+0xbc>)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	6013      	str	r3, [r2, #0]
}
 8006f00:	bf00      	nop
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000d84 	.word	0x20000d84
 8006f0c:	20000d88 	.word	0x20000d88

08006f10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f16:	f000 f927 	bl	8007168 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f1a:	4b15      	ldr	r3, [pc, #84]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d120      	bne.n	8006f64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f22:	4814      	ldr	r0, [pc, #80]	; (8006f74 <prvCheckForValidListAndQueue+0x64>)
 8006f24:	f7fe f838 	bl	8004f98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f28:	4813      	ldr	r0, [pc, #76]	; (8006f78 <prvCheckForValidListAndQueue+0x68>)
 8006f2a:	f7fe f835 	bl	8004f98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f2e:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <prvCheckForValidListAndQueue+0x6c>)
 8006f30:	4a10      	ldr	r2, [pc, #64]	; (8006f74 <prvCheckForValidListAndQueue+0x64>)
 8006f32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f34:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <prvCheckForValidListAndQueue+0x70>)
 8006f36:	4a10      	ldr	r2, [pc, #64]	; (8006f78 <prvCheckForValidListAndQueue+0x68>)
 8006f38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	4b11      	ldr	r3, [pc, #68]	; (8006f84 <prvCheckForValidListAndQueue+0x74>)
 8006f40:	4a11      	ldr	r2, [pc, #68]	; (8006f88 <prvCheckForValidListAndQueue+0x78>)
 8006f42:	2110      	movs	r1, #16
 8006f44:	200a      	movs	r0, #10
 8006f46:	f7fe f93f 	bl	80051c8 <xQueueGenericCreateStatic>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f4e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f58:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	490b      	ldr	r1, [pc, #44]	; (8006f8c <prvCheckForValidListAndQueue+0x7c>)
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe fdcc 	bl	8005afc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f64:	f000 f92e 	bl	80071c4 <vPortExitCritical>
}
 8006f68:	bf00      	nop
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000d8c 	.word	0x20000d8c
 8006f74:	20000d5c 	.word	0x20000d5c
 8006f78:	20000d70 	.word	0x20000d70
 8006f7c:	20000d84 	.word	0x20000d84
 8006f80:	20000d88 	.word	0x20000d88
 8006f84:	20000e38 	.word	0x20000e38
 8006f88:	20000d98 	.word	0x20000d98
 8006f8c:	08008540 	.word	0x08008540

08006f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3b04      	subs	r3, #4
 8006fa0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3b04      	subs	r3, #4
 8006fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f023 0201 	bic.w	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3b04      	subs	r3, #4
 8006fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fc0:	4a08      	ldr	r2, [pc, #32]	; (8006fe4 <pxPortInitialiseStack+0x54>)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3b14      	subs	r3, #20
 8006fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3b20      	subs	r3, #32
 8006fd6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bc80      	pop	{r7}
 8006fe2:	4770      	bx	lr
 8006fe4:	08006fe9 	.word	0x08006fe9

08006fe8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ff2:	4b10      	ldr	r3, [pc, #64]	; (8007034 <prvTaskExitError+0x4c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ffa:	d009      	beq.n	8007010 <prvTaskExitError+0x28>
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	e7fe      	b.n	800700e <prvTaskExitError+0x26>
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007022:	bf00      	nop
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0fc      	beq.n	8007024 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800702a:	bf00      	nop
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr
 8007034:	20000118 	.word	0x20000118
	...

08007040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007040:	4b07      	ldr	r3, [pc, #28]	; (8007060 <pxCurrentTCBConst2>)
 8007042:	6819      	ldr	r1, [r3, #0]
 8007044:	6808      	ldr	r0, [r1, #0]
 8007046:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800704a:	f380 8809 	msr	PSP, r0
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f04f 0000 	mov.w	r0, #0
 8007056:	f380 8811 	msr	BASEPRI, r0
 800705a:	f04e 0e0d 	orr.w	lr, lr, #13
 800705e:	4770      	bx	lr

08007060 <pxCurrentTCBConst2>:
 8007060:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop

08007068 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007068:	4806      	ldr	r0, [pc, #24]	; (8007084 <prvPortStartFirstTask+0x1c>)
 800706a:	6800      	ldr	r0, [r0, #0]
 800706c:	6800      	ldr	r0, [r0, #0]
 800706e:	f380 8808 	msr	MSP, r0
 8007072:	b662      	cpsie	i
 8007074:	b661      	cpsie	f
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	df00      	svc	0
 8007080:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007082:	bf00      	nop
 8007084:	e000ed08 	.word	0xe000ed08

08007088 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800708e:	4b31      	ldr	r3, [pc, #196]	; (8007154 <xPortStartScheduler+0xcc>)
 8007090:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	b2db      	uxtb	r3, r3
 8007098:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	22ff      	movs	r2, #255	; 0xff
 800709e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070a8:	78fb      	ldrb	r3, [r7, #3]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	4b29      	ldr	r3, [pc, #164]	; (8007158 <xPortStartScheduler+0xd0>)
 80070b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070b6:	4b29      	ldr	r3, [pc, #164]	; (800715c <xPortStartScheduler+0xd4>)
 80070b8:	2207      	movs	r2, #7
 80070ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070bc:	e009      	b.n	80070d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80070be:	4b27      	ldr	r3, [pc, #156]	; (800715c <xPortStartScheduler+0xd4>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	4a25      	ldr	r2, [pc, #148]	; (800715c <xPortStartScheduler+0xd4>)
 80070c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070c8:	78fb      	ldrb	r3, [r7, #3]
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070d2:	78fb      	ldrb	r3, [r7, #3]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070da:	2b80      	cmp	r3, #128	; 0x80
 80070dc:	d0ef      	beq.n	80070be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070de:	4b1f      	ldr	r3, [pc, #124]	; (800715c <xPortStartScheduler+0xd4>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f1c3 0307 	rsb	r3, r3, #7
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	d009      	beq.n	80070fe <xPortStartScheduler+0x76>
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	60bb      	str	r3, [r7, #8]
 80070fc:	e7fe      	b.n	80070fc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070fe:	4b17      	ldr	r3, [pc, #92]	; (800715c <xPortStartScheduler+0xd4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	021b      	lsls	r3, r3, #8
 8007104:	4a15      	ldr	r2, [pc, #84]	; (800715c <xPortStartScheduler+0xd4>)
 8007106:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007108:	4b14      	ldr	r3, [pc, #80]	; (800715c <xPortStartScheduler+0xd4>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007110:	4a12      	ldr	r2, [pc, #72]	; (800715c <xPortStartScheduler+0xd4>)
 8007112:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	b2da      	uxtb	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800711c:	4b10      	ldr	r3, [pc, #64]	; (8007160 <xPortStartScheduler+0xd8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a0f      	ldr	r2, [pc, #60]	; (8007160 <xPortStartScheduler+0xd8>)
 8007122:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007128:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <xPortStartScheduler+0xd8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a0c      	ldr	r2, [pc, #48]	; (8007160 <xPortStartScheduler+0xd8>)
 800712e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007132:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007134:	f000 f8b0 	bl	8007298 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007138:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <xPortStartScheduler+0xdc>)
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800713e:	f7ff ff93 	bl	8007068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007142:	f7ff f8d9 	bl	80062f8 <vTaskSwitchContext>
	prvTaskExitError();
 8007146:	f7ff ff4f 	bl	8006fe8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	e000e400 	.word	0xe000e400
 8007158:	20000e88 	.word	0x20000e88
 800715c:	20000e8c 	.word	0x20000e8c
 8007160:	e000ed20 	.word	0xe000ed20
 8007164:	20000118 	.word	0x20000118

08007168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007180:	4b0e      	ldr	r3, [pc, #56]	; (80071bc <vPortEnterCritical+0x54>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3301      	adds	r3, #1
 8007186:	4a0d      	ldr	r2, [pc, #52]	; (80071bc <vPortEnterCritical+0x54>)
 8007188:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800718a:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <vPortEnterCritical+0x54>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d10e      	bne.n	80071b0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007192:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <vPortEnterCritical+0x58>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d009      	beq.n	80071b0 <vPortEnterCritical+0x48>
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	603b      	str	r3, [r7, #0]
 80071ae:	e7fe      	b.n	80071ae <vPortEnterCritical+0x46>
	}
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20000118 	.word	0x20000118
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071ca:	4b10      	ldr	r3, [pc, #64]	; (800720c <vPortExitCritical+0x48>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d109      	bne.n	80071e6 <vPortExitCritical+0x22>
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	607b      	str	r3, [r7, #4]
 80071e4:	e7fe      	b.n	80071e4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80071e6:	4b09      	ldr	r3, [pc, #36]	; (800720c <vPortExitCritical+0x48>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	4a07      	ldr	r2, [pc, #28]	; (800720c <vPortExitCritical+0x48>)
 80071ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071f0:	4b06      	ldr	r3, [pc, #24]	; (800720c <vPortExitCritical+0x48>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <vPortExitCritical+0x3e>
 80071f8:	2300      	movs	r3, #0
 80071fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr
 800720c:	20000118 	.word	0x20000118

08007210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007210:	f3ef 8009 	mrs	r0, PSP
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	4b0d      	ldr	r3, [pc, #52]	; (8007250 <pxCurrentTCBConst>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007220:	6010      	str	r0, [r2, #0]
 8007222:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007226:	f04f 0050 	mov.w	r0, #80	; 0x50
 800722a:	f380 8811 	msr	BASEPRI, r0
 800722e:	f7ff f863 	bl	80062f8 <vTaskSwitchContext>
 8007232:	f04f 0000 	mov.w	r0, #0
 8007236:	f380 8811 	msr	BASEPRI, r0
 800723a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800723e:	6819      	ldr	r1, [r3, #0]
 8007240:	6808      	ldr	r0, [r1, #0]
 8007242:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007246:	f380 8809 	msr	PSP, r0
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	4770      	bx	lr

08007250 <pxCurrentTCBConst>:
 8007250:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop

08007258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007270:	f7fe ff84 	bl	800617c <xTaskIncrementTick>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800727a:	4b06      	ldr	r3, [pc, #24]	; (8007294 <SysTick_Handler+0x3c>)
 800727c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	2300      	movs	r3, #0
 8007284:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800728c:	bf00      	nop
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	e000ed04 	.word	0xe000ed04

08007298 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800729c:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <vPortSetupTimerInterrupt+0x30>)
 800729e:	2200      	movs	r2, #0
 80072a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072a2:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <vPortSetupTimerInterrupt+0x34>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072a8:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <vPortSetupTimerInterrupt+0x38>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a09      	ldr	r2, [pc, #36]	; (80072d4 <vPortSetupTimerInterrupt+0x3c>)
 80072ae:	fba2 2303 	umull	r2, r3, r2, r3
 80072b2:	099b      	lsrs	r3, r3, #6
 80072b4:	4a08      	ldr	r2, [pc, #32]	; (80072d8 <vPortSetupTimerInterrupt+0x40>)
 80072b6:	3b01      	subs	r3, #1
 80072b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072ba:	4b03      	ldr	r3, [pc, #12]	; (80072c8 <vPortSetupTimerInterrupt+0x30>)
 80072bc:	2207      	movs	r2, #7
 80072be:	601a      	str	r2, [r3, #0]
}
 80072c0:	bf00      	nop
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bc80      	pop	{r7}
 80072c6:	4770      	bx	lr
 80072c8:	e000e010 	.word	0xe000e010
 80072cc:	e000e018 	.word	0xe000e018
 80072d0:	2000011c 	.word	0x2000011c
 80072d4:	10624dd3 	.word	0x10624dd3
 80072d8:	e000e014 	.word	0xe000e014

080072dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072e2:	f3ef 8305 	mrs	r3, IPSR
 80072e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b0f      	cmp	r3, #15
 80072ec:	d913      	bls.n	8007316 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ee:	4a15      	ldr	r2, [pc, #84]	; (8007344 <vPortValidateInterruptPriority+0x68>)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072f8:	4b13      	ldr	r3, [pc, #76]	; (8007348 <vPortValidateInterruptPriority+0x6c>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	7afa      	ldrb	r2, [r7, #11]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d209      	bcs.n	8007316 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	607b      	str	r3, [r7, #4]
 8007314:	e7fe      	b.n	8007314 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007316:	4b0d      	ldr	r3, [pc, #52]	; (800734c <vPortValidateInterruptPriority+0x70>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800731e:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <vPortValidateInterruptPriority+0x74>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d909      	bls.n	800733a <vPortValidateInterruptPriority+0x5e>
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	e7fe      	b.n	8007338 <vPortValidateInterruptPriority+0x5c>
	}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr
 8007344:	e000e3f0 	.word	0xe000e3f0
 8007348:	20000e88 	.word	0x20000e88
 800734c:	e000ed0c 	.word	0xe000ed0c
 8007350:	20000e8c 	.word	0x20000e8c

08007354 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08a      	sub	sp, #40	; 0x28
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800735c:	2300      	movs	r3, #0
 800735e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007360:	f7fe fe54 	bl	800600c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007364:	4b57      	ldr	r3, [pc, #348]	; (80074c4 <pvPortMalloc+0x170>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800736c:	f000 f90c 	bl	8007588 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007370:	4b55      	ldr	r3, [pc, #340]	; (80074c8 <pvPortMalloc+0x174>)
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4013      	ands	r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	f040 808c 	bne.w	8007496 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01c      	beq.n	80073be <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007384:	2208      	movs	r2, #8
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4413      	add	r3, r2
 800738a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f003 0307 	and.w	r3, r3, #7
 8007392:	2b00      	cmp	r3, #0
 8007394:	d013      	beq.n	80073be <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f023 0307 	bic.w	r3, r3, #7
 800739c:	3308      	adds	r3, #8
 800739e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <pvPortMalloc+0x6a>
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	e7fe      	b.n	80073bc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d068      	beq.n	8007496 <pvPortMalloc+0x142>
 80073c4:	4b41      	ldr	r3, [pc, #260]	; (80074cc <pvPortMalloc+0x178>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d863      	bhi.n	8007496 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073ce:	4b40      	ldr	r3, [pc, #256]	; (80074d0 <pvPortMalloc+0x17c>)
 80073d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073d2:	4b3f      	ldr	r3, [pc, #252]	; (80074d0 <pvPortMalloc+0x17c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073d8:	e004      	b.n	80073e4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d903      	bls.n	80073f6 <pvPortMalloc+0xa2>
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1f1      	bne.n	80073da <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073f6:	4b33      	ldr	r3, [pc, #204]	; (80074c4 <pvPortMalloc+0x170>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d04a      	beq.n	8007496 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2208      	movs	r2, #8
 8007406:	4413      	add	r3, r2
 8007408:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	1ad2      	subs	r2, r2, r3
 800741a:	2308      	movs	r3, #8
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	429a      	cmp	r2, r3
 8007420:	d91e      	bls.n	8007460 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4413      	add	r3, r2
 8007428:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	2b00      	cmp	r3, #0
 8007432:	d009      	beq.n	8007448 <pvPortMalloc+0xf4>
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	e7fe      	b.n	8007446 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800745a:	69b8      	ldr	r0, [r7, #24]
 800745c:	f000 f8f6 	bl	800764c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007460:	4b1a      	ldr	r3, [pc, #104]	; (80074cc <pvPortMalloc+0x178>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	4a18      	ldr	r2, [pc, #96]	; (80074cc <pvPortMalloc+0x178>)
 800746c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800746e:	4b17      	ldr	r3, [pc, #92]	; (80074cc <pvPortMalloc+0x178>)
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	4b18      	ldr	r3, [pc, #96]	; (80074d4 <pvPortMalloc+0x180>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d203      	bcs.n	8007482 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800747a:	4b14      	ldr	r3, [pc, #80]	; (80074cc <pvPortMalloc+0x178>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a15      	ldr	r2, [pc, #84]	; (80074d4 <pvPortMalloc+0x180>)
 8007480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	4b10      	ldr	r3, [pc, #64]	; (80074c8 <pvPortMalloc+0x174>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	431a      	orrs	r2, r3
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007496:	f7fe fdc7 	bl	8006028 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	f003 0307 	and.w	r3, r3, #7
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d009      	beq.n	80074b8 <pvPortMalloc+0x164>
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	e7fe      	b.n	80074b6 <pvPortMalloc+0x162>
	return pvReturn;
 80074b8:	69fb      	ldr	r3, [r7, #28]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3728      	adds	r7, #40	; 0x28
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	20001a98 	.word	0x20001a98
 80074c8:	20001aa4 	.word	0x20001aa4
 80074cc:	20001a9c 	.word	0x20001a9c
 80074d0:	20001a90 	.word	0x20001a90
 80074d4:	20001aa0 	.word	0x20001aa0

080074d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d046      	beq.n	8007578 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074ea:	2308      	movs	r3, #8
 80074ec:	425b      	negs	r3, r3
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4413      	add	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	4b20      	ldr	r3, [pc, #128]	; (8007580 <vPortFree+0xa8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4013      	ands	r3, r2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <vPortFree+0x42>
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	e7fe      	b.n	8007518 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <vPortFree+0x5e>
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	60bb      	str	r3, [r7, #8]
 8007534:	e7fe      	b.n	8007534 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	4b11      	ldr	r3, [pc, #68]	; (8007580 <vPortFree+0xa8>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4013      	ands	r3, r2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d019      	beq.n	8007578 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d115      	bne.n	8007578 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <vPortFree+0xa8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	43db      	mvns	r3, r3
 8007556:	401a      	ands	r2, r3
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800755c:	f7fe fd56 	bl	800600c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	4b07      	ldr	r3, [pc, #28]	; (8007584 <vPortFree+0xac>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4413      	add	r3, r2
 800756a:	4a06      	ldr	r2, [pc, #24]	; (8007584 <vPortFree+0xac>)
 800756c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800756e:	6938      	ldr	r0, [r7, #16]
 8007570:	f000 f86c 	bl	800764c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007574:	f7fe fd58 	bl	8006028 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007578:	bf00      	nop
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	20001aa4 	.word	0x20001aa4
 8007584:	20001a9c 	.word	0x20001a9c

08007588 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800758e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007592:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007594:	4b27      	ldr	r3, [pc, #156]	; (8007634 <prvHeapInit+0xac>)
 8007596:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00c      	beq.n	80075bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3307      	adds	r3, #7
 80075a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0307 	bic.w	r3, r3, #7
 80075ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	4a1f      	ldr	r2, [pc, #124]	; (8007634 <prvHeapInit+0xac>)
 80075b8:	4413      	add	r3, r2
 80075ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075c0:	4a1d      	ldr	r2, [pc, #116]	; (8007638 <prvHeapInit+0xb0>)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075c6:	4b1c      	ldr	r3, [pc, #112]	; (8007638 <prvHeapInit+0xb0>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	4413      	add	r3, r2
 80075d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075d4:	2208      	movs	r2, #8
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1a9b      	subs	r3, r3, r2
 80075da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 0307 	bic.w	r3, r3, #7
 80075e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4a15      	ldr	r2, [pc, #84]	; (800763c <prvHeapInit+0xb4>)
 80075e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075ea:	4b14      	ldr	r3, [pc, #80]	; (800763c <prvHeapInit+0xb4>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2200      	movs	r2, #0
 80075f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075f2:	4b12      	ldr	r3, [pc, #72]	; (800763c <prvHeapInit+0xb4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2200      	movs	r2, #0
 80075f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007608:	4b0c      	ldr	r3, [pc, #48]	; (800763c <prvHeapInit+0xb4>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <prvHeapInit+0xb8>)
 8007616:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	4a09      	ldr	r2, [pc, #36]	; (8007644 <prvHeapInit+0xbc>)
 800761e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007620:	4b09      	ldr	r3, [pc, #36]	; (8007648 <prvHeapInit+0xc0>)
 8007622:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007626:	601a      	str	r2, [r3, #0]
}
 8007628:	bf00      	nop
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20000e90 	.word	0x20000e90
 8007638:	20001a90 	.word	0x20001a90
 800763c:	20001a98 	.word	0x20001a98
 8007640:	20001aa0 	.word	0x20001aa0
 8007644:	20001a9c 	.word	0x20001a9c
 8007648:	20001aa4 	.word	0x20001aa4

0800764c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007654:	4b27      	ldr	r3, [pc, #156]	; (80076f4 <prvInsertBlockIntoFreeList+0xa8>)
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	e002      	b.n	8007660 <prvInsertBlockIntoFreeList+0x14>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	429a      	cmp	r2, r3
 8007668:	d8f7      	bhi.n	800765a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	4413      	add	r3, r2
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	429a      	cmp	r2, r3
 800767a:	d108      	bne.n	800768e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	441a      	add	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	441a      	add	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d118      	bne.n	80076d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <prvInsertBlockIntoFreeList+0xac>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d00d      	beq.n	80076ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	441a      	add	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	e008      	b.n	80076dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076ca:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <prvInsertBlockIntoFreeList+0xac>)
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	e003      	b.n	80076dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d002      	beq.n	80076ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076ea:	bf00      	nop
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bc80      	pop	{r7}
 80076f2:	4770      	bx	lr
 80076f4:	20001a90 	.word	0x20001a90
 80076f8:	20001a98 	.word	0x20001a98

080076fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007700:	f7f8 fd26 	bl	8000150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007704:	f000 f82e 	bl	8007764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007708:	f000 f886 	bl	8007818 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 800770c:	f7fd fa3a 	bl	8004b84 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uartMutex */
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 8007710:	480c      	ldr	r0, [pc, #48]	; (8007744 <main+0x48>)
 8007712:	f7fd fb75 	bl	8004e00 <osMutexNew>
 8007716:	4602      	mov	r2, r0
 8007718:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <main+0x4c>)
 800771a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask01, NULL, &Task1_attributes);
 800771c:	4a0b      	ldr	r2, [pc, #44]	; (800774c <main+0x50>)
 800771e:	2100      	movs	r1, #0
 8007720:	480b      	ldr	r0, [pc, #44]	; (8007750 <main+0x54>)
 8007722:	f7fd fa95 	bl	8004c50 <osThreadNew>
 8007726:	4602      	mov	r2, r0
 8007728:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <main+0x58>)
 800772a:	601a      	str	r2, [r3, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask02, NULL, &Task2_attributes);
 800772c:	4a0a      	ldr	r2, [pc, #40]	; (8007758 <main+0x5c>)
 800772e:	2100      	movs	r1, #0
 8007730:	480a      	ldr	r0, [pc, #40]	; (800775c <main+0x60>)
 8007732:	f7fd fa8d 	bl	8004c50 <osThreadNew>
 8007736:	4602      	mov	r2, r0
 8007738:	4b09      	ldr	r3, [pc, #36]	; (8007760 <main+0x64>)
 800773a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800773c:	f7fd fa54 	bl	8004be8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007740:	e7fe      	b.n	8007740 <main+0x44>
 8007742:	bf00      	nop
 8007744:	08008608 	.word	0x08008608
 8007748:	20001d3c 	.word	0x20001d3c
 800774c:	080085c0 	.word	0x080085c0
 8007750:	080078b1 	.word	0x080078b1
 8007754:	20001d38 	.word	0x20001d38
 8007758:	080085e4 	.word	0x080085e4
 800775c:	080078fd 	.word	0x080078fd
 8007760:	20001d40 	.word	0x20001d40

08007764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b094      	sub	sp, #80	; 0x50
 8007768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800776a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800776e:	2228      	movs	r2, #40	; 0x28
 8007770:	2100      	movs	r1, #0
 8007772:	4618      	mov	r0, r3
 8007774:	f000 febd 	bl	80084f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007778:	f107 0314 	add.w	r3, r7, #20
 800777c:	2200      	movs	r2, #0
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	605a      	str	r2, [r3, #4]
 8007782:	609a      	str	r2, [r3, #8]
 8007784:	60da      	str	r2, [r3, #12]
 8007786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007788:	1d3b      	adds	r3, r7, #4
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	605a      	str	r2, [r3, #4]
 8007790:	609a      	str	r2, [r3, #8]
 8007792:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007794:	2301      	movs	r3, #1
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800779c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800779e:	2300      	movs	r3, #0
 80077a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80077a2:	2301      	movs	r3, #1
 80077a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80077a6:	2302      	movs	r3, #2
 80077a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80077aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80077ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80077b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80077b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80077b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7f9 fe46 	bl	800144c <HAL_RCC_OscConfig>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80077c6:	f000 f8bb 	bl	8007940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80077ca:	230f      	movs	r3, #15
 80077cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80077ce:	2302      	movs	r3, #2
 80077d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80077d2:	2300      	movs	r3, #0
 80077d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80077d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80077dc:	2300      	movs	r3, #0
 80077de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80077e0:	f107 0314 	add.w	r3, r7, #20
 80077e4:	2102      	movs	r1, #2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fa f8b0 	bl	800194c <HAL_RCC_ClockConfig>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80077f2:	f000 f8a5 	bl	8007940 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80077f6:	2310      	movs	r3, #16
 80077f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80077fa:	2300      	movs	r3, #0
 80077fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077fe:	1d3b      	adds	r3, r7, #4
 8007800:	4618      	mov	r0, r3
 8007802:	f7fa fa5b 	bl	8001cbc <HAL_RCCEx_PeriphCLKConfig>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800780c:	f000 f898 	bl	8007940 <Error_Handler>
  }
}
 8007810:	bf00      	nop
 8007812:	3750      	adds	r7, #80	; 0x50
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b088      	sub	sp, #32
 800781c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800781e:	f107 0310 	add.w	r3, r7, #16
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	605a      	str	r2, [r3, #4]
 8007828:	609a      	str	r2, [r3, #8]
 800782a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800782c:	4b1e      	ldr	r3, [pc, #120]	; (80078a8 <MX_GPIO_Init+0x90>)
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	4a1d      	ldr	r2, [pc, #116]	; (80078a8 <MX_GPIO_Init+0x90>)
 8007832:	f043 0310 	orr.w	r3, r3, #16
 8007836:	6193      	str	r3, [r2, #24]
 8007838:	4b1b      	ldr	r3, [pc, #108]	; (80078a8 <MX_GPIO_Init+0x90>)
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	60fb      	str	r3, [r7, #12]
 8007842:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007844:	4b18      	ldr	r3, [pc, #96]	; (80078a8 <MX_GPIO_Init+0x90>)
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	4a17      	ldr	r2, [pc, #92]	; (80078a8 <MX_GPIO_Init+0x90>)
 800784a:	f043 0320 	orr.w	r3, r3, #32
 800784e:	6193      	str	r3, [r2, #24]
 8007850:	4b15      	ldr	r3, [pc, #84]	; (80078a8 <MX_GPIO_Init+0x90>)
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	60bb      	str	r3, [r7, #8]
 800785a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800785c:	4b12      	ldr	r3, [pc, #72]	; (80078a8 <MX_GPIO_Init+0x90>)
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	4a11      	ldr	r2, [pc, #68]	; (80078a8 <MX_GPIO_Init+0x90>)
 8007862:	f043 0304 	orr.w	r3, r3, #4
 8007866:	6193      	str	r3, [r2, #24]
 8007868:	4b0f      	ldr	r3, [pc, #60]	; (80078a8 <MX_GPIO_Init+0x90>)
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	607b      	str	r3, [r7, #4]
 8007872:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8007874:	2200      	movs	r2, #0
 8007876:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800787a:	480c      	ldr	r0, [pc, #48]	; (80078ac <MX_GPIO_Init+0x94>)
 800787c:	f7f8 fed4 	bl	8000628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8007880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007886:	2301      	movs	r3, #1
 8007888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800788a:	2300      	movs	r3, #0
 800788c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800788e:	2302      	movs	r3, #2
 8007890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8007892:	f107 0310 	add.w	r3, r7, #16
 8007896:	4619      	mov	r1, r3
 8007898:	4804      	ldr	r0, [pc, #16]	; (80078ac <MX_GPIO_Init+0x94>)
 800789a:	f7f8 fd6b 	bl	8000374 <HAL_GPIO_Init>

}
 800789e:	bf00      	nop
 80078a0:	3720      	adds	r7, #32
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	40021000 	.word	0x40021000
 80078ac:	40011000 	.word	0x40011000

080078b0 <StartTask01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80078b0:	b5b0      	push	{r4, r5, r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80078b8:	f000 f936 	bl	8007b28 <MX_USB_DEVICE_Init>


  /* Infinite loop */
  for(;;)
  {
	messageLength = sprintf(txData, "Hello from task01");
 80078bc:	4a0c      	ldr	r2, [pc, #48]	; (80078f0 <StartTask01+0x40>)
 80078be:	4b0d      	ldr	r3, [pc, #52]	; (80078f4 <StartTask01+0x44>)
 80078c0:	4615      	mov	r5, r2
 80078c2:	461c      	mov	r4, r3
 80078c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078c6:	6028      	str	r0, [r5, #0]
 80078c8:	6069      	str	r1, [r5, #4]
 80078ca:	60aa      	str	r2, [r5, #8]
 80078cc:	60eb      	str	r3, [r5, #12]
 80078ce:	8823      	ldrh	r3, [r4, #0]
 80078d0:	822b      	strh	r3, [r5, #16]
 80078d2:	2311      	movs	r3, #17
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	4b08      	ldr	r3, [pc, #32]	; (80078f8 <StartTask01+0x48>)
 80078d8:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS(txData, messageLength);
 80078da:	4b07      	ldr	r3, [pc, #28]	; (80078f8 <StartTask01+0x48>)
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	4619      	mov	r1, r3
 80078e0:	4803      	ldr	r0, [pc, #12]	; (80078f0 <StartTask01+0x40>)
 80078e2:	f000 f9df 	bl	8007ca4 <CDC_Transmit_FS>
    osDelay(1000);
 80078e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078ea:	f7fd fa5b 	bl	8004da4 <osDelay>
	messageLength = sprintf(txData, "Hello from task01");
 80078ee:	e7e5      	b.n	80078bc <StartTask01+0xc>
 80078f0:	20001d10 	.word	0x20001d10
 80078f4:	08008564 	.word	0x08008564
 80078f8:	20001aa8 	.word	0x20001aa8

080078fc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8007904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007908:	4803      	ldr	r0, [pc, #12]	; (8007918 <StartTask02+0x1c>)
 800790a:	f7f8 fea5 	bl	8000658 <HAL_GPIO_TogglePin>

    osDelay(200);
 800790e:	20c8      	movs	r0, #200	; 0xc8
 8007910:	f7fd fa48 	bl	8004da4 <osDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8007914:	e7f6      	b.n	8007904 <StartTask02+0x8>
 8007916:	bf00      	nop
 8007918:	40011000 	.word	0x40011000

0800791c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a04      	ldr	r2, [pc, #16]	; (800793c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d101      	bne.n	8007932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800792e:	f7f8 fc25 	bl	800017c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	40012c00 	.word	0x40012c00

08007940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007944:	bf00      	nop
 8007946:	46bd      	mov	sp, r7
 8007948:	bc80      	pop	{r7}
 800794a:	4770      	bx	lr

0800794c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007952:	4b18      	ldr	r3, [pc, #96]	; (80079b4 <HAL_MspInit+0x68>)
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	4a17      	ldr	r2, [pc, #92]	; (80079b4 <HAL_MspInit+0x68>)
 8007958:	f043 0301 	orr.w	r3, r3, #1
 800795c:	6193      	str	r3, [r2, #24]
 800795e:	4b15      	ldr	r3, [pc, #84]	; (80079b4 <HAL_MspInit+0x68>)
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	60bb      	str	r3, [r7, #8]
 8007968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800796a:	4b12      	ldr	r3, [pc, #72]	; (80079b4 <HAL_MspInit+0x68>)
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	4a11      	ldr	r2, [pc, #68]	; (80079b4 <HAL_MspInit+0x68>)
 8007970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007974:	61d3      	str	r3, [r2, #28]
 8007976:	4b0f      	ldr	r3, [pc, #60]	; (80079b4 <HAL_MspInit+0x68>)
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800797e:	607b      	str	r3, [r7, #4]
 8007980:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007982:	2200      	movs	r2, #0
 8007984:	210f      	movs	r1, #15
 8007986:	f06f 0001 	mvn.w	r0, #1
 800798a:	f7f8 fcc8 	bl	800031e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800798e:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <HAL_MspInit+0x6c>)
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	4a04      	ldr	r2, [pc, #16]	; (80079b8 <HAL_MspInit+0x6c>)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80079aa:	bf00      	nop
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	40021000 	.word	0x40021000
 80079b8:	40010000 	.word	0x40010000

080079bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08c      	sub	sp, #48	; 0x30
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80079cc:	2200      	movs	r2, #0
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	2019      	movs	r0, #25
 80079d2:	f7f8 fca4 	bl	800031e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80079d6:	2019      	movs	r0, #25
 80079d8:	f7f8 fcbd 	bl	8000356 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80079dc:	4b1e      	ldr	r3, [pc, #120]	; (8007a58 <HAL_InitTick+0x9c>)
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	4a1d      	ldr	r2, [pc, #116]	; (8007a58 <HAL_InitTick+0x9c>)
 80079e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80079e6:	6193      	str	r3, [r2, #24]
 80079e8:	4b1b      	ldr	r3, [pc, #108]	; (8007a58 <HAL_InitTick+0x9c>)
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80079f4:	f107 0210 	add.w	r2, r7, #16
 80079f8:	f107 0314 	add.w	r3, r7, #20
 80079fc:	4611      	mov	r1, r2
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fa f90e 	bl	8001c20 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007a04:	f7fa f8f8 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 8007a08:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	4a13      	ldr	r2, [pc, #76]	; (8007a5c <HAL_InitTick+0xa0>)
 8007a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a12:	0c9b      	lsrs	r3, r3, #18
 8007a14:	3b01      	subs	r3, #1
 8007a16:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007a18:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <HAL_InitTick+0xa4>)
 8007a1a:	4a12      	ldr	r2, [pc, #72]	; (8007a64 <HAL_InitTick+0xa8>)
 8007a1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8007a1e:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <HAL_InitTick+0xa4>)
 8007a20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007a24:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007a26:	4a0e      	ldr	r2, [pc, #56]	; (8007a60 <HAL_InitTick+0xa4>)
 8007a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007a2c:	4b0c      	ldr	r3, [pc, #48]	; (8007a60 <HAL_InitTick+0xa4>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a32:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <HAL_InitTick+0xa4>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8007a38:	4809      	ldr	r0, [pc, #36]	; (8007a60 <HAL_InitTick+0xa4>)
 8007a3a:	f7fa f9f5 	bl	8001e28 <HAL_TIM_Base_Init>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d104      	bne.n	8007a4e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8007a44:	4806      	ldr	r0, [pc, #24]	; (8007a60 <HAL_InitTick+0xa4>)
 8007a46:	f7fa fa23 	bl	8001e90 <HAL_TIM_Base_Start_IT>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	e000      	b.n	8007a50 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3730      	adds	r7, #48	; 0x30
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	40021000 	.word	0x40021000
 8007a5c:	431bde83 	.word	0x431bde83
 8007a60:	20001d44 	.word	0x20001d44
 8007a64:	40012c00 	.word	0x40012c00

08007a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007a6c:	bf00      	nop
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bc80      	pop	{r7}
 8007a72:	4770      	bx	lr

08007a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a74:	b480      	push	{r7}
 8007a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a78:	e7fe      	b.n	8007a78 <HardFault_Handler+0x4>

08007a7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a7e:	e7fe      	b.n	8007a7e <MemManage_Handler+0x4>

08007a80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a84:	e7fe      	b.n	8007a84 <BusFault_Handler+0x4>

08007a86 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a86:	b480      	push	{r7}
 8007a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a8a:	e7fe      	b.n	8007a8a <UsageFault_Handler+0x4>

08007a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007a90:	bf00      	nop
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bc80      	pop	{r7}
 8007a96:	4770      	bx	lr

08007a98 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007a9c:	4802      	ldr	r0, [pc, #8]	; (8007aa8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8007a9e:	f7f8 fefa 	bl	8000896 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8007aa2:	bf00      	nop
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20002818 	.word	0x20002818

08007aac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007ab0:	4802      	ldr	r0, [pc, #8]	; (8007abc <TIM1_UP_IRQHandler+0x10>)
 8007ab2:	f7fa fa10 	bl	8001ed6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007ab6:	bf00      	nop
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20001d44 	.word	0x20001d44

08007ac0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8007ac4:	4b15      	ldr	r3, [pc, #84]	; (8007b1c <SystemInit+0x5c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a14      	ldr	r2, [pc, #80]	; (8007b1c <SystemInit+0x5c>)
 8007aca:	f043 0301 	orr.w	r3, r3, #1
 8007ace:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8007ad0:	4b12      	ldr	r3, [pc, #72]	; (8007b1c <SystemInit+0x5c>)
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	4911      	ldr	r1, [pc, #68]	; (8007b1c <SystemInit+0x5c>)
 8007ad6:	4b12      	ldr	r3, [pc, #72]	; (8007b20 <SystemInit+0x60>)
 8007ad8:	4013      	ands	r3, r2
 8007ada:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8007adc:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <SystemInit+0x5c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a0e      	ldr	r2, [pc, #56]	; (8007b1c <SystemInit+0x5c>)
 8007ae2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007aec:	4b0b      	ldr	r3, [pc, #44]	; (8007b1c <SystemInit+0x5c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <SystemInit+0x5c>)
 8007af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007af6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8007af8:	4b08      	ldr	r3, [pc, #32]	; (8007b1c <SystemInit+0x5c>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	4a07      	ldr	r2, [pc, #28]	; (8007b1c <SystemInit+0x5c>)
 8007afe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007b02:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8007b04:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <SystemInit+0x5c>)
 8007b06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8007b0a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007b0c:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <SystemInit+0x64>)
 8007b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b12:	609a      	str	r2, [r3, #8]
#endif 
}
 8007b14:	bf00      	nop
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bc80      	pop	{r7}
 8007b1a:	4770      	bx	lr
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	f8ff0000 	.word	0xf8ff0000
 8007b24:	e000ed00 	.word	0xe000ed00

08007b28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	4912      	ldr	r1, [pc, #72]	; (8007b78 <MX_USB_DEVICE_Init+0x50>)
 8007b30:	4812      	ldr	r0, [pc, #72]	; (8007b7c <MX_USB_DEVICE_Init+0x54>)
 8007b32:	f7fb ff9a 	bl	8003a6a <USBD_Init>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b3c:	f7ff ff00 	bl	8007940 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b40:	490f      	ldr	r1, [pc, #60]	; (8007b80 <MX_USB_DEVICE_Init+0x58>)
 8007b42:	480e      	ldr	r0, [pc, #56]	; (8007b7c <MX_USB_DEVICE_Init+0x54>)
 8007b44:	f7fb ffbc 	bl	8003ac0 <USBD_RegisterClass>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b4e:	f7ff fef7 	bl	8007940 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b52:	490c      	ldr	r1, [pc, #48]	; (8007b84 <MX_USB_DEVICE_Init+0x5c>)
 8007b54:	4809      	ldr	r0, [pc, #36]	; (8007b7c <MX_USB_DEVICE_Init+0x54>)
 8007b56:	f7fb feed 	bl	8003934 <USBD_CDC_RegisterInterface>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b60:	f7ff feee 	bl	8007940 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b64:	4805      	ldr	r0, [pc, #20]	; (8007b7c <MX_USB_DEVICE_Init+0x54>)
 8007b66:	f7fb ffc4 	bl	8003af2 <USBD_Start>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b70:	f7ff fee6 	bl	8007940 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b74:	bf00      	nop
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	20000130 	.word	0x20000130
 8007b7c:	20001d84 	.word	0x20001d84
 8007b80:	20000014 	.word	0x20000014
 8007b84:	20000120 	.word	0x20000120

08007b88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	4905      	ldr	r1, [pc, #20]	; (8007ba4 <CDC_Init_FS+0x1c>)
 8007b90:	4805      	ldr	r0, [pc, #20]	; (8007ba8 <CDC_Init_FS+0x20>)
 8007b92:	f7fb fee5 	bl	8003960 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b96:	4905      	ldr	r1, [pc, #20]	; (8007bac <CDC_Init_FS+0x24>)
 8007b98:	4803      	ldr	r0, [pc, #12]	; (8007ba8 <CDC_Init_FS+0x20>)
 8007b9a:	f7fb fefa 	bl	8003992 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20002430 	.word	0x20002430
 8007ba8:	20001d84 	.word	0x20001d84
 8007bac:	20002048 	.word	0x20002048

08007bb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007bb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr
	...

08007bc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	6039      	str	r1, [r7, #0]
 8007bca:	71fb      	strb	r3, [r7, #7]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	2b23      	cmp	r3, #35	; 0x23
 8007bd4:	d84a      	bhi.n	8007c6c <CDC_Control_FS+0xac>
 8007bd6:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <CDC_Control_FS+0x1c>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007c6d 	.word	0x08007c6d
 8007be0:	08007c6d 	.word	0x08007c6d
 8007be4:	08007c6d 	.word	0x08007c6d
 8007be8:	08007c6d 	.word	0x08007c6d
 8007bec:	08007c6d 	.word	0x08007c6d
 8007bf0:	08007c6d 	.word	0x08007c6d
 8007bf4:	08007c6d 	.word	0x08007c6d
 8007bf8:	08007c6d 	.word	0x08007c6d
 8007bfc:	08007c6d 	.word	0x08007c6d
 8007c00:	08007c6d 	.word	0x08007c6d
 8007c04:	08007c6d 	.word	0x08007c6d
 8007c08:	08007c6d 	.word	0x08007c6d
 8007c0c:	08007c6d 	.word	0x08007c6d
 8007c10:	08007c6d 	.word	0x08007c6d
 8007c14:	08007c6d 	.word	0x08007c6d
 8007c18:	08007c6d 	.word	0x08007c6d
 8007c1c:	08007c6d 	.word	0x08007c6d
 8007c20:	08007c6d 	.word	0x08007c6d
 8007c24:	08007c6d 	.word	0x08007c6d
 8007c28:	08007c6d 	.word	0x08007c6d
 8007c2c:	08007c6d 	.word	0x08007c6d
 8007c30:	08007c6d 	.word	0x08007c6d
 8007c34:	08007c6d 	.word	0x08007c6d
 8007c38:	08007c6d 	.word	0x08007c6d
 8007c3c:	08007c6d 	.word	0x08007c6d
 8007c40:	08007c6d 	.word	0x08007c6d
 8007c44:	08007c6d 	.word	0x08007c6d
 8007c48:	08007c6d 	.word	0x08007c6d
 8007c4c:	08007c6d 	.word	0x08007c6d
 8007c50:	08007c6d 	.word	0x08007c6d
 8007c54:	08007c6d 	.word	0x08007c6d
 8007c58:	08007c6d 	.word	0x08007c6d
 8007c5c:	08007c6d 	.word	0x08007c6d
 8007c60:	08007c6d 	.word	0x08007c6d
 8007c64:	08007c6d 	.word	0x08007c6d
 8007c68:	08007c6d 	.word	0x08007c6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c6c:	bf00      	nop
  }

  return (USBD_OK);
 8007c6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bc80      	pop	{r7}
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop

08007c7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4805      	ldr	r0, [pc, #20]	; (8007ca0 <CDC_Receive_FS+0x24>)
 8007c8a:	f7fb fe82 	bl	8003992 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c8e:	4804      	ldr	r0, [pc, #16]	; (8007ca0 <CDC_Receive_FS+0x24>)
 8007c90:	f7fb fec1 	bl	8003a16 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007c94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20001d84 	.word	0x20001d84

08007ca4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007cb4:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <CDC_Transmit_FS+0x48>)
 8007cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e00b      	b.n	8007ce2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007cca:	887b      	ldrh	r3, [r7, #2]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	4806      	ldr	r0, [pc, #24]	; (8007cec <CDC_Transmit_FS+0x48>)
 8007cd2:	f7fb fe45 	bl	8003960 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007cd6:	4805      	ldr	r0, [pc, #20]	; (8007cec <CDC_Transmit_FS+0x48>)
 8007cd8:	f7fb fe6e 	bl	80039b8 <USBD_CDC_TransmitPacket>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20001d84 	.word	0x20001d84

08007cf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a0d      	ldr	r2, [pc, #52]	; (8007d34 <HAL_PCD_MspInit+0x44>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d113      	bne.n	8007d2a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d02:	4b0d      	ldr	r3, [pc, #52]	; (8007d38 <HAL_PCD_MspInit+0x48>)
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	4a0c      	ldr	r2, [pc, #48]	; (8007d38 <HAL_PCD_MspInit+0x48>)
 8007d08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d0c:	61d3      	str	r3, [r2, #28]
 8007d0e:	4b0a      	ldr	r3, [pc, #40]	; (8007d38 <HAL_PCD_MspInit+0x48>)
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2105      	movs	r1, #5
 8007d1e:	2014      	movs	r0, #20
 8007d20:	f7f8 fafd 	bl	800031e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007d24:	2014      	movs	r0, #20
 8007d26:	f7f8 fb16 	bl	8000356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	40005c00 	.word	0x40005c00
 8007d38:	40021000 	.word	0x40021000

08007d3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007d50:	4619      	mov	r1, r3
 8007d52:	4610      	mov	r0, r2
 8007d54:	f7fb ff15 	bl	8003b82 <USBD_LL_SetupStage>
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	015b      	lsls	r3, r3, #5
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	4619      	mov	r1, r3
 8007d84:	f7fb ff48 	bl	8003c18 <USBD_LL_DataOutStage>
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	015b      	lsls	r3, r3, #5
 8007da8:	4413      	add	r3, r2
 8007daa:	333c      	adds	r3, #60	; 0x3c
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	78fb      	ldrb	r3, [r7, #3]
 8007db0:	4619      	mov	r1, r3
 8007db2:	f7fb ffa2 	bl	8003cfa <USBD_LL_DataInStage>
}
 8007db6:	bf00      	nop
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b082      	sub	sp, #8
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fc f8b2 	bl	8003f36 <USBD_LL_SOF>
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007de2:	2301      	movs	r3, #1
 8007de4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d001      	beq.n	8007df2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007dee:	f7ff fda7 	bl	8007940 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007df8:	7bfa      	ldrb	r2, [r7, #15]
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fc f862 	bl	8003ec6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fc f81b 	bl	8003e44 <USBD_LL_Reset>
}
 8007e0e:	bf00      	nop
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fc f85c 	bl	8003ee4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e34:	4b04      	ldr	r3, [pc, #16]	; (8007e48 <HAL_PCD_SuspendCallback+0x30>)
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	4a03      	ldr	r2, [pc, #12]	; (8007e48 <HAL_PCD_SuspendCallback+0x30>)
 8007e3a:	f043 0306 	orr.w	r3, r3, #6
 8007e3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	e000ed00 	.word	0xe000ed00

08007e4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fc f856 	bl	8003f0c <USBD_LL_Resume>
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e70:	4a28      	ldr	r2, [pc, #160]	; (8007f14 <USBD_LL_Init+0xac>)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a26      	ldr	r2, [pc, #152]	; (8007f14 <USBD_LL_Init+0xac>)
 8007e7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e80:	4b24      	ldr	r3, [pc, #144]	; (8007f14 <USBD_LL_Init+0xac>)
 8007e82:	4a25      	ldr	r2, [pc, #148]	; (8007f18 <USBD_LL_Init+0xb0>)
 8007e84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e86:	4b23      	ldr	r3, [pc, #140]	; (8007f14 <USBD_LL_Init+0xac>)
 8007e88:	2208      	movs	r2, #8
 8007e8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e8c:	4b21      	ldr	r3, [pc, #132]	; (8007f14 <USBD_LL_Init+0xac>)
 8007e8e:	2202      	movs	r2, #2
 8007e90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e92:	4b20      	ldr	r3, [pc, #128]	; (8007f14 <USBD_LL_Init+0xac>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007e98:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <USBD_LL_Init+0xac>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e9e:	4b1d      	ldr	r3, [pc, #116]	; (8007f14 <USBD_LL_Init+0xac>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007ea4:	481b      	ldr	r0, [pc, #108]	; (8007f14 <USBD_LL_Init+0xac>)
 8007ea6:	f7f8 fbef 	bl	8000688 <HAL_PCD_Init>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007eb0:	f7ff fd46 	bl	8007940 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eba:	2318      	movs	r3, #24
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	f7f9 fa88 	bl	80013d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eca:	2358      	movs	r3, #88	; 0x58
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2180      	movs	r1, #128	; 0x80
 8007ed0:	f7f9 fa80 	bl	80013d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eda:	23c0      	movs	r3, #192	; 0xc0
 8007edc:	2200      	movs	r2, #0
 8007ede:	2181      	movs	r1, #129	; 0x81
 8007ee0:	f7f9 fa78 	bl	80013d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eea:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	f7f9 fa6f 	bl	80013d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f00:	2200      	movs	r2, #0
 8007f02:	2182      	movs	r1, #130	; 0x82
 8007f04:	f7f9 fa66 	bl	80013d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	20002818 	.word	0x20002818
 8007f18:	40005c00 	.word	0x40005c00

08007f1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7f8 fc89 	bl	800084a <HAL_PCD_Start>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f948 	bl	80081d4 <USBD_Get_USB_Status>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	4608      	mov	r0, r1
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	461a      	mov	r2, r3
 8007f60:	4603      	mov	r3, r0
 8007f62:	70fb      	strb	r3, [r7, #3]
 8007f64:	460b      	mov	r3, r1
 8007f66:	70bb      	strb	r3, [r7, #2]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f7a:	78bb      	ldrb	r3, [r7, #2]
 8007f7c:	883a      	ldrh	r2, [r7, #0]
 8007f7e:	78f9      	ldrb	r1, [r7, #3]
 8007f80:	f7f8 fdbc 	bl	8000afc <HAL_PCD_EP_Open>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 f922 	bl	80081d4 <USBD_Get_USB_Status>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b084      	sub	sp, #16
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fb8:	78fa      	ldrb	r2, [r7, #3]
 8007fba:	4611      	mov	r1, r2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7f8 fdfd 	bl	8000bbc <HAL_PCD_EP_Close>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f903 	bl	80081d4 <USBD_Get_USB_Status>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ff6:	78fa      	ldrb	r2, [r7, #3]
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7f8 fea7 	bl	8000d4e <HAL_PCD_EP_SetStall>
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f8e4 	bl	80081d4 <USBD_Get_USB_Status>
 800800c:	4603      	mov	r3, r0
 800800e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008010:	7bbb      	ldrb	r3, [r7, #14]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	460b      	mov	r3, r1
 8008024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008034:	78fa      	ldrb	r2, [r7, #3]
 8008036:	4611      	mov	r1, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f7f8 fee2 	bl	8000e02 <HAL_PCD_EP_ClrStall>
 800803e:	4603      	mov	r3, r0
 8008040:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008042:	7bfb      	ldrb	r3, [r7, #15]
 8008044:	4618      	mov	r0, r3
 8008046:	f000 f8c5 	bl	80081d4 <USBD_Get_USB_Status>
 800804a:	4603      	mov	r3, r0
 800804c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800804e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800806a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800806c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008070:	2b00      	cmp	r3, #0
 8008072:	da08      	bge.n	8008086 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	015b      	lsls	r3, r3, #5
 800807e:	4413      	add	r3, r2
 8008080:	332a      	adds	r3, #42	; 0x2a
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	e008      	b.n	8008098 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008086:	78fb      	ldrb	r3, [r7, #3]
 8008088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	015b      	lsls	r3, r3, #5
 8008090:	4413      	add	r3, r2
 8008092:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008096:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr

080080a2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080bc:	78fa      	ldrb	r2, [r7, #3]
 80080be:	4611      	mov	r1, r2
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7f8 fcf6 	bl	8000ab2 <HAL_PCD_SetAddress>
 80080c6:	4603      	mov	r3, r0
 80080c8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 f881 	bl	80081d4 <USBD_Get_USB_Status>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	607a      	str	r2, [r7, #4]
 80080ea:	461a      	mov	r2, r3
 80080ec:	460b      	mov	r3, r1
 80080ee:	72fb      	strb	r3, [r7, #11]
 80080f0:	4613      	mov	r3, r2
 80080f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008102:	893b      	ldrh	r3, [r7, #8]
 8008104:	7af9      	ldrb	r1, [r7, #11]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	f7f8 fde8 	bl	8000cdc <HAL_PCD_EP_Transmit>
 800810c:	4603      	mov	r3, r0
 800810e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	4618      	mov	r0, r3
 8008114:	f000 f85e 	bl	80081d4 <USBD_Get_USB_Status>
 8008118:	4603      	mov	r3, r0
 800811a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800811c:	7dbb      	ldrb	r3, [r7, #22]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b086      	sub	sp, #24
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	461a      	mov	r2, r3
 8008132:	460b      	mov	r3, r1
 8008134:	72fb      	strb	r3, [r7, #11]
 8008136:	4613      	mov	r3, r2
 8008138:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008148:	893b      	ldrh	r3, [r7, #8]
 800814a:	7af9      	ldrb	r1, [r7, #11]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	f7f8 fd77 	bl	8000c40 <HAL_PCD_EP_Receive>
 8008152:	4603      	mov	r3, r0
 8008154:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 f83b 	bl	80081d4 <USBD_Get_USB_Status>
 800815e:	4603      	mov	r3, r0
 8008160:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8008162:	7dbb      	ldrb	r3, [r7, #22]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800817e:	78fa      	ldrb	r2, [r7, #3]
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f7f8 fd96 	bl	8000cb4 <HAL_PCD_EP_GetRxCount>
 8008188:	4603      	mov	r3, r0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800819c:	4b02      	ldr	r3, [pc, #8]	; (80081a8 <USBD_static_malloc+0x14>)
}
 800819e:	4618      	mov	r0, r3
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bc80      	pop	{r7}
 80081a6:	4770      	bx	lr
 80081a8:	20001aac 	.word	0x20001aac

080081ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]

}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bc80      	pop	{r7}
 80081bc:	4770      	bx	lr

080081be <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	460b      	mov	r3, r1
 80081c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80081ca:	bf00      	nop
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr

080081d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d817      	bhi.n	8008218 <USBD_Get_USB_Status+0x44>
 80081e8:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <USBD_Get_USB_Status+0x1c>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	08008201 	.word	0x08008201
 80081f4:	08008207 	.word	0x08008207
 80081f8:	0800820d 	.word	0x0800820d
 80081fc:	08008213 	.word	0x08008213
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
    break;
 8008204:	e00b      	b.n	800821e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008206:	2302      	movs	r3, #2
 8008208:	73fb      	strb	r3, [r7, #15]
    break;
 800820a:	e008      	b.n	800821e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800820c:	2301      	movs	r3, #1
 800820e:	73fb      	strb	r3, [r7, #15]
    break;
 8008210:	e005      	b.n	800821e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008212:	2302      	movs	r3, #2
 8008214:	73fb      	strb	r3, [r7, #15]
    break;
 8008216:	e002      	b.n	800821e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008218:	2302      	movs	r3, #2
 800821a:	73fb      	strb	r3, [r7, #15]
    break;
 800821c:	bf00      	nop
  }
  return usb_status;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	bc80      	pop	{r7}
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop

0800822c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	6039      	str	r1, [r7, #0]
 8008236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2212      	movs	r2, #18
 800823c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800823e:	4b03      	ldr	r3, [pc, #12]	; (800824c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	2000014c 	.word	0x2000014c

08008250 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	4603      	mov	r3, r0
 8008258:	6039      	str	r1, [r7, #0]
 800825a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2204      	movs	r2, #4
 8008260:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008262:	4b03      	ldr	r3, [pc, #12]	; (8008270 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	20000160 	.word	0x20000160

08008274 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	6039      	str	r1, [r7, #0]
 800827e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008280:	79fb      	ldrb	r3, [r7, #7]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d105      	bne.n	8008292 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	4907      	ldr	r1, [pc, #28]	; (80082a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800828a:	4808      	ldr	r0, [pc, #32]	; (80082ac <USBD_FS_ProductStrDescriptor+0x38>)
 800828c:	f7fc fb9d 	bl	80049ca <USBD_GetString>
 8008290:	e004      	b.n	800829c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	4904      	ldr	r1, [pc, #16]	; (80082a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008296:	4805      	ldr	r0, [pc, #20]	; (80082ac <USBD_FS_ProductStrDescriptor+0x38>)
 8008298:	f7fc fb97 	bl	80049ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800829c:	4b02      	ldr	r3, [pc, #8]	; (80082a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20002a84 	.word	0x20002a84
 80082ac:	08008578 	.word	0x08008578

080082b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	6039      	str	r1, [r7, #0]
 80082ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	4904      	ldr	r1, [pc, #16]	; (80082d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082c0:	4804      	ldr	r0, [pc, #16]	; (80082d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082c2:	f7fc fb82 	bl	80049ca <USBD_GetString>
  return USBD_StrDesc;
 80082c6:	4b02      	ldr	r3, [pc, #8]	; (80082d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20002a84 	.word	0x20002a84
 80082d4:	08008590 	.word	0x08008590

080082d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	6039      	str	r1, [r7, #0]
 80082e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	221a      	movs	r2, #26
 80082e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082ea:	f000 f843 	bl	8008374 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082ee:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20000164 	.word	0x20000164

080082fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	6039      	str	r1, [r7, #0]
 8008306:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d105      	bne.n	800831a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	4907      	ldr	r1, [pc, #28]	; (8008330 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008312:	4808      	ldr	r0, [pc, #32]	; (8008334 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008314:	f7fc fb59 	bl	80049ca <USBD_GetString>
 8008318:	e004      	b.n	8008324 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	4904      	ldr	r1, [pc, #16]	; (8008330 <USBD_FS_ConfigStrDescriptor+0x34>)
 800831e:	4805      	ldr	r0, [pc, #20]	; (8008334 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008320:	f7fc fb53 	bl	80049ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8008324:	4b02      	ldr	r3, [pc, #8]	; (8008330 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20002a84 	.word	0x20002a84
 8008334:	080085a4 	.word	0x080085a4

08008338 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	6039      	str	r1, [r7, #0]
 8008342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008344:	79fb      	ldrb	r3, [r7, #7]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d105      	bne.n	8008356 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	4907      	ldr	r1, [pc, #28]	; (800836c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800834e:	4808      	ldr	r0, [pc, #32]	; (8008370 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008350:	f7fc fb3b 	bl	80049ca <USBD_GetString>
 8008354:	e004      	b.n	8008360 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	4904      	ldr	r1, [pc, #16]	; (800836c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800835a:	4805      	ldr	r0, [pc, #20]	; (8008370 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800835c:	f7fc fb35 	bl	80049ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8008360:	4b02      	ldr	r3, [pc, #8]	; (800836c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	20002a84 	.word	0x20002a84
 8008370:	080085b0 	.word	0x080085b0

08008374 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800837a:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <Get_SerialNum+0x44>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008380:	4b0e      	ldr	r3, [pc, #56]	; (80083bc <Get_SerialNum+0x48>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008386:	4b0e      	ldr	r3, [pc, #56]	; (80083c0 <Get_SerialNum+0x4c>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4413      	add	r3, r2
 8008392:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800839a:	2208      	movs	r2, #8
 800839c:	4909      	ldr	r1, [pc, #36]	; (80083c4 <Get_SerialNum+0x50>)
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 f814 	bl	80083cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083a4:	2204      	movs	r2, #4
 80083a6:	4908      	ldr	r1, [pc, #32]	; (80083c8 <Get_SerialNum+0x54>)
 80083a8:	68b8      	ldr	r0, [r7, #8]
 80083aa:	f000 f80f 	bl	80083cc <IntToUnicode>
  }
}
 80083ae:	bf00      	nop
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	1ffff7e8 	.word	0x1ffff7e8
 80083bc:	1ffff7ec 	.word	0x1ffff7ec
 80083c0:	1ffff7f0 	.word	0x1ffff7f0
 80083c4:	20000166 	.word	0x20000166
 80083c8:	20000176 	.word	0x20000176

080083cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b087      	sub	sp, #28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	4613      	mov	r3, r2
 80083d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083de:	2300      	movs	r3, #0
 80083e0:	75fb      	strb	r3, [r7, #23]
 80083e2:	e027      	b.n	8008434 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	0f1b      	lsrs	r3, r3, #28
 80083e8:	2b09      	cmp	r3, #9
 80083ea:	d80b      	bhi.n	8008404 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	0f1b      	lsrs	r3, r3, #28
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	4619      	mov	r1, r3
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	440b      	add	r3, r1
 80083fc:	3230      	adds	r2, #48	; 0x30
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	701a      	strb	r2, [r3, #0]
 8008402:	e00a      	b.n	800841a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	0f1b      	lsrs	r3, r3, #28
 8008408:	b2da      	uxtb	r2, r3
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	005b      	lsls	r3, r3, #1
 800840e:	4619      	mov	r1, r3
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	440b      	add	r3, r1
 8008414:	3237      	adds	r2, #55	; 0x37
 8008416:	b2d2      	uxtb	r2, r2
 8008418:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	3301      	adds	r3, #1
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	4413      	add	r3, r2
 800842a:	2200      	movs	r2, #0
 800842c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	3301      	adds	r3, #1
 8008432:	75fb      	strb	r3, [r7, #23]
 8008434:	7dfa      	ldrb	r2, [r7, #23]
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	429a      	cmp	r2, r3
 800843a:	d3d3      	bcc.n	80083e4 <IntToUnicode+0x18>
  }
}
 800843c:	bf00      	nop
 800843e:	371c      	adds	r7, #28
 8008440:	46bd      	mov	sp, r7
 8008442:	bc80      	pop	{r7}
 8008444:	4770      	bx	lr
	...

08008448 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008448:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800844a:	e003      	b.n	8008454 <LoopCopyDataInit>

0800844c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800844c:	4b0b      	ldr	r3, [pc, #44]	; (800847c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800844e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008450:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8008452:	3104      	adds	r1, #4

08008454 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008454:	480a      	ldr	r0, [pc, #40]	; (8008480 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8008456:	4b0b      	ldr	r3, [pc, #44]	; (8008484 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008458:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800845a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800845c:	d3f6      	bcc.n	800844c <CopyDataInit>
  ldr r2, =_sbss
 800845e:	4a0a      	ldr	r2, [pc, #40]	; (8008488 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008460:	e002      	b.n	8008468 <LoopFillZerobss>

08008462 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8008462:	2300      	movs	r3, #0
  str r3, [r2], #4
 8008464:	f842 3b04 	str.w	r3, [r2], #4

08008468 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008468:	4b08      	ldr	r3, [pc, #32]	; (800848c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800846a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800846c:	d3f9      	bcc.n	8008462 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800846e:	f7ff fb27 	bl	8007ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008472:	f000 f80f 	bl	8008494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008476:	f7ff f941 	bl	80076fc <main>
  bx lr
 800847a:	4770      	bx	lr
  ldr r3, =_sidata
 800847c:	08008638 	.word	0x08008638
  ldr r0, =_sdata
 8008480:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8008484:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8008488:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 800848c:	20002c84 	.word	0x20002c84

08008490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008490:	e7fe      	b.n	8008490 <ADC1_2_IRQHandler>
	...

08008494 <__libc_init_array>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	2500      	movs	r5, #0
 8008498:	4e0c      	ldr	r6, [pc, #48]	; (80084cc <__libc_init_array+0x38>)
 800849a:	4c0d      	ldr	r4, [pc, #52]	; (80084d0 <__libc_init_array+0x3c>)
 800849c:	1ba4      	subs	r4, r4, r6
 800849e:	10a4      	asrs	r4, r4, #2
 80084a0:	42a5      	cmp	r5, r4
 80084a2:	d109      	bne.n	80084b8 <__libc_init_array+0x24>
 80084a4:	f000 f82e 	bl	8008504 <_init>
 80084a8:	2500      	movs	r5, #0
 80084aa:	4e0a      	ldr	r6, [pc, #40]	; (80084d4 <__libc_init_array+0x40>)
 80084ac:	4c0a      	ldr	r4, [pc, #40]	; (80084d8 <__libc_init_array+0x44>)
 80084ae:	1ba4      	subs	r4, r4, r6
 80084b0:	10a4      	asrs	r4, r4, #2
 80084b2:	42a5      	cmp	r5, r4
 80084b4:	d105      	bne.n	80084c2 <__libc_init_array+0x2e>
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084bc:	4798      	blx	r3
 80084be:	3501      	adds	r5, #1
 80084c0:	e7ee      	b.n	80084a0 <__libc_init_array+0xc>
 80084c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084c6:	4798      	blx	r3
 80084c8:	3501      	adds	r5, #1
 80084ca:	e7f2      	b.n	80084b2 <__libc_init_array+0x1e>
 80084cc:	08008630 	.word	0x08008630
 80084d0:	08008630 	.word	0x08008630
 80084d4:	08008630 	.word	0x08008630
 80084d8:	08008634 	.word	0x08008634

080084dc <memcpy>:
 80084dc:	b510      	push	{r4, lr}
 80084de:	1e43      	subs	r3, r0, #1
 80084e0:	440a      	add	r2, r1
 80084e2:	4291      	cmp	r1, r2
 80084e4:	d100      	bne.n	80084e8 <memcpy+0xc>
 80084e6:	bd10      	pop	{r4, pc}
 80084e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084f0:	e7f7      	b.n	80084e2 <memcpy+0x6>

080084f2 <memset>:
 80084f2:	4603      	mov	r3, r0
 80084f4:	4402      	add	r2, r0
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d100      	bne.n	80084fc <memset+0xa>
 80084fa:	4770      	bx	lr
 80084fc:	f803 1b01 	strb.w	r1, [r3], #1
 8008500:	e7f9      	b.n	80084f6 <memset+0x4>
	...

08008504 <_init>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	bf00      	nop
 8008508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850a:	bc08      	pop	{r3}
 800850c:	469e      	mov	lr, r3
 800850e:	4770      	bx	lr

08008510 <_fini>:
 8008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008512:	bf00      	nop
 8008514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008516:	bc08      	pop	{r3}
 8008518:	469e      	mov	lr, r3
 800851a:	4770      	bx	lr
