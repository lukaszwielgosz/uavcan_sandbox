
uavcan_sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eac  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d0  08008fbc  08008fbc  00018fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800988c  0800988c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800988c  0800988c  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800988c  0800988c  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800988c  0800988c  0001988c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009890  08009890  00019890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08009894  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eb0  200000f0  08009980  000200f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001fa0  08009980  00021fa0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da11  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003baa  00000000  00000000  0003db26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f8  00000000  00000000  000416d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001590  00000000  00000000  00042dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a57  00000000  00000000  00044358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001123e  00000000  00000000  0005cdaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008360d  00000000  00000000  0006dfed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f15fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069b8  00000000  00000000  000f1678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000f0 	.word	0x200000f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008fa4 	.word	0x08008fa4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f4 	.word	0x200000f4
 800014c:	08008fa4 	.word	0x08008fa4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800021c:	f1a2 0201 	sub.w	r2, r2, #1
 8000220:	d1ed      	bne.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ce:	2afd      	cmp	r2, #253	; 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	; 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	; 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	; 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_Init+0x28>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <HAL_Init+0x28>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 f9cd 	bl	80009cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000632:	2000      	movs	r0, #0
 8000634:	f004 fada 	bl	8004bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000638:	f004 fa08 	bl	8004a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_IncTick+0x1c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_IncTick+0x20>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4413      	add	r3, r2
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <HAL_IncTick+0x20>)
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	20000004 	.word	0x20000004
 8000668:	20001e7c 	.word	0x20001e7c

0800066c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b02      	ldr	r3, [pc, #8]	; (800067c <HAL_GetTick+0x10>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	20001e7c 	.word	0x20001e7c

08000680 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d101      	bne.n	8000692 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	e0ed      	b.n	800086e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d102      	bne.n	80006a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f004 fa0c 	bl	8004abc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f022 0202 	bic.w	r2, r2, #2
 80006b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006b4:	f7ff ffda 	bl	800066c <HAL_GetTick>
 80006b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006ba:	e012      	b.n	80006e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006bc:	f7ff ffd6 	bl	800066c <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	2b0a      	cmp	r3, #10
 80006c8:	d90b      	bls.n	80006e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2205      	movs	r2, #5
 80006da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e0c5      	b.n	800086e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1e5      	bne.n	80006bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f042 0201 	orr.w	r2, r2, #1
 80006fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000700:	f7ff ffb4 	bl	800066c <HAL_GetTick>
 8000704:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000706:	e012      	b.n	800072e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000708:	f7ff ffb0 	bl	800066c <HAL_GetTick>
 800070c:	4602      	mov	r2, r0
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	2b0a      	cmp	r3, #10
 8000714:	d90b      	bls.n	800072e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2205      	movs	r2, #5
 8000726:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	e09f      	b.n	800086e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0e5      	beq.n	8000708 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7e1b      	ldrb	r3, [r3, #24]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d108      	bne.n	8000756 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e007      	b.n	8000766 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7e5b      	ldrb	r3, [r3, #25]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d108      	bne.n	8000780 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e007      	b.n	8000790 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800078e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7e9b      	ldrb	r3, [r3, #26]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d108      	bne.n	80007aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0220 	orr.w	r2, r2, #32
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	e007      	b.n	80007ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f022 0220 	bic.w	r2, r2, #32
 80007b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7edb      	ldrb	r3, [r3, #27]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d108      	bne.n	80007d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f022 0210 	bic.w	r2, r2, #16
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e007      	b.n	80007e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f042 0210 	orr.w	r2, r2, #16
 80007e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	7f1b      	ldrb	r3, [r3, #28]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d108      	bne.n	80007fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f042 0208 	orr.w	r2, r2, #8
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	e007      	b.n	800080e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f022 0208 	bic.w	r2, r2, #8
 800080c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	7f5b      	ldrb	r3, [r3, #29]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d108      	bne.n	8000828 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f042 0204 	orr.w	r2, r2, #4
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	e007      	b.n	8000838 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f022 0204 	bic.w	r2, r2, #4
 8000836:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689a      	ldr	r2, [r3, #8]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	431a      	orrs	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	691b      	ldr	r3, [r3, #16]
 8000846:	431a      	orrs	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	ea42 0103 	orr.w	r1, r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	430a      	orrs	r2, r1
 800085c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2201      	movs	r2, #1
 8000868:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <__NVIC_GetPriorityGrouping+0x18>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	f003 0307 	and.w	r3, r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db0b      	blt.n	8000906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 021f 	and.w	r2, r3, #31
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <__NVIC_EnableIRQ+0x34>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	2001      	movs	r0, #1
 80008fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100

08000914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	db0a      	blt.n	800093e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b2da      	uxtb	r2, r3
 800092c:	490c      	ldr	r1, [pc, #48]	; (8000960 <__NVIC_SetPriority+0x4c>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	0112      	lsls	r2, r2, #4
 8000934:	b2d2      	uxtb	r2, r2
 8000936:	440b      	add	r3, r1
 8000938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800093c:	e00a      	b.n	8000954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4908      	ldr	r1, [pc, #32]	; (8000964 <__NVIC_SetPriority+0x50>)
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	3b04      	subs	r3, #4
 800094c:	0112      	lsls	r2, r2, #4
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	440b      	add	r3, r1
 8000952:	761a      	strb	r2, [r3, #24]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	; 0x24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	f1c3 0307 	rsb	r3, r3, #7
 8000982:	2b04      	cmp	r3, #4
 8000984:	bf28      	it	cs
 8000986:	2304      	movcs	r3, #4
 8000988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3304      	adds	r3, #4
 800098e:	2b06      	cmp	r3, #6
 8000990:	d902      	bls.n	8000998 <NVIC_EncodePriority+0x30>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3b03      	subs	r3, #3
 8000996:	e000      	b.n	800099a <NVIC_EncodePriority+0x32>
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43da      	mvns	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	401a      	ands	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43d9      	mvns	r1, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	4313      	orrs	r3, r2
         );
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3724      	adds	r7, #36	; 0x24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff4f 	bl	8000878 <__NVIC_SetPriorityGrouping>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f4:	f7ff ff64 	bl	80008c0 <__NVIC_GetPriorityGrouping>
 80009f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	6978      	ldr	r0, [r7, #20]
 8000a00:	f7ff ffb2 	bl	8000968 <NVIC_EncodePriority>
 8000a04:	4602      	mov	r2, r0
 8000a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff81 	bl	8000914 <__NVIC_SetPriority>
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff57 	bl	80008dc <__NVIC_EnableIRQ>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b08b      	sub	sp, #44	; 0x2c
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4a:	e127      	b.n	8000c9c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	f040 8116 	bne.w	8000c96 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2b12      	cmp	r3, #18
 8000a70:	d034      	beq.n	8000adc <HAL_GPIO_Init+0xa4>
 8000a72:	2b12      	cmp	r3, #18
 8000a74:	d80d      	bhi.n	8000a92 <HAL_GPIO_Init+0x5a>
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d02b      	beq.n	8000ad2 <HAL_GPIO_Init+0x9a>
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d804      	bhi.n	8000a88 <HAL_GPIO_Init+0x50>
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d031      	beq.n	8000ae6 <HAL_GPIO_Init+0xae>
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d01c      	beq.n	8000ac0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a86:	e048      	b.n	8000b1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d043      	beq.n	8000b14 <HAL_GPIO_Init+0xdc>
 8000a8c:	2b11      	cmp	r3, #17
 8000a8e:	d01b      	beq.n	8000ac8 <HAL_GPIO_Init+0x90>
          break;
 8000a90:	e043      	b.n	8000b1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a92:	4a89      	ldr	r2, [pc, #548]	; (8000cb8 <HAL_GPIO_Init+0x280>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d026      	beq.n	8000ae6 <HAL_GPIO_Init+0xae>
 8000a98:	4a87      	ldr	r2, [pc, #540]	; (8000cb8 <HAL_GPIO_Init+0x280>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d806      	bhi.n	8000aac <HAL_GPIO_Init+0x74>
 8000a9e:	4a87      	ldr	r2, [pc, #540]	; (8000cbc <HAL_GPIO_Init+0x284>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d020      	beq.n	8000ae6 <HAL_GPIO_Init+0xae>
 8000aa4:	4a86      	ldr	r2, [pc, #536]	; (8000cc0 <HAL_GPIO_Init+0x288>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d01d      	beq.n	8000ae6 <HAL_GPIO_Init+0xae>
          break;
 8000aaa:	e036      	b.n	8000b1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000aac:	4a85      	ldr	r2, [pc, #532]	; (8000cc4 <HAL_GPIO_Init+0x28c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d019      	beq.n	8000ae6 <HAL_GPIO_Init+0xae>
 8000ab2:	4a85      	ldr	r2, [pc, #532]	; (8000cc8 <HAL_GPIO_Init+0x290>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d016      	beq.n	8000ae6 <HAL_GPIO_Init+0xae>
 8000ab8:	4a84      	ldr	r2, [pc, #528]	; (8000ccc <HAL_GPIO_Init+0x294>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d013      	beq.n	8000ae6 <HAL_GPIO_Init+0xae>
          break;
 8000abe:	e02c      	b.n	8000b1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	623b      	str	r3, [r7, #32]
          break;
 8000ac6:	e028      	b.n	8000b1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	3304      	adds	r3, #4
 8000ace:	623b      	str	r3, [r7, #32]
          break;
 8000ad0:	e023      	b.n	8000b1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	3308      	adds	r3, #8
 8000ad8:	623b      	str	r3, [r7, #32]
          break;
 8000ada:	e01e      	b.n	8000b1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	330c      	adds	r3, #12
 8000ae2:	623b      	str	r3, [r7, #32]
          break;
 8000ae4:	e019      	b.n	8000b1a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aee:	2304      	movs	r3, #4
 8000af0:	623b      	str	r3, [r7, #32]
          break;
 8000af2:	e012      	b.n	8000b1a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d105      	bne.n	8000b08 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000afc:	2308      	movs	r3, #8
 8000afe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	611a      	str	r2, [r3, #16]
          break;
 8000b06:	e008      	b.n	8000b1a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69fa      	ldr	r2, [r7, #28]
 8000b10:	615a      	str	r2, [r3, #20]
          break;
 8000b12:	e002      	b.n	8000b1a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
          break;
 8000b18:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	2bff      	cmp	r3, #255	; 0xff
 8000b1e:	d801      	bhi.n	8000b24 <HAL_GPIO_Init+0xec>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	e001      	b.n	8000b28 <HAL_GPIO_Init+0xf0>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3304      	adds	r3, #4
 8000b28:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	2bff      	cmp	r3, #255	; 0xff
 8000b2e:	d802      	bhi.n	8000b36 <HAL_GPIO_Init+0xfe>
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	e002      	b.n	8000b3c <HAL_GPIO_Init+0x104>
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	210f      	movs	r1, #15
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	6a39      	ldr	r1, [r7, #32]
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	431a      	orrs	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f000 8096 	beq.w	8000c96 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6a:	4b59      	ldr	r3, [pc, #356]	; (8000cd0 <HAL_GPIO_Init+0x298>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	4a58      	ldr	r2, [pc, #352]	; (8000cd0 <HAL_GPIO_Init+0x298>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6193      	str	r3, [r2, #24]
 8000b76:	4b56      	ldr	r3, [pc, #344]	; (8000cd0 <HAL_GPIO_Init+0x298>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b82:	4a54      	ldr	r2, [pc, #336]	; (8000cd4 <HAL_GPIO_Init+0x29c>)
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	3302      	adds	r3, #2
 8000b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	220f      	movs	r2, #15
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a4b      	ldr	r2, [pc, #300]	; (8000cd8 <HAL_GPIO_Init+0x2a0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d013      	beq.n	8000bd6 <HAL_GPIO_Init+0x19e>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a4a      	ldr	r2, [pc, #296]	; (8000cdc <HAL_GPIO_Init+0x2a4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d00d      	beq.n	8000bd2 <HAL_GPIO_Init+0x19a>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a49      	ldr	r2, [pc, #292]	; (8000ce0 <HAL_GPIO_Init+0x2a8>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d007      	beq.n	8000bce <HAL_GPIO_Init+0x196>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a48      	ldr	r2, [pc, #288]	; (8000ce4 <HAL_GPIO_Init+0x2ac>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d101      	bne.n	8000bca <HAL_GPIO_Init+0x192>
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e006      	b.n	8000bd8 <HAL_GPIO_Init+0x1a0>
 8000bca:	2304      	movs	r3, #4
 8000bcc:	e004      	b.n	8000bd8 <HAL_GPIO_Init+0x1a0>
 8000bce:	2302      	movs	r3, #2
 8000bd0:	e002      	b.n	8000bd8 <HAL_GPIO_Init+0x1a0>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <HAL_GPIO_Init+0x1a0>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bda:	f002 0203 	and.w	r2, r2, #3
 8000bde:	0092      	lsls	r2, r2, #2
 8000be0:	4093      	lsls	r3, r2
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000be8:	493a      	ldr	r1, [pc, #232]	; (8000cd4 <HAL_GPIO_Init+0x29c>)
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	3302      	adds	r3, #2
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d006      	beq.n	8000c10 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c02:	4b39      	ldr	r3, [pc, #228]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4938      	ldr	r1, [pc, #224]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	600b      	str	r3, [r1, #0]
 8000c0e:	e006      	b.n	8000c1e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c10:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	4933      	ldr	r1, [pc, #204]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d006      	beq.n	8000c38 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	492e      	ldr	r1, [pc, #184]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	604b      	str	r3, [r1, #4]
 8000c36:	e006      	b.n	8000c46 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	4929      	ldr	r1, [pc, #164]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d006      	beq.n	8000c60 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	4924      	ldr	r1, [pc, #144]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	608b      	str	r3, [r1, #8]
 8000c5e:	e006      	b.n	8000c6e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	491f      	ldr	r1, [pc, #124]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d006      	beq.n	8000c88 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c7c:	68da      	ldr	r2, [r3, #12]
 8000c7e:	491a      	ldr	r1, [pc, #104]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	60cb      	str	r3, [r1, #12]
 8000c86:	e006      	b.n	8000c96 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	4915      	ldr	r1, [pc, #84]	; (8000ce8 <HAL_GPIO_Init+0x2b0>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	3301      	adds	r3, #1
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f47f aed0 	bne.w	8000a4c <HAL_GPIO_Init+0x14>
  }
}
 8000cac:	bf00      	nop
 8000cae:	372c      	adds	r7, #44	; 0x2c
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	10210000 	.word	0x10210000
 8000cbc:	10110000 	.word	0x10110000
 8000cc0:	10120000 	.word	0x10120000
 8000cc4:	10310000 	.word	0x10310000
 8000cc8:	10320000 	.word	0x10320000
 8000ccc:	10220000 	.word	0x10220000
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40011400 	.word	0x40011400
 8000ce8:	40010400 	.word	0x40010400

08000cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cfc:	787b      	ldrb	r3, [r7, #1]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d02:	887a      	ldrh	r2, [r7, #2]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d08:	e003      	b.n	8000d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	041a      	lsls	r2, r3, #16
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	611a      	str	r2, [r3, #16]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	887b      	ldrh	r3, [r7, #2]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d34:	887a      	ldrh	r2, [r7, #2]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d3c:	887a      	ldrh	r2, [r7, #2]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	611a      	str	r2, [r3, #16]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e26c      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 8087 	beq.w	8000e7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d6c:	4b92      	ldr	r3, [pc, #584]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 030c 	and.w	r3, r3, #12
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d00c      	beq.n	8000d92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d78:	4b8f      	ldr	r3, [pc, #572]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 030c 	and.w	r3, r3, #12
 8000d80:	2b08      	cmp	r3, #8
 8000d82:	d112      	bne.n	8000daa <HAL_RCC_OscConfig+0x5e>
 8000d84:	4b8c      	ldr	r3, [pc, #560]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d90:	d10b      	bne.n	8000daa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d92:	4b89      	ldr	r3, [pc, #548]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d06c      	beq.n	8000e78 <HAL_RCC_OscConfig+0x12c>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d168      	bne.n	8000e78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e246      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db2:	d106      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x76>
 8000db4:	4b80      	ldr	r3, [pc, #512]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a7f      	ldr	r2, [pc, #508]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	e02e      	b.n	8000e20 <HAL_RCC_OscConfig+0xd4>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10c      	bne.n	8000de4 <HAL_RCC_OscConfig+0x98>
 8000dca:	4b7b      	ldr	r3, [pc, #492]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a7a      	ldr	r2, [pc, #488]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	4b78      	ldr	r3, [pc, #480]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a77      	ldr	r2, [pc, #476]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e01d      	b.n	8000e20 <HAL_RCC_OscConfig+0xd4>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dec:	d10c      	bne.n	8000e08 <HAL_RCC_OscConfig+0xbc>
 8000dee:	4b72      	ldr	r3, [pc, #456]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a71      	ldr	r2, [pc, #452]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b6f      	ldr	r3, [pc, #444]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a6e      	ldr	r2, [pc, #440]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e00b      	b.n	8000e20 <HAL_RCC_OscConfig+0xd4>
 8000e08:	4b6b      	ldr	r3, [pc, #428]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a6a      	ldr	r2, [pc, #424]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	4b68      	ldr	r3, [pc, #416]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a67      	ldr	r2, [pc, #412]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d013      	beq.n	8000e50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fc20 	bl	800066c <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e30:	f7ff fc1c 	bl	800066c <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b64      	cmp	r3, #100	; 0x64
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e1fa      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e42:	4b5d      	ldr	r3, [pc, #372]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0f0      	beq.n	8000e30 <HAL_RCC_OscConfig+0xe4>
 8000e4e:	e014      	b.n	8000e7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e50:	f7ff fc0c 	bl	800066c <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e58:	f7ff fc08 	bl	800066c <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b64      	cmp	r3, #100	; 0x64
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e1e6      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6a:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f0      	bne.n	8000e58 <HAL_RCC_OscConfig+0x10c>
 8000e76:	e000      	b.n	8000e7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d063      	beq.n	8000f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e86:	4b4c      	ldr	r3, [pc, #304]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e92:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d11c      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x18c>
 8000e9e:	4b46      	ldr	r3, [pc, #280]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d116      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eaa:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d005      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x176>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d001      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e1ba      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec2:	4b3d      	ldr	r3, [pc, #244]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4939      	ldr	r1, [pc, #228]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed6:	e03a      	b.n	8000f4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d020      	beq.n	8000f22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee0:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee6:	f7ff fbc1 	bl	800066c <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eee:	f7ff fbbd 	bl	800066c <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e19b      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0f0      	beq.n	8000eee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0c:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4927      	ldr	r1, [pc, #156]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	600b      	str	r3, [r1, #0]
 8000f20:	e015      	b.n	8000f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fba0 	bl	800066c <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f30:	f7ff fb9c 	bl	800066c <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e17a      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f0      	bne.n	8000f30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d03a      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d019      	beq.n	8000f96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_RCC_OscConfig+0x274>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f68:	f7ff fb80 	bl	800066c <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f70:	f7ff fb7c 	bl	800066c <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e15a      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f000 fb0a 	bl	80015a8 <RCC_Delay>
 8000f94:	e01c      	b.n	8000fd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_RCC_OscConfig+0x274>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9c:	f7ff fb66 	bl	800066c <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa2:	e00f      	b.n	8000fc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fb62 	bl	800066c <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d908      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e140      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	42420000 	.word	0x42420000
 8000fc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc4:	4b9e      	ldr	r3, [pc, #632]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1e9      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80a6 	beq.w	800112a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe2:	4b97      	ldr	r3, [pc, #604]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10d      	bne.n	800100a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b94      	ldr	r3, [pc, #592]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a93      	ldr	r2, [pc, #588]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b91      	ldr	r3, [pc, #580]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001006:	2301      	movs	r3, #1
 8001008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100a:	4b8e      	ldr	r3, [pc, #568]	; (8001244 <HAL_RCC_OscConfig+0x4f8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001012:	2b00      	cmp	r3, #0
 8001014:	d118      	bne.n	8001048 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001016:	4b8b      	ldr	r3, [pc, #556]	; (8001244 <HAL_RCC_OscConfig+0x4f8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a8a      	ldr	r2, [pc, #552]	; (8001244 <HAL_RCC_OscConfig+0x4f8>)
 800101c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001022:	f7ff fb23 	bl	800066c <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102a:	f7ff fb1f 	bl	800066c <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b64      	cmp	r3, #100	; 0x64
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e0fd      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103c:	4b81      	ldr	r3, [pc, #516]	; (8001244 <HAL_RCC_OscConfig+0x4f8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d106      	bne.n	800105e <HAL_RCC_OscConfig+0x312>
 8001050:	4b7b      	ldr	r3, [pc, #492]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4a7a      	ldr	r2, [pc, #488]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6213      	str	r3, [r2, #32]
 800105c:	e02d      	b.n	80010ba <HAL_RCC_OscConfig+0x36e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10c      	bne.n	8001080 <HAL_RCC_OscConfig+0x334>
 8001066:	4b76      	ldr	r3, [pc, #472]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4a75      	ldr	r2, [pc, #468]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	6213      	str	r3, [r2, #32]
 8001072:	4b73      	ldr	r3, [pc, #460]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4a72      	ldr	r2, [pc, #456]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8001078:	f023 0304 	bic.w	r3, r3, #4
 800107c:	6213      	str	r3, [r2, #32]
 800107e:	e01c      	b.n	80010ba <HAL_RCC_OscConfig+0x36e>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b05      	cmp	r3, #5
 8001086:	d10c      	bne.n	80010a2 <HAL_RCC_OscConfig+0x356>
 8001088:	4b6d      	ldr	r3, [pc, #436]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	4a6c      	ldr	r2, [pc, #432]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6213      	str	r3, [r2, #32]
 8001094:	4b6a      	ldr	r3, [pc, #424]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4a69      	ldr	r2, [pc, #420]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6213      	str	r3, [r2, #32]
 80010a0:	e00b      	b.n	80010ba <HAL_RCC_OscConfig+0x36e>
 80010a2:	4b67      	ldr	r3, [pc, #412]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	4a66      	ldr	r2, [pc, #408]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	6213      	str	r3, [r2, #32]
 80010ae:	4b64      	ldr	r3, [pc, #400]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4a63      	ldr	r2, [pc, #396]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	f023 0304 	bic.w	r3, r3, #4
 80010b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d015      	beq.n	80010ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c2:	f7ff fad3 	bl	800066c <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c8:	e00a      	b.n	80010e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ca:	f7ff facf 	bl	800066c <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d8:	4293      	cmp	r3, r2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e0ab      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e0:	4b57      	ldr	r3, [pc, #348]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0ee      	beq.n	80010ca <HAL_RCC_OscConfig+0x37e>
 80010ec:	e014      	b.n	8001118 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ee:	f7ff fabd 	bl	800066c <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f4:	e00a      	b.n	800110c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f6:	f7ff fab9 	bl	800066c <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	f241 3288 	movw	r2, #5000	; 0x1388
 8001104:	4293      	cmp	r3, r2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e095      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800110c:	4b4c      	ldr	r3, [pc, #304]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1ee      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d105      	bne.n	800112a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800111e:	4b48      	ldr	r3, [pc, #288]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a47      	ldr	r2, [pc, #284]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001128:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8081 	beq.w	8001236 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001134:	4b42      	ldr	r3, [pc, #264]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	2b08      	cmp	r3, #8
 800113e:	d061      	beq.n	8001204 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d146      	bne.n	80011d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001148:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <HAL_RCC_OscConfig+0x4fc>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fa8d 	bl	800066c <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001156:	f7ff fa89 	bl	800066c <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e067      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001168:	4b35      	ldr	r3, [pc, #212]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f0      	bne.n	8001156 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117c:	d108      	bne.n	8001190 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	492d      	ldr	r1, [pc, #180]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	4313      	orrs	r3, r2
 800118e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a19      	ldr	r1, [r3, #32]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a0:	430b      	orrs	r3, r1
 80011a2:	4927      	ldr	r1, [pc, #156]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a8:	4b27      	ldr	r3, [pc, #156]	; (8001248 <HAL_RCC_OscConfig+0x4fc>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fa5d 	bl	800066c <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b6:	f7ff fa59 	bl	800066c <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e037      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x46a>
 80011d4:	e02f      	b.n	8001236 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <HAL_RCC_OscConfig+0x4fc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fa46 	bl	800066c <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e4:	f7ff fa42 	bl	800066c <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e020      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x498>
 8001202:	e018      	b.n	8001236 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d101      	bne.n	8001210 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e013      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_RCC_OscConfig+0x4f4>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	429a      	cmp	r2, r3
 8001222:	d106      	bne.n	8001232 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800122e:	429a      	cmp	r2, r3
 8001230:	d001      	beq.n	8001236 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	40007000 	.word	0x40007000
 8001248:	42420060 	.word	0x42420060

0800124c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0d0      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001260:	4b6a      	ldr	r3, [pc, #424]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d910      	bls.n	8001290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126e:	4b67      	ldr	r3, [pc, #412]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 0207 	bic.w	r2, r3, #7
 8001276:	4965      	ldr	r1, [pc, #404]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127e:	4b63      	ldr	r3, [pc, #396]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d001      	beq.n	8001290 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0b8      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d020      	beq.n	80012de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a8:	4b59      	ldr	r3, [pc, #356]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a58      	ldr	r2, [pc, #352]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c0:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4a52      	ldr	r2, [pc, #328]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012cc:	4b50      	ldr	r3, [pc, #320]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	494d      	ldr	r1, [pc, #308]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d040      	beq.n	800136c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d115      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e07f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d107      	bne.n	800131a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130a:	4b41      	ldr	r3, [pc, #260]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e073      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e06b      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132a:	4b39      	ldr	r3, [pc, #228]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f023 0203 	bic.w	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	4936      	ldr	r1, [pc, #216]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800133c:	f7ff f996 	bl	800066c <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001342:	e00a      	b.n	800135a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001344:	f7ff f992 	bl	800066c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001352:	4293      	cmp	r3, r2
 8001354:	d901      	bls.n	800135a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e053      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 020c 	and.w	r2, r3, #12
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	429a      	cmp	r2, r3
 800136a:	d1eb      	bne.n	8001344 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800136c:	4b27      	ldr	r3, [pc, #156]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d210      	bcs.n	800139c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 0207 	bic.w	r2, r3, #7
 8001382:	4922      	ldr	r1, [pc, #136]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e032      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4916      	ldr	r1, [pc, #88]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d009      	beq.n	80013da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	490e      	ldr	r1, [pc, #56]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013da:	f000 f821 	bl	8001420 <HAL_RCC_GetSysClockFreq>
 80013de:	4601      	mov	r1, r0
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	fa21 f303 	lsr.w	r3, r1, r3
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_RCC_ClockConfig+0x1cc>)
 80013f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_ClockConfig+0x1d0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 fbf6 	bl	8004bec <HAL_InitTick>

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000
 8001410:	40021000 	.word	0x40021000
 8001414:	0800955c 	.word	0x0800955c
 8001418:	2000000c 	.word	0x2000000c
 800141c:	20000000 	.word	0x20000000

08001420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001420:	b490      	push	{r4, r7}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001428:	1d3c      	adds	r4, r7, #4
 800142a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001430:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800144a:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b04      	cmp	r3, #4
 8001458:	d002      	beq.n	8001460 <HAL_RCC_GetSysClockFreq+0x40>
 800145a:	2b08      	cmp	r3, #8
 800145c:	d003      	beq.n	8001466 <HAL_RCC_GetSysClockFreq+0x46>
 800145e:	e02d      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001462:	623b      	str	r3, [r7, #32]
      break;
 8001464:	e02d      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	0c9b      	lsrs	r3, r3, #18
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001472:	4413      	add	r3, r2
 8001474:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001478:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	0c5b      	lsrs	r3, r3, #17
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001492:	4413      	add	r3, r2
 8001494:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001498:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800149e:	fb02 f203 	mul.w	r2, r2, r3
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
 80014aa:	e004      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	623b      	str	r3, [r7, #32]
      break;
 80014ba:	e002      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80014be:	623b      	str	r3, [r7, #32]
      break;
 80014c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c2:	6a3b      	ldr	r3, [r7, #32]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc90      	pop	{r4, r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	08008fbc 	.word	0x08008fbc
 80014d4:	08008fcc 	.word	0x08008fcc
 80014d8:	40021000 	.word	0x40021000
 80014dc:	007a1200 	.word	0x007a1200
 80014e0:	003d0900 	.word	0x003d0900

080014e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	2000000c 	.word	0x2000000c

080014f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014fc:	f7ff fff2 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001500:	4601      	mov	r1, r0
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	4a03      	ldr	r2, [pc, #12]	; (800151c <HAL_RCC_GetPCLK1Freq+0x24>)
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	0800956c 	.word	0x0800956c

08001520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001524:	f7ff ffde 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001528:	4601      	mov	r1, r0
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	0adb      	lsrs	r3, r3, #11
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	fa21 f303 	lsr.w	r3, r1, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	0800956c 	.word	0x0800956c

08001548 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	220f      	movs	r2, #15
 8001556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0207 	and.w	r2, r3, #7
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40022000 	.word	0x40022000

080015a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <RCC_Delay+0x34>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <RCC_Delay+0x38>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0a5b      	lsrs	r3, r3, #9
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015c4:	bf00      	nop
  }
  while (Delay --);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1e5a      	subs	r2, r3, #1
 80015ca:	60fa      	str	r2, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f9      	bne.n	80015c4 <RCC_Delay+0x1c>
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2000000c 	.word	0x2000000c
 80015e0:	10624dd3 	.word	0x10624dd3

080015e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e01d      	b.n	8001632 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f815 	bl	800163a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3304      	adds	r3, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f000 f962 	bl	80018ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b06      	cmp	r3, #6
 8001674:	d007      	beq.n	8001686 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d122      	bne.n	80016ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d11b      	bne.n	80016ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f06f 0202 	mvn.w	r2, #2
 80016be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f8ed 	bl	80018b4 <HAL_TIM_IC_CaptureCallback>
 80016da:	e005      	b.n	80016e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f8e0 	bl	80018a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f8ef 	bl	80018c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d122      	bne.n	8001742 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b04      	cmp	r3, #4
 8001708:	d11b      	bne.n	8001742 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f06f 0204 	mvn.w	r2, #4
 8001712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f8c3 	bl	80018b4 <HAL_TIM_IC_CaptureCallback>
 800172e:	e005      	b.n	800173c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f8b6 	bl	80018a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8c5 	bl	80018c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b08      	cmp	r3, #8
 800174e:	d122      	bne.n	8001796 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b08      	cmp	r3, #8
 800175c:	d11b      	bne.n	8001796 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f06f 0208 	mvn.w	r2, #8
 8001766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2204      	movs	r2, #4
 800176c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f899 	bl	80018b4 <HAL_TIM_IC_CaptureCallback>
 8001782:	e005      	b.n	8001790 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f88c 	bl	80018a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f89b 	bl	80018c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b10      	cmp	r3, #16
 80017a2:	d122      	bne.n	80017ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d11b      	bne.n	80017ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f06f 0210 	mvn.w	r2, #16
 80017ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2208      	movs	r2, #8
 80017c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f86f 	bl	80018b4 <HAL_TIM_IC_CaptureCallback>
 80017d6:	e005      	b.n	80017e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f862 	bl	80018a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f871 	bl	80018c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d10e      	bne.n	8001816 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f06f 0201 	mvn.w	r2, #1
 800180e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f003 f903 	bl	8004a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001820:	2b80      	cmp	r3, #128	; 0x80
 8001822:	d10e      	bne.n	8001842 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182e:	2b80      	cmp	r3, #128	; 0x80
 8001830:	d107      	bne.n	8001842 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800183a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f8c0 	bl	80019c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184c:	2b40      	cmp	r3, #64	; 0x40
 800184e:	d10e      	bne.n	800186e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185a:	2b40      	cmp	r3, #64	; 0x40
 800185c:	d107      	bne.n	800186e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f835 	bl	80018d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	2b20      	cmp	r3, #32
 800187a:	d10e      	bne.n	800189a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	2b20      	cmp	r3, #32
 8001888:	d107      	bne.n	800189a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f06f 0220 	mvn.w	r2, #32
 8001892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f88b 	bl	80019b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
	...

080018ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a29      	ldr	r2, [pc, #164]	; (80019a4 <TIM_Base_SetConfig+0xb8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d00b      	beq.n	800191c <TIM_Base_SetConfig+0x30>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190a:	d007      	beq.n	800191c <TIM_Base_SetConfig+0x30>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <TIM_Base_SetConfig+0xbc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d003      	beq.n	800191c <TIM_Base_SetConfig+0x30>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a25      	ldr	r2, [pc, #148]	; (80019ac <TIM_Base_SetConfig+0xc0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d108      	bne.n	800192e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <TIM_Base_SetConfig+0xb8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00b      	beq.n	800194e <TIM_Base_SetConfig+0x62>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193c:	d007      	beq.n	800194e <TIM_Base_SetConfig+0x62>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <TIM_Base_SetConfig+0xbc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d003      	beq.n	800194e <TIM_Base_SetConfig+0x62>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a18      	ldr	r2, [pc, #96]	; (80019ac <TIM_Base_SetConfig+0xc0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d108      	bne.n	8001960 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <TIM_Base_SetConfig+0xb8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d103      	bne.n	8001994 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	615a      	str	r2, [r3, #20]
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	40012c00 	.word	0x40012c00
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40000800 	.word	0x40000800

080019b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e03f      	b.n	8001a66 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f003 f8aa 	bl	8004b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2224      	movs	r2, #36	; 0x24
 8001a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f829 	bl	8001a70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2220      	movs	r2, #32
 8001a58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001aaa:	f023 030c 	bic.w	r3, r3, #12
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	68f9      	ldr	r1, [r7, #12]
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699a      	ldr	r2, [r3, #24]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <UART_SetConfig+0x1ac>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d14e      	bne.n	8001b76 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ad8:	f7ff fd22 	bl	8001520 <HAL_RCC_GetPCLK2Freq>
 8001adc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009a      	lsls	r2, r3, #2
 8001ae8:	441a      	add	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	4a4a      	ldr	r2, [pc, #296]	; (8001c20 <UART_SetConfig+0x1b0>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	0119      	lsls	r1, r3, #4
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	009a      	lsls	r2, r3, #2
 8001b08:	441a      	add	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b14:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <UART_SetConfig+0x1b0>)
 8001b16:	fba3 0302 	umull	r0, r3, r3, r2
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	2064      	movs	r0, #100	; 0x64
 8001b1e:	fb00 f303 	mul.w	r3, r0, r3
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	3332      	adds	r3, #50	; 0x32
 8001b28:	4a3d      	ldr	r2, [pc, #244]	; (8001c20 <UART_SetConfig+0x1b0>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b34:	4419      	add	r1, r3
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009a      	lsls	r2, r3, #2
 8001b40:	441a      	add	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b4c:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <UART_SetConfig+0x1b0>)
 8001b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2064      	movs	r0, #100	; 0x64
 8001b56:	fb00 f303 	mul.w	r3, r0, r3
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	3332      	adds	r3, #50	; 0x32
 8001b60:	4a2f      	ldr	r2, [pc, #188]	; (8001c20 <UART_SetConfig+0x1b0>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	f003 020f 	and.w	r2, r3, #15
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	440a      	add	r2, r1
 8001b72:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001b74:	e04d      	b.n	8001c12 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b76:	f7ff fcbf 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001b7a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	009a      	lsls	r2, r3, #2
 8001b86:	441a      	add	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	4a23      	ldr	r2, [pc, #140]	; (8001c20 <UART_SetConfig+0x1b0>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	095b      	lsrs	r3, r3, #5
 8001b9a:	0119      	lsls	r1, r3, #4
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009a      	lsls	r2, r3, #2
 8001ba6:	441a      	add	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <UART_SetConfig+0x1b0>)
 8001bb4:	fba3 0302 	umull	r0, r3, r3, r2
 8001bb8:	095b      	lsrs	r3, r3, #5
 8001bba:	2064      	movs	r0, #100	; 0x64
 8001bbc:	fb00 f303 	mul.w	r3, r0, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	3332      	adds	r3, #50	; 0x32
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <UART_SetConfig+0x1b0>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	095b      	lsrs	r3, r3, #5
 8001bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd2:	4419      	add	r1, r3
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	009a      	lsls	r2, r3, #2
 8001bde:	441a      	add	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <UART_SetConfig+0x1b0>)
 8001bec:	fba3 0302 	umull	r0, r3, r3, r2
 8001bf0:	095b      	lsrs	r3, r3, #5
 8001bf2:	2064      	movs	r0, #100	; 0x64
 8001bf4:	fb00 f303 	mul.w	r3, r0, r3
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	3332      	adds	r3, #50	; 0x32
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <UART_SetConfig+0x1b0>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	f003 020f 	and.w	r2, r3, #15
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	440a      	add	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40013800 	.word	0x40013800
 8001c20:	51eb851f 	.word	0x51eb851f

08001c24 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c2a:	f3ef 8305 	mrs	r3, IPSR
 8001c2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10f      	bne.n	8001c56 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c36:	f3ef 8310 	mrs	r3, PRIMASK
 8001c3a:	607b      	str	r3, [r7, #4]
  return(result);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <osKernelInitialize+0x32>
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <osKernelInitialize+0x60>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d109      	bne.n	8001c5e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c4a:	f3ef 8311 	mrs	r3, BASEPRI
 8001c4e:	603b      	str	r3, [r7, #0]
  return(result);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001c56:	f06f 0305 	mvn.w	r3, #5
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e00c      	b.n	8001c78 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <osKernelInitialize+0x60>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d105      	bne.n	8001c72 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <osKernelInitialize+0x60>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e002      	b.n	8001c78 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001c78:	68fb      	ldr	r3, [r7, #12]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	2000010c 	.word	0x2000010c

08001c88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c8e:	f3ef 8305 	mrs	r3, IPSR
 8001c92:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10f      	bne.n	8001cba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c9e:	607b      	str	r3, [r7, #4]
  return(result);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <osKernelStart+0x32>
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <osKernelStart+0x64>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d109      	bne.n	8001cc2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001cae:	f3ef 8311 	mrs	r3, BASEPRI
 8001cb2:	603b      	str	r3, [r7, #0]
  return(result);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001cba:	f06f 0305 	mvn.w	r3, #5
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	e00e      	b.n	8001ce0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <osKernelStart+0x64>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d107      	bne.n	8001cda <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <osKernelStart+0x64>)
 8001ccc:	2202      	movs	r2, #2
 8001cce:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001cd0:	f001 f988 	bl	8002fe4 <vTaskStartScheduler>
      stat = osOK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	e002      	b.n	8001ce0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cde:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000010c 	.word	0x2000010c

08001cf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b092      	sub	sp, #72	; 0x48
 8001cf4:	af04      	add	r7, sp, #16
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d00:	f3ef 8305 	mrs	r3, IPSR
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f040 8094 	bne.w	8001e36 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d12:	623b      	str	r3, [r7, #32]
  return(result);
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 808d 	bne.w	8001e36 <osThreadNew+0x146>
 8001d1c:	4b48      	ldr	r3, [pc, #288]	; (8001e40 <osThreadNew+0x150>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d106      	bne.n	8001d32 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d24:	f3ef 8311 	mrs	r3, BASEPRI
 8001d28:	61fb      	str	r3, [r7, #28]
  return(result);
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f040 8082 	bne.w	8001e36 <osThreadNew+0x146>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d07e      	beq.n	8001e36 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001d3c:	2318      	movs	r3, #24
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001d40:	2300      	movs	r3, #0
 8001d42:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001d44:	f107 031b 	add.w	r3, r7, #27
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d045      	beq.n	8001de2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <osThreadNew+0x74>
        name = attr->name;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <osThreadNew+0x9a>
 8001d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7a:	2b38      	cmp	r3, #56	; 0x38
 8001d7c:	d805      	bhi.n	8001d8a <osThreadNew+0x9a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <osThreadNew+0x9e>
        return (NULL);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e054      	b.n	8001e38 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00e      	beq.n	8001dc4 <osThreadNew+0xd4>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b5b      	cmp	r3, #91	; 0x5b
 8001dac:	d90a      	bls.n	8001dc4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <osThreadNew+0xd4>
        mem = 1;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc2:	e010      	b.n	8001de6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10c      	bne.n	8001de6 <osThreadNew+0xf6>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d108      	bne.n	8001de6 <osThreadNew+0xf6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d104      	bne.n	8001de6 <osThreadNew+0xf6>
          mem = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001de0:	e001      	b.n	8001de6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d110      	bne.n	8001e0e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001df4:	9202      	str	r2, [sp, #8]
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 ff26 	bl	8002c54 <xTaskCreateStatic>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e013      	b.n	8001e36 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d110      	bne.n	8001e36 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 ff6d 	bl	8002d06 <xTaskCreate>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d001      	beq.n	8001e36 <osThreadNew+0x146>
          hTask = NULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001e36:	697b      	ldr	r3, [r7, #20]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3738      	adds	r7, #56	; 0x38
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	2000010c 	.word	0x2000010c

08001e44 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e4c:	f3ef 8305 	mrs	r3, IPSR
 8001e50:	613b      	str	r3, [r7, #16]
  return(result);
 8001e52:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10f      	bne.n	8001e78 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e58:	f3ef 8310 	mrs	r3, PRIMASK
 8001e5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <osDelay+0x34>
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <osDelay+0x58>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d109      	bne.n	8001e80 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e6c:	f3ef 8311 	mrs	r3, BASEPRI
 8001e70:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <osDelay+0x3c>
    stat = osErrorISR;
 8001e78:	f06f 0305 	mvn.w	r3, #5
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e007      	b.n	8001e90 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f001 f876 	bl	8002f7c <vTaskDelay>
    }
  }

  return (stat);
 8001e90:	697b      	ldr	r3, [r7, #20]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000010c 	.word	0x2000010c

08001ea0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eac:	f3ef 8305 	mrs	r3, IPSR
 8001eb0:	613b      	str	r3, [r7, #16]
  return(result);
 8001eb2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f040 8085 	bne.w	8001fc4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eba:	f3ef 8310 	mrs	r3, PRIMASK
 8001ebe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d17e      	bne.n	8001fc4 <osMutexNew+0x124>
 8001ec6:	4b42      	ldr	r3, [pc, #264]	; (8001fd0 <osMutexNew+0x130>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d105      	bne.n	8001eda <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ece:	f3ef 8311 	mrs	r3, BASEPRI
 8001ed2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d174      	bne.n	8001fc4 <osMutexNew+0x124>
    if (attr != NULL) {
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <osMutexNew+0x48>
      type = attr->attr_bits;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	623b      	str	r3, [r7, #32]
 8001ee6:	e001      	b.n	8001eec <osMutexNew+0x4c>
    } else {
      type = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <osMutexNew+0x5c>
      rmtx = 1U;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e001      	b.n	8001f00 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d15c      	bne.n	8001fc4 <osMutexNew+0x124>
      mem = -1;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f0e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d015      	beq.n	8001f42 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d006      	beq.n	8001f2c <osMutexNew+0x8c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b4f      	cmp	r3, #79	; 0x4f
 8001f24:	d902      	bls.n	8001f2c <osMutexNew+0x8c>
          mem = 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	e00c      	b.n	8001f46 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d108      	bne.n	8001f46 <osMutexNew+0xa6>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d104      	bne.n	8001f46 <osMutexNew+0xa6>
            mem = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	e001      	b.n	8001f46 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d112      	bne.n	8001f72 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4619      	mov	r1, r3
 8001f58:	2004      	movs	r0, #4
 8001f5a:	f000 fa89 	bl	8002470 <xQueueCreateMutexStatic>
 8001f5e:	6278      	str	r0, [r7, #36]	; 0x24
 8001f60:	e016      	b.n	8001f90 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	4619      	mov	r1, r3
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f000 fa81 	bl	8002470 <xQueueCreateMutexStatic>
 8001f6e:	6278      	str	r0, [r7, #36]	; 0x24
 8001f70:	e00e      	b.n	8001f90 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10b      	bne.n	8001f90 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8001f7e:	2004      	movs	r0, #4
 8001f80:	f000 fa5e 	bl	8002440 <xQueueCreateMutex>
 8001f84:	6278      	str	r0, [r7, #36]	; 0x24
 8001f86:	e003      	b.n	8001f90 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f000 fa59 	bl	8002440 <xQueueCreateMutex>
 8001f8e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00c      	beq.n	8001fb0 <osMutexNew+0x110>
        if (attr != NULL) {
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <osMutexNew+0x104>
          name = attr->name;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e001      	b.n	8001fa8 <osMutexNew+0x108>
        } else {
          name = NULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8001fa8:	6979      	ldr	r1, [r7, #20]
 8001faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fac:	f000 fdf6 	bl	8002b9c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <osMutexNew+0x124>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3728      	adds	r7, #40	; 0x28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000010c 	.word	0x2000010c

08001fd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <vApplicationGetIdleTaskMemory+0x28>)
 8001fe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4a05      	ldr	r2, [pc, #20]	; (8002000 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2280      	movs	r2, #128	; 0x80
 8001ff0:	601a      	str	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	20000110 	.word	0x20000110
 8002000:	2000016c 	.word	0x2000016c

08002004 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a07      	ldr	r2, [pc, #28]	; (8002030 <vApplicationGetTimerTaskMemory+0x2c>)
 8002014:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <vApplicationGetTimerTaskMemory+0x30>)
 800201a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	2000036c 	.word	0x2000036c
 8002034:	200003c8 	.word	0x200003c8

08002038 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f103 0208 	add.w	r2, r3, #8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002050:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f103 0208 	add.w	r2, r3, #8
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f103 0208 	add.w	r2, r3, #8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	601a      	str	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ea:	d103      	bne.n	80020f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	e00c      	b.n	800210e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3308      	adds	r3, #8
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	e002      	b.n	8002102 <vListInsert+0x2e>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	d2f6      	bcs.n	80020fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	601a      	str	r2, [r3, #0]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6892      	ldr	r2, [r2, #8]
 800215a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6852      	ldr	r2, [r2, #4]
 8002164:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	d103      	bne.n	8002178 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1e5a      	subs	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
	...

08002198 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b0:	f383 8811 	msr	BASEPRI, r3
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	e7fe      	b.n	80021be <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80021c0:	f002 f822 	bl	8004208 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021cc:	68f9      	ldr	r1, [r7, #12]
 80021ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	441a      	add	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f0:	3b01      	subs	r3, #1
 80021f2:	68f9      	ldr	r1, [r7, #12]
 80021f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	441a      	add	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	22ff      	movs	r2, #255	; 0xff
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	22ff      	movs	r2, #255	; 0xff
 800220c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d114      	bne.n	8002240 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d01a      	beq.n	8002254 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3310      	adds	r3, #16
 8002222:	4618      	mov	r0, r3
 8002224:	f001 f962 	bl	80034ec <xTaskRemoveFromEventList>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d012      	beq.n	8002254 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <xQueueGenericReset+0xcc>)
 8002230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	f3bf 8f4f 	dsb	sy
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	e009      	b.n	8002254 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3310      	adds	r3, #16
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fef7 	bl	8002038 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3324      	adds	r3, #36	; 0x24
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fef2 	bl	8002038 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002254:	f002 f806 	bl	8004264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002258:	2301      	movs	r3, #1
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	e000ed04 	.word	0xe000ed04

08002268 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08e      	sub	sp, #56	; 0x38
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <xQueueGenericCreateStatic+0x28>
 800227c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002280:	f383 8811 	msr	BASEPRI, r3
 8002284:	f3bf 8f6f 	isb	sy
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
 800228e:	e7fe      	b.n	800228e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <xQueueGenericCreateStatic+0x42>
 8002296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229a:	f383 8811 	msr	BASEPRI, r3
 800229e:	f3bf 8f6f 	isb	sy
 80022a2:	f3bf 8f4f 	dsb	sy
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
 80022a8:	e7fe      	b.n	80022a8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <xQueueGenericCreateStatic+0x4e>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <xQueueGenericCreateStatic+0x52>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <xQueueGenericCreateStatic+0x54>
 80022ba:	2300      	movs	r3, #0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d109      	bne.n	80022d4 <xQueueGenericCreateStatic+0x6c>
 80022c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	623b      	str	r3, [r7, #32]
 80022d2:	e7fe      	b.n	80022d2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <xQueueGenericCreateStatic+0x78>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <xQueueGenericCreateStatic+0x7c>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <xQueueGenericCreateStatic+0x7e>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <xQueueGenericCreateStatic+0x96>
 80022ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ee:	f383 8811 	msr	BASEPRI, r3
 80022f2:	f3bf 8f6f 	isb	sy
 80022f6:	f3bf 8f4f 	dsb	sy
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	e7fe      	b.n	80022fc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80022fe:	2350      	movs	r3, #80	; 0x50
 8002300:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b50      	cmp	r3, #80	; 0x50
 8002306:	d009      	beq.n	800231c <xQueueGenericCreateStatic+0xb4>
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	e7fe      	b.n	800231a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00d      	beq.n	8002342 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800232e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	4613      	mov	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f842 	bl	80023c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002344:	4618      	mov	r0, r3
 8002346:	3730      	adds	r7, #48	; 0x30
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	4613      	mov	r3, r2
 8002358:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <xQueueGenericCreate+0x28>
 8002360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	e7fe      	b.n	8002372 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e004      	b.n	800238a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3350      	adds	r3, #80	; 0x50
 800238e:	4618      	mov	r0, r3
 8002390:	f002 f830 	bl	80043f4 <pvPortMalloc>
 8002394:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00f      	beq.n	80023bc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	3350      	adds	r3, #80	; 0x50
 80023a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023aa:	79fa      	ldrb	r2, [r7, #7]
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f805 	bl	80023c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80023bc:	69bb      	ldr	r3, [r7, #24]
	}
 80023be:	4618      	mov	r0, r3
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d103      	bne.n	80023e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e002      	b.n	80023e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023f4:	2101      	movs	r1, #1
 80023f6:	69b8      	ldr	r0, [r7, #24]
 80023f8:	f7ff fece 	bl	8002198 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00e      	beq.n	8002438 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800242c:	2300      	movs	r3, #0
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f838 	bl	80024a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800244a:	2301      	movs	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	461a      	mov	r2, r3
 8002456:	6939      	ldr	r1, [r7, #16]
 8002458:	6978      	ldr	r0, [r7, #20]
 800245a:	f7ff ff77 	bl	800234c <xQueueGenericCreate>
 800245e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7ff ffd3 	bl	800240c <prvInitialiseMutex>

		return pxNewQueue;
 8002466:	68fb      	ldr	r3, [r7, #12]
	}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af02      	add	r7, sp, #8
 8002476:	4603      	mov	r3, r0
 8002478:	6039      	str	r1, [r7, #0]
 800247a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800247c:	2301      	movs	r3, #1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2200      	movs	r2, #0
 800248c:	6939      	ldr	r1, [r7, #16]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff feea 	bl	8002268 <xQueueGenericCreateStatic>
 8002494:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f7ff ffb8 	bl	800240c <prvInitialiseMutex>

		return pxNewQueue;
 800249c:	68fb      	ldr	r3, [r7, #12]
	}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08e      	sub	sp, #56	; 0x38
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024b6:	2300      	movs	r3, #0
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d109      	bne.n	80024d8 <xQueueGenericSend+0x30>
 80024c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d6:	e7fe      	b.n	80024d6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d103      	bne.n	80024e6 <xQueueGenericSend+0x3e>
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <xQueueGenericSend+0x42>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <xQueueGenericSend+0x44>
 80024ea:	2300      	movs	r3, #0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <xQueueGenericSend+0x5c>
 80024f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
 8002502:	e7fe      	b.n	8002502 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d103      	bne.n	8002512 <xQueueGenericSend+0x6a>
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <xQueueGenericSend+0x6e>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <xQueueGenericSend+0x70>
 8002516:	2300      	movs	r3, #0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <xQueueGenericSend+0x88>
 800251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	623b      	str	r3, [r7, #32]
 800252e:	e7fe      	b.n	800252e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002530:	f001 f996 	bl	8003860 <xTaskGetSchedulerState>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <xQueueGenericSend+0x98>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <xQueueGenericSend+0x9c>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <xQueueGenericSend+0x9e>
 8002544:	2300      	movs	r3, #0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <xQueueGenericSend+0xb6>
 800254a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254e:	f383 8811 	msr	BASEPRI, r3
 8002552:	f3bf 8f6f 	isb	sy
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	e7fe      	b.n	800255c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800255e:	f001 fe53 	bl	8004208 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	429a      	cmp	r2, r3
 800256c:	d302      	bcc.n	8002574 <xQueueGenericSend+0xcc>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d129      	bne.n	80025c8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800257a:	f000 f9ff 	bl	800297c <prvCopyDataToQueue>
 800257e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	2b00      	cmp	r3, #0
 8002586:	d010      	beq.n	80025aa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	3324      	adds	r3, #36	; 0x24
 800258c:	4618      	mov	r0, r3
 800258e:	f000 ffad 	bl	80034ec <xTaskRemoveFromEventList>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002598:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <xQueueGenericSend+0x1f0>)
 800259a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	e00a      	b.n	80025c0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025b0:	4b39      	ldr	r3, [pc, #228]	; (8002698 <xQueueGenericSend+0x1f0>)
 80025b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025c0:	f001 fe50 	bl	8004264 <vPortExitCritical>
				return pdPASS;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e063      	b.n	8002690 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d103      	bne.n	80025d6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025ce:	f001 fe49 	bl	8004264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e05c      	b.n	8002690 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d106      	bne.n	80025ea <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 ffe5 	bl	80035b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025e6:	2301      	movs	r3, #1
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025ea:	f001 fe3b 	bl	8004264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025ee:	f000 fd5d 	bl	80030ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025f2:	f001 fe09 	bl	8004208 <vPortEnterCritical>
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025fc:	b25b      	sxtb	r3, r3
 80025fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002602:	d103      	bne.n	800260c <xQueueGenericSend+0x164>
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002612:	b25b      	sxtb	r3, r3
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002618:	d103      	bne.n	8002622 <xQueueGenericSend+0x17a>
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002622:	f001 fe1f 	bl	8004264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002626:	1d3a      	adds	r2, r7, #4
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f000 ffd4 	bl	80035dc <xTaskCheckForTimeOut>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d124      	bne.n	8002684 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800263a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800263c:	f000 fa96 	bl	8002b6c <prvIsQueueFull>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d018      	beq.n	8002678 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	3310      	adds	r3, #16
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fefe 	bl	8003450 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002656:	f000 fa21 	bl	8002a9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800265a:	f000 fd35 	bl	80030c8 <xTaskResumeAll>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	f47f af7c 	bne.w	800255e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <xQueueGenericSend+0x1f0>)
 8002668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	e772      	b.n	800255e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800267a:	f000 fa0f 	bl	8002a9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800267e:	f000 fd23 	bl	80030c8 <xTaskResumeAll>
 8002682:	e76c      	b.n	800255e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002686:	f000 fa09 	bl	8002a9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800268a:	f000 fd1d 	bl	80030c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800268e:	2300      	movs	r3, #0
		}
	}
}
 8002690:	4618      	mov	r0, r3
 8002692:	3738      	adds	r7, #56	; 0x38
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	e000ed04 	.word	0xe000ed04

0800269c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08e      	sub	sp, #56	; 0x38
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <xQueueGenericSendFromISR+0x2c>
 80026b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	e7fe      	b.n	80026c6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <xQueueGenericSendFromISR+0x3a>
 80026ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <xQueueGenericSendFromISR+0x3e>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <xQueueGenericSendFromISR+0x40>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d109      	bne.n	80026f4 <xQueueGenericSendFromISR+0x58>
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	623b      	str	r3, [r7, #32]
 80026f2:	e7fe      	b.n	80026f2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d103      	bne.n	8002702 <xQueueGenericSendFromISR+0x66>
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <xQueueGenericSendFromISR+0x6a>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <xQueueGenericSendFromISR+0x6c>
 8002706:	2300      	movs	r3, #0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <xQueueGenericSendFromISR+0x84>
 800270c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	e7fe      	b.n	800271e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002720:	f001 fe2c 	bl	800437c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002724:	f3ef 8211 	mrs	r2, BASEPRI
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	61ba      	str	r2, [r7, #24]
 800273a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800273c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	429a      	cmp	r2, r3
 800274a:	d302      	bcc.n	8002752 <xQueueGenericSendFromISR+0xb6>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d12c      	bne.n	80027ac <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002762:	f000 f90b 	bl	800297c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002766:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800276e:	d112      	bne.n	8002796 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	d016      	beq.n	80027a6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	3324      	adds	r3, #36	; 0x24
 800277c:	4618      	mov	r0, r3
 800277e:	f000 feb5 	bl	80034ec <xTaskRemoveFromEventList>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e007      	b.n	80027a6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002796:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800279a:	3301      	adds	r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	b25a      	sxtb	r2, r3
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027a6:	2301      	movs	r3, #1
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80027aa:	e001      	b.n	80027b0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3738      	adds	r7, #56	; 0x38
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	; 0x30
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <xQueueReceive+0x2e>
	__asm volatile
 80027de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	623b      	str	r3, [r7, #32]
 80027f0:	e7fe      	b.n	80027f0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d103      	bne.n	8002800 <xQueueReceive+0x3c>
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <xQueueReceive+0x40>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <xQueueReceive+0x42>
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <xQueueReceive+0x5a>
 800280a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	61fb      	str	r3, [r7, #28]
 800281c:	e7fe      	b.n	800281c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800281e:	f001 f81f 	bl	8003860 <xTaskGetSchedulerState>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d102      	bne.n	800282e <xQueueReceive+0x6a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <xQueueReceive+0x6e>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <xQueueReceive+0x70>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <xQueueReceive+0x88>
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	e7fe      	b.n	800284a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800284c:	f001 fcdc 	bl	8004208 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01f      	beq.n	800289c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002860:	f000 f8f6 	bl	8002a50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	1e5a      	subs	r2, r3, #1
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00f      	beq.n	8002894 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	3310      	adds	r3, #16
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fe37 	bl	80034ec <xTaskRemoveFromEventList>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002884:	4b3c      	ldr	r3, [pc, #240]	; (8002978 <xQueueReceive+0x1b4>)
 8002886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002894:	f001 fce6 	bl	8004264 <vPortExitCritical>
				return pdPASS;
 8002898:	2301      	movs	r3, #1
 800289a:	e069      	b.n	8002970 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d103      	bne.n	80028aa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028a2:	f001 fcdf 	bl	8004264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e062      	b.n	8002970 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fe7b 	bl	80035b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028be:	f001 fcd1 	bl	8004264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028c2:	f000 fbf3 	bl	80030ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028c6:	f001 fc9f 	bl	8004208 <vPortEnterCritical>
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d6:	d103      	bne.n	80028e0 <xQueueReceive+0x11c>
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028e6:	b25b      	sxtb	r3, r3
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ec:	d103      	bne.n	80028f6 <xQueueReceive+0x132>
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028f6:	f001 fcb5 	bl	8004264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028fa:	1d3a      	adds	r2, r7, #4
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fe6a 	bl	80035dc <xTaskCheckForTimeOut>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d123      	bne.n	8002956 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800290e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002910:	f000 f916 	bl	8002b40 <prvIsQueueEmpty>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d017      	beq.n	800294a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	3324      	adds	r3, #36	; 0x24
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fd94 	bl	8003450 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800292a:	f000 f8b7 	bl	8002a9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800292e:	f000 fbcb 	bl	80030c8 <xTaskResumeAll>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d189      	bne.n	800284c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002938:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <xQueueReceive+0x1b4>)
 800293a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	e780      	b.n	800284c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800294a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800294c:	f000 f8a6 	bl	8002a9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002950:	f000 fbba 	bl	80030c8 <xTaskResumeAll>
 8002954:	e77a      	b.n	800284c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002958:	f000 f8a0 	bl	8002a9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800295c:	f000 fbb4 	bl	80030c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002962:	f000 f8ed 	bl	8002b40 <prvIsQueueEmpty>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	f43f af6f 	beq.w	800284c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800296e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002970:	4618      	mov	r0, r3
 8002972:	3730      	adds	r7, #48	; 0x30
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	e000ed04 	.word	0xe000ed04

0800297c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10d      	bne.n	80029b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d14d      	bne.n	8002a3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 ff78 	bl	800389c <xTaskPriorityDisinherit>
 80029ac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	e043      	b.n	8002a3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d119      	bne.n	80029f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6898      	ldr	r0, [r3, #8]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	461a      	mov	r2, r3
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	f005 fba6 	bl	8008118 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	441a      	add	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d32b      	bcc.n	8002a3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	609a      	str	r2, [r3, #8]
 80029ee:	e026      	b.n	8002a3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	68d8      	ldr	r0, [r3, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	461a      	mov	r2, r3
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	f005 fb8c 	bl	8008118 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	425b      	negs	r3, r3
 8002a0a:	441a      	add	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d207      	bcs.n	8002a2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	425b      	negs	r3, r3
 8002a26:	441a      	add	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d105      	bne.n	8002a3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a46:	697b      	ldr	r3, [r7, #20]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d018      	beq.n	8002a94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	441a      	add	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d303      	bcc.n	8002a84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68d9      	ldr	r1, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	6838      	ldr	r0, [r7, #0]
 8002a90:	f005 fb42 	bl	8008118 <memcpy>
	}
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002aa4:	f001 fbb0 	bl	8004208 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ab0:	e011      	b.n	8002ad6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d012      	beq.n	8002ae0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3324      	adds	r3, #36	; 0x24
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fd14 	bl	80034ec <xTaskRemoveFromEventList>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002aca:	f000 fde7 	bl	800369c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	dce9      	bgt.n	8002ab2 <prvUnlockQueue+0x16>
 8002ade:	e000      	b.n	8002ae2 <prvUnlockQueue+0x46>
					break;
 8002ae0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	22ff      	movs	r2, #255	; 0xff
 8002ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002aea:	f001 fbbb 	bl	8004264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002aee:	f001 fb8b 	bl	8004208 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002af8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002afa:	e011      	b.n	8002b20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d012      	beq.n	8002b2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3310      	adds	r3, #16
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fcef 	bl	80034ec <xTaskRemoveFromEventList>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b14:	f000 fdc2 	bl	800369c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b18:	7bbb      	ldrb	r3, [r7, #14]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	dce9      	bgt.n	8002afc <prvUnlockQueue+0x60>
 8002b28:	e000      	b.n	8002b2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	22ff      	movs	r2, #255	; 0xff
 8002b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b34:	f001 fb96 	bl	8004264 <vPortExitCritical>
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b48:	f001 fb5e 	bl	8004208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b54:	2301      	movs	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e001      	b.n	8002b5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b5e:	f001 fb81 	bl	8004264 <vPortExitCritical>

	return xReturn;
 8002b62:	68fb      	ldr	r3, [r7, #12]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b74:	f001 fb48 	bl	8004208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d102      	bne.n	8002b8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b84:	2301      	movs	r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e001      	b.n	8002b8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b8e:	f001 fb69 	bl	8004264 <vPortExitCritical>

	return xReturn;
 8002b92:	68fb      	ldr	r3, [r7, #12]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	e014      	b.n	8002bd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002bac:	4a0e      	ldr	r2, [pc, #56]	; (8002be8 <vQueueAddToRegistry+0x4c>)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10b      	bne.n	8002bd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bb8:	490b      	ldr	r1, [pc, #44]	; (8002be8 <vQueueAddToRegistry+0x4c>)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002bc2:	4a09      	ldr	r2, [pc, #36]	; (8002be8 <vQueueAddToRegistry+0x4c>)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002bce:	e005      	b.n	8002bdc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b07      	cmp	r3, #7
 8002bda:	d9e7      	bls.n	8002bac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20001e80 	.word	0x20001e80

08002bec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002bfc:	f001 fb04 	bl	8004208 <vPortEnterCritical>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c06:	b25b      	sxtb	r3, r3
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c0c:	d103      	bne.n	8002c16 <vQueueWaitForMessageRestricted+0x2a>
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c1c:	b25b      	sxtb	r3, r3
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c22:	d103      	bne.n	8002c2c <vQueueWaitForMessageRestricted+0x40>
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c2c:	f001 fb1a 	bl	8004264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	3324      	adds	r3, #36	; 0x24
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fc29 	bl	8003498 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7ff ff28 	bl	8002a9c <prvUnlockQueue>
	}
 8002c4c:	bf00      	nop
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08e      	sub	sp, #56	; 0x38
 8002c58:	af04      	add	r7, sp, #16
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <xTaskCreateStatic+0x28>
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	623b      	str	r3, [r7, #32]
 8002c7a:	e7fe      	b.n	8002c7a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <xTaskCreateStatic+0x42>
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	e7fe      	b.n	8002c94 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c96:	235c      	movs	r3, #92	; 0x5c
 8002c98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b5c      	cmp	r3, #92	; 0x5c
 8002c9e:	d009      	beq.n	8002cb4 <xTaskCreateStatic+0x60>
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	e7fe      	b.n	8002cb2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01e      	beq.n	8002cf8 <xTaskCreateStatic+0xa4>
 8002cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01b      	beq.n	8002cf8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9303      	str	r3, [sp, #12]
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	9302      	str	r3, [sp, #8]
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f850 	bl	8002d90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cf2:	f000 f8d3 	bl	8002e9c <prvAddNewTaskToReadyList>
 8002cf6:	e001      	b.n	8002cfc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002cfc:	697b      	ldr	r3, [r7, #20]
	}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3728      	adds	r7, #40	; 0x28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b08c      	sub	sp, #48	; 0x30
 8002d0a:	af04      	add	r7, sp, #16
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	4613      	mov	r3, r2
 8002d14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 fb6a 	bl	80043f4 <pvPortMalloc>
 8002d20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00e      	beq.n	8002d46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002d28:	205c      	movs	r0, #92	; 0x5c
 8002d2a:	f001 fb63 	bl	80043f4 <pvPortMalloc>
 8002d2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d3c:	e005      	b.n	8002d4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d3e:	6978      	ldr	r0, [r7, #20]
 8002d40:	f001 fc1a 	bl	8004578 <vPortFree>
 8002d44:	e001      	b.n	8002d4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d017      	beq.n	8002d80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d58:	88fa      	ldrh	r2, [r7, #6]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	9303      	str	r3, [sp, #12]
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	9302      	str	r3, [sp, #8]
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f80e 	bl	8002d90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d74:	69f8      	ldr	r0, [r7, #28]
 8002d76:	f000 f891 	bl	8002e9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	e002      	b.n	8002d86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d86:	69bb      	ldr	r3, [r7, #24]
	}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	461a      	mov	r2, r3
 8002da8:	21a5      	movs	r1, #165	; 0xa5
 8002daa:	f005 f9c0 	bl	800812e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002db8:	3b01      	subs	r3, #1
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f023 0307 	bic.w	r3, r3, #7
 8002dc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <prvInitialiseNewTask+0x56>
 8002dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	e7fe      	b.n	8002de4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	e012      	b.n	8002e12 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	4413      	add	r3, r2
 8002df2:	7819      	ldrb	r1, [r3, #0]
 8002df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	3334      	adds	r3, #52	; 0x34
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	4413      	add	r3, r2
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d006      	beq.n	8002e1a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	2b0f      	cmp	r3, #15
 8002e16:	d9e9      	bls.n	8002dec <prvInitialiseNewTask+0x5c>
 8002e18:	e000      	b.n	8002e1c <prvInitialiseNewTask+0x8c>
		{
			break;
 8002e1a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	2b37      	cmp	r3, #55	; 0x37
 8002e28:	d901      	bls.n	8002e2e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e2a:	2337      	movs	r3, #55	; 0x37
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e38:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	3304      	adds	r3, #4
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff f916 	bl	8002076 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	3318      	adds	r3, #24
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f911 	bl	8002076 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	68f9      	ldr	r1, [r7, #12]
 8002e7c:	69b8      	ldr	r0, [r7, #24]
 8002e7e:	f001 f8d7 	bl	8004030 <pxPortInitialiseStack>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e94:	bf00      	nop
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ea4:	f001 f9b0 	bl	8004208 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <prvAddNewTaskToReadyList+0xc4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3301      	adds	r3, #1
 8002eae:	4a2c      	ldr	r2, [pc, #176]	; (8002f60 <prvAddNewTaskToReadyList+0xc4>)
 8002eb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <prvAddNewTaskToReadyList+0xc8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002eba:	4a2a      	ldr	r2, [pc, #168]	; (8002f64 <prvAddNewTaskToReadyList+0xc8>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <prvAddNewTaskToReadyList+0xc4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d110      	bne.n	8002eea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ec8:	f000 fc0c 	bl	80036e4 <prvInitialiseTaskLists>
 8002ecc:	e00d      	b.n	8002eea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ece:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <prvAddNewTaskToReadyList+0xcc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ed6:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <prvAddNewTaskToReadyList+0xc8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d802      	bhi.n	8002eea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ee4:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <prvAddNewTaskToReadyList+0xc8>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002eea:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <prvAddNewTaskToReadyList+0xd0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <prvAddNewTaskToReadyList+0xd0>)
 8002ef2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <prvAddNewTaskToReadyList+0xd0>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <prvAddNewTaskToReadyList+0xd4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d903      	bls.n	8002f10 <prvAddNewTaskToReadyList+0x74>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <prvAddNewTaskToReadyList+0xd4>)
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <prvAddNewTaskToReadyList+0xd8>)
 8002f1e:	441a      	add	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f7ff f8b1 	bl	800208e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f2c:	f001 f99a 	bl	8004264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f30:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <prvAddNewTaskToReadyList+0xcc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00e      	beq.n	8002f56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <prvAddNewTaskToReadyList+0xc8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d207      	bcs.n	8002f56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <prvAddNewTaskToReadyList+0xdc>)
 8002f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000c9c 	.word	0x20000c9c
 8002f64:	200007c8 	.word	0x200007c8
 8002f68:	20000ca8 	.word	0x20000ca8
 8002f6c:	20000cb8 	.word	0x20000cb8
 8002f70:	20000ca4 	.word	0x20000ca4
 8002f74:	200007cc 	.word	0x200007cc
 8002f78:	e000ed04 	.word	0xe000ed04

08002f7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d016      	beq.n	8002fbc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f8e:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <vTaskDelay+0x60>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <vTaskDelay+0x2e>
 8002f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	e7fe      	b.n	8002fa8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002faa:	f000 f87f 	bl	80030ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fae:	2100      	movs	r1, #0
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fcdf 	bl	8003974 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002fb6:	f000 f887 	bl	80030c8 <xTaskResumeAll>
 8002fba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d107      	bne.n	8002fd2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <vTaskDelay+0x64>)
 8002fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000cc4 	.word	0x20000cc4
 8002fe0:	e000ed04 	.word	0xe000ed04

08002fe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	; 0x28
 8002fe8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ff2:	463a      	mov	r2, r7
 8002ff4:	1d39      	adds	r1, r7, #4
 8002ff6:	f107 0308 	add.w	r3, r7, #8
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe ffea 	bl	8001fd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003000:	6839      	ldr	r1, [r7, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	9202      	str	r2, [sp, #8]
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	2300      	movs	r3, #0
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	2300      	movs	r3, #0
 8003010:	460a      	mov	r2, r1
 8003012:	4920      	ldr	r1, [pc, #128]	; (8003094 <vTaskStartScheduler+0xb0>)
 8003014:	4820      	ldr	r0, [pc, #128]	; (8003098 <vTaskStartScheduler+0xb4>)
 8003016:	f7ff fe1d 	bl	8002c54 <xTaskCreateStatic>
 800301a:	4602      	mov	r2, r0
 800301c:	4b1f      	ldr	r3, [pc, #124]	; (800309c <vTaskStartScheduler+0xb8>)
 800301e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <vTaskStartScheduler+0xb8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003028:	2301      	movs	r3, #1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e001      	b.n	8003032 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d102      	bne.n	800303e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003038:	f000 fcf0 	bl	8003a1c <xTimerCreateTimerTask>
 800303c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d115      	bne.n	8003070 <vTaskStartScheduler+0x8c>
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <vTaskStartScheduler+0xbc>)
 8003058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800305c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800305e:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <vTaskStartScheduler+0xc0>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <vTaskStartScheduler+0xc4>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800306a:	f001 f85d 	bl	8004128 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800306e:	e00d      	b.n	800308c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003076:	d109      	bne.n	800308c <vTaskStartScheduler+0xa8>
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e7fe      	b.n	800308a <vTaskStartScheduler+0xa6>
}
 800308c:	bf00      	nop
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	08008fd0 	.word	0x08008fd0
 8003098:	080036b5 	.word	0x080036b5
 800309c:	20000cc0 	.word	0x20000cc0
 80030a0:	20000cbc 	.word	0x20000cbc
 80030a4:	20000ca8 	.word	0x20000ca8
 80030a8:	20000ca0 	.word	0x20000ca0

080030ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80030b0:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <vTaskSuspendAll+0x18>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	4a03      	ldr	r2, [pc, #12]	; (80030c4 <vTaskSuspendAll+0x18>)
 80030b8:	6013      	str	r3, [r2, #0]
}
 80030ba:	bf00      	nop
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20000cc4 	.word	0x20000cc4

080030c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030d6:	4b41      	ldr	r3, [pc, #260]	; (80031dc <xTaskResumeAll+0x114>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <xTaskResumeAll+0x2a>
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	e7fe      	b.n	80030f0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030f2:	f001 f889 	bl	8004208 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030f6:	4b39      	ldr	r3, [pc, #228]	; (80031dc <xTaskResumeAll+0x114>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	4a37      	ldr	r2, [pc, #220]	; (80031dc <xTaskResumeAll+0x114>)
 80030fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003100:	4b36      	ldr	r3, [pc, #216]	; (80031dc <xTaskResumeAll+0x114>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d162      	bne.n	80031ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003108:	4b35      	ldr	r3, [pc, #212]	; (80031e0 <xTaskResumeAll+0x118>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d05e      	beq.n	80031ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003110:	e02f      	b.n	8003172 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003112:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <xTaskResumeAll+0x11c>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	3318      	adds	r3, #24
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff f810 	bl	8002144 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3304      	adds	r3, #4
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff f80b 	bl	8002144 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003132:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <xTaskResumeAll+0x120>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d903      	bls.n	8003142 <xTaskResumeAll+0x7a>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <xTaskResumeAll+0x120>)
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4a27      	ldr	r2, [pc, #156]	; (80031ec <xTaskResumeAll+0x124>)
 8003150:	441a      	add	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3304      	adds	r3, #4
 8003156:	4619      	mov	r1, r3
 8003158:	4610      	mov	r0, r2
 800315a:	f7fe ff98 	bl	800208e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <xTaskResumeAll+0x128>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d302      	bcc.n	8003172 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800316c:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <xTaskResumeAll+0x12c>)
 800316e:	2201      	movs	r2, #1
 8003170:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003172:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <xTaskResumeAll+0x11c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1cb      	bne.n	8003112 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003180:	f000 fb4a 	bl	8003818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003184:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <xTaskResumeAll+0x130>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d010      	beq.n	80031b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003190:	f000 f844 	bl	800321c <xTaskIncrementTick>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <xTaskResumeAll+0x12c>)
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f1      	bne.n	8003190 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80031ac:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <xTaskResumeAll+0x130>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <xTaskResumeAll+0x12c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031ba:	2301      	movs	r3, #1
 80031bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <xTaskResumeAll+0x134>)
 80031c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031ce:	f001 f849 	bl	8004264 <vPortExitCritical>

	return xAlreadyYielded;
 80031d2:	68bb      	ldr	r3, [r7, #8]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000cc4 	.word	0x20000cc4
 80031e0:	20000c9c 	.word	0x20000c9c
 80031e4:	20000c5c 	.word	0x20000c5c
 80031e8:	20000ca4 	.word	0x20000ca4
 80031ec:	200007cc 	.word	0x200007cc
 80031f0:	200007c8 	.word	0x200007c8
 80031f4:	20000cb0 	.word	0x20000cb0
 80031f8:	20000cac 	.word	0x20000cac
 80031fc:	e000ed04 	.word	0xe000ed04

08003200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <xTaskGetTickCount+0x18>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800320c:	687b      	ldr	r3, [r7, #4]
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	20000ca0 	.word	0x20000ca0

0800321c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003226:	4b51      	ldr	r3, [pc, #324]	; (800336c <xTaskIncrementTick+0x150>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 808d 	bne.w	800334a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003230:	4b4f      	ldr	r3, [pc, #316]	; (8003370 <xTaskIncrementTick+0x154>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003238:	4a4d      	ldr	r2, [pc, #308]	; (8003370 <xTaskIncrementTick+0x154>)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d11f      	bne.n	8003284 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003244:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <xTaskIncrementTick+0x158>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <xTaskIncrementTick+0x46>
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	e7fe      	b.n	8003260 <xTaskIncrementTick+0x44>
 8003262:	4b44      	ldr	r3, [pc, #272]	; (8003374 <xTaskIncrementTick+0x158>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	4b43      	ldr	r3, [pc, #268]	; (8003378 <xTaskIncrementTick+0x15c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a41      	ldr	r2, [pc, #260]	; (8003374 <xTaskIncrementTick+0x158>)
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4a41      	ldr	r2, [pc, #260]	; (8003378 <xTaskIncrementTick+0x15c>)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b41      	ldr	r3, [pc, #260]	; (800337c <xTaskIncrementTick+0x160>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3301      	adds	r3, #1
 800327c:	4a3f      	ldr	r2, [pc, #252]	; (800337c <xTaskIncrementTick+0x160>)
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	f000 faca 	bl	8003818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003284:	4b3e      	ldr	r3, [pc, #248]	; (8003380 <xTaskIncrementTick+0x164>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	429a      	cmp	r2, r3
 800328c:	d34e      	bcc.n	800332c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800328e:	4b39      	ldr	r3, [pc, #228]	; (8003374 <xTaskIncrementTick+0x158>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <xTaskIncrementTick+0x80>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <xTaskIncrementTick+0x82>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d004      	beq.n	80032ac <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a2:	4b37      	ldr	r3, [pc, #220]	; (8003380 <xTaskIncrementTick+0x164>)
 80032a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032a8:	601a      	str	r2, [r3, #0]
					break;
 80032aa:	e03f      	b.n	800332c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032ac:	4b31      	ldr	r3, [pc, #196]	; (8003374 <xTaskIncrementTick+0x158>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d203      	bcs.n	80032cc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032c4:	4a2e      	ldr	r2, [pc, #184]	; (8003380 <xTaskIncrementTick+0x164>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6013      	str	r3, [r2, #0]
						break;
 80032ca:	e02f      	b.n	800332c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	3304      	adds	r3, #4
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe ff37 	bl	8002144 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	3318      	adds	r3, #24
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe ff2e 	bl	8002144 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	4b25      	ldr	r3, [pc, #148]	; (8003384 <xTaskIncrementTick+0x168>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d903      	bls.n	80032fc <xTaskIncrementTick+0xe0>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	4a22      	ldr	r2, [pc, #136]	; (8003384 <xTaskIncrementTick+0x168>)
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <xTaskIncrementTick+0x16c>)
 800330a:	441a      	add	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	3304      	adds	r3, #4
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f7fe febb 	bl	800208e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <xTaskIncrementTick+0x170>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	429a      	cmp	r2, r3
 8003324:	d3b3      	bcc.n	800328e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003326:	2301      	movs	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800332a:	e7b0      	b.n	800328e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <xTaskIncrementTick+0x170>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003332:	4915      	ldr	r1, [pc, #84]	; (8003388 <xTaskIncrementTick+0x16c>)
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d907      	bls.n	8003354 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003344:	2301      	movs	r3, #1
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e004      	b.n	8003354 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <xTaskIncrementTick+0x174>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3301      	adds	r3, #1
 8003350:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <xTaskIncrementTick+0x174>)
 8003352:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <xTaskIncrementTick+0x178>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800335c:	2301      	movs	r3, #1
 800335e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003360:	697b      	ldr	r3, [r7, #20]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000cc4 	.word	0x20000cc4
 8003370:	20000ca0 	.word	0x20000ca0
 8003374:	20000c54 	.word	0x20000c54
 8003378:	20000c58 	.word	0x20000c58
 800337c:	20000cb4 	.word	0x20000cb4
 8003380:	20000cbc 	.word	0x20000cbc
 8003384:	20000ca4 	.word	0x20000ca4
 8003388:	200007cc 	.word	0x200007cc
 800338c:	200007c8 	.word	0x200007c8
 8003390:	20000cac 	.word	0x20000cac
 8003394:	20000cb0 	.word	0x20000cb0

08003398 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800339e:	4b27      	ldr	r3, [pc, #156]	; (800343c <vTaskSwitchContext+0xa4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033a6:	4b26      	ldr	r3, [pc, #152]	; (8003440 <vTaskSwitchContext+0xa8>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033ac:	e040      	b.n	8003430 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <vTaskSwitchContext+0xa8>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80033b4:	4b23      	ldr	r3, [pc, #140]	; (8003444 <vTaskSwitchContext+0xac>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	e00f      	b.n	80033dc <vTaskSwitchContext+0x44>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <vTaskSwitchContext+0x3e>
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	e7fe      	b.n	80033d4 <vTaskSwitchContext+0x3c>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3b01      	subs	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	491a      	ldr	r1, [pc, #104]	; (8003448 <vTaskSwitchContext+0xb0>)
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0e5      	beq.n	80033bc <vTaskSwitchContext+0x24>
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4a13      	ldr	r2, [pc, #76]	; (8003448 <vTaskSwitchContext+0xb0>)
 80033fc:	4413      	add	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3308      	adds	r3, #8
 8003412:	429a      	cmp	r2, r3
 8003414:	d104      	bne.n	8003420 <vTaskSwitchContext+0x88>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <vTaskSwitchContext+0xb4>)
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4a06      	ldr	r2, [pc, #24]	; (8003444 <vTaskSwitchContext+0xac>)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6013      	str	r3, [r2, #0]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000cc4 	.word	0x20000cc4
 8003440:	20000cb0 	.word	0x20000cb0
 8003444:	20000ca4 	.word	0x20000ca4
 8003448:	200007cc 	.word	0x200007cc
 800344c:	200007c8 	.word	0x200007c8

08003450 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <vTaskPlaceOnEventList+0x24>
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e7fe      	b.n	8003472 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003474:	4b07      	ldr	r3, [pc, #28]	; (8003494 <vTaskPlaceOnEventList+0x44>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3318      	adds	r3, #24
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7fe fe29 	bl	80020d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003482:	2101      	movs	r1, #1
 8003484:	6838      	ldr	r0, [r7, #0]
 8003486:	f000 fa75 	bl	8003974 <prvAddCurrentTaskToDelayedList>
}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200007c8 	.word	0x200007c8

08003498 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <vTaskPlaceOnEventListRestricted+0x26>
 80034aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e7fe      	b.n	80034bc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <vTaskPlaceOnEventListRestricted+0x50>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3318      	adds	r3, #24
 80034c4:	4619      	mov	r1, r3
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7fe fde1 	bl	800208e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	68b8      	ldr	r0, [r7, #8]
 80034dc:	f000 fa4a 	bl	8003974 <prvAddCurrentTaskToDelayedList>
	}
 80034e0:	bf00      	nop
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	200007c8 	.word	0x200007c8

080034ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <xTaskRemoveFromEventList+0x2a>
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	e7fe      	b.n	8003514 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	3318      	adds	r3, #24
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fe12 	bl	8002144 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003520:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <xTaskRemoveFromEventList+0xac>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d11d      	bne.n	8003564 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	3304      	adds	r3, #4
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe fe09 	bl	8002144 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003536:	4b19      	ldr	r3, [pc, #100]	; (800359c <xTaskRemoveFromEventList+0xb0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d903      	bls.n	8003546 <xTaskRemoveFromEventList+0x5a>
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	4a16      	ldr	r2, [pc, #88]	; (800359c <xTaskRemoveFromEventList+0xb0>)
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4a13      	ldr	r2, [pc, #76]	; (80035a0 <xTaskRemoveFromEventList+0xb4>)
 8003554:	441a      	add	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	3304      	adds	r3, #4
 800355a:	4619      	mov	r1, r3
 800355c:	4610      	mov	r0, r2
 800355e:	f7fe fd96 	bl	800208e <vListInsertEnd>
 8003562:	e005      	b.n	8003570 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	3318      	adds	r3, #24
 8003568:	4619      	mov	r1, r3
 800356a:	480e      	ldr	r0, [pc, #56]	; (80035a4 <xTaskRemoveFromEventList+0xb8>)
 800356c:	f7fe fd8f 	bl	800208e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <xTaskRemoveFromEventList+0xbc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	429a      	cmp	r2, r3
 800357c:	d905      	bls.n	800358a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800357e:	2301      	movs	r3, #1
 8003580:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <xTaskRemoveFromEventList+0xc0>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	e001      	b.n	800358e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800358e:	697b      	ldr	r3, [r7, #20]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000cc4 	.word	0x20000cc4
 800359c:	20000ca4 	.word	0x20000ca4
 80035a0:	200007cc 	.word	0x200007cc
 80035a4:	20000c5c 	.word	0x20000c5c
 80035a8:	200007c8 	.word	0x200007c8
 80035ac:	20000cb0 	.word	0x20000cb0

080035b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <vTaskInternalSetTimeOutState+0x24>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <vTaskInternalSetTimeOutState+0x28>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	605a      	str	r2, [r3, #4]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000cb4 	.word	0x20000cb4
 80035d8:	20000ca0 	.word	0x20000ca0

080035dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <xTaskCheckForTimeOut+0x24>
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	e7fe      	b.n	80035fe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <xTaskCheckForTimeOut+0x3e>
 8003606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	e7fe      	b.n	8003618 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800361a:	f000 fdf5 	bl	8004208 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800361e:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <xTaskCheckForTimeOut+0xb8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003636:	d102      	bne.n	800363e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003638:	2300      	movs	r3, #0
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	e023      	b.n	8003686 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <xTaskCheckForTimeOut+0xbc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d007      	beq.n	800365a <xTaskCheckForTimeOut+0x7e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	429a      	cmp	r2, r3
 8003652:	d302      	bcc.n	800365a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003654:	2301      	movs	r3, #1
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	e015      	b.n	8003686 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	429a      	cmp	r2, r3
 8003662:	d20b      	bcs.n	800367c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	1ad2      	subs	r2, r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ff9d 	bl	80035b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	e004      	b.n	8003686 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003682:	2301      	movs	r3, #1
 8003684:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003686:	f000 fded 	bl	8004264 <vPortExitCritical>

	return xReturn;
 800368a:	69fb      	ldr	r3, [r7, #28]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000ca0 	.word	0x20000ca0
 8003698:	20000cb4 	.word	0x20000cb4

0800369c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <vTaskMissedYield+0x14>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000cb0 	.word	0x20000cb0

080036b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036bc:	f000 f852 	bl	8003764 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <prvIdleTask+0x28>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d9f9      	bls.n	80036bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <prvIdleTask+0x2c>)
 80036ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80036d8:	e7f0      	b.n	80036bc <prvIdleTask+0x8>
 80036da:	bf00      	nop
 80036dc:	200007cc 	.word	0x200007cc
 80036e0:	e000ed04 	.word	0xe000ed04

080036e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	e00c      	b.n	800370a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4a12      	ldr	r2, [pc, #72]	; (8003744 <prvInitialiseTaskLists+0x60>)
 80036fc:	4413      	add	r3, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fc9a 	bl	8002038 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3301      	adds	r3, #1
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b37      	cmp	r3, #55	; 0x37
 800370e:	d9ef      	bls.n	80036f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003710:	480d      	ldr	r0, [pc, #52]	; (8003748 <prvInitialiseTaskLists+0x64>)
 8003712:	f7fe fc91 	bl	8002038 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003716:	480d      	ldr	r0, [pc, #52]	; (800374c <prvInitialiseTaskLists+0x68>)
 8003718:	f7fe fc8e 	bl	8002038 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800371c:	480c      	ldr	r0, [pc, #48]	; (8003750 <prvInitialiseTaskLists+0x6c>)
 800371e:	f7fe fc8b 	bl	8002038 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003722:	480c      	ldr	r0, [pc, #48]	; (8003754 <prvInitialiseTaskLists+0x70>)
 8003724:	f7fe fc88 	bl	8002038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003728:	480b      	ldr	r0, [pc, #44]	; (8003758 <prvInitialiseTaskLists+0x74>)
 800372a:	f7fe fc85 	bl	8002038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <prvInitialiseTaskLists+0x78>)
 8003730:	4a05      	ldr	r2, [pc, #20]	; (8003748 <prvInitialiseTaskLists+0x64>)
 8003732:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <prvInitialiseTaskLists+0x7c>)
 8003736:	4a05      	ldr	r2, [pc, #20]	; (800374c <prvInitialiseTaskLists+0x68>)
 8003738:	601a      	str	r2, [r3, #0]
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	200007cc 	.word	0x200007cc
 8003748:	20000c2c 	.word	0x20000c2c
 800374c:	20000c40 	.word	0x20000c40
 8003750:	20000c5c 	.word	0x20000c5c
 8003754:	20000c70 	.word	0x20000c70
 8003758:	20000c88 	.word	0x20000c88
 800375c:	20000c54 	.word	0x20000c54
 8003760:	20000c58 	.word	0x20000c58

08003764 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800376a:	e019      	b.n	80037a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800376c:	f000 fd4c 	bl	8004208 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <prvCheckTasksWaitingTermination+0x4c>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3304      	adds	r3, #4
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe fce1 	bl	8002144 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003782:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <prvCheckTasksWaitingTermination+0x50>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3b01      	subs	r3, #1
 8003788:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <prvCheckTasksWaitingTermination+0x50>)
 800378a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <prvCheckTasksWaitingTermination+0x54>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3b01      	subs	r3, #1
 8003792:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <prvCheckTasksWaitingTermination+0x54>)
 8003794:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003796:	f000 fd65 	bl	8004264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f80e 	bl	80037bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <prvCheckTasksWaitingTermination+0x54>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e1      	bne.n	800376c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000c70 	.word	0x20000c70
 80037b4:	20000c9c 	.word	0x20000c9c
 80037b8:	20000c84 	.word	0x20000c84

080037bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d108      	bne.n	80037e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fed0 	bl	8004578 <vPortFree>
				vPortFree( pxTCB );
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fecd 	bl	8004578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80037de:	e017      	b.n	8003810 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d103      	bne.n	80037f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fec4 	bl	8004578 <vPortFree>
	}
 80037f0:	e00e      	b.n	8003810 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d009      	beq.n	8003810 <prvDeleteTCB+0x54>
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e7fe      	b.n	800380e <prvDeleteTCB+0x52>
	}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <prvResetNextTaskUnblockTime+0x40>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <prvResetNextTaskUnblockTime+0x14>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <prvResetNextTaskUnblockTime+0x16>
 800382c:	2300      	movs	r3, #0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d004      	beq.n	800383c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <prvResetNextTaskUnblockTime+0x44>)
 8003834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003838:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800383a:	e008      	b.n	800384e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <prvResetNextTaskUnblockTime+0x40>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4a04      	ldr	r2, [pc, #16]	; (800385c <prvResetNextTaskUnblockTime+0x44>)
 800384c:	6013      	str	r3, [r2, #0]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	20000c54 	.word	0x20000c54
 800385c:	20000cbc 	.word	0x20000cbc

08003860 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <xTaskGetSchedulerState+0x34>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800386e:	2301      	movs	r3, #1
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	e008      	b.n	8003886 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <xTaskGetSchedulerState+0x38>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d102      	bne.n	8003882 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800387c:	2302      	movs	r3, #2
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	e001      	b.n	8003886 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003886:	687b      	ldr	r3, [r7, #4]
	}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000ca8 	.word	0x20000ca8
 8003898:	20000cc4 	.word	0x20000cc4

0800389c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d054      	beq.n	800395c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80038b2:	4b2d      	ldr	r3, [pc, #180]	; (8003968 <xTaskPriorityDisinherit+0xcc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d009      	beq.n	80038d0 <xTaskPriorityDisinherit+0x34>
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e7fe      	b.n	80038ce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <xTaskPriorityDisinherit+0x50>
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	e7fe      	b.n	80038ea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f0:	1e5a      	subs	r2, r3, #1
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	429a      	cmp	r2, r3
 8003900:	d02c      	beq.n	800395c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003906:	2b00      	cmp	r3, #0
 8003908:	d128      	bne.n	800395c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	3304      	adds	r3, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fc18 	bl	8002144 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <xTaskPriorityDisinherit+0xd0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d903      	bls.n	800393c <xTaskPriorityDisinherit+0xa0>
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	4a0c      	ldr	r2, [pc, #48]	; (800396c <xTaskPriorityDisinherit+0xd0>)
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4a09      	ldr	r2, [pc, #36]	; (8003970 <xTaskPriorityDisinherit+0xd4>)
 800394a:	441a      	add	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	3304      	adds	r3, #4
 8003950:	4619      	mov	r1, r3
 8003952:	4610      	mov	r0, r2
 8003954:	f7fe fb9b 	bl	800208e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003958:	2301      	movs	r3, #1
 800395a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800395c:	697b      	ldr	r3, [r7, #20]
	}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	200007c8 	.word	0x200007c8
 800396c:	20000ca4 	.word	0x20000ca4
 8003970:	200007cc 	.word	0x200007cc

08003974 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800397e:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <prvAddCurrentTaskToDelayedList+0x90>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003984:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3304      	adds	r3, #4
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fbda 	bl	8002144 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003996:	d10a      	bne.n	80039ae <prvAddCurrentTaskToDelayedList+0x3a>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	4819      	ldr	r0, [pc, #100]	; (8003a0c <prvAddCurrentTaskToDelayedList+0x98>)
 80039a8:	f7fe fb71 	bl	800208e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039ac:	e026      	b.n	80039fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4413      	add	r3, r2
 80039b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039b6:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d209      	bcs.n	80039da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <prvAddCurrentTaskToDelayedList+0x9c>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3304      	adds	r3, #4
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f7fe fb7e 	bl	80020d4 <vListInsert>
}
 80039d8:	e010      	b.n	80039fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039da:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <prvAddCurrentTaskToDelayedList+0xa0>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3304      	adds	r3, #4
 80039e4:	4619      	mov	r1, r3
 80039e6:	4610      	mov	r0, r2
 80039e8:	f7fe fb74 	bl	80020d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <prvAddCurrentTaskToDelayedList+0xa4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d202      	bcs.n	80039fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80039f6:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <prvAddCurrentTaskToDelayedList+0xa4>)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	6013      	str	r3, [r2, #0]
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000ca0 	.word	0x20000ca0
 8003a08:	200007c8 	.word	0x200007c8
 8003a0c:	20000c88 	.word	0x20000c88
 8003a10:	20000c58 	.word	0x20000c58
 8003a14:	20000c54 	.word	0x20000c54
 8003a18:	20000cbc 	.word	0x20000cbc

08003a1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a26:	f000 fac3 	bl	8003fb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a2a:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <xTimerCreateTimerTask+0x80>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d021      	beq.n	8003a76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a3a:	1d3a      	adds	r2, r7, #4
 8003a3c:	f107 0108 	add.w	r1, r7, #8
 8003a40:	f107 030c 	add.w	r3, r7, #12
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe fadd 	bl	8002004 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	9202      	str	r2, [sp, #8]
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	2302      	movs	r3, #2
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	460a      	mov	r2, r1
 8003a5c:	4910      	ldr	r1, [pc, #64]	; (8003aa0 <xTimerCreateTimerTask+0x84>)
 8003a5e:	4811      	ldr	r0, [pc, #68]	; (8003aa4 <xTimerCreateTimerTask+0x88>)
 8003a60:	f7ff f8f8 	bl	8002c54 <xTaskCreateStatic>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <xTimerCreateTimerTask+0x8c>)
 8003a68:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <xTimerCreateTimerTask+0x8c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a72:	2301      	movs	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <xTimerCreateTimerTask+0x74>
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	e7fe      	b.n	8003a8e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003a90:	697b      	ldr	r3, [r7, #20]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000cf8 	.word	0x20000cf8
 8003aa0:	08008fd8 	.word	0x08008fd8
 8003aa4:	08003bc5 	.word	0x08003bc5
 8003aa8:	20000cfc 	.word	0x20000cfc

08003aac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <xTimerGenericCommand+0x2c>
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	e7fe      	b.n	8003ad6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <xTimerGenericCommand+0x94>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d02a      	beq.n	8003b36 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	dc18      	bgt.n	8003b24 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003af2:	f7ff feb5 	bl	8003860 <xTaskGetSchedulerState>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d109      	bne.n	8003b10 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003afc:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <xTimerGenericCommand+0x94>)
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	f107 0110 	add.w	r1, r7, #16
 8003b04:	2300      	movs	r3, #0
 8003b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b08:	f7fe fcce 	bl	80024a8 <xQueueGenericSend>
 8003b0c:	6278      	str	r0, [r7, #36]	; 0x24
 8003b0e:	e012      	b.n	8003b36 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <xTimerGenericCommand+0x94>)
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	f107 0110 	add.w	r1, r7, #16
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f7fe fcc4 	bl	80024a8 <xQueueGenericSend>
 8003b20:	6278      	str	r0, [r7, #36]	; 0x24
 8003b22:	e008      	b.n	8003b36 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <xTimerGenericCommand+0x94>)
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	f107 0110 	add.w	r1, r7, #16
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	f7fe fdb4 	bl	800269c <xQueueGenericSendFromISR>
 8003b34:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3728      	adds	r7, #40	; 0x28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000cf8 	.word	0x20000cf8

08003b44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b4e:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <prvProcessExpiredTimer+0x7c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe faf1 	bl	8002144 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d121      	bne.n	8003bae <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	18d1      	adds	r1, r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	6978      	ldr	r0, [r7, #20]
 8003b78:	f000 f8c8 	bl	8003d0c <prvInsertTimerInActiveList>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d015      	beq.n	8003bae <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b82:	2300      	movs	r3, #0
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2300      	movs	r3, #0
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	6978      	ldr	r0, [r7, #20]
 8003b8e:	f7ff ff8d 	bl	8003aac <xTimerGenericCommand>
 8003b92:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <prvProcessExpiredTimer+0x6a>
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e7fe      	b.n	8003bac <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	6978      	ldr	r0, [r7, #20]
 8003bb4:	4798      	blx	r3
}
 8003bb6:	bf00      	nop
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000cf0 	.word	0x20000cf0

08003bc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bcc:	f107 0308 	add.w	r3, r7, #8
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 f857 	bl	8003c84 <prvGetNextExpireTime>
 8003bd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f803 	bl	8003be8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003be2:	f000 f8d5 	bl	8003d90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003be6:	e7f1      	b.n	8003bcc <prvTimerTask+0x8>

08003be8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003bf2:	f7ff fa5b 	bl	80030ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bf6:	f107 0308 	add.w	r3, r7, #8
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f866 	bl	8003ccc <prvSampleTimeNow>
 8003c00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d130      	bne.n	8003c6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <prvProcessTimerOrBlockTask+0x3c>
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d806      	bhi.n	8003c24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c16:	f7ff fa57 	bl	80030c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c1a:	68f9      	ldr	r1, [r7, #12]
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff ff91 	bl	8003b44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c22:	e024      	b.n	8003c6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d008      	beq.n	8003c3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c2a:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <prvProcessTimerOrBlockTask+0x90>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <prvProcessTimerOrBlockTask+0x94>)
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f7fe ffcf 	bl	8002bec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c4e:	f7ff fa3b 	bl	80030c8 <xTaskResumeAll>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <prvProcessTimerOrBlockTask+0x98>)
 8003c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	f3bf 8f6f 	isb	sy
}
 8003c68:	e001      	b.n	8003c6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c6a:	f7ff fa2d 	bl	80030c8 <xTaskResumeAll>
}
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000cf4 	.word	0x20000cf4
 8003c7c:	20000cf8 	.word	0x20000cf8
 8003c80:	e000ed04 	.word	0xe000ed04

08003c84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <prvGetNextExpireTime+0x44>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bf0c      	ite	eq
 8003c96:	2301      	moveq	r3, #1
 8003c98:	2300      	movne	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d105      	bne.n	8003cb6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <prvGetNextExpireTime+0x44>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e001      	b.n	8003cba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003cba:	68fb      	ldr	r3, [r7, #12]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20000cf0 	.word	0x20000cf0

08003ccc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003cd4:	f7ff fa94 	bl	8003200 <xTaskGetTickCount>
 8003cd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <prvSampleTimeNow+0x3c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d205      	bcs.n	8003cf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003ce4:	f000 f904 	bl	8003ef0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e002      	b.n	8003cf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003cf6:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <prvSampleTimeNow+0x3c>)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000d00 	.word	0x20000d00

08003d0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d812      	bhi.n	8003d58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	1ad2      	subs	r2, r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d302      	bcc.n	8003d46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d40:	2301      	movs	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e01b      	b.n	8003d7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <prvInsertTimerInActiveList+0x7c>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4610      	mov	r0, r2
 8003d52:	f7fe f9bf 	bl	80020d4 <vListInsert>
 8003d56:	e012      	b.n	8003d7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d206      	bcs.n	8003d6e <prvInsertTimerInActiveList+0x62>
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d302      	bcc.n	8003d6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e007      	b.n	8003d7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d6e:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <prvInsertTimerInActiveList+0x80>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3304      	adds	r3, #4
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f7fe f9ab 	bl	80020d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d7e:	697b      	ldr	r3, [r7, #20]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20000cf4 	.word	0x20000cf4
 8003d8c:	20000cf0 	.word	0x20000cf0

08003d90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08e      	sub	sp, #56	; 0x38
 8003d94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d96:	e099      	b.n	8003ecc <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	da17      	bge.n	8003dce <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d9e:	1d3b      	adds	r3, r7, #4
 8003da0:	3304      	adds	r3, #4
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <prvProcessReceivedCommands+0x2e>
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	e7fe      	b.n	8003dbc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc4:	6850      	ldr	r0, [r2, #4]
 8003dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc8:	6892      	ldr	r2, [r2, #8]
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	db7a      	blt.n	8003eca <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d004      	beq.n	8003dea <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	3304      	adds	r3, #4
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe f9ad 	bl	8002144 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dea:	463b      	mov	r3, r7
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff6d 	bl	8003ccc <prvSampleTimeNow>
 8003df2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b09      	cmp	r3, #9
 8003df8:	d868      	bhi.n	8003ecc <prvProcessReceivedCommands+0x13c>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <prvProcessReceivedCommands+0x70>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e29 	.word	0x08003e29
 8003e04:	08003e29 	.word	0x08003e29
 8003e08:	08003e29 	.word	0x08003e29
 8003e0c:	08003ecd 	.word	0x08003ecd
 8003e10:	08003e83 	.word	0x08003e83
 8003e14:	08003eb9 	.word	0x08003eb9
 8003e18:	08003e29 	.word	0x08003e29
 8003e1c:	08003e29 	.word	0x08003e29
 8003e20:	08003ecd 	.word	0x08003ecd
 8003e24:	08003e83 	.word	0x08003e83
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	18d1      	adds	r1, r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e36:	f7ff ff69 	bl	8003d0c <prvInsertTimerInActiveList>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d045      	beq.n	8003ecc <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e46:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d13d      	bne.n	8003ecc <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	441a      	add	r2, r3
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2100      	movs	r1, #0
 8003e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e62:	f7ff fe23 	bl	8003aac <xTimerGenericCommand>
 8003e66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d12e      	bne.n	8003ecc <prvProcessReceivedCommands+0x13c>
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	e7fe      	b.n	8003e80 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d109      	bne.n	8003ea4 <prvProcessReceivedCommands+0x114>
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e7fe      	b.n	8003ea2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	699a      	ldr	r2, [r3, #24]
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	18d1      	adds	r1, r2, r3
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eb2:	f7ff ff2b 	bl	8003d0c <prvInsertTimerInActiveList>
					break;
 8003eb6:	e009      	b.n	8003ecc <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8003ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec4:	f000 fb58 	bl	8004578 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003ec8:	e000      	b.n	8003ecc <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003eca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ecc:	4b07      	ldr	r3, [pc, #28]	; (8003eec <prvProcessReceivedCommands+0x15c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	1d39      	adds	r1, r7, #4
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe fc75 	bl	80027c4 <xQueueReceive>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f47f af5b 	bne.w	8003d98 <prvProcessReceivedCommands+0x8>
	}
}
 8003ee2:	bf00      	nop
 8003ee4:	3730      	adds	r7, #48	; 0x30
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000cf8 	.word	0x20000cf8

08003ef0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ef6:	e044      	b.n	8003f82 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <prvSwitchTimerLists+0xb8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f02:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <prvSwitchTimerLists+0xb8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe f917 	bl	8002144 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d12d      	bne.n	8003f82 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d90e      	bls.n	8003f56 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f44:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <prvSwitchTimerLists+0xb8>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f7fe f8c0 	bl	80020d4 <vListInsert>
 8003f54:	e015      	b.n	8003f82 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f56:	2300      	movs	r3, #0
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	2100      	movs	r1, #0
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7ff fda3 	bl	8003aac <xTimerGenericCommand>
 8003f66:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <prvSwitchTimerLists+0x92>
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	e7fe      	b.n	8003f80 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <prvSwitchTimerLists+0xb8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1b5      	bne.n	8003ef8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <prvSwitchTimerLists+0xb8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <prvSwitchTimerLists+0xbc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <prvSwitchTimerLists+0xb8>)
 8003f98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f9a:	4a04      	ldr	r2, [pc, #16]	; (8003fac <prvSwitchTimerLists+0xbc>)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	6013      	str	r3, [r2, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000cf0 	.word	0x20000cf0
 8003fac:	20000cf4 	.word	0x20000cf4

08003fb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003fb6:	f000 f927 	bl	8004208 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <prvCheckForValidListAndQueue+0x60>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d120      	bne.n	8004004 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003fc2:	4814      	ldr	r0, [pc, #80]	; (8004014 <prvCheckForValidListAndQueue+0x64>)
 8003fc4:	f7fe f838 	bl	8002038 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003fc8:	4813      	ldr	r0, [pc, #76]	; (8004018 <prvCheckForValidListAndQueue+0x68>)
 8003fca:	f7fe f835 	bl	8002038 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <prvCheckForValidListAndQueue+0x6c>)
 8003fd0:	4a10      	ldr	r2, [pc, #64]	; (8004014 <prvCheckForValidListAndQueue+0x64>)
 8003fd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003fd4:	4b12      	ldr	r3, [pc, #72]	; (8004020 <prvCheckForValidListAndQueue+0x70>)
 8003fd6:	4a10      	ldr	r2, [pc, #64]	; (8004018 <prvCheckForValidListAndQueue+0x68>)
 8003fd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	4b11      	ldr	r3, [pc, #68]	; (8004024 <prvCheckForValidListAndQueue+0x74>)
 8003fe0:	4a11      	ldr	r2, [pc, #68]	; (8004028 <prvCheckForValidListAndQueue+0x78>)
 8003fe2:	2110      	movs	r1, #16
 8003fe4:	200a      	movs	r0, #10
 8003fe6:	f7fe f93f 	bl	8002268 <xQueueGenericCreateStatic>
 8003fea:	4602      	mov	r2, r0
 8003fec:	4b08      	ldr	r3, [pc, #32]	; (8004010 <prvCheckForValidListAndQueue+0x60>)
 8003fee:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003ff0:	4b07      	ldr	r3, [pc, #28]	; (8004010 <prvCheckForValidListAndQueue+0x60>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <prvCheckForValidListAndQueue+0x60>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	490b      	ldr	r1, [pc, #44]	; (800402c <prvCheckForValidListAndQueue+0x7c>)
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe fdcc 	bl	8002b9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004004:	f000 f92e 	bl	8004264 <vPortExitCritical>
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000cf8 	.word	0x20000cf8
 8004014:	20000cc8 	.word	0x20000cc8
 8004018:	20000cdc 	.word	0x20000cdc
 800401c:	20000cf0 	.word	0x20000cf0
 8004020:	20000cf4 	.word	0x20000cf4
 8004024:	20000da4 	.word	0x20000da4
 8004028:	20000d04 	.word	0x20000d04
 800402c:	08008fe0 	.word	0x08008fe0

08004030 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3b04      	subs	r3, #4
 8004040:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3b04      	subs	r3, #4
 800404e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3b04      	subs	r3, #4
 800405e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004060:	4a08      	ldr	r2, [pc, #32]	; (8004084 <pxPortInitialiseStack+0x54>)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3b14      	subs	r3, #20
 800406a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b20      	subs	r3, #32
 8004076:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004078:	68fb      	ldr	r3, [r7, #12]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	08004089 	.word	0x08004089

08004088 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004092:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <prvTaskExitError+0x4c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800409a:	d009      	beq.n	80040b0 <prvTaskExitError+0x28>
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e7fe      	b.n	80040ae <prvTaskExitError+0x26>
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040c2:	bf00      	nop
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0fc      	beq.n	80040c4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	20000008 	.word	0x20000008
	...

080040e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <pxCurrentTCBConst2>)
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	6808      	ldr	r0, [r1, #0]
 80040e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040ea:	f380 8809 	msr	PSP, r0
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8811 	msr	BASEPRI, r0
 80040fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80040fe:	4770      	bx	lr

08004100 <pxCurrentTCBConst2>:
 8004100:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop

08004108 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004108:	4806      	ldr	r0, [pc, #24]	; (8004124 <prvPortStartFirstTask+0x1c>)
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	6800      	ldr	r0, [r0, #0]
 800410e:	f380 8808 	msr	MSP, r0
 8004112:	b662      	cpsie	i
 8004114:	b661      	cpsie	f
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	df00      	svc	0
 8004120:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004122:	bf00      	nop
 8004124:	e000ed08 	.word	0xe000ed08

08004128 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800412e:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <xPortStartScheduler+0xcc>)
 8004130:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	22ff      	movs	r2, #255	; 0xff
 800413e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004150:	b2da      	uxtb	r2, r3
 8004152:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <xPortStartScheduler+0xd0>)
 8004154:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004156:	4b29      	ldr	r3, [pc, #164]	; (80041fc <xPortStartScheduler+0xd4>)
 8004158:	2207      	movs	r2, #7
 800415a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800415c:	e009      	b.n	8004172 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800415e:	4b27      	ldr	r3, [pc, #156]	; (80041fc <xPortStartScheduler+0xd4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3b01      	subs	r3, #1
 8004164:	4a25      	ldr	r2, [pc, #148]	; (80041fc <xPortStartScheduler+0xd4>)
 8004166:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	b2db      	uxtb	r3, r3
 8004170:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417a:	2b80      	cmp	r3, #128	; 0x80
 800417c:	d0ef      	beq.n	800415e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800417e:	4b1f      	ldr	r3, [pc, #124]	; (80041fc <xPortStartScheduler+0xd4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f1c3 0307 	rsb	r3, r3, #7
 8004186:	2b04      	cmp	r3, #4
 8004188:	d009      	beq.n	800419e <xPortStartScheduler+0x76>
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	e7fe      	b.n	800419c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800419e:	4b17      	ldr	r3, [pc, #92]	; (80041fc <xPortStartScheduler+0xd4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	4a15      	ldr	r2, [pc, #84]	; (80041fc <xPortStartScheduler+0xd4>)
 80041a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041a8:	4b14      	ldr	r3, [pc, #80]	; (80041fc <xPortStartScheduler+0xd4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041b0:	4a12      	ldr	r2, [pc, #72]	; (80041fc <xPortStartScheduler+0xd4>)
 80041b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041bc:	4b10      	ldr	r3, [pc, #64]	; (8004200 <xPortStartScheduler+0xd8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0f      	ldr	r2, [pc, #60]	; (8004200 <xPortStartScheduler+0xd8>)
 80041c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041c8:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <xPortStartScheduler+0xd8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <xPortStartScheduler+0xd8>)
 80041ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041d4:	f000 f8b0 	bl	8004338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <xPortStartScheduler+0xdc>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041de:	f7ff ff93 	bl	8004108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041e2:	f7ff f8d9 	bl	8003398 <vTaskSwitchContext>
	prvTaskExitError();
 80041e6:	f7ff ff4f 	bl	8004088 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	e000e400 	.word	0xe000e400
 80041f8:	20000df4 	.word	0x20000df4
 80041fc:	20000df8 	.word	0x20000df8
 8004200:	e000ed20 	.word	0xe000ed20
 8004204:	20000008 	.word	0x20000008

08004208 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004220:	4b0e      	ldr	r3, [pc, #56]	; (800425c <vPortEnterCritical+0x54>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	4a0d      	ldr	r2, [pc, #52]	; (800425c <vPortEnterCritical+0x54>)
 8004228:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800422a:	4b0c      	ldr	r3, [pc, #48]	; (800425c <vPortEnterCritical+0x54>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d10e      	bne.n	8004250 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <vPortEnterCritical+0x58>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d009      	beq.n	8004250 <vPortEnterCritical+0x48>
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	e7fe      	b.n	800424e <vPortEnterCritical+0x46>
	}
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000008 	.word	0x20000008
 8004260:	e000ed04 	.word	0xe000ed04

08004264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <vPortExitCritical+0x48>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <vPortExitCritical+0x22>
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	607b      	str	r3, [r7, #4]
 8004284:	e7fe      	b.n	8004284 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004286:	4b09      	ldr	r3, [pc, #36]	; (80042ac <vPortExitCritical+0x48>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3b01      	subs	r3, #1
 800428c:	4a07      	ldr	r2, [pc, #28]	; (80042ac <vPortExitCritical+0x48>)
 800428e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <vPortExitCritical+0x48>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d104      	bne.n	80042a2 <vPortExitCritical+0x3e>
 8004298:	2300      	movs	r3, #0
 800429a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	20000008 	.word	0x20000008

080042b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042b0:	f3ef 8009 	mrs	r0, PSP
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <pxCurrentTCBConst>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042c0:	6010      	str	r0, [r2, #0]
 80042c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80042c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042ca:	f380 8811 	msr	BASEPRI, r0
 80042ce:	f7ff f863 	bl	8003398 <vTaskSwitchContext>
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f380 8811 	msr	BASEPRI, r0
 80042da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	6808      	ldr	r0, [r1, #0]
 80042e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042e6:	f380 8809 	msr	PSP, r0
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	4770      	bx	lr

080042f0 <pxCurrentTCBConst>:
 80042f0:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop

080042f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004310:	f7fe ff84 	bl	800321c <xTaskIncrementTick>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <SysTick_Handler+0x3c>)
 800431c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	2300      	movs	r3, #0
 8004324:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <vPortSetupTimerInterrupt+0x30>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <vPortSetupTimerInterrupt+0x34>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <vPortSetupTimerInterrupt+0x38>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a09      	ldr	r2, [pc, #36]	; (8004374 <vPortSetupTimerInterrupt+0x3c>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	4a08      	ldr	r2, [pc, #32]	; (8004378 <vPortSetupTimerInterrupt+0x40>)
 8004356:	3b01      	subs	r3, #1
 8004358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800435a:	4b03      	ldr	r3, [pc, #12]	; (8004368 <vPortSetupTimerInterrupt+0x30>)
 800435c:	2207      	movs	r2, #7
 800435e:	601a      	str	r2, [r3, #0]
}
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	e000e010 	.word	0xe000e010
 800436c:	e000e018 	.word	0xe000e018
 8004370:	2000000c 	.word	0x2000000c
 8004374:	10624dd3 	.word	0x10624dd3
 8004378:	e000e014 	.word	0xe000e014

0800437c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004382:	f3ef 8305 	mrs	r3, IPSR
 8004386:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b0f      	cmp	r3, #15
 800438c:	d913      	bls.n	80043b6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800438e:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <vPortValidateInterruptPriority+0x68>)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004398:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <vPortValidateInterruptPriority+0x6c>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	7afa      	ldrb	r2, [r7, #11]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d209      	bcs.n	80043b6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	607b      	str	r3, [r7, #4]
 80043b4:	e7fe      	b.n	80043b4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043b6:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <vPortValidateInterruptPriority+0x70>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043be:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <vPortValidateInterruptPriority+0x74>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d909      	bls.n	80043da <vPortValidateInterruptPriority+0x5e>
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	e7fe      	b.n	80043d8 <vPortValidateInterruptPriority+0x5c>
	}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr
 80043e4:	e000e3f0 	.word	0xe000e3f0
 80043e8:	20000df4 	.word	0x20000df4
 80043ec:	e000ed0c 	.word	0xe000ed0c
 80043f0:	20000df8 	.word	0x20000df8

080043f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	; 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004400:	f7fe fe54 	bl	80030ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004404:	4b57      	ldr	r3, [pc, #348]	; (8004564 <pvPortMalloc+0x170>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800440c:	f000 f90c 	bl	8004628 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004410:	4b55      	ldr	r3, [pc, #340]	; (8004568 <pvPortMalloc+0x174>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	f040 808c 	bne.w	8004536 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01c      	beq.n	800445e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004424:	2208      	movs	r2, #8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	2b00      	cmp	r3, #0
 8004434:	d013      	beq.n	800445e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f023 0307 	bic.w	r3, r3, #7
 800443c:	3308      	adds	r3, #8
 800443e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <pvPortMalloc+0x6a>
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e7fe      	b.n	800445c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d068      	beq.n	8004536 <pvPortMalloc+0x142>
 8004464:	4b41      	ldr	r3, [pc, #260]	; (800456c <pvPortMalloc+0x178>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	429a      	cmp	r2, r3
 800446c:	d863      	bhi.n	8004536 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800446e:	4b40      	ldr	r3, [pc, #256]	; (8004570 <pvPortMalloc+0x17c>)
 8004470:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004472:	4b3f      	ldr	r3, [pc, #252]	; (8004570 <pvPortMalloc+0x17c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004478:	e004      	b.n	8004484 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	429a      	cmp	r2, r3
 800448c:	d903      	bls.n	8004496 <pvPortMalloc+0xa2>
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f1      	bne.n	800447a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004496:	4b33      	ldr	r3, [pc, #204]	; (8004564 <pvPortMalloc+0x170>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449c:	429a      	cmp	r2, r3
 800449e:	d04a      	beq.n	8004536 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2208      	movs	r2, #8
 80044a6:	4413      	add	r3, r2
 80044a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	1ad2      	subs	r2, r2, r3
 80044ba:	2308      	movs	r3, #8
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	429a      	cmp	r2, r3
 80044c0:	d91e      	bls.n	8004500 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4413      	add	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <pvPortMalloc+0xf4>
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	e7fe      	b.n	80044e6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	1ad2      	subs	r2, r2, r3
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044fa:	69b8      	ldr	r0, [r7, #24]
 80044fc:	f000 f8f6 	bl	80046ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004500:	4b1a      	ldr	r3, [pc, #104]	; (800456c <pvPortMalloc+0x178>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	4a18      	ldr	r2, [pc, #96]	; (800456c <pvPortMalloc+0x178>)
 800450c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800450e:	4b17      	ldr	r3, [pc, #92]	; (800456c <pvPortMalloc+0x178>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b18      	ldr	r3, [pc, #96]	; (8004574 <pvPortMalloc+0x180>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d203      	bcs.n	8004522 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <pvPortMalloc+0x178>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a15      	ldr	r2, [pc, #84]	; (8004574 <pvPortMalloc+0x180>)
 8004520:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <pvPortMalloc+0x174>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	431a      	orrs	r2, r3
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004536:	f7fe fdc7 	bl	80030c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <pvPortMalloc+0x164>
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	e7fe      	b.n	8004556 <pvPortMalloc+0x162>
	return pvReturn;
 8004558:	69fb      	ldr	r3, [r7, #28]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3728      	adds	r7, #40	; 0x28
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20001a04 	.word	0x20001a04
 8004568:	20001a10 	.word	0x20001a10
 800456c:	20001a08 	.word	0x20001a08
 8004570:	200019fc 	.word	0x200019fc
 8004574:	20001a0c 	.word	0x20001a0c

08004578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d046      	beq.n	8004618 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800458a:	2308      	movs	r3, #8
 800458c:	425b      	negs	r3, r3
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4413      	add	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <vPortFree+0xa8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <vPortFree+0x42>
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	e7fe      	b.n	80045b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <vPortFree+0x5e>
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	e7fe      	b.n	80045d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	4b11      	ldr	r3, [pc, #68]	; (8004620 <vPortFree+0xa8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4013      	ands	r3, r2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d019      	beq.n	8004618 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d115      	bne.n	8004618 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <vPortFree+0xa8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	401a      	ands	r2, r3
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045fc:	f7fe fd56 	bl	80030ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	4b07      	ldr	r3, [pc, #28]	; (8004624 <vPortFree+0xac>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4413      	add	r3, r2
 800460a:	4a06      	ldr	r2, [pc, #24]	; (8004624 <vPortFree+0xac>)
 800460c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800460e:	6938      	ldr	r0, [r7, #16]
 8004610:	f000 f86c 	bl	80046ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004614:	f7fe fd58 	bl	80030c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004618:	bf00      	nop
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20001a10 	.word	0x20001a10
 8004624:	20001a08 	.word	0x20001a08

08004628 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800462e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004632:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004634:	4b27      	ldr	r3, [pc, #156]	; (80046d4 <prvHeapInit+0xac>)
 8004636:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00c      	beq.n	800465c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3307      	adds	r3, #7
 8004646:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0307 	bic.w	r3, r3, #7
 800464e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	4a1f      	ldr	r2, [pc, #124]	; (80046d4 <prvHeapInit+0xac>)
 8004658:	4413      	add	r3, r2
 800465a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004660:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <prvHeapInit+0xb0>)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004666:	4b1c      	ldr	r3, [pc, #112]	; (80046d8 <prvHeapInit+0xb0>)
 8004668:	2200      	movs	r2, #0
 800466a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4413      	add	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004674:	2208      	movs	r2, #8
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0307 	bic.w	r3, r3, #7
 8004682:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4a15      	ldr	r2, [pc, #84]	; (80046dc <prvHeapInit+0xb4>)
 8004688:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <prvHeapInit+0xb4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004692:	4b12      	ldr	r3, [pc, #72]	; (80046dc <prvHeapInit+0xb4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	1ad2      	subs	r2, r2, r3
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046a8:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <prvHeapInit+0xb4>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <prvHeapInit+0xb8>)
 80046b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4a09      	ldr	r2, [pc, #36]	; (80046e4 <prvHeapInit+0xbc>)
 80046be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <prvHeapInit+0xc0>)
 80046c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80046c6:	601a      	str	r2, [r3, #0]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000dfc 	.word	0x20000dfc
 80046d8:	200019fc 	.word	0x200019fc
 80046dc:	20001a04 	.word	0x20001a04
 80046e0:	20001a0c 	.word	0x20001a0c
 80046e4:	20001a08 	.word	0x20001a08
 80046e8:	20001a10 	.word	0x20001a10

080046ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046f4:	4b27      	ldr	r3, [pc, #156]	; (8004794 <prvInsertBlockIntoFreeList+0xa8>)
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	e002      	b.n	8004700 <prvInsertBlockIntoFreeList+0x14>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	429a      	cmp	r2, r3
 8004708:	d8f7      	bhi.n	80046fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	4413      	add	r3, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	429a      	cmp	r2, r3
 800471a:	d108      	bne.n	800472e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	441a      	add	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	441a      	add	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d118      	bne.n	8004774 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b14      	ldr	r3, [pc, #80]	; (8004798 <prvInsertBlockIntoFreeList+0xac>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d00d      	beq.n	800476a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	441a      	add	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	e008      	b.n	800477c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800476a:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <prvInsertBlockIntoFreeList+0xac>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e003      	b.n	800477c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d002      	beq.n	800478a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr
 8004794:	200019fc 	.word	0x200019fc
 8004798:	20001a04 	.word	0x20001a04

0800479c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047a0:	f7fb ff3c 	bl	800061c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047a4:	f000 f834 	bl	8004810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047a8:	f000 f8d6 	bl	8004958 <MX_GPIO_Init>
  MX_CAN_Init();
 80047ac:	f000 f876 	bl	800489c <MX_CAN_Init>
  MX_USART1_UART_Init();
 80047b0:	f000 f8a8 	bl	8004904 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uavcanInit();
 80047b4:	f000 fd16 	bl	80051e4 <uavcanInit>
  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80047b8:	f7fd fa34 	bl	8001c24 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uartMutex */
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 80047bc:	480c      	ldr	r0, [pc, #48]	; (80047f0 <main+0x54>)
 80047be:	f7fd fb6f 	bl	8001ea0 <osMutexNew>
 80047c2:	4602      	mov	r2, r0
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <main+0x58>)
 80047c6:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask01, NULL, &Task1_attributes);
 80047c8:	4a0b      	ldr	r2, [pc, #44]	; (80047f8 <main+0x5c>)
 80047ca:	2100      	movs	r1, #0
 80047cc:	480b      	ldr	r0, [pc, #44]	; (80047fc <main+0x60>)
 80047ce:	f7fd fa8f 	bl	8001cf0 <osThreadNew>
 80047d2:	4602      	mov	r2, r0
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <main+0x64>)
 80047d6:	601a      	str	r2, [r3, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask02, NULL, &Task2_attributes);
 80047d8:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <main+0x68>)
 80047da:	2100      	movs	r1, #0
 80047dc:	480a      	ldr	r0, [pc, #40]	; (8004808 <main+0x6c>)
 80047de:	f7fd fa87 	bl	8001cf0 <osThreadNew>
 80047e2:	4602      	mov	r2, r0
 80047e4:	4b09      	ldr	r3, [pc, #36]	; (800480c <main+0x70>)
 80047e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80047e8:	f7fd fa4e 	bl	8001c88 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80047ec:	e7fe      	b.n	80047ec <main+0x50>
 80047ee:	bf00      	nop
 80047f0:	0800954c 	.word	0x0800954c
 80047f4:	20001f54 	.word	0x20001f54
 80047f8:	08009504 	.word	0x08009504
 80047fc:	080049f1 	.word	0x080049f1
 8004800:	20001f10 	.word	0x20001f10
 8004804:	08009528 	.word	0x08009528
 8004808:	08004a03 	.word	0x08004a03
 800480c:	20001f58 	.word	0x20001f58

08004810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b090      	sub	sp, #64	; 0x40
 8004814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004816:	f107 0318 	add.w	r3, r7, #24
 800481a:	2228      	movs	r2, #40	; 0x28
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f003 fc85 	bl	800812e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	605a      	str	r2, [r3, #4]
 800482c:	609a      	str	r2, [r3, #8]
 800482e:	60da      	str	r2, [r3, #12]
 8004830:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004832:	2301      	movs	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004836:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800483a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800483c:	2300      	movs	r3, #0
 800483e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004840:	2301      	movs	r3, #1
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004844:	2302      	movs	r3, #2
 8004846:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800484c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800484e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004852:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004854:	f107 0318 	add.w	r3, r7, #24
 8004858:	4618      	mov	r0, r3
 800485a:	f7fc fa77 	bl	8000d4c <HAL_RCC_OscConfig>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004864:	f000 f8ec 	bl	8004a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004868:	230f      	movs	r3, #15
 800486a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800486c:	2302      	movs	r3, #2
 800486e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	2102      	movs	r1, #2
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc fce2 	bl	800124c <HAL_RCC_ClockConfig>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800488e:	f000 f8d7 	bl	8004a40 <Error_Handler>
  }
}
 8004892:	bf00      	nop
 8004894:	3740      	adds	r7, #64	; 0x40
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80048a0:	4b16      	ldr	r3, [pc, #88]	; (80048fc <MX_CAN_Init+0x60>)
 80048a2:	4a17      	ldr	r2, [pc, #92]	; (8004900 <MX_CAN_Init+0x64>)
 80048a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80048a6:	4b15      	ldr	r3, [pc, #84]	; (80048fc <MX_CAN_Init+0x60>)
 80048a8:	2210      	movs	r2, #16
 80048aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80048ac:	4b13      	ldr	r3, [pc, #76]	; (80048fc <MX_CAN_Init+0x60>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <MX_CAN_Init+0x60>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80048b8:	4b10      	ldr	r3, [pc, #64]	; (80048fc <MX_CAN_Init+0x60>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80048be:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <MX_CAN_Init+0x60>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <MX_CAN_Init+0x60>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80048ca:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <MX_CAN_Init+0x60>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <MX_CAN_Init+0x60>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80048d6:	4b09      	ldr	r3, [pc, #36]	; (80048fc <MX_CAN_Init+0x60>)
 80048d8:	2200      	movs	r2, #0
 80048da:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80048dc:	4b07      	ldr	r3, [pc, #28]	; (80048fc <MX_CAN_Init+0x60>)
 80048de:	2200      	movs	r2, #0
 80048e0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80048e2:	4b06      	ldr	r3, [pc, #24]	; (80048fc <MX_CAN_Init+0x60>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80048e8:	4804      	ldr	r0, [pc, #16]	; (80048fc <MX_CAN_Init+0x60>)
 80048ea:	f7fb fec9 	bl	8000680 <HAL_CAN_Init>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80048f4:	f000 f8a4 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20001ee8 	.word	0x20001ee8
 8004900:	40006400 	.word	0x40006400

08004904 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004908:	4b11      	ldr	r3, [pc, #68]	; (8004950 <MX_USART1_UART_Init+0x4c>)
 800490a:	4a12      	ldr	r2, [pc, #72]	; (8004954 <MX_USART1_UART_Init+0x50>)
 800490c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800490e:	4b10      	ldr	r3, [pc, #64]	; (8004950 <MX_USART1_UART_Init+0x4c>)
 8004910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004916:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <MX_USART1_UART_Init+0x4c>)
 8004918:	2200      	movs	r2, #0
 800491a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <MX_USART1_UART_Init+0x4c>)
 800491e:	2200      	movs	r2, #0
 8004920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004922:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <MX_USART1_UART_Init+0x4c>)
 8004924:	2200      	movs	r2, #0
 8004926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <MX_USART1_UART_Init+0x4c>)
 800492a:	220c      	movs	r2, #12
 800492c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800492e:	4b08      	ldr	r3, [pc, #32]	; (8004950 <MX_USART1_UART_Init+0x4c>)
 8004930:	2200      	movs	r2, #0
 8004932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <MX_USART1_UART_Init+0x4c>)
 8004936:	2200      	movs	r2, #0
 8004938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800493a:	4805      	ldr	r0, [pc, #20]	; (8004950 <MX_USART1_UART_Init+0x4c>)
 800493c:	f7fd f84a 	bl	80019d4 <HAL_UART_Init>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004946:	f000 f87b 	bl	8004a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800494a:	bf00      	nop
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20001f14 	.word	0x20001f14
 8004954:	40013800 	.word	0x40013800

08004958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495e:	f107 0310 	add.w	r3, r7, #16
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	605a      	str	r2, [r3, #4]
 8004968:	609a      	str	r2, [r3, #8]
 800496a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800496c:	4b1e      	ldr	r3, [pc, #120]	; (80049e8 <MX_GPIO_Init+0x90>)
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	4a1d      	ldr	r2, [pc, #116]	; (80049e8 <MX_GPIO_Init+0x90>)
 8004972:	f043 0310 	orr.w	r3, r3, #16
 8004976:	6193      	str	r3, [r2, #24]
 8004978:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <MX_GPIO_Init+0x90>)
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004984:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <MX_GPIO_Init+0x90>)
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <MX_GPIO_Init+0x90>)
 800498a:	f043 0320 	orr.w	r3, r3, #32
 800498e:	6193      	str	r3, [r2, #24]
 8004990:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <MX_GPIO_Init+0x90>)
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800499c:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <MX_GPIO_Init+0x90>)
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	4a11      	ldr	r2, [pc, #68]	; (80049e8 <MX_GPIO_Init+0x90>)
 80049a2:	f043 0304 	orr.w	r3, r3, #4
 80049a6:	6193      	str	r3, [r2, #24]
 80049a8:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <MX_GPIO_Init+0x90>)
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80049b4:	2200      	movs	r2, #0
 80049b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049ba:	480c      	ldr	r0, [pc, #48]	; (80049ec <MX_GPIO_Init+0x94>)
 80049bc:	f7fc f996 	bl	8000cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80049c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049c6:	2301      	movs	r3, #1
 80049c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ce:	2302      	movs	r3, #2
 80049d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80049d2:	f107 0310 	add.w	r3, r7, #16
 80049d6:	4619      	mov	r1, r3
 80049d8:	4804      	ldr	r0, [pc, #16]	; (80049ec <MX_GPIO_Init+0x94>)
 80049da:	f7fc f82d 	bl	8000a38 <HAL_GPIO_Init>

}
 80049de:	bf00      	nop
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40011000 	.word	0x40011000

080049f0 <StartTask01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	//CDC_Transmit_FS(txData, messageLength);
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	//showRcpwmonUart();
	//printf("dupa");
	//publishAirspeed();
	osDelay(500);
 80049f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049fc:	f7fd fa22 	bl	8001e44 <osDelay>
 8004a00:	e7fa      	b.n	80049f8 <StartTask01+0x8>

08004a02 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

  /* Infinite loop */
  for(;;)
  {
	sendCanard();
 8004a0a:	f000 fc23 	bl	8005254 <sendCanard>
	receiveCanard();
 8004a0e:	f000 fc45 	bl	800529c <receiveCanard>
	spinCanard();
 8004a12:	f000 fc65 	bl	80052e0 <spinCanard>

	publishCanard();
 8004a16:	f000 fc99 	bl	800534c <publishCanard>
	sendCanard();
 8004a1a:	e7f6      	b.n	8004a0a <StartTask02+0x8>

08004a1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a04      	ldr	r2, [pc, #16]	; (8004a3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d101      	bne.n	8004a32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004a2e:	f7fb fe0b 	bl	8000648 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40012c00 	.word	0x40012c00

08004a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004a52:	4b18      	ldr	r3, [pc, #96]	; (8004ab4 <HAL_MspInit+0x68>)
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <HAL_MspInit+0x68>)
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	6193      	str	r3, [r2, #24]
 8004a5e:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <HAL_MspInit+0x68>)
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <HAL_MspInit+0x68>)
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	4a11      	ldr	r2, [pc, #68]	; (8004ab4 <HAL_MspInit+0x68>)
 8004a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a74:	61d3      	str	r3, [r2, #28]
 8004a76:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <HAL_MspInit+0x68>)
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	607b      	str	r3, [r7, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a82:	2200      	movs	r2, #0
 8004a84:	210f      	movs	r1, #15
 8004a86:	f06f 0001 	mvn.w	r0, #1
 8004a8a:	f7fb ffaa 	bl	80009e2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <HAL_MspInit+0x6c>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	4a04      	ldr	r2, [pc, #16]	; (8004ab8 <HAL_MspInit+0x6c>)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40010000 	.word	0x40010000

08004abc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac4:	f107 0310 	add.w	r3, r7, #16
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	609a      	str	r2, [r3, #8]
 8004ad0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <HAL_CAN_MspInit+0x8c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d131      	bne.n	8004b40 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004adc:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <HAL_CAN_MspInit+0x90>)
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	4a1a      	ldr	r2, [pc, #104]	; (8004b4c <HAL_CAN_MspInit+0x90>)
 8004ae2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ae6:	61d3      	str	r3, [r2, #28]
 8004ae8:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <HAL_CAN_MspInit+0x90>)
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af4:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <HAL_CAN_MspInit+0x90>)
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <HAL_CAN_MspInit+0x90>)
 8004afa:	f043 0304 	orr.w	r3, r3, #4
 8004afe:	6193      	str	r3, [r2, #24]
 8004b00:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <HAL_CAN_MspInit+0x90>)
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004b0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b1a:	f107 0310 	add.w	r3, r7, #16
 8004b1e:	4619      	mov	r1, r3
 8004b20:	480b      	ldr	r0, [pc, #44]	; (8004b50 <HAL_CAN_MspInit+0x94>)
 8004b22:	f7fb ff89 	bl	8000a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b30:	2303      	movs	r3, #3
 8004b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b34:	f107 0310 	add.w	r3, r7, #16
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4805      	ldr	r0, [pc, #20]	; (8004b50 <HAL_CAN_MspInit+0x94>)
 8004b3c:	f7fb ff7c 	bl	8000a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004b40:	bf00      	nop
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40006400 	.word	0x40006400
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	40010800 	.word	0x40010800

08004b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b5c:	f107 0310 	add.w	r3, r7, #16
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	609a      	str	r2, [r3, #8]
 8004b68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1c      	ldr	r2, [pc, #112]	; (8004be0 <HAL_UART_MspInit+0x8c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d131      	bne.n	8004bd8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b74:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <HAL_UART_MspInit+0x90>)
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	4a1a      	ldr	r2, [pc, #104]	; (8004be4 <HAL_UART_MspInit+0x90>)
 8004b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b7e:	6193      	str	r3, [r2, #24]
 8004b80:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <HAL_UART_MspInit+0x90>)
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b8c:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <HAL_UART_MspInit+0x90>)
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	4a14      	ldr	r2, [pc, #80]	; (8004be4 <HAL_UART_MspInit+0x90>)
 8004b92:	f043 0304 	orr.w	r3, r3, #4
 8004b96:	6193      	str	r3, [r2, #24]
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_UART_MspInit+0x90>)
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ba8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004baa:	2302      	movs	r3, #2
 8004bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bb2:	f107 0310 	add.w	r3, r7, #16
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	480b      	ldr	r0, [pc, #44]	; (8004be8 <HAL_UART_MspInit+0x94>)
 8004bba:	f7fb ff3d 	bl	8000a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bcc:	f107 0310 	add.w	r3, r7, #16
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4805      	ldr	r0, [pc, #20]	; (8004be8 <HAL_UART_MspInit+0x94>)
 8004bd4:	f7fb ff30 	bl	8000a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004bd8:	bf00      	nop
 8004bda:	3720      	adds	r7, #32
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40013800 	.word	0x40013800
 8004be4:	40021000 	.word	0x40021000
 8004be8:	40010800 	.word	0x40010800

08004bec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08c      	sub	sp, #48	; 0x30
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	2019      	movs	r0, #25
 8004c02:	f7fb feee 	bl	80009e2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8004c06:	2019      	movs	r0, #25
 8004c08:	f7fb ff07 	bl	8000a1a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <HAL_InitTick+0x9c>)
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <HAL_InitTick+0x9c>)
 8004c12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c16:	6193      	str	r3, [r2, #24]
 8004c18:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <HAL_InitTick+0x9c>)
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c24:	f107 0210 	add.w	r2, r7, #16
 8004c28:	f107 0314 	add.w	r3, r7, #20
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fc fc8a 	bl	8001548 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004c34:	f7fc fc74 	bl	8001520 <HAL_RCC_GetPCLK2Freq>
 8004c38:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	4a13      	ldr	r2, [pc, #76]	; (8004c8c <HAL_InitTick+0xa0>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	0c9b      	lsrs	r3, r3, #18
 8004c44:	3b01      	subs	r3, #1
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004c48:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <HAL_InitTick+0xa4>)
 8004c4a:	4a12      	ldr	r2, [pc, #72]	; (8004c94 <HAL_InitTick+0xa8>)
 8004c4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004c4e:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <HAL_InitTick+0xa4>)
 8004c50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004c56:	4a0e      	ldr	r2, [pc, #56]	; (8004c90 <HAL_InitTick+0xa4>)
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <HAL_InitTick+0xa4>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_InitTick+0xa4>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004c68:	4809      	ldr	r0, [pc, #36]	; (8004c90 <HAL_InitTick+0xa4>)
 8004c6a:	f7fc fcbb 	bl	80015e4 <HAL_TIM_Base_Init>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004c74:	4806      	ldr	r0, [pc, #24]	; (8004c90 <HAL_InitTick+0xa4>)
 8004c76:	f7fc fce9 	bl	800164c <HAL_TIM_Base_Start_IT>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	e000      	b.n	8004c80 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3730      	adds	r7, #48	; 0x30
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	431bde83 	.word	0x431bde83
 8004c90:	20001f5c 	.word	0x20001f5c
 8004c94:	40012c00 	.word	0x40012c00

08004c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c9c:	bf00      	nop
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr

08004ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ca8:	e7fe      	b.n	8004ca8 <HardFault_Handler+0x4>

08004caa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004caa:	b480      	push	{r7}
 8004cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cae:	e7fe      	b.n	8004cae <MemManage_Handler+0x4>

08004cb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cb4:	e7fe      	b.n	8004cb4 <BusFault_Handler+0x4>

08004cb6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cba:	e7fe      	b.n	8004cba <UsageFault_Handler+0x4>

08004cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ccc:	4802      	ldr	r0, [pc, #8]	; (8004cd8 <TIM1_UP_IRQHandler+0x10>)
 8004cce:	f7fc fce0 	bl	8001692 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004cd2:	bf00      	nop
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20001f5c 	.word	0x20001f5c

08004cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
	return 1;
 8004ce0:	2301      	movs	r3, #1
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr

08004cea <_kill>:

int _kill(int pid, int sig)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004cf4:	f003 f9d4 	bl	80080a0 <__errno>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	2316      	movs	r3, #22
 8004cfc:	6013      	str	r3, [r2, #0]
	return -1;
 8004cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <_exit>:

void _exit (int status)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004d12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff ffe7 	bl	8004cea <_kill>
	while (1) {}		/* Make sure we hang here */
 8004d1c:	e7fe      	b.n	8004d1c <_exit+0x12>

08004d1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	e00a      	b.n	8004d46 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004d30:	f3af 8000 	nop.w
 8004d34:	4601      	mov	r1, r0
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	60ba      	str	r2, [r7, #8]
 8004d3c:	b2ca      	uxtb	r2, r1
 8004d3e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	3301      	adds	r3, #1
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	dbf0      	blt.n	8004d30 <_read+0x12>
	}

return len;
 8004d4e:	687b      	ldr	r3, [r7, #4]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	e009      	b.n	8004d7e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	60ba      	str	r2, [r7, #8]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	dbf1      	blt.n	8004d6a <_write+0x12>
	}
	return len;
 8004d86:	687b      	ldr	r3, [r7, #4]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <_close>:

int _close(int file)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	return -1;
 8004d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr

08004da6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004db6:	605a      	str	r2, [r3, #4]
	return 0;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr

08004dc4 <_isatty>:

int _isatty(int file)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
	return 1;
 8004dcc:	2301      	movs	r3, #1
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr

08004dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
	return 0;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004df8:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <_sbrk+0x50>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <_sbrk+0x16>
		heap_end = &end;
 8004e00:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <_sbrk+0x50>)
 8004e02:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <_sbrk+0x54>)
 8004e04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004e06:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <_sbrk+0x50>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <_sbrk+0x50>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	466a      	mov	r2, sp
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d907      	bls.n	8004e2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004e1a:	f003 f941 	bl	80080a0 <__errno>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	230c      	movs	r3, #12
 8004e22:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e28:	e006      	b.n	8004e38 <_sbrk+0x48>
	}

	heap_end += incr;
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <_sbrk+0x50>)
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4413      	add	r3, r2
 8004e32:	4a03      	ldr	r2, [pc, #12]	; (8004e40 <_sbrk+0x50>)
 8004e34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004e36:	68fb      	ldr	r3, [r7, #12]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20001a14 	.word	0x20001a14
 8004e44:	20001fa0 	.word	0x20001fa0

08004e48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004e4c:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <SystemInit+0x5c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a14      	ldr	r2, [pc, #80]	; (8004ea4 <SystemInit+0x5c>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004e58:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <SystemInit+0x5c>)
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	4911      	ldr	r1, [pc, #68]	; (8004ea4 <SystemInit+0x5c>)
 8004e5e:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <SystemInit+0x60>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004e64:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <SystemInit+0x5c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a0e      	ldr	r2, [pc, #56]	; (8004ea4 <SystemInit+0x5c>)
 8004e6a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e72:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004e74:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <SystemInit+0x5c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <SystemInit+0x5c>)
 8004e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e7e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004e80:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <SystemInit+0x5c>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	4a07      	ldr	r2, [pc, #28]	; (8004ea4 <SystemInit+0x5c>)
 8004e86:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004e8a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <SystemInit+0x5c>)
 8004e8e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004e92:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <SystemInit+0x64>)
 8004e96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e9a:	609a      	str	r2, [r3, #8]
#endif 
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	f8ff0000 	.word	0xf8ff0000
 8004eac:	e000ed00 	.word	0xe000ed00

08004eb0 <canardSTM32ComputeCANTimings>:
 */
static inline
int16_t canardSTM32ComputeCANTimings(const uint32_t peripheral_clock_rate,
                                     const uint32_t target_bitrate,
                                     CanardSTM32CANTimings* const out_timings)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
    if (target_bitrate < 1000)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ec2:	d201      	bcs.n	8004ec8 <canardSTM32ComputeCANTimings+0x18>
    {
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;
 8004ec4:	4b66      	ldr	r3, [pc, #408]	; (8005060 <canardSTM32ComputeCANTimings+0x1b0>)
 8004ec6:	e0c7      	b.n	8005058 <canardSTM32ComputeCANTimings+0x1a8>
    }

    CANARD_ASSERT(out_timings != NULL);  // NOLINT
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d105      	bne.n	8004eda <canardSTM32ComputeCANTimings+0x2a>
 8004ece:	4b65      	ldr	r3, [pc, #404]	; (8005064 <canardSTM32ComputeCANTimings+0x1b4>)
 8004ed0:	4a65      	ldr	r2, [pc, #404]	; (8005068 <canardSTM32ComputeCANTimings+0x1b8>)
 8004ed2:	21c7      	movs	r1, #199	; 0xc7
 8004ed4:	4865      	ldr	r0, [pc, #404]	; (800506c <canardSTM32ComputeCANTimings+0x1bc>)
 8004ed6:	f003 f8c5 	bl	8008064 <__assert_func>
    memset(out_timings, 0, sizeof(*out_timings));
 8004eda:	2206      	movs	r2, #6
 8004edc:	2100      	movs	r1, #0
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f003 f925 	bl	800812e <memset>
     *   1000 kbps      8       10
     *   500  kbps      16      17
     *   250  kbps      16      17
     *   125  kbps      16      17
     */
    const uint8_t max_quanta_per_bit = (uint8_t)((target_bitrate >= 1000000) ? 10 : 17);    // NOLINT
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a62      	ldr	r2, [pc, #392]	; (8005070 <canardSTM32ComputeCANTimings+0x1c0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d901      	bls.n	8004ef0 <canardSTM32ComputeCANTimings+0x40>
 8004eec:	230a      	movs	r3, #10
 8004eee:	e000      	b.n	8004ef2 <canardSTM32ComputeCANTimings+0x42>
 8004ef0:	2311      	movs	r3, #17
 8004ef2:	773b      	strb	r3, [r7, #28]
    CANARD_ASSERT(max_quanta_per_bit <= (MaxBS1 + MaxBS2));
 8004ef4:	7f3a      	ldrb	r2, [r7, #28]
 8004ef6:	4b5f      	ldr	r3, [pc, #380]	; (8005074 <canardSTM32ComputeCANTimings+0x1c4>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	4619      	mov	r1, r3
 8004efc:	4b5e      	ldr	r3, [pc, #376]	; (8005078 <canardSTM32ComputeCANTimings+0x1c8>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	440b      	add	r3, r1
 8004f02:	429a      	cmp	r2, r3
 8004f04:	dd05      	ble.n	8004f12 <canardSTM32ComputeCANTimings+0x62>
 8004f06:	4b5d      	ldr	r3, [pc, #372]	; (800507c <canardSTM32ComputeCANTimings+0x1cc>)
 8004f08:	4a57      	ldr	r2, [pc, #348]	; (8005068 <canardSTM32ComputeCANTimings+0x1b8>)
 8004f0a:	21dc      	movs	r1, #220	; 0xdc
 8004f0c:	4857      	ldr	r0, [pc, #348]	; (800506c <canardSTM32ComputeCANTimings+0x1bc>)
 8004f0e:	f003 f8a9 	bl	8008064 <__assert_func>
     *   BS = 1 + BS1 + BS2                                             -- Number of time quanta per bit
     *   PRESCALER_BS = PRESCALER * BS
     * ==>
     *   PRESCALER_BS = PCLK / BITRATE
     */
    const uint32_t prescaler_bs = peripheral_clock_rate / target_bitrate;
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1a:	61bb      	str	r3, [r7, #24]

    /*
     * Searching for such prescaler value so that the number of quanta per bit is highest.
     */
    uint8_t bs1_bs2_sum = (uint8_t)(max_quanta_per_bit - 1);    // NOLINT
 8004f1c:	7f3b      	ldrb	r3, [r7, #28]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	77fb      	strb	r3, [r7, #31]

    while ((prescaler_bs % (1U + bs1_bs2_sum)) != 0)
 8004f22:	e007      	b.n	8004f34 <canardSTM32ComputeCANTimings+0x84>
    {
        if (bs1_bs2_sum <= 2)
 8004f24:	7ffb      	ldrb	r3, [r7, #31]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d801      	bhi.n	8004f2e <canardSTM32ComputeCANTimings+0x7e>
        {
            return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;          // No solution
 8004f2a:	4b4d      	ldr	r3, [pc, #308]	; (8005060 <canardSTM32ComputeCANTimings+0x1b0>)
 8004f2c:	e094      	b.n	8005058 <canardSTM32ComputeCANTimings+0x1a8>
        }
        bs1_bs2_sum--;
 8004f2e:	7ffb      	ldrb	r3, [r7, #31]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	77fb      	strb	r3, [r7, #31]
    while ((prescaler_bs % (1U + bs1_bs2_sum)) != 0)
 8004f34:	7ffb      	ldrb	r3, [r7, #31]
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f3e:	fb02 f201 	mul.w	r2, r2, r1
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1ed      	bne.n	8004f24 <canardSTM32ComputeCANTimings+0x74>
    }

    const uint32_t prescaler = prescaler_bs / (1U + bs1_bs2_sum);
 8004f48:	7ffb      	ldrb	r3, [r7, #31]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f52:	617b      	str	r3, [r7, #20]
    if ((prescaler < 1U) || (prescaler > 1024U))
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <canardSTM32ComputeCANTimings+0xb2>
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f60:	d901      	bls.n	8004f66 <canardSTM32ComputeCANTimings+0xb6>
    {
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;              // No solution
 8004f62:	4b3f      	ldr	r3, [pc, #252]	; (8005060 <canardSTM32ComputeCANTimings+0x1b0>)
 8004f64:	e078      	b.n	8005058 <canardSTM32ComputeCANTimings+0x1a8>
     *
     * Since the optimal solution is so close to the maximum, we prepare two solutions, and then pick the best one:
     *   - With rounding to nearest
     *   - With rounding to zero
     */
    uint8_t bs1 = (uint8_t)(((7 * bs1_bs2_sum - 1) + 4) / 8);       // Trying rounding to nearest first  // NOLINT
 8004f66:	7ffa      	ldrb	r2, [r7, #31]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	3303      	adds	r3, #3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	da00      	bge.n	8004f76 <canardSTM32ComputeCANTimings+0xc6>
 8004f74:	3307      	adds	r3, #7
 8004f76:	10db      	asrs	r3, r3, #3
 8004f78:	77bb      	strb	r3, [r7, #30]
    uint8_t bs2 = (uint8_t)(bs1_bs2_sum - bs1);  // NOLINT
 8004f7a:	7ffa      	ldrb	r2, [r7, #31]
 8004f7c:	7fbb      	ldrb	r3, [r7, #30]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	777b      	strb	r3, [r7, #29]
    CANARD_ASSERT(bs1_bs2_sum > bs1);
 8004f82:	7ffa      	ldrb	r2, [r7, #31]
 8004f84:	7fbb      	ldrb	r3, [r7, #30]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d806      	bhi.n	8004f98 <canardSTM32ComputeCANTimings+0xe8>
 8004f8a:	4b3d      	ldr	r3, [pc, #244]	; (8005080 <canardSTM32ComputeCANTimings+0x1d0>)
 8004f8c:	4a36      	ldr	r2, [pc, #216]	; (8005068 <canardSTM32ComputeCANTimings+0x1b8>)
 8004f8e:	f240 1115 	movw	r1, #277	; 0x115
 8004f92:	4836      	ldr	r0, [pc, #216]	; (800506c <canardSTM32ComputeCANTimings+0x1bc>)
 8004f94:	f003 f866 	bl	8008064 <__assert_func>

    {
        const uint16_t sample_point_permill = (uint16_t)(1000U * (1U + bs1) / (1U + bs1 + bs2));  // NOLINT
 8004f98:	7fbb      	ldrb	r3, [r7, #30]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fa0:	fb02 f203 	mul.w	r2, r2, r3
 8004fa4:	7fb9      	ldrb	r1, [r7, #30]
 8004fa6:	7f7b      	ldrb	r3, [r7, #29]
 8004fa8:	440b      	add	r3, r1
 8004faa:	3301      	adds	r3, #1
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	827b      	strh	r3, [r7, #18]

        if (sample_point_permill > MaxSamplePointLocationPermill)   // Strictly more!
 8004fb2:	4b34      	ldr	r3, [pc, #208]	; (8005084 <canardSTM32ComputeCANTimings+0x1d4>)
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	8a7a      	ldrh	r2, [r7, #18]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d90d      	bls.n	8004fd8 <canardSTM32ComputeCANTimings+0x128>
        {
            bs1 = (uint8_t)((7 * bs1_bs2_sum - 1) / 8);             // Nope, too far; now rounding to zero
 8004fbc:	7ffa      	ldrb	r2, [r7, #31]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	da00      	bge.n	8004fcc <canardSTM32ComputeCANTimings+0x11c>
 8004fca:	3307      	adds	r3, #7
 8004fcc:	10db      	asrs	r3, r3, #3
 8004fce:	77bb      	strb	r3, [r7, #30]
            bs2 = (uint8_t)(bs1_bs2_sum - bs1);
 8004fd0:	7ffa      	ldrb	r2, [r7, #31]
 8004fd2:	7fbb      	ldrb	r3, [r7, #30]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	777b      	strb	r3, [r7, #29]
        }
    }

    const bool valid = (bs1 >= 1) && (bs1 <= MaxBS1) && (bs2 >= 1) && (bs2 <= MaxBS2);
 8004fd8:	7fbb      	ldrb	r3, [r7, #30]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00e      	beq.n	8004ffc <canardSTM32ComputeCANTimings+0x14c>
 8004fde:	4b25      	ldr	r3, [pc, #148]	; (8005074 <canardSTM32ComputeCANTimings+0x1c4>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	7fba      	ldrb	r2, [r7, #30]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d809      	bhi.n	8004ffc <canardSTM32ComputeCANTimings+0x14c>
 8004fe8:	7f7b      	ldrb	r3, [r7, #29]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d006      	beq.n	8004ffc <canardSTM32ComputeCANTimings+0x14c>
 8004fee:	4b22      	ldr	r3, [pc, #136]	; (8005078 <canardSTM32ComputeCANTimings+0x1c8>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	7f7a      	ldrb	r2, [r7, #29]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d801      	bhi.n	8004ffc <canardSTM32ComputeCANTimings+0x14c>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <canardSTM32ComputeCANTimings+0x14e>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	747b      	strb	r3, [r7, #17]
 8005000:	7c7b      	ldrb	r3, [r7, #17]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	747b      	strb	r3, [r7, #17]
     * def sample_point_from_btr(x):
     *     assert 0b0011110010000000111111000000000 & x == 0
     *     ts2,ts1,brp = (x>>20)&7, (x>>16)&15, x&511
     *     return (1+ts1+1)/(1+ts1+1+ts2+1)
     */
    if ((target_bitrate != (peripheral_clock_rate / (prescaler * (1U + bs1 + bs2)))) ||
 8005008:	7fba      	ldrb	r2, [r7, #30]
 800500a:	7f7b      	ldrb	r3, [r7, #29]
 800500c:	4413      	add	r3, r2
 800500e:	3301      	adds	r3, #1
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	429a      	cmp	r2, r3
 8005020:	d105      	bne.n	800502e <canardSTM32ComputeCANTimings+0x17e>
        !valid)
 8005022:	7c7b      	ldrb	r3, [r7, #17]
 8005024:	f083 0301 	eor.w	r3, r3, #1
 8005028:	b2db      	uxtb	r3, r3
    if ((target_bitrate != (peripheral_clock_rate / (prescaler * (1U + bs1 + bs2)))) ||
 800502a:	2b00      	cmp	r3, #0
 800502c:	d006      	beq.n	800503c <canardSTM32ComputeCANTimings+0x18c>
    {
        // This actually means that the algorithm has a logic error, hence assert(0).
        CANARD_ASSERT(0);  // NOLINT
 800502e:	4b16      	ldr	r3, [pc, #88]	; (8005088 <canardSTM32ComputeCANTimings+0x1d8>)
 8005030:	4a0d      	ldr	r2, [pc, #52]	; (8005068 <canardSTM32ComputeCANTimings+0x1b8>)
 8005032:	f240 112f 	movw	r1, #303	; 0x12f
 8005036:	480d      	ldr	r0, [pc, #52]	; (800506c <canardSTM32ComputeCANTimings+0x1bc>)
 8005038:	f003 f814 	bl	8008064 <__assert_func>
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;
    }

    out_timings->bit_rate_prescaler = (uint16_t) prescaler;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	b29a      	uxth	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	801a      	strh	r2, [r3, #0]
    out_timings->max_resynchronization_jump_width = 1;      // One is recommended by UAVCAN, CANOpen, and DeviceNet
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	711a      	strb	r2, [r3, #4]
    out_timings->bit_segment_1 = bs1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	7fba      	ldrb	r2, [r7, #30]
 800504e:	709a      	strb	r2, [r3, #2]
    out_timings->bit_segment_2 = bs2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	7f7a      	ldrb	r2, [r7, #29]
 8005054:	70da      	strb	r2, [r3, #3]

    return 0;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3720      	adds	r7, #32
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	fffffc18 	.word	0xfffffc18
 8005064:	08009004 	.word	0x08009004
 8005068:	08009674 	.word	0x08009674
 800506c:	08009020 	.word	0x08009020
 8005070:	000f423f 	.word	0x000f423f
 8005074:	08009691 	.word	0x08009691
 8005078:	08009692 	.word	0x08009692
 800507c:	0800904c 	.word	0x0800904c
 8005080:	08009074 	.word	0x08009074
 8005084:	08009694 	.word	0x08009694
 8005088:	08009088 	.word	0x08009088
 800508c:	00000000 	.word	0x00000000

08005090 <shouldAcceptTransfer>:
bool shouldAcceptTransfer(const CanardInstance* ins,
                          uint64_t* out_data_type_signature,
                          uint16_t data_type_id,
                          CanardTransferType transfer_type,
                          uint8_t source_node_id)
{
 8005090:	b490      	push	{r4, r7}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	4611      	mov	r1, r2
 800509c:	461a      	mov	r2, r3
 800509e:	460b      	mov	r3, r1
 80050a0:	80fb      	strh	r3, [r7, #6]
 80050a2:	4613      	mov	r3, r2
 80050a4:	717b      	strb	r3, [r7, #5]
    if ((transfer_type == CanardTransferTypeRequest) &&(data_type_id == UAVCAN_GET_NODE_INFO_DATA_TYPE_ID))
 80050a6:	797b      	ldrb	r3, [r7, #5]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d10a      	bne.n	80050c2 <shouldAcceptTransfer+0x32>
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d107      	bne.n	80050c2 <shouldAcceptTransfer+0x32>
    {
        *out_data_type_signature = UAVCAN_GET_NODE_INFO_DATA_TYPE_SIGNATURE;
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	a412      	add	r4, pc, #72	; (adr r4, 8005100 <shouldAcceptTransfer+0x70>)
 80050b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80050ba:	e9c2 3400 	strd	r3, r4, [r2]
        return true;
 80050be:	2301      	movs	r3, #1
 80050c0:	e018      	b.n	80050f4 <shouldAcceptTransfer+0x64>
    }
    if (data_type_id == UAVCAN_EQUIPMENT_ESC_RAWCOMMAND_ID)
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	f240 4206 	movw	r2, #1030	; 0x406
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d107      	bne.n	80050dc <shouldAcceptTransfer+0x4c>
    {
        *out_data_type_signature = UAVCAN_EQUIPMENT_ESC_RAWCOMMAND_SIGNATURE;
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	a40e      	add	r4, pc, #56	; (adr r4, 8005108 <shouldAcceptTransfer+0x78>)
 80050d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80050d4:	e9c2 3400 	strd	r3, r4, [r2]
        return true;
 80050d8:	2301      	movs	r3, #1
 80050da:	e00b      	b.n	80050f4 <shouldAcceptTransfer+0x64>
    }
    if (data_type_id == UAVCAN_PROTOCOL_PARAM_GETSET_ID)
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	2b0b      	cmp	r3, #11
 80050e0:	d107      	bne.n	80050f2 <shouldAcceptTransfer+0x62>
    {
        *out_data_type_signature = UAVCAN_PROTOCOL_PARAM_GETSET_SIGNATURE;
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	a40a      	add	r4, pc, #40	; (adr r4, 8005110 <shouldAcceptTransfer+0x80>)
 80050e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80050ea:	e9c2 3400 	strd	r3, r4, [r2]
        return true;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <shouldAcceptTransfer+0x64>
    }
    return false;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc90      	pop	{r4, r7}
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	21c46a9e 	.word	0x21c46a9e
 8005104:	ee468a81 	.word	0xee468a81
 8005108:	d7ec951d 	.word	0xd7ec951d
 800510c:	217f5c87 	.word	0x217f5c87
 8005110:	39d1a4d5 	.word	0x39d1a4d5
 8005114:	a7b622f9 	.word	0xa7b622f9

08005118 <onTransferReceived>:

//////////////////////////////////////////////////////////////////////////////////////

void onTransferReceived(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
    if ((transfer->transfer_type == CanardTransferTypeRequest) && (transfer->data_type_id == UAVCAN_GET_NODE_INFO_DATA_TYPE_ID))
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	7e1b      	ldrb	r3, [r3, #24]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d106      	bne.n	8005138 <onTransferReceived+0x20>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	8adb      	ldrh	r3, [r3, #22]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d102      	bne.n	8005138 <onTransferReceived+0x20>
    {
        getNodeInfoHandleCanard(transfer);
 8005132:	6838      	ldr	r0, [r7, #0]
 8005134:	f000 f814 	bl	8005160 <getNodeInfoHandleCanard>
    }

    if (transfer->data_type_id == UAVCAN_EQUIPMENT_ESC_RAWCOMMAND_ID)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	8adb      	ldrh	r3, [r3, #22]
 800513c:	f240 4206 	movw	r2, #1030	; 0x406
 8005140:	4293      	cmp	r3, r2
 8005142:	d102      	bne.n	800514a <onTransferReceived+0x32>
    {
        rawcmdHandleCanard(transfer);
 8005144:	6838      	ldr	r0, [r7, #0]
 8005146:	f000 fa43 	bl	80055d0 <rawcmdHandleCanard>
    }

    if (transfer->data_type_id == UAVCAN_PROTOCOL_PARAM_GETSET_ID)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	8adb      	ldrh	r3, [r3, #22]
 800514e:	2b0b      	cmp	r3, #11
 8005150:	d102      	bne.n	8005158 <onTransferReceived+0x40>
    {
        getsetHandleCanard(transfer);
 8005152:	6838      	ldr	r0, [r7, #0]
 8005154:	f000 fbb4 	bl	80058c0 <getsetHandleCanard>
    }

}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <getNodeInfoHandleCanard>:

void getNodeInfoHandleCanard(CanardRxTransfer* transfer)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b0ea      	sub	sp, #424	; 0x1a8
 8005164:	af06      	add	r7, sp, #24
 8005166:	1d3b      	adds	r3, r7, #4
 8005168:	6018      	str	r0, [r3, #0]
        uint8_t buffer[UAVCAN_GET_NODE_INFO_RESPONSE_MAX_SIZE];
        memset(buffer,0,UAVCAN_GET_NODE_INFO_RESPONSE_MAX_SIZE);
 800516a:	f107 030c 	add.w	r3, r7, #12
 800516e:	f240 1279 	movw	r2, #377	; 0x179
 8005172:	2100      	movs	r1, #0
 8005174:	4618      	mov	r0, r3
 8005176:	f002 ffda 	bl	800812e <memset>
        uint16_t len = makeNodeInfoMessage(buffer);
 800517a:	f107 030c 	add.w	r3, r7, #12
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f9d2 	bl	8005528 <makeNodeInfoMessage>
 8005184:	4603      	mov	r3, r0
 8005186:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
        int result = canardRequestOrRespond(&g_canard,
 800518a:	1d3b      	adds	r3, r7, #4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	7ed8      	ldrb	r0, [r3, #27]
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3319      	adds	r3, #25
 8005196:	1d3a      	adds	r2, r7, #4
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	7e92      	ldrb	r2, [r2, #26]
 800519c:	f8b7 118e 	ldrh.w	r1, [r7, #398]	; 0x18e
 80051a0:	9105      	str	r1, [sp, #20]
 80051a2:	f107 010c 	add.w	r1, r7, #12
 80051a6:	9104      	str	r1, [sp, #16]
 80051a8:	2100      	movs	r1, #0
 80051aa:	9103      	str	r1, [sp, #12]
 80051ac:	9202      	str	r2, [sp, #8]
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	2301      	movs	r3, #1
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	a309      	add	r3, pc, #36	; (adr r3, 80051dc <getNodeInfoHandleCanard+0x7c>)
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	4601      	mov	r1, r0
 80051bc:	4806      	ldr	r0, [pc, #24]	; (80051d8 <getNodeInfoHandleCanard+0x78>)
 80051be:	f000 fd79 	bl	8005cb4 <canardRequestOrRespond>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
                                            &transfer->transfer_id,
                                            transfer->priority,
                                            CanardResponse,
                                            &buffer[0],
                                            (uint16_t)len);
}
 80051c8:	bf00      	nop
 80051ca:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	f3af 8000 	nop.w
 80051d8:	20001a18 	.word	0x20001a18
 80051dc:	21c46a9e 	.word	0x21c46a9e
 80051e0:	ee468a81 	.word	0xee468a81

080051e4 <uavcanInit>:

void uavcanInit(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af02      	add	r7, sp, #8
    CanardSTM32CANTimings timings;
    int result = canardSTM32ComputeCANTimings(HAL_RCC_GetPCLK1Freq(), 1000000, &timings);
 80051ea:	f7fc f985 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 80051ee:	1d3b      	adds	r3, r7, #4
 80051f0:	461a      	mov	r2, r3
 80051f2:	4913      	ldr	r1, [pc, #76]	; (8005240 <uavcanInit+0x5c>)
 80051f4:	f7ff fe5c 	bl	8004eb0 <canardSTM32ComputeCANTimings>
 80051f8:	4603      	mov	r3, r0
 80051fa:	60fb      	str	r3, [r7, #12]
    if (result)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d000      	beq.n	8005204 <uavcanInit+0x20>
    {
        __ASM volatile("BKPT #01");
 8005202:	be01      	bkpt	0x0001
    }
    result = canardSTM32Init(&timings, CanardSTM32IfaceModeNormal);
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	2100      	movs	r1, #0
 8005208:	4618      	mov	r0, r3
 800520a:	f002 fcd9 	bl	8007bc0 <canardSTM32Init>
 800520e:	4603      	mov	r3, r0
 8005210:	60fb      	str	r3, [r7, #12]
    if (result)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d000      	beq.n	800521a <uavcanInit+0x36>
    {
        __ASM volatile("BKPT #01");
 8005218:	be01      	bkpt	0x0001
    }

    canardInit(&g_canard,                         // Uninitialized library instance
 800521a:	2300      	movs	r3, #0
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <uavcanInit+0x60>)
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	4b09      	ldr	r3, [pc, #36]	; (8005248 <uavcanInit+0x64>)
 8005224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005228:	4908      	ldr	r1, [pc, #32]	; (800524c <uavcanInit+0x68>)
 800522a:	4809      	ldr	r0, [pc, #36]	; (8005250 <uavcanInit+0x6c>)
 800522c:	f000 fc30 	bl	8005a90 <canardInit>
               sizeof(g_canard_memory_pool),      // Size of the above, in bytes
               onTransferReceived,                // Callback, see CanardOnTransferReception
               shouldAcceptTransfer,              // Callback, see CanardShouldAcceptTransfer
               NULL);

    canardSetLocalNodeID(&g_canard, 11);
 8005230:	210b      	movs	r1, #11
 8005232:	4807      	ldr	r0, [pc, #28]	; (8005250 <uavcanInit+0x6c>)
 8005234:	f000 fc70 	bl	8005b18 <canardSetLocalNodeID>
}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	000f4240 	.word	0x000f4240
 8005244:	08005091 	.word	0x08005091
 8005248:	08005119 	.word	0x08005119
 800524c:	20001a3c 	.word	0x20001a3c
 8005250:	20001a18 	.word	0x20001a18

08005254 <sendCanard>:

void sendCanard(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
  const CanardCANFrame* txf = canardPeekTxQueue(&g_canard);
 800525a:	480f      	ldr	r0, [pc, #60]	; (8005298 <sendCanard+0x44>)
 800525c:	f000 fd96 	bl	8005d8c <canardPeekTxQueue>
 8005260:	6078      	str	r0, [r7, #4]
  while(txf)
 8005262:	e012      	b.n	800528a <sendCanard+0x36>
    {
        const int tx_res = canardSTM32Transmit(txf);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f002 fdb1 	bl	8007dcc <canardSTM32Transmit>
 800526a:	4603      	mov	r3, r0
 800526c:	603b      	str	r3, [r7, #0]
        if (tx_res < 0)                  // Failure - drop the frame and report
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	da00      	bge.n	8005276 <sendCanard+0x22>
        {
            __ASM volatile("BKPT #01");  // TODO: handle the error properly
 8005274:	be01      	bkpt	0x0001
        }
        if(tx_res > 0)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	dd02      	ble.n	8005282 <sendCanard+0x2e>
        {
            canardPopTxQueue(&g_canard);
 800527c:	4806      	ldr	r0, [pc, #24]	; (8005298 <sendCanard+0x44>)
 800527e:	f000 fd97 	bl	8005db0 <canardPopTxQueue>
        }
        txf = canardPeekTxQueue(&g_canard);
 8005282:	4805      	ldr	r0, [pc, #20]	; (8005298 <sendCanard+0x44>)
 8005284:	f000 fd82 	bl	8005d8c <canardPeekTxQueue>
 8005288:	6078      	str	r0, [r7, #4]
  while(txf)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e9      	bne.n	8005264 <sendCanard+0x10>
    }
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20001a18 	.word	0x20001a18

0800529c <receiveCanard>:

void receiveCanard(void)
{
 800529c:	b590      	push	{r4, r7, lr}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
    CanardCANFrame rx_frame;
    int res = canardSTM32Receive(&rx_frame);
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	4618      	mov	r0, r3
 80052a6:	f002 fe59 	bl	8007f5c <canardSTM32Receive>
 80052aa:	4603      	mov	r3, r0
 80052ac:	617b      	str	r3, [r7, #20]
    if(res)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00e      	beq.n	80052d2 <receiveCanard+0x36>
    {
        canardHandleRxFrame(&g_canard, &rx_frame, HAL_GetTick() * 1000);
 80052b4:	f7fb f9da 	bl	800066c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052be:	fb03 f302 	mul.w	r3, r3, r2
 80052c2:	f04f 0400 	mov.w	r4, #0
 80052c6:	1d39      	adds	r1, r7, #4
 80052c8:	461a      	mov	r2, r3
 80052ca:	4623      	mov	r3, r4
 80052cc:	4803      	ldr	r0, [pc, #12]	; (80052dc <receiveCanard+0x40>)
 80052ce:	f000 fd85 	bl	8005ddc <canardHandleRxFrame>
    }
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd90      	pop	{r4, r7, pc}
 80052da:	bf00      	nop
 80052dc:	20001a18 	.word	0x20001a18

080052e0 <spinCanard>:

void spinCanard(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	; 0x28
 80052e4:	af06      	add	r7, sp, #24
    static uint32_t spin_time = 0;
    if(HAL_GetTick() < spin_time + CANARD_SPIN_PERIOD) return;  // rate limiting
 80052e6:	f7fb f9c1 	bl	800066c <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	4b14      	ldr	r3, [pc, #80]	; (8005340 <spinCanard+0x60>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3364      	adds	r3, #100	; 0x64
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d31c      	bcc.n	8005330 <spinCanard+0x50>
    spin_time = HAL_GetTick();
 80052f6:	f7fb f9b9 	bl	800066c <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	4b10      	ldr	r3, [pc, #64]	; (8005340 <spinCanard+0x60>)
 80052fe:	601a      	str	r2, [r3, #0]
    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
    //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

    uint8_t buffer[UAVCAN_NODE_STATUS_MESSAGE_SIZE];
    static uint8_t transfer_id = 0;                           // This variable MUST BE STATIC; refer to the libcanard documentation for the background
    makeNodeStatusMessage(buffer);
 8005300:	1d3b      	adds	r3, r7, #4
 8005302:	4618      	mov	r0, r3
 8005304:	f000 f8e0 	bl	80054c8 <makeNodeStatusMessage>
    const int16_t bc_res = canardBroadcast(&g_canard,
 8005308:	2307      	movs	r3, #7
 800530a:	9304      	str	r3, [sp, #16]
 800530c:	1d3b      	adds	r3, r7, #4
 800530e:	9303      	str	r3, [sp, #12]
 8005310:	2318      	movs	r3, #24
 8005312:	9302      	str	r3, [sp, #8]
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <spinCanard+0x64>)
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	f240 1355 	movw	r3, #341	; 0x155
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	a306      	add	r3, pc, #24	; (adr r3, 8005338 <spinCanard+0x58>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	4808      	ldr	r0, [pc, #32]	; (8005348 <spinCanard+0x68>)
 8005326:	f000 fc33 	bl	8005b90 <canardBroadcast>
 800532a:	4603      	mov	r3, r0
 800532c:	81fb      	strh	r3, [r7, #14]
 800532e:	e000      	b.n	8005332 <spinCanard+0x52>
    if(HAL_GetTick() < spin_time + CANARD_SPIN_PERIOD) return;  // rate limiting
 8005330:	bf00      	nop
    if(bc_res <=0){
    	//handle errr
    }


}
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	c1a7c6f1 	.word	0xc1a7c6f1
 800533c:	0f0868d0 	.word	0x0f0868d0
 8005340:	20001e48 	.word	0x20001e48
 8005344:	20001e4c 	.word	0x20001e4c
 8005348:	20001a18 	.word	0x20001a18

0800534c <publishCanard>:

void publishCanard(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
    static uint32_t publish_time = 0;
    static int step = 0;
    if(HAL_GetTick() < publish_time + PUBLISHER_PERIOD_mS) {return;} // rate limiting
 8005350:	f7fb f98c 	bl	800066c <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <publishCanard+0x34>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3364      	adds	r3, #100	; 0x64
 800535c:	429a      	cmp	r2, r3
 800535e:	d30c      	bcc.n	800537a <publishCanard+0x2e>
    publish_time = HAL_GetTick();
 8005360:	f7fb f984 	bl	800066c <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <publishCanard+0x34>)
 8005368:	601a      	str	r2, [r3, #0]
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800536a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800536e:	4805      	ldr	r0, [pc, #20]	; (8005384 <publishCanard+0x38>)
 8005370:	f7fb fcd4 	bl	8000d1c <HAL_GPIO_TogglePin>
                    &transfer_id,
                    CANARD_TRANSFER_PRIORITY_LOW,
                    &buffer[0],
                    7);
	*/
    publishAirspeed();
 8005374:	f000 f880 	bl	8005478 <publishAirspeed>
 8005378:	e000      	b.n	800537c <publishCanard+0x30>
    if(HAL_GetTick() < publish_time + PUBLISHER_PERIOD_mS) {return;} // rate limiting
 800537a:	bf00      	nop

}
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20001e50 	.word	0x20001e50
 8005384:	40011000 	.word	0x40011000

08005388 <makeRawAirDatadMessage>:




void makeRawAirDatadMessage(uint8_t buffer[UAVCAN_EQUIPMENT_AIR_DATA_RAWAIRDATA_SIZE])
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	/*
	 * Full name: uavcan.equipment.air_data.RawAirData
     * Default data type ID: 1027
	 */

	memset(buffer, 0, UAVCAN_EQUIPMENT_AIR_DATA_RAWAIRDATA_SIZE);
 8005390:	2231      	movs	r2, #49	; 0x31
 8005392:	2100      	movs	r1, #0
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f002 feca 	bl	800812e <memset>
	/*
	 * uint16_t canardConvertNativeFloatToFloat16(float value);
	 * float canardConvertFloat16ToNativeFloat(uint16_t value);
	 */
	static int step = 0;
	step++;
 800539a:	4b32      	ldr	r3, [pc, #200]	; (8005464 <makeRawAirDatadMessage+0xdc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3301      	adds	r3, #1
 80053a0:	4a30      	ldr	r2, [pc, #192]	; (8005464 <makeRawAirDatadMessage+0xdc>)
 80053a2:	6013      	str	r3, [r2, #0]
	if(step == 256)
 80053a4:	4b2f      	ldr	r3, [pc, #188]	; (8005464 <makeRawAirDatadMessage+0xdc>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ac:	d102      	bne.n	80053b4 <makeRawAirDatadMessage+0x2c>
	{
		step = 0;
 80053ae:	4b2d      	ldr	r3, [pc, #180]	; (8005464 <makeRawAirDatadMessage+0xdc>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
	}

	float val = sine_wave[step];
 80053b4:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <makeRawAirDatadMessage+0xdc>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a2b      	ldr	r2, [pc, #172]	; (8005468 <makeRawAirDatadMessage+0xe0>)
 80053ba:	5cd3      	ldrb	r3, [r2, r3]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fa ff85 	bl	80002cc <__aeabi_ui2f>
 80053c2:	4603      	mov	r3, r0
 80053c4:	61fb      	str	r3, [r7, #28]


	 uint8_t flags = 1;
 80053c6:	2301      	movs	r3, #1
 80053c8:	767b      	strb	r3, [r7, #25]
	 uint16_t pad= 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	837b      	strh	r3, [r7, #26]
	 //uint32_t static_pressure = convertFrom16To32(canardConvertNativeFloatToFloat16(987.456), 0);
	 //uint32_t differential_pressure = convertFrom16To32(0, canardConvertNativeFloatToFloat16(1000));
	 //uint16_t static_pressure = canardConvertNativeFloatToFloat16(4.1);
	 //uint16_t differential_pressure = canardConvertNativeFloatToFloat16(0.0);
	 float static_pressure = 101300.0;
 80053ce:	4b27      	ldr	r3, [pc, #156]	; (800546c <makeRawAirDatadMessage+0xe4>)
 80053d0:	617b      	str	r3, [r7, #20]
	 //float differential_pressure = 1000.0;
	 float differential_pressure = val*10.0;
 80053d2:	4927      	ldr	r1, [pc, #156]	; (8005470 <makeRawAirDatadMessage+0xe8>)
 80053d4:	69f8      	ldr	r0, [r7, #28]
 80053d6:	f7fa ffd1 	bl	800037c <__aeabi_fmul>
 80053da:	4603      	mov	r3, r0
 80053dc:	613b      	str	r3, [r7, #16]


	 uint16_t static_pressure_sensor_temperature = 330;
 80053de:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80053e2:	81fb      	strh	r3, [r7, #14]
	 uint16_t differential_pressure_sensor_temperature = 340;
 80053e4:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80053e8:	81bb      	strh	r3, [r7, #12]
	 uint16_t static_air_temperature = canardConvertNativeFloatToFloat16(288.0);
 80053ea:	4822      	ldr	r0, [pc, #136]	; (8005474 <makeRawAirDatadMessage+0xec>)
 80053ec:	f001 fb16 	bl	8006a1c <canardConvertNativeFloatToFloat16>
 80053f0:	4603      	mov	r3, r0
 80053f2:	817b      	strh	r3, [r7, #10]
	 uint16_t pitot_temperature = 10;
 80053f4:	230a      	movs	r3, #10
 80053f6:	813b      	strh	r3, [r7, #8]
	 //uint16_t padding[16];


	 canardEncodeScalar(buffer, 0, 8, &flags);
 80053f8:	f107 0319 	add.w	r3, r7, #25
 80053fc:	2208      	movs	r2, #8
 80053fe:	2100      	movs	r1, #0
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f001 fa27 	bl	8006854 <canardEncodeScalar>
	 canardEncodeScalar(buffer, 8, 32, &static_pressure);
 8005406:	f107 0314 	add.w	r3, r7, #20
 800540a:	2220      	movs	r2, #32
 800540c:	2108      	movs	r1, #8
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 fa20 	bl	8006854 <canardEncodeScalar>
	 canardEncodeScalar(buffer, 40, 32, &differential_pressure);
 8005414:	f107 0310 	add.w	r3, r7, #16
 8005418:	2220      	movs	r2, #32
 800541a:	2128      	movs	r1, #40	; 0x28
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f001 fa19 	bl	8006854 <canardEncodeScalar>
	 canardEncodeScalar(buffer, 72, 16, &static_pressure_sensor_temperature);
 8005422:	f107 030e 	add.w	r3, r7, #14
 8005426:	2210      	movs	r2, #16
 8005428:	2148      	movs	r1, #72	; 0x48
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f001 fa12 	bl	8006854 <canardEncodeScalar>
	 canardEncodeScalar(buffer, 88, 16, &differential_pressure_sensor_temperature);
 8005430:	f107 030c 	add.w	r3, r7, #12
 8005434:	2210      	movs	r2, #16
 8005436:	2158      	movs	r1, #88	; 0x58
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 fa0b 	bl	8006854 <canardEncodeScalar>
	 canardEncodeScalar(buffer, 104, 16, &static_air_temperature);
 800543e:	f107 030a 	add.w	r3, r7, #10
 8005442:	2210      	movs	r2, #16
 8005444:	2168      	movs	r1, #104	; 0x68
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f001 fa04 	bl	8006854 <canardEncodeScalar>
	 canardEncodeScalar(buffer, 120, 16, &pitot_temperature);
 800544c:	f107 0308 	add.w	r3, r7, #8
 8005450:	2210      	movs	r2, #16
 8005452:	2178      	movs	r1, #120	; 0x78
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f001 f9fd 	bl	8006854 <canardEncodeScalar>
	 //canardEncodeScalar(buffer, 136, 16, &pitot_temperature);


}
 800545a:	bf00      	nop
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20001e54 	.word	0x20001e54
 8005468:	08009574 	.word	0x08009574
 800546c:	47c5da00 	.word	0x47c5da00
 8005470:	41200000 	.word	0x41200000
 8005474:	43900000 	.word	0x43900000

08005478 <publishAirspeed>:

void publishAirspeed(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b094      	sub	sp, #80	; 0x50
 800547c:	af06      	add	r7, sp, #24
	}

*/

	uint8_t buff[UAVCAN_EQUIPMENT_AIR_DATA_RAWAIRDATA_SIZE];
	makeRawAirDatadMessage(buff);
 800547e:	1d3b      	adds	r3, r7, #4
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff ff81 	bl	8005388 <makeRawAirDatadMessage>
	static uint8_t transfer_id;  // Note that the transfer ID variable MUST BE STATIC (or heap-allocated)!
	const int16_t airspeed_result = canardBroadcast(&g_canard, UAVCAN_EQUIPMENT_AIR_DATA_RAWAIRDATA_SIGNATURE, UAVCAN_EQUIPMENT_AIR_DATA_RAWAIRDATA_ID, &transfer_id, CANARD_TRANSFER_PRIORITY_HIGHEST, buff, UAVCAN_EQUIPMENT_AIR_DATA_RAWAIRDATA_SIZE);
 8005486:	2331      	movs	r3, #49	; 0x31
 8005488:	9304      	str	r3, [sp, #16]
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	9303      	str	r3, [sp, #12]
 800548e:	2300      	movs	r3, #0
 8005490:	9302      	str	r3, [sp, #8]
 8005492:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <publishAirspeed+0x48>)
 8005494:	9301      	str	r3, [sp, #4]
 8005496:	f240 4303 	movw	r3, #1027	; 0x403
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	a306      	add	r3, pc, #24	; (adr r3, 80054b8 <publishAirspeed+0x40>)
 800549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a2:	4808      	ldr	r0, [pc, #32]	; (80054c4 <publishAirspeed+0x4c>)
 80054a4:	f000 fb74 	bl	8005b90 <canardBroadcast>
 80054a8:	4603      	mov	r3, r0
 80054aa:	86fb      	strh	r3, [r7, #54]	; 0x36
	{
		//handle error
	}


}
 80054ac:	bf00      	nop
 80054ae:	3738      	adds	r7, #56	; 0x38
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	f3af 8000 	nop.w
 80054b8:	a122f5da 	.word	0xa122f5da
 80054bc:	c77df38b 	.word	0xc77df38b
 80054c0:	20001e58 	.word	0x20001e58
 80054c4:	20001a18 	.word	0x20001a18

080054c8 <makeNodeStatusMessage>:




void makeNodeStatusMessage(uint8_t buffer[UAVCAN_NODE_STATUS_MESSAGE_SIZE])
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
    uint8_t node_health = UAVCAN_NODE_HEALTH_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	73fb      	strb	r3, [r7, #15]
    uint8_t node_mode   = UAVCAN_NODE_MODE_OPERATIONAL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	73bb      	strb	r3, [r7, #14]
    memset(buffer, 0, UAVCAN_NODE_STATUS_MESSAGE_SIZE);
 80054d8:	2207      	movs	r2, #7
 80054da:	2100      	movs	r1, #0
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f002 fe26 	bl	800812e <memset>
    uint32_t uptime_sec = (HAL_GetTick() / 1000);
 80054e2:	f7fb f8c3 	bl	800066c <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <makeNodeStatusMessage+0x5c>)
 80054ea:	fba3 2302 	umull	r2, r3, r3, r2
 80054ee:	099b      	lsrs	r3, r3, #6
 80054f0:	60bb      	str	r3, [r7, #8]
    canardEncodeScalar(buffer,  0, 32, &uptime_sec);
 80054f2:	f107 0308 	add.w	r3, r7, #8
 80054f6:	2220      	movs	r2, #32
 80054f8:	2100      	movs	r1, #0
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f001 f9aa 	bl	8006854 <canardEncodeScalar>
    canardEncodeScalar(buffer, 32,  2, &node_health);
 8005500:	f107 030f 	add.w	r3, r7, #15
 8005504:	2202      	movs	r2, #2
 8005506:	2120      	movs	r1, #32
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f001 f9a3 	bl	8006854 <canardEncodeScalar>
    canardEncodeScalar(buffer, 34,  3, &node_mode);
 800550e:	f107 030e 	add.w	r3, r7, #14
 8005512:	2203      	movs	r2, #3
 8005514:	2122      	movs	r1, #34	; 0x22
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f001 f99c 	bl	8006854 <canardEncodeScalar>
}
 800551c:	bf00      	nop
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	10624dd3 	.word	0x10624dd3

08005528 <makeNodeInfoMessage>:

uint16_t makeNodeInfoMessage(uint8_t buffer[UAVCAN_GET_NODE_INFO_RESPONSE_MAX_SIZE])
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
    memset(buffer, 0, UAVCAN_GET_NODE_INFO_RESPONSE_MAX_SIZE);
 8005530:	f240 1279 	movw	r2, #377	; 0x179
 8005534:	2100      	movs	r1, #0
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f002 fdf9 	bl	800812e <memset>
    makeNodeStatusMessage(buffer);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff ffc3 	bl	80054c8 <makeNodeStatusMessage>

    buffer[7] = APP_VERSION_MAJOR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3307      	adds	r3, #7
 8005546:	2263      	movs	r2, #99	; 0x63
 8005548:	701a      	strb	r2, [r3, #0]
    buffer[8] = APP_VERSION_MINOR;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3308      	adds	r3, #8
 800554e:	2263      	movs	r2, #99	; 0x63
 8005550:	701a      	strb	r2, [r3, #0]
    buffer[9] = 1;                          // Optional field flags, VCS commit is set
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3309      	adds	r3, #9
 8005556:	2201      	movs	r2, #1
 8005558:	701a      	strb	r2, [r3, #0]
    uint32_t u32 = GIT_HASH;
 800555a:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <makeNodeInfoMessage+0x70>)
 800555c:	60bb      	str	r3, [r7, #8]
    canardEncodeScalar(buffer, 80, 32, &u32);
 800555e:	f107 0308 	add.w	r3, r7, #8
 8005562:	2220      	movs	r2, #32
 8005564:	2150      	movs	r1, #80	; 0x50
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f001 f974 	bl	8006854 <canardEncodeScalar>

    readUniqueID(&buffer[24]);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3318      	adds	r3, #24
 8005570:	4618      	mov	r0, r3
 8005572:	f000 f815 	bl	80055a0 <readUniqueID>
    const size_t name_len = strlen(APP_NODE_NAME);
 8005576:	230f      	movs	r3, #15
 8005578:	60fb      	str	r3, [r7, #12]
    memcpy(&buffer[41], APP_NODE_NAME, name_len);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3329      	adds	r3, #41	; 0x29
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4906      	ldr	r1, [pc, #24]	; (800559c <makeNodeInfoMessage+0x74>)
 8005582:	4618      	mov	r0, r3
 8005584:	f002 fdc8 	bl	8008118 <memcpy>
    return 41 + name_len ;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	b29b      	uxth	r3, r3
 800558c:	3329      	adds	r3, #41	; 0x29
 800558e:	b29b      	uxth	r3, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	badc0ffe 	.word	0xbadc0ffe
 800559c:	0800908c 	.word	0x0800908c

080055a0 <readUniqueID>:

void readUniqueID(uint8_t* out_uid)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UNIQUE_ID_LENGTH_BYTES; i++)
 80055a8:	2300      	movs	r3, #0
 80055aa:	73fb      	strb	r3, [r7, #15]
 80055ac:	e007      	b.n	80055be <readUniqueID+0x1e>
    {
        out_uid[i] = i;
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4413      	add	r3, r2
 80055b4:	7bfa      	ldrb	r2, [r7, #15]
 80055b6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < UNIQUE_ID_LENGTH_BYTES; i++)
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	3301      	adds	r3, #1
 80055bc:	73fb      	strb	r3, [r7, #15]
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b0f      	cmp	r3, #15
 80055c2:	d9f4      	bls.n	80055ae <readUniqueID+0xe>
    }
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr
	...

080055d0 <rawcmdHandleCanard>:


void rawcmdHandleCanard(CanardRxTransfer* transfer)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	6078      	str	r0, [r7, #4]

    int offset = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i<6; i++)
 80055dc:	2300      	movs	r3, #0
 80055de:	60bb      	str	r3, [r7, #8]
 80055e0:	e013      	b.n	800560a <rawcmdHandleCanard+0x3a>
    {
        if (canardDecodeScalar(transfer, offset, 14, true, &rc_pwm[i])<14) { break; }
 80055e2:	68f9      	ldr	r1, [r7, #12]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	4a0c      	ldr	r2, [pc, #48]	; (800561c <rawcmdHandleCanard+0x4c>)
 80055ea:	4413      	add	r3, r2
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	2301      	movs	r3, #1
 80055f0:	220e      	movs	r2, #14
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 ff5a 	bl	80064ac <canardDecodeScalar>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b0d      	cmp	r3, #13
 80055fc:	dd09      	ble.n	8005612 <rawcmdHandleCanard+0x42>
        offset += 14;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	330e      	adds	r3, #14
 8005602:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i<6; i++)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	3301      	adds	r3, #1
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b05      	cmp	r3, #5
 800560e:	dde8      	ble.n	80055e2 <rawcmdHandleCanard+0x12>
    }
   // rcpwmUpdate(ar);
}
 8005610:	e000      	b.n	8005614 <rawcmdHandleCanard+0x44>
        if (canardDecodeScalar(transfer, offset, 14, true, &rc_pwm[i])<14) { break; }
 8005612:	bf00      	nop
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20001e3c 	.word	0x20001e3c

08005620 <getParamByIndex>:
    {"param1", 1, 0, 100, 25},
    {"param2", 2, 2, 8,  3 },
};

param_t * getParamByIndex(uint16_t index)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	80fb      	strh	r3, [r7, #6]
  if(index >= ARRAY_SIZE(parameters))
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <getParamByIndex+0x14>
  {
    return NULL;
 8005630:	2300      	movs	r3, #0
 8005632:	e006      	b.n	8005642 <getParamByIndex+0x22>
  }

  return &parameters[index];
 8005634:	88fa      	ldrh	r2, [r7, #6]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	4a03      	ldr	r2, [pc, #12]	; (800564c <getParamByIndex+0x2c>)
 8005640:	4413      	add	r3, r2
}
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	20000010 	.word	0x20000010

08005650 <getParamByName>:

param_t * getParamByName(uint8_t * name)
{
 8005650:	b590      	push	{r4, r7, lr}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  for(uint16_t i = 0; i < ARRAY_SIZE(parameters); i++)
 8005658:	2300      	movs	r3, #0
 800565a:	81fb      	strh	r3, [r7, #14]
 800565c:	e026      	b.n	80056ac <getParamByName+0x5c>
  {
    if(strncmp((char const*)name, (char const*)parameters[i].name,strlen((char const*)parameters[i].name)) == 0)
 800565e:	89fa      	ldrh	r2, [r7, #14]
 8005660:	4916      	ldr	r1, [pc, #88]	; (80056bc <getParamByName+0x6c>)
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	440b      	add	r3, r1
 800566c:	681c      	ldr	r4, [r3, #0]
 800566e:	89fa      	ldrh	r2, [r7, #14]
 8005670:	4912      	ldr	r1, [pc, #72]	; (80056bc <getParamByName+0x6c>)
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	440b      	add	r3, r1
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f7fa fd66 	bl	8000150 <strlen>
 8005684:	4603      	mov	r3, r0
 8005686:	461a      	mov	r2, r3
 8005688:	4621      	mov	r1, r4
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f003 f81c 	bl	80086c8 <strncmp>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d107      	bne.n	80056a6 <getParamByName+0x56>
    {
      return &parameters[i];
 8005696:	89fa      	ldrh	r2, [r7, #14]
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4a06      	ldr	r2, [pc, #24]	; (80056bc <getParamByName+0x6c>)
 80056a2:	4413      	add	r3, r2
 80056a4:	e006      	b.n	80056b4 <getParamByName+0x64>
  for(uint16_t i = 0; i < ARRAY_SIZE(parameters); i++)
 80056a6:	89fb      	ldrh	r3, [r7, #14]
 80056a8:	3301      	adds	r3, #1
 80056aa:	81fb      	strh	r3, [r7, #14]
 80056ac:	89fb      	ldrh	r3, [r7, #14]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d9d5      	bls.n	800565e <getParamByName+0xe>
    }
  }
  return NULL;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd90      	pop	{r4, r7, pc}
 80056bc:	20000010 	.word	0x20000010

080056c0 <encodeParamCanard>:

uint16_t encodeParamCanard(param_t * p, uint8_t * buffer)
{
 80056c0:	b5b0      	push	{r4, r5, r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
    uint8_t n     = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	72fb      	strb	r3, [r7, #11]
    int offset    = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
    uint8_t tag   = 1;
 80056d2:	2301      	movs	r3, #1
 80056d4:	72bb      	strb	r3, [r7, #10]
    if(p==NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d150      	bne.n	800577e <encodeParamCanard+0xbe>
    {
        tag = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	72bb      	strb	r3, [r7, #10]
        canardEncodeScalar(buffer, offset, 5, &n);
 80056e0:	68f9      	ldr	r1, [r7, #12]
 80056e2:	f107 030b 	add.w	r3, r7, #11
 80056e6:	2205      	movs	r2, #5
 80056e8:	6838      	ldr	r0, [r7, #0]
 80056ea:	f001 f8b3 	bl	8006854 <canardEncodeScalar>
        offset += 5;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3305      	adds	r3, #5
 80056f2:	60fb      	str	r3, [r7, #12]
        canardEncodeScalar(buffer, offset,3, &tag);
 80056f4:	68f9      	ldr	r1, [r7, #12]
 80056f6:	f107 030a 	add.w	r3, r7, #10
 80056fa:	2203      	movs	r2, #3
 80056fc:	6838      	ldr	r0, [r7, #0]
 80056fe:	f001 f8a9 	bl	8006854 <canardEncodeScalar>
        offset += 3;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3303      	adds	r3, #3
 8005706:	60fb      	str	r3, [r7, #12]

        canardEncodeScalar(buffer, offset, 6, &n);
 8005708:	68f9      	ldr	r1, [r7, #12]
 800570a:	f107 030b 	add.w	r3, r7, #11
 800570e:	2206      	movs	r2, #6
 8005710:	6838      	ldr	r0, [r7, #0]
 8005712:	f001 f89f 	bl	8006854 <canardEncodeScalar>
        offset += 6;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3306      	adds	r3, #6
 800571a:	60fb      	str	r3, [r7, #12]
        canardEncodeScalar(buffer, offset,2, &tag);
 800571c:	68f9      	ldr	r1, [r7, #12]
 800571e:	f107 030a 	add.w	r3, r7, #10
 8005722:	2202      	movs	r2, #2
 8005724:	6838      	ldr	r0, [r7, #0]
 8005726:	f001 f895 	bl	8006854 <canardEncodeScalar>
        offset += 2;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3302      	adds	r3, #2
 800572e:	60fb      	str	r3, [r7, #12]

        canardEncodeScalar(buffer, offset, 6, &n);
 8005730:	68f9      	ldr	r1, [r7, #12]
 8005732:	f107 030b 	add.w	r3, r7, #11
 8005736:	2206      	movs	r2, #6
 8005738:	6838      	ldr	r0, [r7, #0]
 800573a:	f001 f88b 	bl	8006854 <canardEncodeScalar>
        offset += 6;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3306      	adds	r3, #6
 8005742:	60fb      	str	r3, [r7, #12]
        canardEncodeScalar(buffer, offset, 2, &tag);
 8005744:	68f9      	ldr	r1, [r7, #12]
 8005746:	f107 030a 	add.w	r3, r7, #10
 800574a:	2202      	movs	r2, #2
 800574c:	6838      	ldr	r0, [r7, #0]
 800574e:	f001 f881 	bl	8006854 <canardEncodeScalar>
        offset += 2;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3302      	adds	r3, #2
 8005756:	60fb      	str	r3, [r7, #12]
        buffer[offset / 8] = 0;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	da00      	bge.n	8005760 <encodeParamCanard+0xa0>
 800575e:	3307      	adds	r3, #7
 8005760:	10db      	asrs	r3, r3, #3
 8005762:	461a      	mov	r2, r3
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	4413      	add	r3, r2
 8005768:	2200      	movs	r2, #0
 800576a:	701a      	strb	r2, [r3, #0]
        return ( offset / 8 + 1 );
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	da00      	bge.n	8005774 <encodeParamCanard+0xb4>
 8005772:	3307      	adds	r3, #7
 8005774:	10db      	asrs	r3, r3, #3
 8005776:	b29b      	uxth	r3, r3
 8005778:	3301      	adds	r3, #1
 800577a:	b29b      	uxth	r3, r3
 800577c:	e09b      	b.n	80058b6 <encodeParamCanard+0x1f6>
    }
    canardEncodeScalar(buffer, offset, 5,&n);
 800577e:	68f9      	ldr	r1, [r7, #12]
 8005780:	f107 030b 	add.w	r3, r7, #11
 8005784:	2205      	movs	r2, #5
 8005786:	6838      	ldr	r0, [r7, #0]
 8005788:	f001 f864 	bl	8006854 <canardEncodeScalar>
    offset += 5;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3305      	adds	r3, #5
 8005790:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset, 3, &tag);
 8005792:	68f9      	ldr	r1, [r7, #12]
 8005794:	f107 030a 	add.w	r3, r7, #10
 8005798:	2203      	movs	r2, #3
 800579a:	6838      	ldr	r0, [r7, #0]
 800579c:	f001 f85a 	bl	8006854 <canardEncodeScalar>
    offset += 3;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3303      	adds	r3, #3
 80057a4:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset, 64, &p->val);
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3308      	adds	r3, #8
 80057ac:	2240      	movs	r2, #64	; 0x40
 80057ae:	6838      	ldr	r0, [r7, #0]
 80057b0:	f001 f850 	bl	8006854 <canardEncodeScalar>
    offset += 64;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3340      	adds	r3, #64	; 0x40
 80057b8:	60fb      	str	r3, [r7, #12]

    canardEncodeScalar(buffer, offset, 5, &n);
 80057ba:	68f9      	ldr	r1, [r7, #12]
 80057bc:	f107 030b 	add.w	r3, r7, #11
 80057c0:	2205      	movs	r2, #5
 80057c2:	6838      	ldr	r0, [r7, #0]
 80057c4:	f001 f846 	bl	8006854 <canardEncodeScalar>
    offset += 5;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3305      	adds	r3, #5
 80057cc:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset, 3, &tag);
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	f107 030a 	add.w	r3, r7, #10
 80057d4:	2203      	movs	r2, #3
 80057d6:	6838      	ldr	r0, [r7, #0]
 80057d8:	f001 f83c 	bl	8006854 <canardEncodeScalar>
    offset += 3;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3303      	adds	r3, #3
 80057e0:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset, 64, &p->defval);
 80057e2:	68f9      	ldr	r1, [r7, #12]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3320      	adds	r3, #32
 80057e8:	2240      	movs	r2, #64	; 0x40
 80057ea:	6838      	ldr	r0, [r7, #0]
 80057ec:	f001 f832 	bl	8006854 <canardEncodeScalar>
    offset += 64;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3340      	adds	r3, #64	; 0x40
 80057f4:	60fb      	str	r3, [r7, #12]

    canardEncodeScalar(buffer, offset, 6, &n);
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	f107 030b 	add.w	r3, r7, #11
 80057fc:	2206      	movs	r2, #6
 80057fe:	6838      	ldr	r0, [r7, #0]
 8005800:	f001 f828 	bl	8006854 <canardEncodeScalar>
    offset += 6;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3306      	adds	r3, #6
 8005808:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset, 2, &tag);
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	f107 030a 	add.w	r3, r7, #10
 8005810:	2202      	movs	r2, #2
 8005812:	6838      	ldr	r0, [r7, #0]
 8005814:	f001 f81e 	bl	8006854 <canardEncodeScalar>
    offset += 2;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3302      	adds	r3, #2
 800581c:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset, 64, &p->max);
 800581e:	68f9      	ldr	r1, [r7, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3318      	adds	r3, #24
 8005824:	2240      	movs	r2, #64	; 0x40
 8005826:	6838      	ldr	r0, [r7, #0]
 8005828:	f001 f814 	bl	8006854 <canardEncodeScalar>
    offset += 64;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3340      	adds	r3, #64	; 0x40
 8005830:	60fb      	str	r3, [r7, #12]

    canardEncodeScalar(buffer, offset, 6, &n);
 8005832:	68f9      	ldr	r1, [r7, #12]
 8005834:	f107 030b 	add.w	r3, r7, #11
 8005838:	2206      	movs	r2, #6
 800583a:	6838      	ldr	r0, [r7, #0]
 800583c:	f001 f80a 	bl	8006854 <canardEncodeScalar>
    offset += 6;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3306      	adds	r3, #6
 8005844:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset,2,&tag);
 8005846:	68f9      	ldr	r1, [r7, #12]
 8005848:	f107 030a 	add.w	r3, r7, #10
 800584c:	2202      	movs	r2, #2
 800584e:	6838      	ldr	r0, [r7, #0]
 8005850:	f001 f800 	bl	8006854 <canardEncodeScalar>
    offset += 2;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3302      	adds	r3, #2
 8005858:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset,64,&p->min);
 800585a:	68f9      	ldr	r1, [r7, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3310      	adds	r3, #16
 8005860:	2240      	movs	r2, #64	; 0x40
 8005862:	6838      	ldr	r0, [r7, #0]
 8005864:	f000 fff6 	bl	8006854 <canardEncodeScalar>
    offset += 64;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3340      	adds	r3, #64	; 0x40
 800586c:	60fb      	str	r3, [r7, #12]

    memcpy(&buffer[offset / 8], p->name, strlen((char const*)p->name));
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	da00      	bge.n	8005876 <encodeParamCanard+0x1b6>
 8005874:	3307      	adds	r3, #7
 8005876:	10db      	asrs	r3, r3, #3
 8005878:	461a      	mov	r2, r3
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	189c      	adds	r4, r3, r2
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681d      	ldr	r5, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7fa fc62 	bl	8000150 <strlen>
 800588c:	4603      	mov	r3, r0
 800588e:	461a      	mov	r2, r3
 8005890:	4629      	mov	r1, r5
 8005892:	4620      	mov	r0, r4
 8005894:	f002 fc40 	bl	8008118 <memcpy>
    return  (offset/8 + strlen((char const*)p->name));
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	da00      	bge.n	80058a0 <encodeParamCanard+0x1e0>
 800589e:	3307      	adds	r3, #7
 80058a0:	10db      	asrs	r3, r3, #3
 80058a2:	b29c      	uxth	r4, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fa fc51 	bl	8000150 <strlen>
 80058ae:	4603      	mov	r3, r0
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	4423      	add	r3, r4
 80058b4:	b29b      	uxth	r3, r3
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080058c0 <getsetHandleCanard>:


void getsetHandleCanard(CanardRxTransfer* transfer)
{
 80058c0:	b590      	push	{r4, r7, lr}
 80058c2:	b0a5      	sub	sp, #148	; 0x94
 80058c4:	af06      	add	r7, sp, #24
 80058c6:	6078      	str	r0, [r7, #4]
    uint16_t index = 0xFFFF;
 80058c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    uint8_t tag    = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
    int offset     = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	677b      	str	r3, [r7, #116]	; 0x74
    int64_t val    = 0;
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	f04f 0400 	mov.w	r4, #0
 80058e2:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

    canardDecodeScalar(transfer, offset,  13, false, &index);
 80058e6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80058e8:	f107 0362 	add.w	r3, r7, #98	; 0x62
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	2300      	movs	r3, #0
 80058f0:	220d      	movs	r2, #13
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fdda 	bl	80064ac <canardDecodeScalar>
    offset += 13;
 80058f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058fa:	330d      	adds	r3, #13
 80058fc:	677b      	str	r3, [r7, #116]	; 0x74
    canardDecodeScalar(transfer, offset, 3, false, &tag);
 80058fe:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005900:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	2300      	movs	r3, #0
 8005908:	2203      	movs	r2, #3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fdce 	bl	80064ac <canardDecodeScalar>
    offset += 3;
 8005910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005912:	3303      	adds	r3, #3
 8005914:	677b      	str	r3, [r7, #116]	; 0x74

    if(tag == 1)
 8005916:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800591a:	2b01      	cmp	r3, #1
 800591c:	d10b      	bne.n	8005936 <getsetHandleCanard+0x76>
    {
        canardDecodeScalar(transfer, offset, 64, false, &val);
 800591e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005920:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	2300      	movs	r3, #0
 8005928:	2240      	movs	r2, #64	; 0x40
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fdbe 	bl	80064ac <canardDecodeScalar>
        offset += 64;
 8005930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005932:	3340      	adds	r3, #64	; 0x40
 8005934:	677b      	str	r3, [r7, #116]	; 0x74
    }

    uint16_t n = transfer->payload_len - offset / 8 ;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	8a9a      	ldrh	r2, [r3, #20]
 800593a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800593c:	2b00      	cmp	r3, #0
 800593e:	da00      	bge.n	8005942 <getsetHandleCanard+0x82>
 8005940:	3307      	adds	r3, #7
 8005942:	10db      	asrs	r3, r3, #3
 8005944:	425b      	negs	r3, r3
 8005946:	b29b      	uxth	r3, r3
 8005948:	4413      	add	r3, r2
 800594a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    uint8_t name[16]      = "";
 800594e:	2300      	movs	r3, #0
 8005950:	64bb      	str	r3, [r7, #72]	; 0x48
 8005952:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	605a      	str	r2, [r3, #4]
 800595c:	609a      	str	r2, [r3, #8]
    for(int i = 0; i < n; i++)
 800595e:	2300      	movs	r3, #0
 8005960:	673b      	str	r3, [r7, #112]	; 0x70
 8005962:	e010      	b.n	8005986 <getsetHandleCanard+0xc6>
    {
        canardDecodeScalar(transfer, offset, 8, false, &name[i]);
 8005964:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005966:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800596a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800596c:	4413      	add	r3, r2
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	2300      	movs	r3, #0
 8005972:	2208      	movs	r2, #8
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fd99 	bl	80064ac <canardDecodeScalar>
        offset += 8;
 800597a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800597c:	3308      	adds	r3, #8
 800597e:	677b      	str	r3, [r7, #116]	; 0x74
    for(int i = 0; i < n; i++)
 8005980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005982:	3301      	adds	r3, #1
 8005984:	673b      	str	r3, [r7, #112]	; 0x70
 8005986:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800598a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800598c:	429a      	cmp	r2, r3
 800598e:	dbe9      	blt.n	8005964 <getsetHandleCanard+0xa4>
    }

    param_t * p = NULL;
 8005990:	2300      	movs	r3, #0
 8005992:	66fb      	str	r3, [r7, #108]	; 0x6c

    if(strlen((char const*)name))
 8005994:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d006      	beq.n	80059ac <getsetHandleCanard+0xec>
    {
        p = getParamByName(name);
 800599e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fe54 	bl	8005650 <getParamByName>
 80059a8:	66f8      	str	r0, [r7, #108]	; 0x6c
 80059aa:	e005      	b.n	80059b8 <getsetHandleCanard+0xf8>
    }
    else
    {
        p = getParamByIndex(index);
 80059ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fe35 	bl	8005620 <getParamByIndex>
 80059b6:	66f8      	str	r0, [r7, #108]	; 0x6c
    }

    if((p)&&(tag == 1))
 80059b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d008      	beq.n	80059d0 <getsetHandleCanard+0x110>
 80059be:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d104      	bne.n	80059d0 <getsetHandleCanard+0x110>
    {
        p->val = val;
 80059c6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80059ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059cc:	e9c2 3402 	strd	r3, r4, [r2, #8]
    }

    uint8_t  buffer[64] = "";
 80059d0:	2300      	movs	r3, #0
 80059d2:	60bb      	str	r3, [r7, #8]
 80059d4:	f107 030c 	add.w	r3, r7, #12
 80059d8:	223c      	movs	r2, #60	; 0x3c
 80059da:	2100      	movs	r1, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	f002 fba6 	bl	800812e <memset>
    uint16_t len = encodeParamCanard(p, buffer);
 80059e2:	f107 0308 	add.w	r3, r7, #8
 80059e6:	4619      	mov	r1, r3
 80059e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059ea:	f7ff fe69 	bl	80056c0 <encodeParamCanard>
 80059ee:	4603      	mov	r3, r0
 80059f0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    int result = canardRequestOrRespond(&g_canard,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	7ed8      	ldrb	r0, [r3, #27]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3319      	adds	r3, #25
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	7e92      	ldrb	r2, [r2, #26]
 8005a00:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8005a04:	9105      	str	r1, [sp, #20]
 8005a06:	f107 0108 	add.w	r1, r7, #8
 8005a0a:	9104      	str	r1, [sp, #16]
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	9103      	str	r1, [sp, #12]
 8005a10:	9202      	str	r2, [sp, #8]
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	230b      	movs	r3, #11
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	a308      	add	r3, pc, #32	; (adr r3, 8005a3c <getsetHandleCanard+0x17c>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	4601      	mov	r1, r0
 8005a20:	4805      	ldr	r0, [pc, #20]	; (8005a38 <getsetHandleCanard+0x178>)
 8005a22:	f000 f947 	bl	8005cb4 <canardRequestOrRespond>
 8005a26:	4603      	mov	r3, r0
 8005a28:	667b      	str	r3, [r7, #100]	; 0x64
                                        transfer->priority,
                                        CanardResponse,
                                        &buffer[0],
                                        (uint16_t)len);

}
 8005a2a:	bf00      	nop
 8005a2c:	377c      	adds	r7, #124	; 0x7c
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd90      	pop	{r4, r7, pc}
 8005a32:	bf00      	nop
 8005a34:	f3af 8000 	nop.w
 8005a38:	20001a18 	.word	0x20001a18
 8005a3c:	39d1a4d5 	.word	0x39d1a4d5
 8005a40:	a7b622f9 	.word	0xa7b622f9

08005a44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005a44:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005a46:	e003      	b.n	8005a50 <LoopCopyDataInit>

08005a48 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005a48:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005a4a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005a4c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005a4e:	3104      	adds	r1, #4

08005a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005a50:	480a      	ldr	r0, [pc, #40]	; (8005a7c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005a52:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005a54:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005a56:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005a58:	d3f6      	bcc.n	8005a48 <CopyDataInit>
  ldr r2, =_sbss
 8005a5a:	4a0a      	ldr	r2, [pc, #40]	; (8005a84 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005a5c:	e002      	b.n	8005a64 <LoopFillZerobss>

08005a5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005a5e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005a60:	f842 3b04 	str.w	r3, [r2], #4

08005a64 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005a64:	4b08      	ldr	r3, [pc, #32]	; (8005a88 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005a66:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005a68:	d3f9      	bcc.n	8005a5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005a6a:	f7ff f9ed 	bl	8004e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a6e:	f002 fb2f 	bl	80080d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005a72:	f7fe fe93 	bl	800479c <main>
  bx lr
 8005a76:	4770      	bx	lr
  ldr r3, =_sidata
 8005a78:	08009894 	.word	0x08009894
  ldr r0, =_sdata
 8005a7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005a80:	200000ec 	.word	0x200000ec
  ldr r2, =_sbss
 8005a84:	200000f0 	.word	0x200000f0
  ldr r3, = _ebss
 8005a88:	20001fa0 	.word	0x20001fa0

08005a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005a8c:	e7fe      	b.n	8005a8c <ADC1_2_IRQHandler>
	...

08005a90 <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(out_ins != NULL);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d105      	bne.n	8005ab0 <canardInit+0x20>
 8005aa4:	4b19      	ldr	r3, [pc, #100]	; (8005b0c <canardInit+0x7c>)
 8005aa6:	4a1a      	ldr	r2, [pc, #104]	; (8005b10 <canardInit+0x80>)
 8005aa8:	214f      	movs	r1, #79	; 0x4f
 8005aaa:	481a      	ldr	r0, [pc, #104]	; (8005b14 <canardInit+0x84>)
 8005aac:	f002 fada 	bl	8008064 <__assert_func>
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 6);

    memset(out_ins, 0, sizeof(*out_ins));
 8005ab0:	2224      	movs	r2, #36	; 0x24
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f002 fb3a 	bl	800812e <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a3a      	ldr	r2, [r7, #32]
 8005aca:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	619a      	str	r2, [r3, #24]
    out_ins->tx_queue = NULL;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	61da      	str	r2, [r3, #28]
    out_ins->user_reference = user_reference;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005adc:	621a      	str	r2, [r3, #32]

    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aea:	d302      	bcc.n	8005af2 <canardInit+0x62>
    {
        pool_capacity = 0xFFFFU;
 8005aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005af0:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	330c      	adds	r3, #12
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	b292      	uxth	r2, r2
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 fee3 	bl	80078c8 <initPoolAllocator>
}
 8005b02:	bf00      	nop
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	080090b4 	.word	0x080090b4
 8005b10:	08009698 	.word	0x08009698
 8005b14:	080090cc 	.word	0x080090cc

08005b18 <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d105      	bne.n	8005b36 <canardSetLocalNodeID+0x1e>
 8005b2a:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <canardSetLocalNodeID+0x50>)
 8005b2c:	4a0f      	ldr	r2, [pc, #60]	; (8005b6c <canardSetLocalNodeID+0x54>)
 8005b2e:	2173      	movs	r1, #115	; 0x73
 8005b30:	480f      	ldr	r0, [pc, #60]	; (8005b70 <canardSetLocalNodeID+0x58>)
 8005b32:	f002 fa97 	bl	8008064 <__assert_func>

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <canardSetLocalNodeID+0x3c>
 8005b3e:	78fb      	ldrb	r3, [r7, #3]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d007      	beq.n	8005b54 <canardSetLocalNodeID+0x3c>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 8005b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	db03      	blt.n	8005b54 <canardSetLocalNodeID+0x3c>
    {
        ins->node_id = self_node_id;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 8005b52:	e005      	b.n	8005b60 <canardSetLocalNodeID+0x48>
        CANARD_ASSERT(false);
 8005b54:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <canardSetLocalNodeID+0x5c>)
 8005b56:	4a05      	ldr	r2, [pc, #20]	; (8005b6c <canardSetLocalNodeID+0x54>)
 8005b58:	217d      	movs	r1, #125	; 0x7d
 8005b5a:	4805      	ldr	r0, [pc, #20]	; (8005b70 <canardSetLocalNodeID+0x58>)
 8005b5c:	f002 fa82 	bl	8008064 <__assert_func>
}
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	080090e4 	.word	0x080090e4
 8005b6c:	080096a4 	.word	0x080096a4
 8005b70:	080090cc 	.word	0x080090cc
 8005b74:	080090f8 	.word	0x080090f8

08005b78 <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	781b      	ldrb	r3, [r3, #0]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	4770      	bx	lr
	...

08005b90 <canardBroadcast>:
                        uint16_t data_type_id,
                        uint8_t* inout_transfer_id,
                        uint8_t priority,
                        const void* payload,
                        uint16_t payload_len)
{
 8005b90:	b590      	push	{r4, r7, lr}
 8005b92:	b08b      	sub	sp, #44	; 0x2c
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	e9c7 2300 	strd	r2, r3, [r7]
    if (payload == NULL && payload_len > 0)
 8005b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <canardBroadcast+0x20>
 8005ba2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <canardBroadcast+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8005baa:	f06f 0301 	mvn.w	r3, #1
 8005bae:	e07b      	b.n	8005ca8 <canardBroadcast+0x118>
    }
    if (priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8005bb0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005bb4:	2b1f      	cmp	r3, #31
 8005bb6:	d902      	bls.n	8005bbe <canardBroadcast+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8005bb8:	f06f 0301 	mvn.w	r3, #1
 8005bbc:	e074      	b.n	8005ca8 <canardBroadcast+0x118>
    }

    uint32_t can_id = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
    uint16_t crc = 0xFFFFU;
 8005bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bc6:	837b      	strh	r3, [r7, #26]

    if (canardGetLocalNodeID(ins) == 0)
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7ff ffd5 	bl	8005b78 <canardGetLocalNodeID>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d134      	bne.n	8005c3e <canardBroadcast+0xae>
    {
        if (payload_len > 7)
 8005bd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005bd8:	2b07      	cmp	r3, #7
 8005bda:	d902      	bls.n	8005be2 <canardBroadcast+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 8005bdc:	f06f 0303 	mvn.w	r3, #3
 8005be0:	e062      	b.n	8005ca8 <canardBroadcast+0x118>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((data_type_id & DTIDMask) != data_type_id)
 8005be2:	4b33      	ldr	r3, [pc, #204]	; (8005cb0 <canardBroadcast+0x120>)
 8005be4:	881a      	ldrh	r2, [r3, #0]
 8005be6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005be8:	4013      	ands	r3, r2
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d002      	beq.n	8005bf8 <canardBroadcast+0x68>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 8005bf2:	f06f 0301 	mvn.w	r3, #1
 8005bf6:	e057      	b.n	8005ca8 <canardBroadcast+0x118>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, payload, payload_len)) & 0x7FFEU);
 8005bf8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c00:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005c04:	f001 fe43 	bl	800788e <crcAdd>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8005c10:	4013      	ands	r3, r2
 8005c12:	833b      	strh	r3, [r7, #24]
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 8005c14:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005c18:	061a      	lsls	r2, r3, #24
 8005c1a:	8b3b      	ldrh	r3, [r7, #24]
 8005c1c:	025b      	lsls	r3, r3, #9
 8005c1e:	431a      	orrs	r2, r3
                 ((uint32_t) (data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8005c20:	4b23      	ldr	r3, [pc, #140]	; (8005cb0 <canardBroadcast+0x120>)
 8005c22:	8819      	ldrh	r1, [r3, #0]
 8005c24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005c26:	400b      	ands	r3, r1
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 8005c2c:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff ffa1 	bl	8005b78 <canardGetLocalNodeID>
 8005c36:	4603      	mov	r3, r0
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 8005c38:	4323      	orrs	r3, r4
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	e021      	b.n	8005c82 <canardBroadcast+0xf2>
    }
    else
    {
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8005c3e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005c42:	061a      	lsls	r2, r3, #24
 8005c44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	ea42 0403 	orr.w	r4, r2, r3
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7ff ff93 	bl	8005b78 <canardGetLocalNodeID>
 8005c52:	4603      	mov	r3, r0
 8005c54:	4323      	orrs	r3, r4
 8005c56:	61fb      	str	r3, [r7, #28]

        if (payload_len > 7)
 8005c58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c5c:	2b07      	cmp	r3, #7
 8005c5e:	d910      	bls.n	8005c82 <canardBroadcast+0xf2>
        {
            crc = crcAddSignature(crc, data_type_signature);
 8005c60:	8b79      	ldrh	r1, [r7, #26]
 8005c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c66:	4608      	mov	r0, r1
 8005c68:	f001 fde2 	bl	8007830 <crcAddSignature>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	837b      	strh	r3, [r7, #26]
            crc = crcAdd(crc, payload, payload_len);
 8005c70:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005c74:	8b7b      	ldrh	r3, [r7, #26]
 8005c76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f001 fe08 	bl	800788e <crcAdd>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	837b      	strh	r3, [r7, #26]
        }
    }

    const int16_t result = enqueueTxFrames(ins, can_id, inout_transfer_id, crc, payload, payload_len);
 8005c82:	8b7a      	ldrh	r2, [r7, #26]
 8005c84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c88:	9301      	str	r3, [sp, #4]
 8005c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c92:	69f9      	ldr	r1, [r7, #28]
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 ff59 	bl	8006b4c <enqueueTxFrames>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	82fb      	strh	r3, [r7, #22]

    incrementTransferID(inout_transfer_id);
 8005c9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ca0:	f000 ff2e 	bl	8006b00 <incrementTransferID>

    return result;
 8005ca4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3724      	adds	r7, #36	; 0x24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd90      	pop	{r4, r7, pc}
 8005cb0:	080096ba 	.word	0x080096ba

08005cb4 <canardRequestOrRespond>:
                               uint8_t* inout_transfer_id,
                               uint8_t priority,
                               CanardRequestResponse kind,
                               const void* payload,
                               uint16_t payload_len)
{
 8005cb4:	b590      	push	{r4, r7, lr}
 8005cb6:	b08b      	sub	sp, #44	; 0x2c
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	e9c7 2300 	strd	r2, r3, [r7]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	72fb      	strb	r3, [r7, #11]
    if (payload == NULL && payload_len > 0)
 8005cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <canardRequestOrRespond+0x24>
 8005cca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <canardRequestOrRespond+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8005cd2:	f06f 0301 	mvn.w	r3, #1
 8005cd6:	e055      	b.n	8005d84 <canardRequestOrRespond+0xd0>
    }
    if (priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8005cd8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005cdc:	2b1f      	cmp	r3, #31
 8005cde:	d902      	bls.n	8005ce6 <canardRequestOrRespond+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8005ce0:	f06f 0301 	mvn.w	r3, #1
 8005ce4:	e04e      	b.n	8005d84 <canardRequestOrRespond+0xd0>
    }
    if (canardGetLocalNodeID(ins) == 0)
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff ff46 	bl	8005b78 <canardGetLocalNodeID>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d102      	bne.n	8005cf8 <canardRequestOrRespond+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 8005cf2:	f06f 0303 	mvn.w	r3, #3
 8005cf6:	e045      	b.n	8005d84 <canardRequestOrRespond+0xd0>
    }

    const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 8005cf8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005cfc:	061a      	lsls	r2, r3, #24
 8005cfe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005d02:	041b      	lsls	r3, r3, #16
 8005d04:	431a      	orrs	r2, r3
                            ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 8005d06:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005d0a:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 8005d0c:	431a      	orrs	r2, r3
                            ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 8005d0e:	7afb      	ldrb	r3, [r7, #11]
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff ff2e 	bl	8005b78 <canardGetLocalNodeID>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 8005d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d24:	61bb      	str	r3, [r7, #24]
    uint16_t crc = 0xFFFFU;
 8005d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d2a:	83fb      	strh	r3, [r7, #30]

    if (payload_len > 7)
 8005d2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d30:	2b07      	cmp	r3, #7
 8005d32:	d910      	bls.n	8005d56 <canardRequestOrRespond+0xa2>
    {
        crc = crcAddSignature(crc, data_type_signature);
 8005d34:	8bf9      	ldrh	r1, [r7, #30]
 8005d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d3a:	4608      	mov	r0, r1
 8005d3c:	f001 fd78 	bl	8007830 <crcAddSignature>
 8005d40:	4603      	mov	r3, r0
 8005d42:	83fb      	strh	r3, [r7, #30]
        crc = crcAdd(crc, payload, payload_len);
 8005d44:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8005d48:	8bfb      	ldrh	r3, [r7, #30]
 8005d4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fd9e 	bl	800788e <crcAdd>
 8005d52:	4603      	mov	r3, r0
 8005d54:	83fb      	strh	r3, [r7, #30]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, inout_transfer_id, crc, payload, payload_len);
 8005d56:	8bfa      	ldrh	r2, [r7, #30]
 8005d58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d5c:	9301      	str	r3, [sp, #4]
 8005d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	4613      	mov	r3, r2
 8005d64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d66:	69b9      	ldr	r1, [r7, #24]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 feef 	bl	8006b4c <enqueueTxFrames>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	82fb      	strh	r3, [r7, #22]

    if (kind == CanardRequest)                      // Response Transfer ID must not be altered
 8005d72:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d102      	bne.n	8005d80 <canardRequestOrRespond+0xcc>
    {
        incrementTransferID(inout_transfer_id);
 8005d7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d7c:	f000 fec0 	bl	8006b00 <incrementTransferID>
    }

    return result;
 8005d80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3724      	adds	r7, #36	; 0x24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd90      	pop	{r4, r7, pc}

08005d8c <canardPeekTxQueue>:

const CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <canardPeekTxQueue+0x14>
    {
        return NULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e002      	b.n	8005da6 <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	3304      	adds	r3, #4
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr

08005db0 <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	61da      	str	r2, [r3, #28]
    freeBlock(&ins->allocator, item);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	68f9      	ldr	r1, [r7, #12]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f001 fdd1 	bl	8007974 <freeBlock>
}
 8005dd2:	bf00      	nop
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 8005ddc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005de0:	b09e      	sub	sp, #120	; 0x78
 8005de2:	af02      	add	r7, sp, #8
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 f8c0 	bl	8006f76 <extractTransferType>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8005dfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d007      	beq.n	8005e14 <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	0a1b      	lsrs	r3, r3, #8
 8005e0a:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8005e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	e000      	b.n	8005e16 <canardHandleRxFrame+0x3a>
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	da0f      	bge.n	8005e42 <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d109      	bne.n	8005e42 <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d103      	bne.n	8005e42 <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d102      	bne.n	8005e48 <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 8005e42:	f06f 0309 	mvn.w	r3, #9
 8005e46:	e323      	b.n	8006490 <canardHandleRxFrame+0x6b4>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 8005e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d00b      	beq.n	8005e68 <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f7ff fe91 	bl	8005b78 <canardGetLocalNodeID>
 8005e56:	4603      	mov	r3, r0
 8005e58:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 8005e5a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d002      	beq.n	8005e68 <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 8005e62:	f06f 030a 	mvn.w	r3, #10
 8005e66:	e313      	b.n	8006490 <canardHandleRxFrame+0x6b4>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	0e1b      	lsrs	r3, r3, #24
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	f003 031f 	and.w	r3, r3, #31
 8005e74:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e82:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 f852 	bl	8006f34 <extractDataType>
 8005e90:	4603      	mov	r3, r0
 8005e92:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 8005e96:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8005e9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e9e:	041b      	lsls	r3, r3, #16
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005ea6:	049b      	lsls	r3, r3, #18
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8005eae:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	64fb      	str	r3, [r7, #76]	; 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	7b1b      	ldrb	r3, [r3, #12]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	791b      	ldrb	r3, [r3, #4]
 8005ec0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    CanardRxState* rx_state = NULL;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 8005ec8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005ecc:	09db      	lsrs	r3, r3, #7
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d031      	beq.n	8005f3c <canardHandleRxFrame+0x160>
    {
        uint64_t data_type_signature = 0;
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	f04f 0400 	mov.w	r4, #0
 8005ee0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685c      	ldr	r4, [r3, #4]
 8005ee8:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 8005eec:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8005ef0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005ef4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	4603      	mov	r3, r0
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	47a0      	blx	r4
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d017      	beq.n	8005f36 <canardHandleRxFrame+0x15a>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 8005f06:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f001 f858 	bl	8006fbe <traverseRxStates>
 8005f0e:	66f8      	str	r0, [r7, #108]	; 0x6c

            if(rx_state == NULL)
 8005f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d102      	bne.n	8005f1c <canardHandleRxFrame+0x140>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8005f16:	f06f 0302 	mvn.w	r3, #2
 8005f1a:	e2b9      	b.n	8006490 <canardHandleRxFrame+0x6b4>
            }

            rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 8005f1c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005f20:	461a      	mov	r2, r3
 8005f22:	4623      	mov	r3, r4
 8005f24:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005f28:	f001 fc82 	bl	8007830 <crcAddSignature>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f32:	829a      	strh	r2, [r3, #20]
 8005f34:	e00f      	b.n	8005f56 <canardHandleRxFrame+0x17a>
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 8005f36:	f06f 030b 	mvn.w	r3, #11
 8005f3a:	e2a9      	b.n	8006490 <canardHandleRxFrame+0x6b4>
        }
    }
    else
    {
        rx_state = findRxState(ins->rx_states, transfer_descriptor);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 f86a 	bl	800701c <findRxState>
 8005f48:	66f8      	str	r0, [r7, #108]	; 0x6c

        if (rx_state == NULL)
 8005f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d102      	bne.n	8005f56 <canardHandleRxFrame+0x17a>
        {
            return -CANARD_ERROR_RX_MISSED_START;
 8005f50:	f06f 030c 	mvn.w	r3, #12
 8005f54:	e29c      	b.n	8006490 <canardHandleRxFrame+0x6b4>
        }
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above
 8005f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d106      	bne.n	8005f6a <canardHandleRxFrame+0x18e>
 8005f5c:	4bad      	ldr	r3, [pc, #692]	; (8006214 <canardHandleRxFrame+0x438>)
 8005f5e:	4aae      	ldr	r2, [pc, #696]	; (8006218 <canardHandleRxFrame+0x43c>)
 8005f60:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8005f64:	48ad      	ldr	r0, [pc, #692]	; (800621c <canardHandleRxFrame+0x440>)
 8005f66:	f002 f87d 	bl	8008064 <__assert_func>

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 8005f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6c:	f103 0408 	add.w	r4, r3, #8
 8005f70:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005f74:	4323      	orrs	r3, r4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8005f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f84:	e9d3 bc02 	ldrd	fp, ip, [r3, #8]
 8005f88:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4614      	mov	r4, r2
 8005f90:	ebb3 030b 	subs.w	r3, r3, fp
 8005f94:	eb64 040c 	sbc.w	r4, r4, ip
 8005f98:	49a1      	ldr	r1, [pc, #644]	; (8006220 <canardHandleRxFrame+0x444>)
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	42a2      	cmp	r2, r4
 8005fa0:	bf08      	it	eq
 8005fa2:	4299      	cmpeq	r1, r3
 8005fa4:	bf34      	ite	cc
 8005fa6:	2301      	movcc	r3, #1
 8005fa8:	2300      	movcs	r3, #0
 8005faa:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 8005fae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005fb2:	09db      	lsrs	r3, r3, #7
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	bf14      	ite	ne
 8005fbe:	2301      	movne	r3, #1
 8005fc0:	2300      	moveq	r3, #0
 8005fc2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8005fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc8:	7ddb      	ldrb	r3, [r3, #23]
 8005fca:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	f000 fd70 	bl	8006ac4 <computeTransferIDForwardDistance>
 8005fe4:	4603      	mov	r3, r0
    const bool not_previous_tid =
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	bfcc      	ite	gt
 8005fea:	2301      	movgt	r3, #1
 8005fec:	2300      	movle	r3, #0
 8005fee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
 8005ff2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10b      	bne.n	8006012 <canardHandleRxFrame+0x236>
            (not_initialized) ||
 8005ffa:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d107      	bne.n	8006012 <canardHandleRxFrame+0x236>
            (tid_timed_out) ||
 8006002:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <canardHandleRxFrame+0x23a>
            (first_frame && not_previous_tid);
 800600a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <canardHandleRxFrame+0x23a>
            (tid_timed_out) ||
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <canardHandleRxFrame+0x23c>
 8006016:	2300      	movs	r3, #0
    const bool need_restart =
 8006018:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800601c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

    if (need_restart)
 8006028:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800602c:	2b00      	cmp	r3, #0
 800602e:	d02b      	beq.n	8006088 <canardHandleRxFrame+0x2ac>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8006030:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	b2d9      	uxtb	r1, r3
 800603a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800603c:	7dd3      	ldrb	r3, [r2, #23]
 800603e:	f361 0386 	bfi	r3, r1, #2, #5
 8006042:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 8006044:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006046:	7dd3      	ldrb	r3, [r2, #23]
 8006048:	f36f 13c7 	bfc	r3, #7, #1
 800604c:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 800604e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f001 f83c 	bl	80070ce <releaseStatePayload>
        if (!IS_START_OF_TRANSFER(tail_byte))
 8006056:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800605a:	09db      	lsrs	r3, r3, #7
 800605c:	b2db      	uxtb	r3, r3
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d110      	bne.n	8006088 <canardHandleRxFrame+0x2ac>
        {
            rx_state->transfer_id++;
 8006066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006068:	7ddb      	ldrb	r3, [r3, #23]
 800606a:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800606e:	b2db      	uxtb	r3, r3
 8006070:	3301      	adds	r3, #1
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	b2d9      	uxtb	r1, r3
 8006078:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800607a:	7dd3      	ldrb	r3, [r2, #23]
 800607c:	f361 0386 	bfi	r3, r1, #2, #5
 8006080:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 8006082:	f06f 030c 	mvn.w	r3, #12
 8006086:	e203      	b.n	8006490 <canardHandleRxFrame+0x6b4>
        }
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 8006088:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800608c:	09db      	lsrs	r3, r3, #7
 800608e:	b2db      	uxtb	r3, r3
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d042      	beq.n	800611e <canardHandleRxFrame+0x342>
 8006098:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800609c:	099b      	lsrs	r3, r3, #6
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d03a      	beq.n	800611e <canardHandleRxFrame+0x342>
    {
        rx_state->timestamp_usec = timestamp_usec;
 80060a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060aa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80060ae:	e9c2 3402 	strd	r3, r4, [r2, #8]
        CanardRxTransfer rx_transfer = {
 80060b2:	f107 0310 	add.w	r3, r7, #16
 80060b6:	2220      	movs	r2, #32
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f002 f837 	bl	800812e <memset>
 80060c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80060c4:	e9c7 3404 	strd	r3, r4, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 80060cc:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	7b1b      	ldrb	r3, [r3, #12]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 80060d8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80060da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80060de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80060e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 80060e8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80060ec:	f003 031f 	and.w	r3, r3, #31
 80060f0:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 80060f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80060f6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80060fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060fe:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            .priority = priority,
            .source_node_id = source_node_id
        };

        ins->on_reception(ins, &rx_transfer);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f107 0210 	add.w	r2, r7, #16
 800610e:	4611      	mov	r1, r2
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 8006114:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006116:	f000 fedb 	bl	8006ed0 <prepareForNextTransfer>
        return CANARD_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	e1b8      	b.n	8006490 <canardHandleRxFrame+0x6b4>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 800611e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	bf14      	ite	ne
 800612e:	2301      	movne	r3, #1
 8006130:	2300      	moveq	r3, #0
 8006132:	b2db      	uxtb	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006138:	7ddb      	ldrb	r3, [r3, #23]
 800613a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800613e:	b2db      	uxtb	r3, r3
 8006140:	429a      	cmp	r2, r3
 8006142:	d002      	beq.n	800614a <canardHandleRxFrame+0x36e>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 8006144:	f06f 030d 	mvn.w	r3, #13
 8006148:	e1a2      	b.n	8006490 <canardHandleRxFrame+0x6b4>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 800614a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800614e:	f003 031f 	and.w	r3, r3, #31
 8006152:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006154:	7dd2      	ldrb	r2, [r2, #23]
 8006156:	f3c2 0284 	ubfx	r2, r2, #2, #5
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	4293      	cmp	r3, r2
 800615e:	d002      	beq.n	8006166 <canardHandleRxFrame+0x38a>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 8006160:	f06f 030e 	mvn.w	r3, #14
 8006164:	e194      	b.n	8006490 <canardHandleRxFrame+0x6b4>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 8006166:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800616a:	09db      	lsrs	r3, r3, #7
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d056      	beq.n	8006224 <canardHandleRxFrame+0x448>
 8006176:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800617a:	099b      	lsrs	r3, r3, #6
 800617c:	b2db      	uxtb	r3, r3
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d14e      	bne.n	8006224 <canardHandleRxFrame+0x448>
    {
        if (frame->data_len <= 3)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	7b1b      	ldrb	r3, [r3, #12]
 800618a:	2b03      	cmp	r3, #3
 800618c:	d802      	bhi.n	8006194 <canardHandleRxFrame+0x3b8>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 800618e:	f06f 030f 	mvn.w	r3, #15
 8006192:	e17d      	b.n	8006490 <canardHandleRxFrame+0x6b4>
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 8006194:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006196:	e9d7 3400 	ldrd	r3, r4, [r7]
 800619a:	e9c2 3402 	strd	r3, r4, [r2, #8]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f103 000c 	add.w	r0, r3, #12
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	3304      	adds	r3, #4
 80061a8:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 80061ae:	3b03      	subs	r3, #3
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80061b4:	f000 ffb4 	bl	8007120 <bufferBlockPushBytes>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        if (ret < 0)
 80061be:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	da08      	bge.n	80061d8 <canardHandleRxFrame+0x3fc>
        {
            releaseStatePayload(ins, rx_state);
 80061c6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 ff80 	bl	80070ce <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 80061ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061d0:	f000 fe7e 	bl	8006ed0 <prepareForNextTransfer>
            return CANARD_ERROR_OUT_OF_MEMORY;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e15b      	b.n	8006490 <canardHandleRxFrame+0x6b4>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	791b      	ldrb	r3, [r3, #4]
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	795b      	ldrb	r3, [r3, #5]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	4313      	orrs	r3, r2
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ee:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80061f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f2:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80061f8:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	7b1b      	ldrb	r3, [r3, #12]
 80061fe:	3b03      	subs	r3, #3
 8006200:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8006202:	461a      	mov	r2, r3
 8006204:	f001 fb43 	bl	800788e <crcAdd>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620e:	829a      	strh	r2, [r3, #20]
    {
 8006210:	e131      	b.n	8006476 <canardHandleRxFrame+0x69a>
 8006212:	bf00      	nop
 8006214:	080090fc 	.word	0x080090fc
 8006218:	080096bc 	.word	0x080096bc
 800621c:	080090cc 	.word	0x080090cc
 8006220:	001e8480 	.word	0x001e8480
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8006224:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006228:	09db      	lsrs	r3, r3, #7
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d133      	bne.n	800629c <canardHandleRxFrame+0x4c0>
 8006234:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006238:	099b      	lsrs	r3, r3, #6
 800623a:	b2db      	uxtb	r3, r3
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d12b      	bne.n	800629c <canardHandleRxFrame+0x4c0>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f103 000c 	add.w	r0, r3, #12
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8006252:	3b01      	subs	r3, #1
 8006254:	b2db      	uxtb	r3, r3
 8006256:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006258:	f000 ff62 	bl	8007120 <bufferBlockPushBytes>
 800625c:	4603      	mov	r3, r0
 800625e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        if (ret < 0)
 8006262:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8006266:	2b00      	cmp	r3, #0
 8006268:	da08      	bge.n	800627c <canardHandleRxFrame+0x4a0>
        {
            releaseStatePayload(ins, rx_state);
 800626a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 ff2e 	bl	80070ce <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8006272:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006274:	f000 fe2c 	bl	8006ed0 <prepareForNextTransfer>
            return CANARD_ERROR_OUT_OF_MEMORY;
 8006278:	2303      	movs	r3, #3
 800627a:	e109      	b.n	8006490 <canardHandleRxFrame+0x6b4>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 800627c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627e:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	1d19      	adds	r1, r3, #4
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	7b1b      	ldrb	r3, [r3, #12]
 8006288:	3b01      	subs	r3, #1
 800628a:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 800628c:	461a      	mov	r2, r3
 800628e:	f001 fafe 	bl	800788e <crcAdd>
 8006292:	4603      	mov	r3, r0
 8006294:	461a      	mov	r2, r3
 8006296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006298:	829a      	strh	r2, [r3, #20]
    {
 800629a:	e0ec      	b.n	8006476 <canardHandleRxFrame+0x69a>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	7b1b      	ldrb	r3, [r3, #12]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

        uint8_t tail_offset = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 80062ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ae:	8adb      	ldrh	r3, [r3, #22]
 80062b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	2b05      	cmp	r3, #5
 80062b8:	d823      	bhi.n	8006302 <canardHandleRxFrame+0x526>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 80062ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062bc:	8adb      	ldrh	r3, [r3, #22]
 80062be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	667b      	str	r3, [r7, #100]	; 0x64
 80062c6:	e012      	b.n	80062ee <canardHandleRxFrame+0x512>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 80062c8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	4413      	add	r3, r2
 80062d0:	7919      	ldrb	r1, [r3, #4]
 80062d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062d6:	4413      	add	r3, r2
 80062d8:	331a      	adds	r3, #26
 80062da:	460a      	mov	r2, r1
 80062dc:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 80062de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062e0:	3301      	adds	r3, #1
 80062e2:	667b      	str	r3, [r7, #100]	; 0x64
 80062e4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80062e8:	3301      	adds	r3, #1
 80062ea:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            for (size_t i = rx_state->payload_len;
 80062ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f0:	2b05      	cmp	r3, #5
 80062f2:	d855      	bhi.n	80063a0 <canardHandleRxFrame+0x5c4>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 80062f4:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 80062f8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d3e3      	bcc.n	80062c8 <canardHandleRxFrame+0x4ec>
 8006300:	e04e      	b.n	80063a0 <canardHandleRxFrame+0x5c4>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = rx_state->buffer_blocks;
 8006302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	663b      	str	r3, [r7, #96]	; 0x60
            if (block != NULL)          // If there's no middle, that's fine, we'll use only head and tail
 8006308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800630a:	2b00      	cmp	r3, #0
 800630c:	d048      	beq.n	80063a0 <canardHandleRxFrame+0x5c4>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 800630e:	2306      	movs	r3, #6
 8006310:	65fb      	str	r3, [r7, #92]	; 0x5c
                while (block->next != NULL)
 8006312:	e005      	b.n	8006320 <canardHandleRxFrame+0x544>
                {
                    block = block->next;
 8006314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	663b      	str	r3, [r7, #96]	; 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 800631a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800631c:	331c      	adds	r3, #28
 800631e:	65fb      	str	r3, [r7, #92]	; 0x5c
                while (block->next != NULL)
 8006320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1f5      	bne.n	8006314 <canardHandleRxFrame+0x538>
                }
                CANARD_ASSERT(block != NULL);
 8006328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <canardHandleRxFrame+0x560>
 800632e:	4b5b      	ldr	r3, [pc, #364]	; (800649c <canardHandleRxFrame+0x6c0>)
 8006330:	4a5b      	ldr	r2, [pc, #364]	; (80064a0 <canardHandleRxFrame+0x6c4>)
 8006332:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006336:	485b      	ldr	r0, [pc, #364]	; (80064a4 <canardHandleRxFrame+0x6c8>)
 8006338:	f001 fe94 	bl	8008064 <__assert_func>

                const size_t offset_within_block = rx_state->payload_len - offset;
 800633c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633e:	8adb      	ldrh	r3, [r3, #22]
 8006340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006344:	b29b      	uxth	r3, r3
 8006346:	461a      	mov	r2, r3
 8006348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
                CANARD_ASSERT(offset_within_block < CANARD_BUFFER_BLOCK_DATA_SIZE);
 800634e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006350:	2b1b      	cmp	r3, #27
 8006352:	d906      	bls.n	8006362 <canardHandleRxFrame+0x586>
 8006354:	4b54      	ldr	r3, [pc, #336]	; (80064a8 <canardHandleRxFrame+0x6cc>)
 8006356:	4a52      	ldr	r2, [pc, #328]	; (80064a0 <canardHandleRxFrame+0x6c4>)
 8006358:	f240 11b3 	movw	r1, #435	; 0x1b3
 800635c:	4851      	ldr	r0, [pc, #324]	; (80064a4 <canardHandleRxFrame+0x6c8>)
 800635e:	f001 fe81 	bl	8008064 <__assert_func>

                for (size_t i = offset_within_block;
 8006362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006364:	65bb      	str	r3, [r7, #88]	; 0x58
 8006366:	e012      	b.n	800638e <canardHandleRxFrame+0x5b2>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 8006368:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	4413      	add	r3, r2
 8006370:	7919      	ldrb	r1, [r3, #4]
 8006372:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006376:	4413      	add	r3, r2
 8006378:	3304      	adds	r3, #4
 800637a:	460a      	mov	r2, r1
 800637c:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 800637e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006380:	3301      	adds	r3, #1
 8006382:	65bb      	str	r3, [r7, #88]	; 0x58
 8006384:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006388:	3301      	adds	r3, #1
 800638a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                for (size_t i = offset_within_block;
 800638e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006390:	2b1b      	cmp	r3, #27
 8006392:	d805      	bhi.n	80063a0 <canardHandleRxFrame+0x5c4>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 8006394:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8006398:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800639c:	429a      	cmp	r2, r3
 800639e:	d3e3      	bcc.n	8006368 <canardHandleRxFrame+0x58c>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 80063a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80063a4:	e9c7 3404 	strd	r3, r4, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 80063a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063aa:	331a      	adds	r3, #26
        CanardRxTransfer rx_transfer = {
 80063ac:	61bb      	str	r3, [r7, #24]
            .payload_middle = rx_state->buffer_blocks,
 80063ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b0:	685b      	ldr	r3, [r3, #4]
        CanardRxTransfer rx_transfer = {
 80063b2:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 80063b4:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 80063b8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80063bc:	429a      	cmp	r2, r3
 80063be:	d205      	bcs.n	80063cc <canardHandleRxFrame+0x5f0>
 80063c0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	4413      	add	r3, r2
 80063c8:	3304      	adds	r3, #4
 80063ca:	e000      	b.n	80063ce <canardHandleRxFrame+0x5f2>
 80063cc:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 80063ce:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 80063d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d2:	8adb      	ldrh	r3, [r3, #22]
 80063d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d8:	b29b      	uxth	r3, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	4413      	add	r3, r2
 80063e4:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 80063e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063e8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80063ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063f2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 80063f6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8006400:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8006404:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006408:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800640c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            .priority = priority,
            .source_node_id = source_node_id
        };

        rx_state->buffer_blocks = NULL;     // Block list ownership has been transferred to rx_transfer!
 8006414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006416:	2200      	movs	r2, #0
 8006418:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 800641a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641c:	8a98      	ldrh	r0, [r3, #20]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	1d19      	adds	r1, r3, #4
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	7b1b      	ldrb	r3, [r3, #12]
 8006426:	3b01      	subs	r3, #1
 8006428:	461a      	mov	r2, r3
 800642a:	f001 fa30 	bl	800788e <crcAdd>
 800642e:	4603      	mov	r3, r0
 8006430:	461a      	mov	r2, r3
 8006432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006434:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 8006436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006438:	8a9a      	ldrh	r2, [r3, #20]
 800643a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800643c:	8b1b      	ldrh	r3, [r3, #24]
 800643e:	429a      	cmp	r2, r3
 8006440:	d106      	bne.n	8006450 <canardHandleRxFrame+0x674>
        {
            ins->on_reception(ins, &rx_transfer);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f107 0210 	add.w	r2, r7, #16
 800644a:	4611      	mov	r1, r2
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 8006450:	f107 0310 	add.w	r3, r7, #16
 8006454:	4619      	mov	r1, r3
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 fab6 	bl	80069c8 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 800645c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800645e:	f000 fd37 	bl	8006ed0 <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 8006462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006464:	8a9a      	ldrh	r2, [r3, #20]
 8006466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006468:	8b1b      	ldrh	r3, [r3, #24]
 800646a:	429a      	cmp	r2, r3
 800646c:	d101      	bne.n	8006472 <canardHandleRxFrame+0x696>
        {
            return CANARD_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e00e      	b.n	8006490 <canardHandleRxFrame+0x6b4>
        }
        else
        {
            return CANARD_ERROR_RX_BAD_CRC;
 8006472:	2311      	movs	r3, #17
 8006474:	e00c      	b.n	8006490 <canardHandleRxFrame+0x6b4>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 8006476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006478:	7ddb      	ldrb	r3, [r3, #23]
 800647a:	b25b      	sxtb	r3, r3
 800647c:	43db      	mvns	r3, r3
 800647e:	b2db      	uxtb	r3, r3
 8006480:	09db      	lsrs	r3, r3, #7
 8006482:	b2d9      	uxtb	r1, r3
 8006484:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006486:	7dd3      	ldrb	r3, [r2, #23]
 8006488:	f361 13c7 	bfi	r3, r1, #7, #1
 800648c:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3770      	adds	r7, #112	; 0x70
 8006494:	46bd      	mov	sp, r7
 8006496:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800649a:	bf00      	nop
 800649c:	08009114 	.word	0x08009114
 80064a0:	080096bc 	.word	0x080096bc
 80064a4:	080090cc 	.word	0x080090cc
 80064a8:	0800912c 	.word	0x0800912c

080064ac <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 80064ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064b0:	b089      	sub	sp, #36	; 0x24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	4611      	mov	r1, r2
 80064ba:	461a      	mov	r2, r3
 80064bc:	460b      	mov	r3, r1
 80064be:	71fb      	strb	r3, [r7, #7]
 80064c0:	4613      	mov	r3, r2
 80064c2:	71bb      	strb	r3, [r7, #6]
    if (transfer == NULL || out_value == NULL)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <canardDecodeScalar+0x24>
 80064ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80064d0:	f06f 0301 	mvn.w	r3, #1
 80064d4:	e1b1      	b.n	800683a <canardDecodeScalar+0x38e>
    }

    if (bit_length < 1 || bit_length > 64)
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <canardDecodeScalar+0x36>
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	d902      	bls.n	80064e8 <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80064e2:	f06f 0301 	mvn.w	r3, #1
 80064e6:	e1a8      	b.n	800683a <canardDecodeScalar+0x38e>
    }

    if (bit_length == 1 && value_is_signed)
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d105      	bne.n	80064fa <canardDecodeScalar+0x4e>
 80064ee:	79bb      	ldrb	r3, [r7, #6]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80064f4:	f06f 0301 	mvn.w	r3, #1
 80064f8:	e19f      	b.n	800683a <canardDecodeScalar+0x38e>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 80064fa:	f107 0310 	add.w	r3, r7, #16
 80064fe:	2208      	movs	r2, #8
 8006500:	2100      	movs	r1, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f001 fe13 	bl	800812e <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8006508:	f107 0310 	add.w	r3, r7, #16
 800650c:	79fa      	ldrb	r2, [r7, #7]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 ff97 	bl	8007444 <descatterTransferPayload>
 8006516:	4603      	mov	r3, r0
 8006518:	83bb      	strh	r3, [r7, #28]
    if (result <= 0)
 800651a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800651e:	2b00      	cmp	r3, #0
 8006520:	dc02      	bgt.n	8006528 <canardDecodeScalar+0x7c>
    {
        return result;
 8006522:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006526:	e188      	b.n	800683a <canardDecodeScalar+0x38e>
    }

    CANARD_ASSERT((result > 0) && (result <= 64) && (result <= bit_length));
 8006528:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	dd08      	ble.n	8006542 <canardDecodeScalar+0x96>
 8006530:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006534:	2b40      	cmp	r3, #64	; 0x40
 8006536:	dc04      	bgt.n	8006542 <canardDecodeScalar+0x96>
 8006538:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	429a      	cmp	r2, r3
 8006540:	dd06      	ble.n	8006550 <canardDecodeScalar+0xa4>
 8006542:	4bac      	ldr	r3, [pc, #688]	; (80067f4 <canardDecodeScalar+0x348>)
 8006544:	4aac      	ldr	r2, [pc, #688]	; (80067f8 <canardDecodeScalar+0x34c>)
 8006546:	f240 2135 	movw	r1, #565	; 0x235
 800654a:	48ac      	ldr	r0, [pc, #688]	; (80067fc <canardDecodeScalar+0x350>)
 800654c:	f001 fd8a 	bl	8008064 <__assert_func>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d016      	beq.n	800658a <canardDecodeScalar+0xde>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 800655c:	79fb      	ldrb	r3, [r7, #7]
 800655e:	08db      	lsrs	r3, r3, #3
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f107 0220 	add.w	r2, r7, #32
 8006566:	4413      	add	r3, r2
 8006568:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800656c:	461a      	mov	r2, r3
 800656e:	79fb      	ldrb	r3, [r7, #7]
 8006570:	425b      	negs	r3, r3
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	411a      	asrs	r2, r3
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	08db      	lsrs	r3, r3, #3
 800657c:	b2db      	uxtb	r3, r3
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	f107 0120 	add.w	r1, r7, #32
 8006584:	440b      	add	r3, r1
 8006586:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	77fb      	strb	r3, [r7, #31]
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d102      	bne.n	800659a <canardDecodeScalar+0xee>
 8006594:	2301      	movs	r3, #1
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e01e      	b.n	80065d8 <canardDecodeScalar+0x12c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	2b08      	cmp	r3, #8
 800659e:	d802      	bhi.n	80065a6 <canardDecodeScalar+0xfa>
 80065a0:	2301      	movs	r3, #1
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e018      	b.n	80065d8 <canardDecodeScalar+0x12c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 80065a6:	79fb      	ldrb	r3, [r7, #7]
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d802      	bhi.n	80065b2 <canardDecodeScalar+0x106>
 80065ac:	2302      	movs	r3, #2
 80065ae:	77fb      	strb	r3, [r7, #31]
 80065b0:	e012      	b.n	80065d8 <canardDecodeScalar+0x12c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d802      	bhi.n	80065be <canardDecodeScalar+0x112>
 80065b8:	2304      	movs	r3, #4
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	e00c      	b.n	80065d8 <canardDecodeScalar+0x12c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	d802      	bhi.n	80065ca <canardDecodeScalar+0x11e>
 80065c4:	2308      	movs	r3, #8
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e006      	b.n	80065d8 <canardDecodeScalar+0x12c>
    else
    {
        CANARD_ASSERT(false);
 80065ca:	4b8d      	ldr	r3, [pc, #564]	; (8006800 <canardDecodeScalar+0x354>)
 80065cc:	4a8a      	ldr	r2, [pc, #552]	; (80067f8 <canardDecodeScalar+0x34c>)
 80065ce:	f240 214e 	movw	r1, #590	; 0x24e
 80065d2:	488a      	ldr	r0, [pc, #552]	; (80067fc <canardDecodeScalar+0x350>)
 80065d4:	f001 fd46 	bl	8008064 <__assert_func>
        return -CANARD_ERROR_INTERNAL;
    }

    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));
 80065d8:	7ffb      	ldrb	r3, [r7, #31]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <canardDecodeScalar+0x138>
 80065de:	7ffb      	ldrb	r3, [r7, #31]
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d906      	bls.n	80065f2 <canardDecodeScalar+0x146>
 80065e4:	4b87      	ldr	r3, [pc, #540]	; (8006804 <canardDecodeScalar+0x358>)
 80065e6:	4a84      	ldr	r2, [pc, #528]	; (80067f8 <canardDecodeScalar+0x34c>)
 80065e8:	f240 2152 	movw	r1, #594	; 0x252
 80065ec:	4883      	ldr	r0, [pc, #524]	; (80067fc <canardDecodeScalar+0x350>)
 80065ee:	f001 fd39 	bl	8008064 <__assert_func>

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 80065f2:	f001 f8a1 	bl	8007738 <isBigEndian>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d006      	beq.n	800660a <canardDecodeScalar+0x15e>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 80065fc:	7ffa      	ldrb	r2, [r7, #31]
 80065fe:	f107 0310 	add.w	r3, r7, #16
 8006602:	4611      	mov	r1, r2
 8006604:	4618      	mov	r0, r3
 8006606:	f001 f8a7 	bl	8007758 <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 800660a:	79bb      	ldrb	r3, [r7, #6]
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 809a 	beq.w	8006746 <canardDecodeScalar+0x29a>
 8006612:	7ffb      	ldrb	r3, [r7, #31]
 8006614:	00da      	lsls	r2, r3, #3
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	429a      	cmp	r2, r3
 800661a:	f000 8094 	beq.w	8006746 <canardDecodeScalar+0x29a>
    {
        if (bit_length <= 8)
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	2b08      	cmp	r3, #8
 8006622:	d816      	bhi.n	8006652 <canardDecodeScalar+0x1a6>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 8006624:	7c3b      	ldrb	r3, [r7, #16]
 8006626:	461a      	mov	r2, r3
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	3b01      	subs	r3, #1
 800662c:	fa22 f303 	lsr.w	r3, r2, r3
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 8086 	beq.w	8006746 <canardDecodeScalar+0x29a>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 800663a:	7c3a      	ldrb	r2, [r7, #16]
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	2101      	movs	r1, #1
 8006640:	fa01 f303 	lsl.w	r3, r1, r3
 8006644:	b2db      	uxtb	r3, r3
 8006646:	425b      	negs	r3, r3
 8006648:	b2db      	uxtb	r3, r3
 800664a:	4313      	orrs	r3, r2
 800664c:	b2db      	uxtb	r3, r3
 800664e:	743b      	strb	r3, [r7, #16]
 8006650:	e079      	b.n	8006746 <canardDecodeScalar+0x29a>
            }
        }
        else if (bit_length <= 16)
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	2b10      	cmp	r3, #16
 8006656:	d815      	bhi.n	8006684 <canardDecodeScalar+0x1d8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 8006658:	8a3b      	ldrh	r3, [r7, #16]
 800665a:	461a      	mov	r2, r3
 800665c:	79fb      	ldrb	r3, [r7, #7]
 800665e:	3b01      	subs	r3, #1
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d06c      	beq.n	8006746 <canardDecodeScalar+0x29a>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 800666c:	8a3a      	ldrh	r2, [r7, #16]
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	2101      	movs	r1, #1
 8006672:	fa01 f303 	lsl.w	r3, r1, r3
 8006676:	b29b      	uxth	r3, r3
 8006678:	425b      	negs	r3, r3
 800667a:	b29b      	uxth	r3, r3
 800667c:	4313      	orrs	r3, r2
 800667e:	b29b      	uxth	r3, r3
 8006680:	823b      	strh	r3, [r7, #16]
 8006682:	e060      	b.n	8006746 <canardDecodeScalar+0x29a>
            }
        }
        else if (bit_length <= 32)
 8006684:	79fb      	ldrb	r3, [r7, #7]
 8006686:	2b20      	cmp	r3, #32
 8006688:	d811      	bhi.n	80066ae <canardDecodeScalar+0x202>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	3b01      	subs	r3, #1
 8006690:	fa22 f303 	lsr.w	r3, r2, r3
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d054      	beq.n	8006746 <canardDecodeScalar+0x29a>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	2101      	movs	r1, #1
 80066a2:	fa01 f303 	lsl.w	r3, r1, r3
 80066a6:	425b      	negs	r3, r3
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	e04b      	b.n	8006746 <canardDecodeScalar+0x29a>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	2b3f      	cmp	r3, #63	; 0x3f
 80066b2:	d841      	bhi.n	8006738 <canardDecodeScalar+0x28c>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 80066b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80066b8:	79f9      	ldrb	r1, [r7, #7]
 80066ba:	3901      	subs	r1, #1
 80066bc:	f1c1 0620 	rsb	r6, r1, #32
 80066c0:	f1a1 0020 	sub.w	r0, r1, #32
 80066c4:	fa22 f801 	lsr.w	r8, r2, r1
 80066c8:	fa03 f606 	lsl.w	r6, r3, r6
 80066cc:	ea48 0806 	orr.w	r8, r8, r6
 80066d0:	fa23 f000 	lsr.w	r0, r3, r0
 80066d4:	ea48 0800 	orr.w	r8, r8, r0
 80066d8:	fa23 f901 	lsr.w	r9, r3, r1
 80066dc:	f04f 0201 	mov.w	r2, #1
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	ea02 0008 	and.w	r0, r2, r8
 80066e8:	ea03 0109 	and.w	r1, r3, r9
 80066ec:	ea50 0301 	orrs.w	r3, r0, r1
 80066f0:	d029      	beq.n	8006746 <canardDecodeScalar+0x29a>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 80066f2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80066f6:	79f9      	ldrb	r1, [r7, #7]
 80066f8:	f04f 0201 	mov.w	r2, #1
 80066fc:	f04f 0300 	mov.w	r3, #0
 8006700:	f1a1 0620 	sub.w	r6, r1, #32
 8006704:	f1c1 0020 	rsb	r0, r1, #32
 8006708:	fa03 f501 	lsl.w	r5, r3, r1
 800670c:	fa02 f606 	lsl.w	r6, r2, r6
 8006710:	4335      	orrs	r5, r6
 8006712:	fa22 f000 	lsr.w	r0, r2, r0
 8006716:	4305      	orrs	r5, r0
 8006718:	fa02 f401 	lsl.w	r4, r2, r1
 800671c:	4623      	mov	r3, r4
 800671e:	462c      	mov	r4, r5
 8006720:	425b      	negs	r3, r3
 8006722:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8006726:	4619      	mov	r1, r3
 8006728:	4622      	mov	r2, r4
 800672a:	ea41 0308 	orr.w	r3, r1, r8
 800672e:	ea42 0409 	orr.w	r4, r2, r9
 8006732:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8006736:	e006      	b.n	8006746 <canardDecodeScalar+0x29a>
            }
        }
        else
        {
            CANARD_ASSERT(false);
 8006738:	4b31      	ldr	r3, [pc, #196]	; (8006800 <canardDecodeScalar+0x354>)
 800673a:	4a2f      	ldr	r2, [pc, #188]	; (80067f8 <canardDecodeScalar+0x34c>)
 800673c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006740:	482e      	ldr	r0, [pc, #184]	; (80067fc <canardDecodeScalar+0x350>)
 8006742:	f001 fc8f 	bl	8008064 <__assert_func>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 8006746:	79bb      	ldrb	r3, [r7, #6]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d026      	beq.n	800679a <canardDecodeScalar+0x2ee>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	2b08      	cmp	r3, #8
 8006750:	d804      	bhi.n	800675c <canardDecodeScalar+0x2b0>
 8006752:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8006756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	e055      	b.n	8006808 <canardDecodeScalar+0x35c>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	2b10      	cmp	r3, #16
 8006760:	d804      	bhi.n	800676c <canardDecodeScalar+0x2c0>
 8006762:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	e04d      	b.n	8006808 <canardDecodeScalar+0x35c>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	2b20      	cmp	r3, #32
 8006770:	d803      	bhi.n	800677a <canardDecodeScalar+0x2ce>
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	e046      	b.n	8006808 <canardDecodeScalar+0x35c>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	2b40      	cmp	r3, #64	; 0x40
 800677e:	d805      	bhi.n	800678c <canardDecodeScalar+0x2e0>
 8006780:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006786:	e9c2 3400 	strd	r3, r4, [r2]
 800678a:	e03d      	b.n	8006808 <canardDecodeScalar+0x35c>
        else
        {
            CANARD_ASSERT(false);
 800678c:	4b1c      	ldr	r3, [pc, #112]	; (8006800 <canardDecodeScalar+0x354>)
 800678e:	4a1a      	ldr	r2, [pc, #104]	; (80067f8 <canardDecodeScalar+0x34c>)
 8006790:	f44f 7124 	mov.w	r1, #656	; 0x290
 8006794:	4819      	ldr	r0, [pc, #100]	; (80067fc <canardDecodeScalar+0x350>)
 8006796:	f001 fc65 	bl	8008064 <__assert_func>
            return -CANARD_ERROR_INTERNAL;
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d103      	bne.n	80067a8 <canardDecodeScalar+0x2fc>
 80067a0:	7c3a      	ldrb	r2, [r7, #16]
 80067a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	e02f      	b.n	8006808 <canardDecodeScalar+0x35c>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	d803      	bhi.n	80067b6 <canardDecodeScalar+0x30a>
 80067ae:	7c3a      	ldrb	r2, [r7, #16]
 80067b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	e028      	b.n	8006808 <canardDecodeScalar+0x35c>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	d803      	bhi.n	80067c4 <canardDecodeScalar+0x318>
 80067bc:	8a3a      	ldrh	r2, [r7, #16]
 80067be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c0:	801a      	strh	r2, [r3, #0]
 80067c2:	e021      	b.n	8006808 <canardDecodeScalar+0x35c>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	2b20      	cmp	r3, #32
 80067c8:	d803      	bhi.n	80067d2 <canardDecodeScalar+0x326>
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	e01a      	b.n	8006808 <canardDecodeScalar+0x35c>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	2b40      	cmp	r3, #64	; 0x40
 80067d6:	d805      	bhi.n	80067e4 <canardDecodeScalar+0x338>
 80067d8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80067dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067de:	e9c2 3400 	strd	r3, r4, [r2]
 80067e2:	e011      	b.n	8006808 <canardDecodeScalar+0x35c>
        else
        {
            CANARD_ASSERT(false);
 80067e4:	4b06      	ldr	r3, [pc, #24]	; (8006800 <canardDecodeScalar+0x354>)
 80067e6:	4a04      	ldr	r2, [pc, #16]	; (80067f8 <canardDecodeScalar+0x34c>)
 80067e8:	f240 219d 	movw	r1, #669	; 0x29d
 80067ec:	4803      	ldr	r0, [pc, #12]	; (80067fc <canardDecodeScalar+0x350>)
 80067ee:	f001 fc39 	bl	8008064 <__assert_func>
 80067f2:	bf00      	nop
 80067f4:	08009178 	.word	0x08009178
 80067f8:	080096d0 	.word	0x080096d0
 80067fc:	080090cc 	.word	0x080090cc
 8006800:	080090f8 	.word	0x080090f8
 8006804:	080091b4 	.word	0x080091b4
            return -CANARD_ERROR_INTERNAL;
        }
    }

    CANARD_ASSERT(result <= bit_length);
 8006808:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	429a      	cmp	r2, r3
 8006810:	dd06      	ble.n	8006820 <canardDecodeScalar+0x374>
 8006812:	4b0c      	ldr	r3, [pc, #48]	; (8006844 <canardDecodeScalar+0x398>)
 8006814:	4a0c      	ldr	r2, [pc, #48]	; (8006848 <canardDecodeScalar+0x39c>)
 8006816:	f240 21a2 	movw	r1, #674	; 0x2a2
 800681a:	480c      	ldr	r0, [pc, #48]	; (800684c <canardDecodeScalar+0x3a0>)
 800681c:	f001 fc22 	bl	8008064 <__assert_func>
    CANARD_ASSERT(result > 0);
 8006820:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006824:	2b00      	cmp	r3, #0
 8006826:	dc06      	bgt.n	8006836 <canardDecodeScalar+0x38a>
 8006828:	4b09      	ldr	r3, [pc, #36]	; (8006850 <canardDecodeScalar+0x3a4>)
 800682a:	4a07      	ldr	r2, [pc, #28]	; (8006848 <canardDecodeScalar+0x39c>)
 800682c:	f240 21a3 	movw	r1, #675	; 0x2a3
 8006830:	4806      	ldr	r0, [pc, #24]	; (800684c <canardDecodeScalar+0x3a0>)
 8006832:	f001 fc17 	bl	8008064 <__assert_func>
    return result;
 8006836:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3724      	adds	r7, #36	; 0x24
 800683e:	46bd      	mov	sp, r7
 8006840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006844:	080091e4 	.word	0x080091e4
 8006848:	080096d0 	.word	0x080096d0
 800684c:	080090cc 	.word	0x080090cc
 8006850:	080091fc 	.word	0x080091fc

08006854 <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 8006854:	b590      	push	{r4, r7, lr}
 8006856:	b08b      	sub	sp, #44	; 0x2c
 8006858:	af02      	add	r7, sp, #8
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	4613      	mov	r3, r2
 8006862:	71fb      	strb	r3, [r7, #7]
    /*
     * This function can only fail due to invalid arguments, so it was decided to make it return void,
     * and in the case of bad arguments try the best effort or just trigger an CANARD_ASSERTion failure.
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <canardEncodeScalar+0x24>
 800686a:	4b51      	ldr	r3, [pc, #324]	; (80069b0 <canardEncodeScalar+0x15c>)
 800686c:	4a51      	ldr	r2, [pc, #324]	; (80069b4 <canardEncodeScalar+0x160>)
 800686e:	f240 21b1 	movw	r1, #689	; 0x2b1
 8006872:	4851      	ldr	r0, [pc, #324]	; (80069b8 <canardEncodeScalar+0x164>)
 8006874:	f001 fbf6 	bl	8008064 <__assert_func>
    CANARD_ASSERT(value != NULL);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d106      	bne.n	800688c <canardEncodeScalar+0x38>
 800687e:	4b4f      	ldr	r3, [pc, #316]	; (80069bc <canardEncodeScalar+0x168>)
 8006880:	4a4c      	ldr	r2, [pc, #304]	; (80069b4 <canardEncodeScalar+0x160>)
 8006882:	f240 21b2 	movw	r1, #690	; 0x2b2
 8006886:	484c      	ldr	r0, [pc, #304]	; (80069b8 <canardEncodeScalar+0x164>)
 8006888:	f001 fbec 	bl	8008064 <__assert_func>

    if (bit_length > 64)
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	2b40      	cmp	r3, #64	; 0x40
 8006890:	d906      	bls.n	80068a0 <canardEncodeScalar+0x4c>
    {
        CANARD_ASSERT(false);
 8006892:	4b4b      	ldr	r3, [pc, #300]	; (80069c0 <canardEncodeScalar+0x16c>)
 8006894:	4a47      	ldr	r2, [pc, #284]	; (80069b4 <canardEncodeScalar+0x160>)
 8006896:	f240 21b6 	movw	r1, #694	; 0x2b6
 800689a:	4847      	ldr	r0, [pc, #284]	; (80069b8 <canardEncodeScalar+0x164>)
 800689c:	f001 fbe2 	bl	8008064 <__assert_func>
        bit_length = 64;
    }

    if (bit_length < 1)
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <canardEncodeScalar+0x60>
    {
        CANARD_ASSERT(false);
 80068a6:	4b46      	ldr	r3, [pc, #280]	; (80069c0 <canardEncodeScalar+0x16c>)
 80068a8:	4a42      	ldr	r2, [pc, #264]	; (80069b4 <canardEncodeScalar+0x160>)
 80068aa:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80068ae:	4842      	ldr	r0, [pc, #264]	; (80069b8 <canardEncodeScalar+0x164>)
 80068b0:	f001 fbd8 	bl	8008064 <__assert_func>
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 80068b4:	f107 0310 	add.w	r3, r7, #16
 80068b8:	2208      	movs	r2, #8
 80068ba:	2100      	movs	r1, #0
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 fc36 	bl	800812e <memset>

    uint8_t std_byte_length = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d105      	bne.n	80068d8 <canardEncodeScalar+0x84>
 80068cc:	2301      	movs	r3, #1
 80068ce:	77fb      	strb	r3, [r7, #31]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	743b      	strb	r3, [r7, #16]
 80068d6:	e02b      	b.n	8006930 <canardEncodeScalar+0xdc>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d805      	bhi.n	80068ea <canardEncodeScalar+0x96>
 80068de:	2301      	movs	r3, #1
 80068e0:	77fb      	strb	r3, [r7, #31]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	743b      	strb	r3, [r7, #16]
 80068e8:	e022      	b.n	8006930 <canardEncodeScalar+0xdc>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	2b10      	cmp	r3, #16
 80068ee:	d805      	bhi.n	80068fc <canardEncodeScalar+0xa8>
 80068f0:	2302      	movs	r3, #2
 80068f2:	77fb      	strb	r3, [r7, #31]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	823b      	strh	r3, [r7, #16]
 80068fa:	e019      	b.n	8006930 <canardEncodeScalar+0xdc>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	2b20      	cmp	r3, #32
 8006900:	d805      	bhi.n	800690e <canardEncodeScalar+0xba>
 8006902:	2304      	movs	r3, #4
 8006904:	77fb      	strb	r3, [r7, #31]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	e010      	b.n	8006930 <canardEncodeScalar+0xdc>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d806      	bhi.n	8006922 <canardEncodeScalar+0xce>
 8006914:	2308      	movs	r3, #8
 8006916:	77fb      	strb	r3, [r7, #31]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	cb18      	ldmia	r3, {r3, r4}
 800691c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8006920:	e006      	b.n	8006930 <canardEncodeScalar+0xdc>
    else
    {
        CANARD_ASSERT(false);
 8006922:	4b27      	ldr	r3, [pc, #156]	; (80069c0 <canardEncodeScalar+0x16c>)
 8006924:	4a23      	ldr	r2, [pc, #140]	; (80069b4 <canardEncodeScalar+0x160>)
 8006926:	f240 21d9 	movw	r1, #729	; 0x2d9
 800692a:	4823      	ldr	r0, [pc, #140]	; (80069b8 <canardEncodeScalar+0x164>)
 800692c:	f001 fb9a 	bl	8008064 <__assert_func>
    }

    CANARD_ASSERT(std_byte_length > 0);
 8006930:	7ffb      	ldrb	r3, [r7, #31]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d106      	bne.n	8006944 <canardEncodeScalar+0xf0>
 8006936:	4b23      	ldr	r3, [pc, #140]	; (80069c4 <canardEncodeScalar+0x170>)
 8006938:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <canardEncodeScalar+0x160>)
 800693a:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 800693e:	481e      	ldr	r0, [pc, #120]	; (80069b8 <canardEncodeScalar+0x164>)
 8006940:	f001 fb90 	bl	8008064 <__assert_func>

    if (isBigEndian())
 8006944:	f000 fef8 	bl	8007738 <isBigEndian>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d006      	beq.n	800695c <canardEncodeScalar+0x108>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 800694e:	7ffa      	ldrb	r2, [r7, #31]
 8006950:	f107 0310 	add.w	r3, r7, #16
 8006954:	4611      	mov	r1, r2
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fefe 	bl	8007758 <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d016      	beq.n	8006996 <canardEncodeScalar+0x142>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	08db      	lsrs	r3, r3, #3
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f107 0220 	add.w	r2, r7, #32
 8006972:	4413      	add	r3, r2
 8006974:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8006978:	461a      	mov	r2, r3
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	425b      	negs	r3, r3
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	409a      	lsls	r2, r3
 8006984:	79fb      	ldrb	r3, [r7, #7]
 8006986:	08db      	lsrs	r3, r3, #3
 8006988:	b2db      	uxtb	r3, r3
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	f107 0120 	add.w	r1, r7, #32
 8006990:	440b      	add	r3, r1
 8006992:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 8006996:	79fa      	ldrb	r2, [r7, #7]
 8006998:	f107 0010 	add.w	r0, r7, #16
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2100      	movs	r1, #0
 80069a4:	f000 fcca 	bl	800733c <copyBitArray>
}
 80069a8:	bf00      	nop
 80069aa:	3724      	adds	r7, #36	; 0x24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd90      	pop	{r4, r7, pc}
 80069b0:	08009208 	.word	0x08009208
 80069b4:	080096e4 	.word	0x080096e4
 80069b8:	080090cc 	.word	0x080090cc
 80069bc:	08009224 	.word	0x08009224
 80069c0:	080090f8 	.word	0x080090f8
 80069c4:	0800923c 	.word	0x0800923c

080069c8 <canardReleaseRxTransferPayload>:

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 80069d2:	e00f      	b.n	80069f4 <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f103 020c 	add.w	r2, r3, #12
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f000 ffc3 	bl	8007974 <freeBlock>
        transfer->payload_middle = temp;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1eb      	bne.n	80069d4 <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2200      	movs	r2, #0
 8006a00:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2200      	movs	r2, #0
 8006a06:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2200      	movs	r2, #0
 8006a12:	829a      	strh	r2, [r3, #20]
}
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <canardConvertNativeFloatToFloat16>:
{
    return ins->allocator.statistics;
}

uint16_t canardConvertNativeFloatToFloat16(float value)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08a      	sub	sp, #40	; 0x28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
    {
        uint32_t u;
        float f;
    };

    const union FP32 f32inf = { 255UL << 23U };
 8006a24:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8006a28:	617b      	str	r3, [r7, #20]
    const union FP32 f16inf = { 31UL << 23U };
 8006a2a:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 8006a2e:	613b      	str	r3, [r7, #16]
    const union FP32 magic = { 15UL << 23U };
 8006a30:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 8006a34:	60fb      	str	r3, [r7, #12]
    const uint32_t sign_mask = 0x80000000UL;
 8006a36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a3a:	623b      	str	r3, [r7, #32]
    const uint32_t round_mask = ~0xFFFUL;
 8006a3c:	4b20      	ldr	r3, [pc, #128]	; (8006ac0 <canardConvertNativeFloatToFloat16+0xa4>)
 8006a3e:	61fb      	str	r3, [r7, #28]

    union FP32 in;
    in.f = value;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	60bb      	str	r3, [r7, #8]
    uint32_t sign = in.u & sign_mask;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	6a3a      	ldr	r2, [r7, #32]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	61bb      	str	r3, [r7, #24]
    in.u ^= sign;
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	4053      	eors	r3, r2
 8006a52:	60bb      	str	r3, [r7, #8]

    uint16_t out = 0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (in.u >= f32inf.u)
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d30a      	bcc.n	8006a76 <canardConvertNativeFloatToFloat16+0x5a>
    {
        out = (in.u > f32inf.u) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d902      	bls.n	8006a6e <canardConvertNativeFloatToFloat16+0x52>
 8006a68:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006a6c:	e001      	b.n	8006a72 <canardConvertNativeFloatToFloat16+0x56>
 8006a6e:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8006a72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a74:	e018      	b.n	8006aa8 <canardConvertNativeFloatToFloat16+0x8c>
    }
    else
    {
        in.u &= round_mask;
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	60bb      	str	r3, [r7, #8]
        in.f *= magic.f;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4611      	mov	r1, r2
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7f9 fc79 	bl	800037c <__aeabi_fmul>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	60bb      	str	r3, [r7, #8]
        in.u -= round_mask;
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	60bb      	str	r3, [r7, #8]
        if (in.u > f16inf.u)
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d901      	bls.n	8006aa2 <canardConvertNativeFloatToFloat16+0x86>
        {
            in.u = f16inf.u;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	60bb      	str	r3, [r7, #8]
        }
        out = (uint16_t)(in.u >> 13U);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	0b5b      	lsrs	r3, r3, #13
 8006aa6:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    out |= (uint16_t)(sign >> 16U);
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	0c1b      	lsrs	r3, r3, #16
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	84fb      	strh	r3, [r7, #38]	; 0x26

    return out;
 8006ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3728      	adds	r7, #40	; 0x28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	fffff000 	.word	0xfffff000

08006ac4 <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4603      	mov	r3, r0
 8006acc:	460a      	mov	r2, r1
 8006ace:	71fb      	strb	r3, [r7, #7]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(b - a);
 8006ad4:	79bb      	ldrb	r3, [r7, #6]
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 8006ae2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	da03      	bge.n	8006af2 <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 8006aea:	89fb      	ldrh	r3, [r7, #14]
 8006aec:	3320      	adds	r3, #32
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 8006af2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bc80      	pop	{r7}
 8006afe:	4770      	bx	lr

08006b00 <incrementTransferID>:

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <incrementTransferID+0x1c>
 8006b0e:	4b0c      	ldr	r3, [pc, #48]	; (8006b40 <incrementTransferID+0x40>)
 8006b10:	4a0c      	ldr	r2, [pc, #48]	; (8006b44 <incrementTransferID+0x44>)
 8006b12:	f240 315e 	movw	r1, #862	; 0x35e
 8006b16:	480c      	ldr	r0, [pc, #48]	; (8006b48 <incrementTransferID+0x48>)
 8006b18:	f001 faa4 	bl	8008064 <__assert_func>

    (*transfer_id)++;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	3301      	adds	r3, #1
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b1f      	cmp	r3, #31
 8006b2e:	d902      	bls.n	8006b36 <incrementTransferID+0x36>
    {
        *transfer_id = 0;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	701a      	strb	r2, [r3, #0]
    }
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	08009250 	.word	0x08009250
 8006b44:	080096f8 	.word	0x080096f8
 8006b48:	080090cc 	.word	0x080090cc

08006b4c <enqueueTxFrames>:
                                        uint32_t can_id,
                                        uint8_t* transfer_id,
                                        uint16_t crc,
                                        const uint8_t* payload,
                                        uint16_t payload_len)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	807b      	strh	r3, [r7, #2]
    CANARD_ASSERT(ins != NULL);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <enqueueTxFrames+0x22>
 8006b60:	4b6d      	ldr	r3, [pc, #436]	; (8006d18 <enqueueTxFrames+0x1cc>)
 8006b62:	4a6e      	ldr	r2, [pc, #440]	; (8006d1c <enqueueTxFrames+0x1d0>)
 8006b64:	f240 316e 	movw	r1, #878	; 0x36e
 8006b68:	486d      	ldr	r0, [pc, #436]	; (8006d20 <enqueueTxFrames+0x1d4>)
 8006b6a:	f001 fa7b 	bl	8008064 <__assert_func>
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d006      	beq.n	8006b88 <enqueueTxFrames+0x3c>
 8006b7a:	4b6a      	ldr	r3, [pc, #424]	; (8006d24 <enqueueTxFrames+0x1d8>)
 8006b7c:	4a67      	ldr	r2, [pc, #412]	; (8006d1c <enqueueTxFrames+0x1d0>)
 8006b7e:	f240 316f 	movw	r1, #879	; 0x36f
 8006b82:	4867      	ldr	r0, [pc, #412]	; (8006d20 <enqueueTxFrames+0x1d4>)
 8006b84:	f001 fa6e 	bl	8008064 <__assert_func>

    if (transfer_id == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d102      	bne.n	8006b94 <enqueueTxFrames+0x48>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8006b8e:	f06f 0301 	mvn.w	r3, #1
 8006b92:	e0bd      	b.n	8006d10 <enqueueTxFrames+0x1c4>
    }

    if ((payload_len > 0) && (payload == NULL))
 8006b94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <enqueueTxFrames+0x5a>
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <enqueueTxFrames+0x5a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8006ba0:	f06f 0301 	mvn.w	r3, #1
 8006ba4:	e0b4      	b.n	8006d10 <enqueueTxFrames+0x1c4>
    }

    int16_t result = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	83fb      	strh	r3, [r7, #30]

    if (payload_len < CANARD_CAN_FRAME_MAX_DATA_LEN)                        // Single frame transfer
 8006baa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bac:	2b07      	cmp	r3, #7
 8006bae:	d835      	bhi.n	8006c1c <enqueueTxFrames+0xd0>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	330c      	adds	r3, #12
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 f919 	bl	8006dec <createTxItem>
 8006bba:	6138      	str	r0, [r7, #16]
        if (queue_item == NULL)
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <enqueueTxFrames+0x7c>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8006bc2:	f06f 0302 	mvn.w	r3, #2
 8006bc6:	e0a3      	b.n	8006d10 <enqueueTxFrames+0x1c4>
        }

        memcpy(queue_item->frame.data, payload, payload_len);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006bce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f001 faa1 	bl	8008118 <memcpy>

        queue_item->frame.data_len = (uint8_t)(payload_len + 1);
 8006bd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	3301      	adds	r3, #1
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[payload_len] = (uint8_t)(0xC0U | (*transfer_id & 31U));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	f003 031f 	and.w	r3, r3, #31
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bee:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8006bf2:	b2d1      	uxtb	r1, r2
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	460a      	mov	r2, r1
 8006bfa:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	605a      	str	r2, [r3, #4]

        pushTxQueue(ins, queue_item);
 8006c06:	6939      	ldr	r1, [r7, #16]
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 f88d 	bl	8006d28 <pushTxQueue>
        result++;
 8006c0e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3301      	adds	r3, #1
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	83fb      	strh	r3, [r7, #30]
 8006c1a:	e077      	b.n	8006d0c <enqueueTxFrames+0x1c0>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	83bb      	strh	r3, [r7, #28]
        uint8_t toggle = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	76fb      	strb	r3, [r7, #27]
        uint8_t sot_eot = 0x80;
 8006c24:	2380      	movs	r3, #128	; 0x80
 8006c26:	76bb      	strb	r3, [r7, #26]

        CanardTxQueueItem* queue_item = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	617b      	str	r3, [r7, #20]

        while (payload_len - data_index != 0)
 8006c2c:	e06a      	b.n	8006d04 <enqueueTxFrames+0x1b8>
        {
            queue_item = createTxItem(&ins->allocator);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	330c      	adds	r3, #12
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 f8da 	bl	8006dec <createTxItem>
 8006c38:	6178      	str	r0, [r7, #20]
            if (queue_item == NULL)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d102      	bne.n	8006c46 <enqueueTxFrames+0xfa>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so far
 8006c40:	f06f 0302 	mvn.w	r3, #2
 8006c44:	e064      	b.n	8006d10 <enqueueTxFrames+0x1c4>
            }

            uint8_t i = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	767b      	strb	r3, [r7, #25]
            if (data_index == 0)
 8006c4a:	8bbb      	ldrh	r3, [r7, #28]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10c      	bne.n	8006c6a <enqueueTxFrames+0x11e>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 8006c50:	887b      	ldrh	r3, [r7, #2]
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8006c58:	887b      	ldrh	r3, [r7, #2]
 8006c5a:	0a1b      	lsrs	r3, r3, #8
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	725a      	strb	r2, [r3, #9]
                i = 2;
 8006c64:	2302      	movs	r3, #2
 8006c66:	767b      	strb	r3, [r7, #25]
 8006c68:	e011      	b.n	8006c8e <enqueueTxFrames+0x142>
            }
            else
            {
                i = 0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	767b      	strb	r3, [r7, #25]
            }

            for (; i < (CANARD_CAN_FRAME_MAX_DATA_LEN - 1) && data_index < payload_len; i++, data_index++)
 8006c6e:	e00e      	b.n	8006c8e <enqueueTxFrames+0x142>
            {
                queue_item->frame.data[i] = payload[data_index];
 8006c70:	8bbb      	ldrh	r3, [r7, #28]
 8006c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c74:	441a      	add	r2, r3
 8006c76:	7e7b      	ldrb	r3, [r7, #25]
 8006c78:	7811      	ldrb	r1, [r2, #0]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	460a      	mov	r2, r1
 8006c80:	721a      	strb	r2, [r3, #8]
            for (; i < (CANARD_CAN_FRAME_MAX_DATA_LEN - 1) && data_index < payload_len; i++, data_index++)
 8006c82:	7e7b      	ldrb	r3, [r7, #25]
 8006c84:	3301      	adds	r3, #1
 8006c86:	767b      	strb	r3, [r7, #25]
 8006c88:	8bbb      	ldrh	r3, [r7, #28]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	83bb      	strh	r3, [r7, #28]
 8006c8e:	7e7b      	ldrb	r3, [r7, #25]
 8006c90:	2b06      	cmp	r3, #6
 8006c92:	d803      	bhi.n	8006c9c <enqueueTxFrames+0x150>
 8006c94:	8bba      	ldrh	r2, [r7, #28]
 8006c96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d3e9      	bcc.n	8006c70 <enqueueTxFrames+0x124>
            }
            // tail byte
            sot_eot = (data_index == payload_len) ? (uint8_t)0x40 : sot_eot;
 8006c9c:	8bba      	ldrh	r2, [r7, #28]
 8006c9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d001      	beq.n	8006ca8 <enqueueTxFrames+0x15c>
 8006ca4:	7ebb      	ldrb	r3, [r7, #26]
 8006ca6:	e000      	b.n	8006caa <enqueueTxFrames+0x15e>
 8006ca8:	2340      	movs	r3, #64	; 0x40
 8006caa:	76bb      	strb	r3, [r7, #26]

            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer_id & 31U));
 8006cac:	7efb      	ldrb	r3, [r7, #27]
 8006cae:	015b      	lsls	r3, r3, #5
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	7ebb      	ldrb	r3, [r7, #26]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	b2d9      	uxtb	r1, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	7e7b      	ldrb	r3, [r7, #25]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	b2d1      	uxtb	r1, r2
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4413      	add	r3, r2
 8006ccc:	460a      	mov	r2, r1
 8006cce:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8006cda:	7e7b      	ldrb	r3, [r7, #25]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	741a      	strb	r2, [r3, #16]
            pushTxQueue(ins, queue_item);
 8006ce4:	6979      	ldr	r1, [r7, #20]
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f81e 	bl	8006d28 <pushTxQueue>

            result++;
 8006cec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	83fb      	strh	r3, [r7, #30]
            toggle ^= 1;
 8006cf8:	7efb      	ldrb	r3, [r7, #27]
 8006cfa:	f083 0301 	eor.w	r3, r3, #1
 8006cfe:	76fb      	strb	r3, [r7, #27]
            sot_eot = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	76bb      	strb	r3, [r7, #26]
        while (payload_len - data_index != 0)
 8006d04:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006d06:	8bbb      	ldrh	r3, [r7, #28]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d190      	bne.n	8006c2e <enqueueTxFrames+0xe2>
        }
    }

    return result;
 8006d0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3720      	adds	r7, #32
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	080090e4 	.word	0x080090e4
 8006d1c:	0800970c 	.word	0x0800970c
 8006d20:	080090cc 	.word	0x080090cc
 8006d24:	0800926c 	.word	0x0800926c

08006d28 <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d106      	bne.n	8006d46 <pushTxQueue+0x1e>
 8006d38:	4b28      	ldr	r3, [pc, #160]	; (8006ddc <pushTxQueue+0xb4>)
 8006d3a:	4a29      	ldr	r2, [pc, #164]	; (8006de0 <pushTxQueue+0xb8>)
 8006d3c:	f240 31c5 	movw	r1, #965	; 0x3c5
 8006d40:	4828      	ldr	r0, [pc, #160]	; (8006de4 <pushTxQueue+0xbc>)
 8006d42:	f001 f98f 	bl	8008064 <__assert_func>
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	7c1b      	ldrb	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <pushTxQueue+0x34>
 8006d4e:	4b26      	ldr	r3, [pc, #152]	; (8006de8 <pushTxQueue+0xc0>)
 8006d50:	4a23      	ldr	r2, [pc, #140]	; (8006de0 <pushTxQueue+0xb8>)
 8006d52:	f240 31c6 	movw	r1, #966	; 0x3c6
 8006d56:	4823      	ldr	r0, [pc, #140]	; (8006de4 <pushTxQueue+0xbc>)
 8006d58:	f001 f984 	bl	8008064 <__assert_func>

    if (ins->tx_queue == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d103      	bne.n	8006d6c <pushTxQueue+0x44>
    {
        ins->tx_queue = item;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	61da      	str	r2, [r3, #28]
        return;
 8006d6a:	e034      	b.n	8006dd6 <pushTxQueue+0xae>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 8006d78:	e02a      	b.n	8006dd0 <pushTxQueue+0xa8>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	4619      	mov	r1, r3
 8006d84:	4610      	mov	r0, r2
 8006d86:	f000 f848 	bl	8006e1a <isPriorityHigher>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d012      	beq.n	8006db6 <pushTxQueue+0x8e>
        {
            if (queue == ins->tx_queue)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d106      	bne.n	8006da8 <pushTxQueue+0x80>
            {
                item->next = queue;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	61da      	str	r2, [r3, #28]
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 8006da6:	e016      	b.n	8006dd6 <pushTxQueue+0xae>
                previous->next = item;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	601a      	str	r2, [r3, #0]
                item->next = queue;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	601a      	str	r2, [r3, #0]
            return;
 8006db4:	e00f      	b.n	8006dd6 <pushTxQueue+0xae>
        }
        else
        {
            if (queue->next == NULL)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d103      	bne.n	8006dc6 <pushTxQueue+0x9e>
            {
                queue->next = item;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	601a      	str	r2, [r3, #0]
                return;
 8006dc4:	e007      	b.n	8006dd6 <pushTxQueue+0xae>
            }
            else
            {
                previous = queue;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1d1      	bne.n	8006d7a <pushTxQueue+0x52>
            }
        }
    }
}
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	080090e4 	.word	0x080090e4
 8006de0:	0800971c 	.word	0x0800971c
 8006de4:	080090cc 	.word	0x080090cc
 8006de8:	08009290 	.word	0x08009290

08006dec <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fd94 	bl	8007922 <allocateBlock>
 8006dfa:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <createTxItem+0x1a>
    {
        return NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e005      	b.n	8006e12 <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 8006e06:	2214      	movs	r2, #20
 8006e08:	2100      	movs	r1, #0
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f001 f98f 	bl	800812e <memset>
    return item;
 8006e10:	68fb      	ldr	r3, [r7, #12]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <isPriorityHigher>:

/**
 * Returns true if priority of self is higher than other.
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t self, uint32_t other)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b089      	sub	sp, #36	; 0x24
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	6039      	str	r1, [r7, #0]
    const uint32_t self_clean_id = self & CANARD_CAN_EXT_ID_MASK;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006e2a:	61fb      	str	r3, [r7, #28]
    const uint32_t other_clean_id = other & CANARD_CAN_EXT_ID_MASK;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006e32:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool self_ext = (self & CANARD_CAN_FRAME_EFF) != 0;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	0fdb      	lsrs	r3, r3, #31
 8006e38:	75fb      	strb	r3, [r7, #23]
    const bool other_ext = (other & CANARD_CAN_FRAME_EFF) != 0;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	0fdb      	lsrs	r3, r3, #31
 8006e3e:	75bb      	strb	r3, [r7, #22]
    if (self_ext != other_ext)
 8006e40:	7dfa      	ldrb	r2, [r7, #23]
 8006e42:	7dbb      	ldrb	r3, [r7, #22]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d01d      	beq.n	8006e84 <isPriorityHigher+0x6a>
    {
        const uint32_t self_arb11 = self_ext ? (self_clean_id >> 18U) : self_clean_id;
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <isPriorityHigher+0x3a>
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	0c9b      	lsrs	r3, r3, #18
 8006e52:	e000      	b.n	8006e56 <isPriorityHigher+0x3c>
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	613b      	str	r3, [r7, #16]
        const uint32_t other_arb11 = other_ext ? (other_clean_id >> 18U) : other_clean_id;
 8006e58:	7dbb      	ldrb	r3, [r7, #22]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <isPriorityHigher+0x4a>
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	0c9b      	lsrs	r3, r3, #18
 8006e62:	e000      	b.n	8006e66 <isPriorityHigher+0x4c>
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	60fb      	str	r3, [r7, #12]
        if (self_arb11 != other_arb11)
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d007      	beq.n	8006e80 <isPriorityHigher+0x66>
        {
            return self_arb11 < other_arb11;
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	bf34      	ite	cc
 8006e78:	2301      	movcc	r3, #1
 8006e7a:	2300      	movcs	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	e022      	b.n	8006ec6 <isPriorityHigher+0xac>
        }
        else
        {
            return other_ext;
 8006e80:	7dbb      	ldrb	r3, [r7, #22]
 8006e82:	e020      	b.n	8006ec6 <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool self_rtr = (self & CANARD_CAN_FRAME_RTR) != 0;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	bf14      	ite	ne
 8006e8e:	2301      	movne	r3, #1
 8006e90:	2300      	moveq	r3, #0
 8006e92:	757b      	strb	r3, [r7, #21]
    const bool other_rtr = (other & CANARD_CAN_FRAME_RTR) != 0;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	bf14      	ite	ne
 8006e9e:	2301      	movne	r3, #1
 8006ea0:	2300      	moveq	r3, #0
 8006ea2:	753b      	strb	r3, [r7, #20]
    if (self_clean_id == other_clean_id && self_rtr != other_rtr)
 8006ea4:	69fa      	ldr	r2, [r7, #28]
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d105      	bne.n	8006eb8 <isPriorityHigher+0x9e>
 8006eac:	7d7a      	ldrb	r2, [r7, #21]
 8006eae:	7d3b      	ldrb	r3, [r7, #20]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d001      	beq.n	8006eb8 <isPriorityHigher+0x9e>
    {
        return other_rtr;
 8006eb4:	7d3b      	ldrb	r3, [r7, #20]
 8006eb6:	e006      	b.n	8006ec6 <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return self_clean_id < other_clean_id;
 8006eb8:	69fa      	ldr	r2, [r7, #28]
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	bf34      	ite	cc
 8006ec0:	2301      	movcc	r3, #1
 8006ec2:	2300      	movcs	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3724      	adds	r7, #36	; 0x24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr

08006ed0 <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == NULL);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d006      	beq.n	8006eee <prepareForNextTransfer+0x1e>
 8006ee0:	4b11      	ldr	r3, [pc, #68]	; (8006f28 <prepareForNextTransfer+0x58>)
 8006ee2:	4a12      	ldr	r2, [pc, #72]	; (8006f2c <prepareForNextTransfer+0x5c>)
 8006ee4:	f240 412f 	movw	r1, #1071	; 0x42f
 8006ee8:	4811      	ldr	r0, [pc, #68]	; (8006f30 <prepareForNextTransfer+0x60>)
 8006eea:	f001 f8bb 	bl	8008064 <__assert_func>
    state->transfer_id++;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	7ddb      	ldrb	r3, [r3, #23]
 8006ef2:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	3301      	adds	r3, #1
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	b2d9      	uxtb	r1, r3
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	7dd3      	ldrb	r3, [r2, #23]
 8006f04:	f361 0386 	bfi	r3, r1, #2, #5
 8006f08:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	8ad3      	ldrh	r3, [r2, #22]
 8006f0e:	f36f 0309 	bfc	r3, #0, #10
 8006f12:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	7dd3      	ldrb	r3, [r2, #23]
 8006f18:	f36f 13c7 	bfc	r3, #7, #1
 8006f1c:	75d3      	strb	r3, [r2, #23]
}
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	080092ac 	.word	0x080092ac
 8006f2c:	08009728 	.word	0x08009728
 8006f30:	080090cc 	.word	0x080090cc

08006f34 <extractDataType>:

/**
 * returns data type from id
 */
CANARD_INTERNAL uint16_t extractDataType(uint32_t id)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f81a 	bl	8006f76 <extractTransferType>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d10e      	bne.n	8006f66 <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	0a1b      	lsrs	r3, r3, #8
 8006f4c:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d103      	bne.n	8006f62 <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 8006f5a:	89fb      	ldrh	r3, [r7, #14]
 8006f5c:	f003 0303 	and.w	r3, r3, #3
 8006f60:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 8006f62:	89fb      	ldrh	r3, [r7, #14]
 8006f64:	e003      	b.n	8006f6e <extractDataType+0x3a>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	b29b      	uxth	r3, r3
    }
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <extractTransferType>:

/**
 * returns transfer type from id
 */
CANARD_INTERNAL CanardTransferType extractTransferType(uint32_t id)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	09db      	lsrs	r3, r3, #7
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	bf14      	ite	ne
 8006f8a:	2301      	movne	r3, #1
 8006f8c:	2300      	moveq	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	f083 0301 	eor.w	r3, r3, #1
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <extractTransferType+0x2a>
    {
        return CanardTransferTypeBroadcast;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e009      	b.n	8006fb4 <extractTransferType+0x3e>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	0bdb      	lsrs	r3, r3, #15
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <extractTransferType+0x3c>
    {
        return CanardTransferTypeRequest;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <extractTransferType+0x3e>
    }
    else
    {
        return CanardTransferTypeResponse;
 8006fb2:	2300      	movs	r3, #0
    }
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bc80      	pop	{r7}
 8006fbc:	4770      	bx	lr

08006fbe <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d110      	bne.n	8006ff6 <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	330c      	adds	r3, #12
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f854 	bl	8007088 <createRxState>
 8006fe0:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <traverseRxStates+0x2e>
        {
            return NULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	e013      	b.n	8007014 <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	619a      	str	r2, [r3, #24]
        return states;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	e00e      	b.n	8007014 <traverseRxStates+0x56>
    }

    states = findRxState(states, transfer_descriptor);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 f80f 	bl	800701c <findRxState>
 8006ffe:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <traverseRxStates+0x4c>
    {
        return states;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	e004      	b.n	8007014 <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f81e 	bl	800704e <prependRxState>
 8007012:	4603      	mov	r3, r0
    }
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardRxState* state, uint32_t transfer_descriptor)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
    while (state != NULL)
 8007026:	e009      	b.n	800703c <findRxState+0x20>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d101      	bne.n	8007036 <findRxState+0x1a>
        {
            return state;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	e006      	b.n	8007044 <findRxState+0x28>
        }
        state = state->next;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	607b      	str	r3, [r7, #4]
    while (state != NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f2      	bne.n	8007028 <findRxState+0xc>
    }
    return NULL;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr

0800704e <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	330c      	adds	r3, #12
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 f812 	bl	8007088 <createRxState>
 8007064:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <prependRxState+0x22>
    {
        return NULL;
 800706c:	2300      	movs	r3, #0
 800706e:	e007      	b.n	8007080 <prependRxState+0x32>
    }

    state->next = ins->rx_states;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	699a      	ldr	r2, [r3, #24]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	619a      	str	r2, [r3, #24]
    return state;
 800707e:	68fb      	ldr	r3, [r7, #12]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08c      	sub	sp, #48	; 0x30
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 8007092:	f107 0308 	add.w	r3, r7, #8
 8007096:	2220      	movs	r2, #32
 8007098:	2100      	movs	r1, #0
 800709a:	4618      	mov	r0, r3
 800709c:	f001 f847 	bl	800812e <memset>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	61bb      	str	r3, [r7, #24]
        .next = NULL,
        .buffer_blocks = NULL,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fc3c 	bl	8007922 <allocateBlock>
 80070aa:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (state == NULL)
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <createRxState+0x2e>
    {
        return NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e007      	b.n	80070c6 <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 80070b6:	f107 0308 	add.w	r3, r7, #8
 80070ba:	2220      	movs	r2, #32
 80070bc:	4619      	mov	r1, r3
 80070be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070c0:	f001 f82a 	bl	8008118 <memcpy>

    return state;
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3730      	adds	r7, #48	; 0x30
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 80070ce:	b590      	push	{r4, r7, lr}
 80070d0:	b085      	sub	sp, #20
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != NULL)
 80070d8:	e00f      	b.n	80070fa <releaseStatePayload+0x2c>
    {
        CanardBufferBlock* const temp = rxstate->buffer_blocks->next;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, rxstate->buffer_blocks);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f103 020c 	add.w	r2, r3, #12
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f000 fc40 	bl	8007974 <freeBlock>
        rxstate->buffer_blocks = temp;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != NULL)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1eb      	bne.n	80070da <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	8ad3      	ldrh	r3, [r2, #22]
 8007106:	f36f 0309 	bfc	r3, #0, #10
 800710a:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 800710c:	f04f 0300 	mov.w	r3, #0
 8007110:	f04f 0400 	mov.w	r4, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	4621      	mov	r1, r4
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	bd90      	pop	{r4, r7, pc}
	...

08007120 <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08a      	sub	sp, #40	; 0x28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 800712e:	2300      	movs	r3, #0
 8007130:	84fb      	strh	r3, [r7, #38]	; 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	8adb      	ldrh	r3, [r3, #22]
 8007136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b06      	cmp	r3, #6
 800713e:	d036      	beq.n	80071ae <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	8adb      	ldrh	r3, [r3, #22]
 8007144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007148:	b29b      	uxth	r3, r3
 800714a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800714c:	e00e      	b.n	800716c <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 800714e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	441a      	add	r2, r3
 8007154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007156:	7811      	ldrb	r1, [r2, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	4413      	add	r3, r2
 800715c:	460a      	mov	r2, r1
 800715e:	769a      	strb	r2, [r3, #26]
             i++, data_index++)
 8007160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007162:	3301      	adds	r3, #1
 8007164:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007166:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007168:	3301      	adds	r3, #1
 800716a:	84fb      	strh	r3, [r7, #38]	; 0x26
        for (uint16_t i = (uint16_t)state->payload_len;
 800716c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800716e:	2b05      	cmp	r3, #5
 8007170:	d804      	bhi.n	800717c <bufferBlockPushBytes+0x5c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 8007172:	78fb      	ldrb	r3, [r7, #3]
 8007174:	b29b      	uxth	r3, r3
 8007176:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007178:	429a      	cmp	r2, r3
 800717a:	d3e8      	bcc.n	800714e <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	b29b      	uxth	r3, r3
 8007180:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007182:	429a      	cmp	r2, r3
 8007184:	d313      	bcc.n	80071ae <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	8adb      	ldrh	r3, [r3, #22]
 800718a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800718e:	b29b      	uxth	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	78fb      	ldrb	r3, [r7, #3]
 8007194:	b29b      	uxth	r3, r3
 8007196:	4413      	add	r3, r2
 8007198:	b29b      	uxth	r3, r3
 800719a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800719e:	b299      	uxth	r1, r3
            state->payload_len =
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	8ad3      	ldrh	r3, [r2, #22]
 80071a4:	f361 0309 	bfi	r3, r1, #0, #10
 80071a8:	82d3      	strh	r3, [r2, #22]
            return 1;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e0a9      	b.n	8007302 <bufferBlockPushBytes+0x1e2>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	8adb      	ldrh	r3, [r3, #22]
 80071b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	1f9a      	subs	r2, r3, #6
 80071ba:	0893      	lsrs	r3, r2, #2
 80071bc:	4953      	ldr	r1, [pc, #332]	; (800730c <bufferBlockPushBytes+0x1ec>)
 80071be:	fba1 3103 	umull	r3, r1, r1, r3
 80071c2:	460b      	mov	r3, r1
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	1a5b      	subs	r3, r3, r1
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 80071cc:	847b      	strh	r3, [r7, #34]	; 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == NULL)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d112      	bne.n	8007200 <bufferBlockPushBytes+0xe0>
    {
        state->buffer_blocks = createBufferBlock(allocator);
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f898 	bl	8007310 <createBufferBlock>
 80071e0:	4602      	mov	r2, r0
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	605a      	str	r2, [r3, #4]

        if (state->buffer_blocks == NULL)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d102      	bne.n	80071f4 <bufferBlockPushBytes+0xd4>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80071ee:	f06f 0302 	mvn.w	r3, #2
 80071f2:	e086      	b.n	8007302 <bufferBlockPushBytes+0x1e2>
        }

        block = state->buffer_blocks;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	61fb      	str	r3, [r7, #28]
        index_at_nth_block = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80071fe:	e068      	b.n	80072d2 <bufferBlockPushBytes+0x1b2>
    }
    else
    {
        uint16_t nth_block = 1;
 8007200:	2301      	movs	r3, #1
 8007202:	837b      	strh	r3, [r7, #26]

        // get to block
        block = state->buffer_blocks;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 800720a:	e005      	b.n	8007218 <bufferBlockPushBytes+0xf8>
        {
            nth_block++;
 800720c:	8b7b      	ldrh	r3, [r7, #26]
 800720e:	3301      	adds	r3, #1
 8007210:	837b      	strh	r3, [r7, #26]
            block = block->next;
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1f5      	bne.n	800720c <bufferBlockPushBytes+0xec>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	8adb      	ldrh	r3, [r3, #22]
 8007224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007228:	b29b      	uxth	r3, r3
 800722a:	461a      	mov	r2, r3
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	4413      	add	r3, r2
 8007230:	3b06      	subs	r3, #6
 8007232:	089b      	lsrs	r3, r3, #2
 8007234:	4a35      	ldr	r2, [pc, #212]	; (800730c <bufferBlockPushBytes+0x1ec>)
 8007236:	fba2 2303 	umull	r2, r3, r2, r3
 800723a:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 800723c:	3301      	adds	r3, #1
 800723e:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 8007240:	8afa      	ldrh	r2, [r7, #22]
 8007242:	8b7b      	ldrh	r3, [r7, #26]
 8007244:	429a      	cmp	r2, r3
 8007246:	d944      	bls.n	80072d2 <bufferBlockPushBytes+0x1b2>
 8007248:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800724a:	2b00      	cmp	r3, #0
 800724c:	d141      	bne.n	80072d2 <bufferBlockPushBytes+0x1b2>
        {
            block->next = createBufferBlock(allocator);
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f85e 	bl	8007310 <createBufferBlock>
 8007254:	4602      	mov	r2, r0
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d102      	bne.n	8007268 <bufferBlockPushBytes+0x148>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8007262:	f06f 0302 	mvn.w	r3, #2
 8007266:	e04c      	b.n	8007302 <bufferBlockPushBytes+0x1e2>
            }
            block = block->next;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 800726e:	e030      	b.n	80072d2 <bufferBlockPushBytes+0x1b2>
    {
        for (uint16_t i = index_at_nth_block;
 8007270:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007272:	833b      	strh	r3, [r7, #24]
 8007274:	e00e      	b.n	8007294 <bufferBlockPushBytes+0x174>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 8007276:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	441a      	add	r2, r3
 800727c:	8b3b      	ldrh	r3, [r7, #24]
 800727e:	7811      	ldrb	r1, [r2, #0]
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	4413      	add	r3, r2
 8007284:	460a      	mov	r2, r1
 8007286:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 8007288:	8b3b      	ldrh	r3, [r7, #24]
 800728a:	3301      	adds	r3, #1
 800728c:	833b      	strh	r3, [r7, #24]
 800728e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007290:	3301      	adds	r3, #1
 8007292:	84fb      	strh	r3, [r7, #38]	; 0x26
        for (uint16_t i = index_at_nth_block;
 8007294:	8b3b      	ldrh	r3, [r7, #24]
 8007296:	2b1b      	cmp	r3, #27
 8007298:	d804      	bhi.n	80072a4 <bufferBlockPushBytes+0x184>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	b29b      	uxth	r3, r3
 800729e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d3e8      	bcc.n	8007276 <bufferBlockPushBytes+0x156>
        }

        if (data_index < data_len)
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d211      	bcs.n	80072d2 <bufferBlockPushBytes+0x1b2>
        {
            block->next = createBufferBlock(allocator);
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f82e 	bl	8007310 <createBufferBlock>
 80072b4:	4602      	mov	r2, r0
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d102      	bne.n	80072c8 <bufferBlockPushBytes+0x1a8>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 80072c2:	f06f 0302 	mvn.w	r3, #2
 80072c6:	e01c      	b.n	8007302 <bufferBlockPushBytes+0x1e2>
            }
            block = block->next;
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	847b      	strh	r3, [r7, #34]	; 0x22
    while (data_index < data_len)
 80072d2:	78fb      	ldrb	r3, [r7, #3]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80072d8:	429a      	cmp	r2, r3
 80072da:	d3c9      	bcc.n	8007270 <bufferBlockPushBytes+0x150>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	8adb      	ldrh	r3, [r3, #22]
 80072e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	78fb      	ldrb	r3, [r7, #3]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	4413      	add	r3, r2
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072f4:	b299      	uxth	r1, r3
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	8ad3      	ldrh	r3, [r2, #22]
 80072fa:	f361 0309 	bfi	r3, r1, #0, #10
 80072fe:	82d3      	strh	r3, [r2, #22]

    return 1;
 8007300:	2301      	movs	r3, #1
}
 8007302:	4618      	mov	r0, r3
 8007304:	3728      	adds	r7, #40	; 0x28
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	24924925 	.word	0x24924925

08007310 <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fb02 	bl	8007922 <allocateBlock>
 800731e:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <createBufferBlock+0x1a>
    {
        return NULL;
 8007326:	2300      	movs	r3, #0
 8007328:	e003      	b.n	8007332 <createBufferBlock+0x22>
    }
    block->next = NULL;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]
    return block;
 8007330:	68fb      	ldr	r3, [r7, #12]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d106      	bne.n	800735e <copyBitArray+0x22>
 8007350:	4b39      	ldr	r3, [pc, #228]	; (8007438 <copyBitArray+0xfc>)
 8007352:	4a3a      	ldr	r2, [pc, #232]	; (800743c <copyBitArray+0x100>)
 8007354:	f240 5139 	movw	r1, #1337	; 0x539
 8007358:	4839      	ldr	r0, [pc, #228]	; (8007440 <copyBitArray+0x104>)
 800735a:	f000 fe83 	bl	8008064 <__assert_func>

    // Normalizing inputs
    src += src_offset / 8U;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	08db      	lsrs	r3, r3, #3
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4413      	add	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	08db      	lsrs	r3, r3, #3
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	4413      	add	r3, r2
 8007370:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	62bb      	str	r3, [r7, #40]	; 0x28

    const size_t last_bit = src_offset + src_len;
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4413      	add	r3, r2
 8007388:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 800738a:	e04d      	b.n	8007428 <copyBitArray+0xec>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	b2db      	uxtb	r3, r3
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 80073a0:	7eba      	ldrb	r2, [r7, #26]
 80073a2:	7efb      	ldrb	r3, [r7, #27]
 80073a4:	4293      	cmp	r3, r2
 80073a6:	bf38      	it	cc
 80073a8:	4613      	movcc	r3, r2
 80073aa:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = MIN(last_bit - src_offset, 8U - max_offset);
 80073ac:	7e7b      	ldrb	r3, [r7, #25]
 80073ae:	f1c3 0208 	rsb	r2, r3, #8
 80073b2:	69f9      	ldr	r1, [r7, #28]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	1acb      	subs	r3, r1, r3
 80073b8:	4293      	cmp	r3, r2
 80073ba:	bf28      	it	cs
 80073bc:	4613      	movcs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]

        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 80073c0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	7ebb      	ldrb	r3, [r7, #26]
 80073d0:	fa42 f303 	asr.w	r3, r2, r3
 80073d4:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	08db      	lsrs	r3, r3, #3
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4413      	add	r3, r2
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	461a      	mov	r2, r3
 80073e2:	7efb      	ldrb	r3, [r7, #27]
 80073e4:	409a      	lsls	r2, r3
 80073e6:	7ebb      	ldrb	r3, [r7, #26]
 80073e8:	fa22 f303 	lsr.w	r3, r2, r3
 80073ec:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	08db      	lsrs	r3, r3, #3
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	4413      	add	r3, r2
 80073f6:	781a      	ldrb	r2, [r3, #0]
 80073f8:	7cfb      	ldrb	r3, [r7, #19]
 80073fa:	43db      	mvns	r3, r3
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	4013      	ands	r3, r2
 8007400:	b2d9      	uxtb	r1, r3
 8007402:	7cba      	ldrb	r2, [r7, #18]
 8007404:	7cfb      	ldrb	r3, [r7, #19]
 8007406:	4013      	ands	r3, r2
 8007408:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	08db      	lsrs	r3, r3, #3
 800740e:	6838      	ldr	r0, [r7, #0]
 8007410:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8007412:	430a      	orrs	r2, r1
 8007414:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 8007416:	701a      	strb	r2, [r3, #0]

        src_offset += copy_bits;
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	4413      	add	r3, r2
 800741e:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 8007420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	4413      	add	r3, r2
 8007426:	62bb      	str	r3, [r7, #40]	; 0x28
    while (last_bit - src_offset)
 8007428:	69fa      	ldr	r2, [r7, #28]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	429a      	cmp	r2, r3
 800742e:	d1ad      	bne.n	800738c <copyBitArray+0x50>
    }
}
 8007430:	bf00      	nop
 8007432:	3720      	adds	r7, #32
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	080092d0 	.word	0x080092d0
 800743c:	08009740 	.word	0x08009740
 8007440:	080090cc 	.word	0x080090cc

08007444 <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b090      	sub	sp, #64	; 0x40
 8007448:	af02      	add	r7, sp, #8
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	4613      	mov	r3, r2
 8007452:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d106      	bne.n	8007468 <descatterTransferPayload+0x24>
 800745a:	4bac      	ldr	r3, [pc, #688]	; (800770c <descatterTransferPayload+0x2c8>)
 800745c:	4aac      	ldr	r2, [pc, #688]	; (8007710 <descatterTransferPayload+0x2cc>)
 800745e:	f240 515b 	movw	r1, #1371	; 0x55b
 8007462:	48ac      	ldr	r0, [pc, #688]	; (8007714 <descatterTransferPayload+0x2d0>)
 8007464:	f000 fdfe 	bl	8008064 <__assert_func>

    if (bit_offset >= transfer->payload_len * 8)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8a9b      	ldrh	r3, [r3, #20]
 800746c:	00db      	lsls	r3, r3, #3
 800746e:	461a      	mov	r2, r3
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	4293      	cmp	r3, r2
 8007474:	d301      	bcc.n	800747a <descatterTransferPayload+0x36>
    {
        return 0;       // Out of range, reading zero bits
 8007476:	2300      	movs	r3, #0
 8007478:	e143      	b.n	8007702 <descatterTransferPayload+0x2be>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 800747a:	79fa      	ldrb	r2, [r7, #7]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	4413      	add	r3, r2
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	8a92      	ldrh	r2, [r2, #20]
 8007484:	00d2      	lsls	r2, r2, #3
 8007486:	4293      	cmp	r3, r2
 8007488:	d908      	bls.n	800749c <descatterTransferPayload+0x58>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8a9b      	ldrh	r3, [r3, #20]
 800748e:	b2db      	uxtb	r3, r3
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	b2da      	uxtb	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	b2db      	uxtb	r3, r3
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <descatterTransferPayload+0x6c>
 80074a2:	4b9d      	ldr	r3, [pc, #628]	; (8007718 <descatterTransferPayload+0x2d4>)
 80074a4:	4a9a      	ldr	r2, [pc, #616]	; (8007710 <descatterTransferPayload+0x2cc>)
 80074a6:	f240 5167 	movw	r1, #1383	; 0x567
 80074aa:	489a      	ldr	r0, [pc, #616]	; (8007714 <descatterTransferPayload+0x2d0>)
 80074ac:	f000 fdda 	bl	8008064 <__assert_func>

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d104      	bne.n	80074c2 <descatterTransferPayload+0x7e>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 8113 	beq.w	80076e8 <descatterTransferPayload+0x2a4>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t output_bit_offset = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        uint8_t remaining_bit_length = bit_length;
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 80074d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d4:	2b2f      	cmp	r3, #47	; 0x2f
 80074d6:	d82d      	bhi.n	8007534 <descatterTransferPayload+0xf0>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 80074d8:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80074dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074de:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d305      	bcc.n	80074f2 <descatterTransferPayload+0xae>
 80074e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	e001      	b.n	80074f6 <descatterTransferPayload+0xb2>
 80074f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80074f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6898      	ldr	r0, [r3, #8]
 80074fe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007502:	2300      	movs	r3, #0
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800750a:	f7ff ff17 	bl	800733c <copyBitArray>

            input_bit_offset += amount;
 800750e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007514:	4413      	add	r3, r2
 8007516:	637b      	str	r3, [r7, #52]	; 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8007518:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800751c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007520:	4413      	add	r3, r2
 8007522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8007526:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800752a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }

        // Reading middle
        uint32_t remaining_bits = transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8a9b      	ldrh	r3, [r3, #20]
 8007538:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800753c:	3b06      	subs	r3, #6
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8007542:	2330      	movs	r3, #48	; 0x30
 8007544:	62bb      	str	r3, [r7, #40]	; 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	627b      	str	r3, [r7, #36]	; 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 800754c:	e064      	b.n	8007618 <descatterTransferPayload+0x1d4>
        {
            CANARD_ASSERT(remaining_bits > 0);
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d106      	bne.n	8007562 <descatterTransferPayload+0x11e>
 8007554:	4b71      	ldr	r3, [pc, #452]	; (800771c <descatterTransferPayload+0x2d8>)
 8007556:	4a6e      	ldr	r2, [pc, #440]	; (8007710 <descatterTransferPayload+0x2cc>)
 8007558:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 800755c:	486d      	ldr	r0, [pc, #436]	; (8007714 <descatterTransferPayload+0x2d0>)
 800755e:	f000 fd81 	bl	8008064 <__assert_func>
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 8007562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007564:	2be0      	cmp	r3, #224	; 0xe0
 8007566:	bf28      	it	cs
 8007568:	23e0      	movcs	r3, #224	; 0xe0
 800756a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800756c:	4413      	add	r3, r2
 800756e:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007574:	429a      	cmp	r2, r3
 8007576:	d939      	bls.n	80075ec <descatterTransferPayload+0x1a8>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8007578:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800757c:	69f9      	ldr	r1, [r7, #28]
 800757e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007580:	1acb      	subs	r3, r1, r3
 8007582:	429a      	cmp	r2, r3
 8007584:	d306      	bcc.n	8007594 <descatterTransferPayload+0x150>
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	b2da      	uxtb	r2, r3
 800758a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758c:	b2db      	uxtb	r3, r3
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	b2db      	uxtb	r3, r3
 8007592:	e001      	b.n	8007598 <descatterTransferPayload+0x154>
 8007594:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007598:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
 800759a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	429a      	cmp	r2, r3
 80075a0:	d206      	bcs.n	80075b0 <descatterTransferPayload+0x16c>
 80075a2:	4b5f      	ldr	r3, [pc, #380]	; (8007720 <descatterTransferPayload+0x2dc>)
 80075a4:	4a5a      	ldr	r2, [pc, #360]	; (8007710 <descatterTransferPayload+0x2cc>)
 80075a6:	f240 5191 	movw	r1, #1425	; 0x591
 80075aa:	485a      	ldr	r0, [pc, #360]	; (8007714 <descatterTransferPayload+0x2d0>)
 80075ac:	f000 fd5a 	bl	8008064 <__assert_func>
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 80075b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	1d18      	adds	r0, r3, #4
 80075bc:	7efa      	ldrb	r2, [r7, #27]
 80075be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	6979      	ldr	r1, [r7, #20]
 80075c8:	f7ff feb8 	bl	800733c <copyBitArray>

                input_bit_offset += amount;
 80075cc:	7efb      	ldrb	r3, [r7, #27]
 80075ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075d0:	4413      	add	r3, r2
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 80075d4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80075d8:	7efb      	ldrb	r3, [r7, #27]
 80075da:	4413      	add	r3, r2
 80075dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80075e0:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80075e4:	7efb      	ldrb	r3, [r7, #27]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
 80075ec:	69fa      	ldr	r2, [r7, #28]
 80075ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d806      	bhi.n	8007602 <descatterTransferPayload+0x1be>
 80075f4:	4b4b      	ldr	r3, [pc, #300]	; (8007724 <descatterTransferPayload+0x2e0>)
 80075f6:	4a46      	ldr	r2, [pc, #280]	; (8007710 <descatterTransferPayload+0x2cc>)
 80075f8:	f240 519b 	movw	r1, #1435	; 0x59b
 80075fc:	4845      	ldr	r0, [pc, #276]	; (8007714 <descatterTransferPayload+0x2d0>)
 80075fe:	f000 fd31 	bl	8008064 <__assert_func>
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8007602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800760a:	4413      	add	r3, r2
 800760c:	62fb      	str	r3, [r7, #44]	; 0x2c
            block_bit_offset = block_end_bit_offset;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	62bb      	str	r3, [r7, #40]	; 0x28
            block = block->next;
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <descatterTransferPayload+0x1e2>
 800761e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007622:	2b00      	cmp	r3, #0
 8007624:	d193      	bne.n	800754e <descatterTransferPayload+0x10a>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);
 8007626:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800762a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800762c:	429a      	cmp	r2, r3
 800762e:	d206      	bcs.n	800763e <descatterTransferPayload+0x1fa>
 8007630:	4b3d      	ldr	r3, [pc, #244]	; (8007728 <descatterTransferPayload+0x2e4>)
 8007632:	4a37      	ldr	r2, [pc, #220]	; (8007710 <descatterTransferPayload+0x2cc>)
 8007634:	f240 51a1 	movw	r1, #1441	; 0x5a1
 8007638:	4836      	ldr	r0, [pc, #216]	; (8007714 <descatterTransferPayload+0x2d0>)
 800763a:	f000 fd13 	bl	8008064 <__assert_func>

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d02c      	beq.n	80076a0 <descatterTransferPayload+0x25c>
 8007646:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800764a:	2b00      	cmp	r3, #0
 800764c:	d028      	beq.n	80076a0 <descatterTransferPayload+0x25c>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
 800764e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	429a      	cmp	r2, r3
 8007654:	d206      	bcs.n	8007664 <descatterTransferPayload+0x220>
 8007656:	4b32      	ldr	r3, [pc, #200]	; (8007720 <descatterTransferPayload+0x2dc>)
 8007658:	4a2d      	ldr	r2, [pc, #180]	; (8007710 <descatterTransferPayload+0x2cc>)
 800765a:	f240 51a6 	movw	r1, #1446	; 0x5a6
 800765e:	482d      	ldr	r0, [pc, #180]	; (8007714 <descatterTransferPayload+0x2d0>)
 8007660:	f000 fd00 	bl	8008064 <__assert_func>
            const uint32_t offset = input_bit_offset - block_bit_offset;
 8007664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6918      	ldr	r0, [r3, #16]
 8007670:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8007674:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6939      	ldr	r1, [r7, #16]
 800767e:	f7ff fe5d 	bl	800733c <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 8007682:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007688:	4413      	add	r3, r2
 800768a:	637b      	str	r3, [r7, #52]	; 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 800768c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007690:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007694:	4413      	add	r3, r2
 8007696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            remaining_bit_length = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }

        CANARD_ASSERT(input_bit_offset <= transfer->payload_len * 8);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8a9b      	ldrh	r3, [r3, #20]
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	461a      	mov	r2, r3
 80076a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d906      	bls.n	80076bc <descatterTransferPayload+0x278>
 80076ae:	4b1f      	ldr	r3, [pc, #124]	; (800772c <descatterTransferPayload+0x2e8>)
 80076b0:	4a17      	ldr	r2, [pc, #92]	; (8007710 <descatterTransferPayload+0x2cc>)
 80076b2:	f240 51b1 	movw	r1, #1457	; 0x5b1
 80076b6:	4817      	ldr	r0, [pc, #92]	; (8007714 <descatterTransferPayload+0x2d0>)
 80076b8:	f000 fcd4 	bl	8008064 <__assert_func>
        CANARD_ASSERT(output_bit_offset <= 64);
 80076bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076c0:	2b40      	cmp	r3, #64	; 0x40
 80076c2:	d906      	bls.n	80076d2 <descatterTransferPayload+0x28e>
 80076c4:	4b1a      	ldr	r3, [pc, #104]	; (8007730 <descatterTransferPayload+0x2ec>)
 80076c6:	4a12      	ldr	r2, [pc, #72]	; (8007710 <descatterTransferPayload+0x2cc>)
 80076c8:	f240 51b2 	movw	r1, #1458	; 0x5b2
 80076cc:	4811      	ldr	r0, [pc, #68]	; (8007714 <descatterTransferPayload+0x2d0>)
 80076ce:	f000 fcc9 	bl	8008064 <__assert_func>
        CANARD_ASSERT(remaining_bit_length == 0);
 80076d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d010      	beq.n	80076fc <descatterTransferPayload+0x2b8>
 80076da:	4b16      	ldr	r3, [pc, #88]	; (8007734 <descatterTransferPayload+0x2f0>)
 80076dc:	4a0c      	ldr	r2, [pc, #48]	; (8007710 <descatterTransferPayload+0x2cc>)
 80076de:	f240 51b3 	movw	r1, #1459	; 0x5b3
 80076e2:	480c      	ldr	r0, [pc, #48]	; (8007714 <descatterTransferPayload+0x2d0>)
 80076e4:	f000 fcbe 	bl	8008064 <__assert_func>
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6898      	ldr	r0, [r3, #8]
 80076ec:	79fa      	ldrb	r2, [r7, #7]
 80076ee:	2300      	movs	r3, #0
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68b9      	ldr	r1, [r7, #8]
 80076f6:	f7ff fe21 	bl	800733c <copyBitArray>
 80076fa:	e000      	b.n	80076fe <descatterTransferPayload+0x2ba>
    {
 80076fc:	bf00      	nop
    }

    return bit_length;
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	b21b      	sxth	r3, r3
}
 8007702:	4618      	mov	r0, r3
 8007704:	3738      	adds	r7, #56	; 0x38
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	080092e0 	.word	0x080092e0
 8007710:	08009750 	.word	0x08009750
 8007714:	080090cc 	.word	0x080090cc
 8007718:	080092f0 	.word	0x080092f0
 800771c:	08009300 	.word	0x08009300
 8007720:	08009314 	.word	0x08009314
 8007724:	0800933c 	.word	0x0800933c
 8007728:	08009364 	.word	0x08009364
 800772c:	0800938c 	.word	0x0800938c
 8007730:	080093bc 	.word	0x080093bc
 8007734:	080093d4 	.word	0x080093d4

08007738 <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
    union
    {
        uint16_t a;
        uint8_t b[2];
    } u;
    u.a = 1;
 800773e:	2301      	movs	r3, #1
 8007740:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 8007742:	797b      	ldrb	r3, [r7, #5]
 8007744:	2b01      	cmp	r3, #1
 8007746:	bf0c      	ite	eq
 8007748:	2301      	moveq	r3, #1
 800774a:	2300      	movne	r3, #0
 800774c:	b2db      	uxtb	r3, r3
#endif
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, size_t size)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d106      	bne.n	8007776 <swapByteOrder+0x1e>
 8007768:	4b17      	ldr	r3, [pc, #92]	; (80077c8 <swapByteOrder+0x70>)
 800776a:	4a18      	ldr	r2, [pc, #96]	; (80077cc <swapByteOrder+0x74>)
 800776c:	f240 51ce 	movw	r1, #1486	; 0x5ce
 8007770:	4817      	ldr	r0, [pc, #92]	; (80077d0 <swapByteOrder+0x78>)
 8007772:	f000 fc77 	bl	8008064 <__assert_func>

    uint8_t* const bytes = (uint8_t*) data;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	3b01      	subs	r3, #1
 8007782:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 8007784:	e017      	b.n	80077b6 <swapByteOrder+0x5e>
    {
        const uint8_t x = bytes[fwd];
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	4413      	add	r3, r2
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	441a      	add	r2, r3
 8007796:	68f9      	ldr	r1, [r7, #12]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	440b      	add	r3, r1
 800779c:	7812      	ldrb	r2, [r2, #0]
 800779e:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	4413      	add	r3, r2
 80077a6:	7afa      	ldrb	r2, [r7, #11]
 80077a8:	701a      	strb	r2, [r3, #0]
        fwd++;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	3301      	adds	r3, #1
 80077ae:	617b      	str	r3, [r7, #20]
        rev--;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d3e3      	bcc.n	8007786 <swapByteOrder+0x2e>
    }
}
 80077be:	bf00      	nop
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	080093f0 	.word	0x080093f0
 80077cc:	0800976c 	.word	0x0800976c
 80077d0:	080090cc 	.word	0x080090cc

080077d4 <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	4603      	mov	r3, r0
 80077dc:	460a      	mov	r2, r1
 80077de:	80fb      	strh	r3, [r7, #6]
 80077e0:	4613      	mov	r3, r2
 80077e2:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 80077e4:	797b      	ldrb	r3, [r7, #5]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	88fb      	ldrh	r3, [r7, #6]
 80077ee:	4053      	eors	r3, r2
 80077f0:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
 80077f6:	e012      	b.n	800781e <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 80077f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	da08      	bge.n	8007812 <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8007800:	88fb      	ldrh	r3, [r7, #6]
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	b29b      	uxth	r3, r3
 8007806:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800780a:	f083 0301 	eor.w	r3, r3, #1
 800780e:	80fb      	strh	r3, [r7, #6]
 8007810:	e002      	b.n	8007818 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 8007812:	88fb      	ldrh	r3, [r7, #6]
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8007818:	7bfb      	ldrb	r3, [r7, #15]
 800781a:	3301      	adds	r3, #1
 800781c:	73fb      	strb	r3, [r7, #15]
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	2b07      	cmp	r3, #7
 8007822:	d9e9      	bls.n	80077f8 <crcAddByte+0x24>
        }
    }
    return crc_val;
 8007824:	88fb      	ldrh	r3, [r7, #6]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr

08007830 <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 8007830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	4601      	mov	r1, r0
 8007838:	e9c7 2300 	strd	r2, r3, [r7]
 800783c:	460b      	mov	r3, r1
 800783e:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8007840:	2300      	movs	r3, #0
 8007842:	82fb      	strh	r3, [r7, #22]
 8007844:	e01b      	b.n	800787e <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8007846:	8af9      	ldrh	r1, [r7, #22]
 8007848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800784c:	f1c1 0620 	rsb	r6, r1, #32
 8007850:	f1a1 0020 	sub.w	r0, r1, #32
 8007854:	fa22 f401 	lsr.w	r4, r2, r1
 8007858:	fa03 f606 	lsl.w	r6, r3, r6
 800785c:	4334      	orrs	r4, r6
 800785e:	fa23 f000 	lsr.w	r0, r3, r0
 8007862:	4304      	orrs	r4, r0
 8007864:	fa23 f501 	lsr.w	r5, r3, r1
 8007868:	b2e2      	uxtb	r2, r4
 800786a:	89fb      	ldrh	r3, [r7, #14]
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f7ff ffb0 	bl	80077d4 <crcAddByte>
 8007874:	4603      	mov	r3, r0
 8007876:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8007878:	8afb      	ldrh	r3, [r7, #22]
 800787a:	3308      	adds	r3, #8
 800787c:	82fb      	strh	r3, [r7, #22]
 800787e:	8afb      	ldrh	r3, [r7, #22]
 8007880:	2b3f      	cmp	r3, #63	; 0x3f
 8007882:	d9e0      	bls.n	8007846 <crcAddSignature+0x16>
    }
    return crc_val;
 8007884:	89fb      	ldrh	r3, [r7, #14]
}
 8007886:	4618      	mov	r0, r3
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800788e <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	4603      	mov	r3, r0
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
 800789a:	81fb      	strh	r3, [r7, #14]
    while (len--)
 800789c:	e00a      	b.n	80078b4 <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	60ba      	str	r2, [r7, #8]
 80078a4:	781a      	ldrb	r2, [r3, #0]
 80078a6:	89fb      	ldrh	r3, [r7, #14]
 80078a8:	4611      	mov	r1, r2
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7ff ff92 	bl	80077d4 <crcAddByte>
 80078b0:	4603      	mov	r3, r0
 80078b2:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	1e5a      	subs	r2, r3, #1
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1ef      	bne.n	800789e <crcAdd+0x10>
    }
    return crc_val;
 80078be:	89fb      	ldrh	r3, [r7, #14]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       CanardPoolAllocatorBlock* buf,
                                       uint16_t buf_len)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	617b      	str	r3, [r7, #20]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	613b      	str	r3, [r7, #16]
    while (current_index < buf_len)
 80078de:	e00b      	b.n	80078f8 <initPoolAllocator+0x30>
    {
        *current_block = &buf[current_index];
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	015b      	lsls	r3, r3, #5
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	441a      	add	r2, r3
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	613b      	str	r3, [r7, #16]
        current_index++;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	3301      	adds	r3, #1
 80078f6:	617b      	str	r3, [r7, #20]
    while (current_index < buf_len)
 80078f8:	88fb      	ldrh	r3, [r7, #6]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d3ef      	bcc.n	80078e0 <initPoolAllocator+0x18>
    }
    *current_block = NULL;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	2200      	movs	r2, #0
 8007904:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	88fa      	ldrh	r2, [r7, #6]
 800790a:	809a      	strh	r2, [r3, #4]
    allocator->statistics.current_usage_blocks = 0;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	80da      	strh	r2, [r3, #6]
    allocator->statistics.peak_usage_blocks = 0;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	811a      	strh	r2, [r3, #8]
}
 8007918:	bf00      	nop
 800791a:	371c      	adds	r7, #28
 800791c:	46bd      	mov	sp, r7
 800791e:	bc80      	pop	{r7}
 8007920:	4770      	bx	lr

08007922 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8007922:	b480      	push	{r7}
 8007924:	b085      	sub	sp, #20
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <allocateBlock+0x14>
    {
        return NULL;
 8007932:	2300      	movs	r3, #0
 8007934:	e018      	b.n	8007968 <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	601a      	str	r2, [r3, #0]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	88db      	ldrh	r3, [r3, #6]
 800794a:	3301      	adds	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	80da      	strh	r2, [r3, #6]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	891a      	ldrh	r2, [r3, #8]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	88db      	ldrh	r3, [r3, #6]
 800795a:	429a      	cmp	r2, r3
 800795c:	d203      	bcs.n	8007966 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	88da      	ldrh	r2, [r3, #6]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	811a      	strh	r2, [r3, #8]
    }

    return result;
 8007966:	68fb      	ldr	r3, [r7, #12]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	bc80      	pop	{r7}
 8007970:	4770      	bx	lr
	...

08007974 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	601a      	str	r2, [r3, #0]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	88db      	ldrh	r3, [r3, #6]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d106      	bne.n	80079a6 <freeBlock+0x32>
 8007998:	4b08      	ldr	r3, [pc, #32]	; (80079bc <freeBlock+0x48>)
 800799a:	4a09      	ldr	r2, [pc, #36]	; (80079c0 <freeBlock+0x4c>)
 800799c:	f44f 61c7 	mov.w	r1, #1592	; 0x638
 80079a0:	4808      	ldr	r0, [pc, #32]	; (80079c4 <freeBlock+0x50>)
 80079a2:	f000 fb5f 	bl	8008064 <__assert_func>
    allocator->statistics.current_usage_blocks--;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	88db      	ldrh	r3, [r3, #6]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	80da      	strh	r2, [r3, #6]
}
 80079b2:	bf00      	nop
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	08009404 	.word	0x08009404
 80079c0:	0800977c 	.word	0x0800977c
 80079c4:	080090cc 	.word	0x080090cc

080079c8 <isFramePriorityHigher>:

static bool g_abort_tx_on_error = false;


static bool isFramePriorityHigher(uint32_t a, uint32_t b)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b089      	sub	sp, #36	; 0x24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
    const uint32_t clean_a = a & CANARD_CAN_EXT_ID_MASK;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80079d8:	61fb      	str	r3, [r7, #28]
    const uint32_t clean_b = b & CANARD_CAN_EXT_ID_MASK;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80079e0:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext_a = (a & CANARD_CAN_FRAME_EFF) != 0;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	0fdb      	lsrs	r3, r3, #31
 80079e6:	75fb      	strb	r3, [r7, #23]
    const bool ext_b = (b & CANARD_CAN_FRAME_EFF) != 0;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	0fdb      	lsrs	r3, r3, #31
 80079ec:	75bb      	strb	r3, [r7, #22]
    if (ext_a != ext_b)
 80079ee:	7dfa      	ldrb	r2, [r7, #23]
 80079f0:	7dbb      	ldrb	r3, [r7, #22]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d01d      	beq.n	8007a32 <isFramePriorityHigher+0x6a>
    {
        const uint32_t arb11_a = ext_a ? (clean_a >> 18U) : clean_a;
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <isFramePriorityHigher+0x3a>
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	0c9b      	lsrs	r3, r3, #18
 8007a00:	e000      	b.n	8007a04 <isFramePriorityHigher+0x3c>
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	613b      	str	r3, [r7, #16]
        const uint32_t arb11_b = ext_b ? (clean_b >> 18U) : clean_b;
 8007a06:	7dbb      	ldrb	r3, [r7, #22]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <isFramePriorityHigher+0x4a>
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	0c9b      	lsrs	r3, r3, #18
 8007a10:	e000      	b.n	8007a14 <isFramePriorityHigher+0x4c>
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	60fb      	str	r3, [r7, #12]
        if (arb11_a != arb11_b)
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d007      	beq.n	8007a2e <isFramePriorityHigher+0x66>
        {
            return arb11_a < arb11_b;
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	bf34      	ite	cc
 8007a26:	2301      	movcc	r3, #1
 8007a28:	2300      	movcs	r3, #0
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	e022      	b.n	8007a74 <isFramePriorityHigher+0xac>
        }
        else
        {
            return ext_b;
 8007a2e:	7dbb      	ldrb	r3, [r7, #22]
 8007a30:	e020      	b.n	8007a74 <isFramePriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr_a = (a & CANARD_CAN_FRAME_RTR) != 0;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	bf14      	ite	ne
 8007a3c:	2301      	movne	r3, #1
 8007a3e:	2300      	moveq	r3, #0
 8007a40:	757b      	strb	r3, [r7, #21]
    const bool rtr_b = (b & CANARD_CAN_FRAME_RTR) != 0;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	bf14      	ite	ne
 8007a4c:	2301      	movne	r3, #1
 8007a4e:	2300      	moveq	r3, #0
 8007a50:	753b      	strb	r3, [r7, #20]
    if ((clean_a == clean_b) && (rtr_a != rtr_b))
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d105      	bne.n	8007a66 <isFramePriorityHigher+0x9e>
 8007a5a:	7d7a      	ldrb	r2, [r7, #21]
 8007a5c:	7d3b      	ldrb	r3, [r7, #20]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d001      	beq.n	8007a66 <isFramePriorityHigher+0x9e>
    {
        return rtr_b;
 8007a62:	7d3b      	ldrb	r3, [r7, #20]
 8007a64:	e006      	b.n	8007a74 <isFramePriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_a < clean_b;
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	bf34      	ite	cc
 8007a6e:	2301      	movcc	r3, #1
 8007a70:	2300      	movcs	r3, #0
 8007a72:	b2db      	uxtb	r3, r3
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3724      	adds	r7, #36	; 0x24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bc80      	pop	{r7}
 8007a7c:	4770      	bx	lr

08007a7e <convertFrameIDCanardToRegister>:

/// Converts libcanard ID value into the bxCAN TX ID register format.
static uint32_t convertFrameIDCanardToRegister(const uint32_t id)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b085      	sub	sp, #20
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
    uint32_t out = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]

    if (id & CANARD_CAN_FRAME_EFF)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	da05      	bge.n	8007a9c <convertFrameIDCanardToRegister+0x1e>
    {
        out = ((id & CANARD_CAN_EXT_ID_MASK) << 3U) | CANARD_STM32_CAN_TIR_IDE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	f043 0304 	orr.w	r3, r3, #4
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	e002      	b.n	8007aa2 <convertFrameIDCanardToRegister+0x24>
    }
    else
    {
        out = ((id & CANARD_CAN_STD_ID_MASK) << 21U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	055b      	lsls	r3, r3, #21
 8007aa0:	60fb      	str	r3, [r7, #12]
    }

    if (id & CANARD_CAN_FRAME_RTR)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <convertFrameIDCanardToRegister+0x36>
    {
        out |= CANARD_STM32_CAN_TIR_RTR;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f043 0302 	orr.w	r3, r3, #2
 8007ab2:	60fb      	str	r3, [r7, #12]
    }

    return out;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bc80      	pop	{r7}
 8007abe:	4770      	bx	lr

08007ac0 <convertFrameIDRegisterToCanard>:

/// Converts bxCAN TX/RX (sic! both RX/TX are supported) ID register value into the libcanard ID format.
static uint32_t convertFrameIDRegisterToCanard(const uint32_t id)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
#if (CANARD_STM32_CAN_TIR_RTR != CANARD_STM32_CAN_RIR_RTR) ||\
    (CANARD_STM32_CAN_TIR_IDE != CANARD_STM32_CAN_RIR_IDE)
# error "RIR bits do not match TIR bits, TIR --> libcanard conversion is not possible"
#endif

    uint32_t out = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]

    if ((id & CANARD_STM32_CAN_RIR_IDE) == 0)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f003 0304 	and.w	r3, r3, #4
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d103      	bne.n	8007ade <convertFrameIDRegisterToCanard+0x1e>
    {
        out = (CANARD_CAN_STD_ID_MASK & (id >> 21U));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	0d5b      	lsrs	r3, r3, #21
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	e004      	b.n	8007ae8 <convertFrameIDRegisterToCanard+0x28>
    }
    else
    {
        out = (CANARD_CAN_EXT_ID_MASK & (id >> 3U)) | CANARD_CAN_FRAME_EFF;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	08db      	lsrs	r3, r3, #3
 8007ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ae6:	60fb      	str	r3, [r7, #12]
    }

    if ((id & CANARD_STM32_CAN_RIR_RTR) != 0)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <convertFrameIDRegisterToCanard+0x3a>
    {
        out |= CANARD_CAN_FRAME_RTR;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007af8:	60fb      	str	r3, [r7, #12]
    }

    return out;
 8007afa:	68fb      	ldr	r3, [r7, #12]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr
	...

08007b08 <waitMSRINAKBitStateChange>:


static bool waitMSRINAKBitStateChange(volatile const CanardSTM32CANType* const bxcan, const bool target_state)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	70fb      	strb	r3, [r7, #3]
     *  3 bit - inter frame space
     * This adds up to 11; therefore, it is not really necessary to wait longer than a few frame TX intervals.
     */
    static const uint16_t TimeoutMilliseconds = 1000;

    for (uint16_t wait_ack = 0; wait_ack < TimeoutMilliseconds; wait_ack++)
 8007b14:	2300      	movs	r3, #0
 8007b16:	81fb      	strh	r3, [r7, #14]
 8007b18:	e011      	b.n	8007b3e <waitMSRINAKBitStateChange+0x36>
    {
        const bool state = (bxcan->MSR & CANARD_STM32_CAN_MSR_INAK) != 0;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bf14      	ite	ne
 8007b26:	2301      	movne	r3, #1
 8007b28:	2300      	moveq	r3, #0
 8007b2a:	737b      	strb	r3, [r7, #13]
        if (state == target_state)
 8007b2c:	7b7a      	ldrb	r2, [r7, #13]
 8007b2e:	78fb      	ldrb	r3, [r7, #3]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d101      	bne.n	8007b38 <waitMSRINAKBitStateChange+0x30>
        {
            return true;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e008      	b.n	8007b4a <waitMSRINAKBitStateChange+0x42>
    for (uint16_t wait_ack = 0; wait_ack < TimeoutMilliseconds; wait_ack++)
 8007b38:	89fb      	ldrh	r3, [r7, #14]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	81fb      	strh	r3, [r7, #14]
 8007b3e:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <waitMSRINAKBitStateChange+0x4c>)
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	89fa      	ldrh	r2, [r7, #14]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d3e8      	bcc.n	8007b1a <waitMSRINAKBitStateChange+0x12>
        //usleep(1000);           // TODO: This function may be missing on some platforms


    }

    return false;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr
 8007b54:	08009786 	.word	0x08009786

08007b58 <processErrorStatus>:


static void processErrorStatus(void)
{
 8007b58:	b490      	push	{r4, r7}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
    /*
     * Aborting TX transmissions if abort on error was requested
     * Updating error counter
     */
    const uint8_t lec = (uint8_t)((BXCAN->ESR & CANARD_STM32_CAN_ESR_LEC_MASK) >> CANARD_STM32_CAN_ESR_LEC_SHIFT);
 8007b5e:	4b14      	ldr	r3, [pc, #80]	; (8007bb0 <processErrorStatus+0x58>)
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	091b      	lsrs	r3, r3, #4
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	71fb      	strb	r3, [r7, #7]

    if (lec != 0)
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d018      	beq.n	8007ba4 <processErrorStatus+0x4c>
    {
        BXCAN->ESR = 0;                 // This action does only affect the LEC bits, other bits are read only!
 8007b72:	4b0f      	ldr	r3, [pc, #60]	; (8007bb0 <processErrorStatus+0x58>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	619a      	str	r2, [r3, #24]
        g_stats.error_count++;
 8007b78:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <processErrorStatus+0x5c>)
 8007b7a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8007b7e:	1c4b      	adds	r3, r1, #1
 8007b80:	f142 0400 	adc.w	r4, r2, #0
 8007b84:	4a0b      	ldr	r2, [pc, #44]	; (8007bb4 <processErrorStatus+0x5c>)
 8007b86:	e9c2 3402 	strd	r3, r4, [r2, #8]

        // Abort pending transmissions if auto abort on error is enabled, or if we're in bus off mode
        if (g_abort_tx_on_error || (BXCAN->ESR & CANARD_STM32_CAN_ESR_BOFF))
 8007b8a:	4b0b      	ldr	r3, [pc, #44]	; (8007bb8 <processErrorStatus+0x60>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d105      	bne.n	8007b9e <processErrorStatus+0x46>
 8007b92:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <processErrorStatus+0x58>)
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <processErrorStatus+0x4c>
        {
            BXCAN->TSR = CANARD_STM32_CAN_TSR_ABRQ0 | CANARD_STM32_CAN_TSR_ABRQ1 | CANARD_STM32_CAN_TSR_ABRQ2;
 8007b9e:	4b04      	ldr	r3, [pc, #16]	; (8007bb0 <processErrorStatus+0x58>)
 8007ba0:	4a06      	ldr	r2, [pc, #24]	; (8007bbc <processErrorStatus+0x64>)
 8007ba2:	609a      	str	r2, [r3, #8]
        }
    }
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bc90      	pop	{r4, r7}
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	40006400 	.word	0x40006400
 8007bb4:	20001e60 	.word	0x20001e60
 8007bb8:	20001e70 	.word	0x20001e70
 8007bbc:	00808080 	.word	0x00808080

08007bc0 <canardSTM32Init>:


int16_t canardSTM32Init(const CanardSTM32CANTimings* const timings,
                        const CanardSTM32IfaceMode iface_mode)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
    /*
     * Paranoia time.
     */
    if ((iface_mode != CanardSTM32IfaceModeNormal) &&
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d008      	beq.n	8007be4 <canardSTM32Init+0x24>
 8007bd2:	78fb      	ldrb	r3, [r7, #3]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d005      	beq.n	8007be4 <canardSTM32Init+0x24>
        (iface_mode != CanardSTM32IfaceModeSilent) &&
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d002      	beq.n	8007be4 <canardSTM32Init+0x24>
        (iface_mode != CanardSTM32IfaceModeAutomaticTxAbortOnError))
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8007bde:	f06f 0301 	mvn.w	r3, #1
 8007be2:	e0dd      	b.n	8007da0 <canardSTM32Init+0x1e0>
    }

    if ((timings == NULL) ||
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d020      	beq.n	8007c2c <canardSTM32Init+0x6c>
        (timings->bit_rate_prescaler < 1) || (timings->bit_rate_prescaler > 1024) ||
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	881b      	ldrh	r3, [r3, #0]
    if ((timings == NULL) ||
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d01c      	beq.n	8007c2c <canardSTM32Init+0x6c>
        (timings->bit_rate_prescaler < 1) || (timings->bit_rate_prescaler > 1024) ||
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bfa:	d817      	bhi.n	8007c2c <canardSTM32Init+0x6c>
        (timings->max_resynchronization_jump_width < 1) || (timings->max_resynchronization_jump_width > 4) ||
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	791b      	ldrb	r3, [r3, #4]
        (timings->bit_rate_prescaler < 1) || (timings->bit_rate_prescaler > 1024) ||
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d013      	beq.n	8007c2c <canardSTM32Init+0x6c>
        (timings->max_resynchronization_jump_width < 1) || (timings->max_resynchronization_jump_width > 4) ||
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	791b      	ldrb	r3, [r3, #4]
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d80f      	bhi.n	8007c2c <canardSTM32Init+0x6c>
        (timings->bit_segment_1 < 1) || (timings->bit_segment_1 > 16) ||
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	789b      	ldrb	r3, [r3, #2]
        (timings->max_resynchronization_jump_width < 1) || (timings->max_resynchronization_jump_width > 4) ||
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00b      	beq.n	8007c2c <canardSTM32Init+0x6c>
        (timings->bit_segment_1 < 1) || (timings->bit_segment_1 > 16) ||
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	789b      	ldrb	r3, [r3, #2]
 8007c18:	2b10      	cmp	r3, #16
 8007c1a:	d807      	bhi.n	8007c2c <canardSTM32Init+0x6c>
        (timings->bit_segment_2 < 1) || (timings->bit_segment_2 > 8))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	78db      	ldrb	r3, [r3, #3]
        (timings->bit_segment_1 < 1) || (timings->bit_segment_1 > 16) ||
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <canardSTM32Init+0x6c>
        (timings->bit_segment_2 < 1) || (timings->bit_segment_2 > 8))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	78db      	ldrb	r3, [r3, #3]
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d902      	bls.n	8007c32 <canardSTM32Init+0x72>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8007c2c:	f06f 0301 	mvn.w	r3, #1
 8007c30:	e0b6      	b.n	8007da0 <canardSTM32Init+0x1e0>
    }

    /*
     * Initial setup
     */
    memset(&g_stats, 0, sizeof(g_stats));
 8007c32:	2210      	movs	r2, #16
 8007c34:	2100      	movs	r1, #0
 8007c36:	485c      	ldr	r0, [pc, #368]	; (8007da8 <canardSTM32Init+0x1e8>)
 8007c38:	f000 fa79 	bl	800812e <memset>

    g_abort_tx_on_error = (iface_mode == CanardSTM32IfaceModeAutomaticTxAbortOnError);
 8007c3c:	78fb      	ldrb	r3, [r7, #3]
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	bf0c      	ite	eq
 8007c42:	2301      	moveq	r3, #1
 8007c44:	2300      	movne	r3, #0
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	4b58      	ldr	r3, [pc, #352]	; (8007dac <canardSTM32Init+0x1ec>)
 8007c4a:	701a      	strb	r2, [r3, #0]
        return -CANARD_STM32_ERROR_MSR_INAK_NOT_SET;
    }
    // CAN1 will be left in the initialization mode forever, in this mode it does not affect the bus at all.
#endif

    BXCAN->IER = 0;                                             // We need no interrupts
 8007c4c:	4b58      	ldr	r3, [pc, #352]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	615a      	str	r2, [r3, #20]
    BXCAN->MCR &= ~CANARD_STM32_CAN_MCR_SLEEP;                  // Exit sleep mode
 8007c52:	4b57      	ldr	r3, [pc, #348]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a56      	ldr	r2, [pc, #344]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007c58:	f023 0302 	bic.w	r3, r3, #2
 8007c5c:	6013      	str	r3, [r2, #0]
    BXCAN->MCR |= CANARD_STM32_CAN_MCR_INRQ;                    // Request init
 8007c5e:	4b54      	ldr	r3, [pc, #336]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a53      	ldr	r2, [pc, #332]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007c64:	f043 0301 	orr.w	r3, r3, #1
 8007c68:	6013      	str	r3, [r2, #0]

    if (!waitMSRINAKBitStateChange(BXCAN, true))                // Wait for synchronization
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	4850      	ldr	r0, [pc, #320]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007c6e:	f7ff ff4b 	bl	8007b08 <waitMSRINAKBitStateChange>
 8007c72:	4603      	mov	r3, r0
 8007c74:	f083 0301 	eor.w	r3, r3, #1
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d006      	beq.n	8007c8c <canardSTM32Init+0xcc>
    {
        BXCAN->MCR = CANARD_STM32_CAN_MCR_RESET;
 8007c7e:	4b4c      	ldr	r3, [pc, #304]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007c80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007c84:	601a      	str	r2, [r3, #0]
        return -CANARD_STM32_ERROR_MSR_INAK_NOT_SET;
 8007c86:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8007c8a:	e089      	b.n	8007da0 <canardSTM32Init+0x1e0>
    }

    /*
     * Hardware initialization (the hardware has already confirmed initialization mode, see above)
     */
    BXCAN->MCR = CANARD_STM32_CAN_MCR_ABOM | CANARD_STM32_CAN_MCR_AWUM | CANARD_STM32_CAN_MCR_INRQ;  // RM page 648
 8007c8c:	4b48      	ldr	r3, [pc, #288]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007c8e:	2261      	movs	r2, #97	; 0x61
 8007c90:	601a      	str	r2, [r3, #0]

    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	791b      	ldrb	r3, [r3, #4]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	061b      	lsls	r3, r3, #24
 8007c9a:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
                 (((timings->bit_segment_1 - 1U)                    &   15U) << 16U) |
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	789b      	ldrb	r3, [r3, #2]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	041b      	lsls	r3, r3, #16
 8007ca6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 8007caa:	431a      	orrs	r2, r3
                 (((timings->bit_segment_2 - 1U)                    &    7U) << 20U) |
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	78db      	ldrb	r3, [r3, #3]
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	051b      	lsls	r3, r3, #20
 8007cb4:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
                 (((timings->bit_segment_1 - 1U)                    &   15U) << 16U) |
 8007cb8:	431a      	orrs	r2, r3
                 ((timings->bit_rate_prescaler - 1U)                & 1023U) |
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
                 (((timings->bit_segment_2 - 1U)                    &    7U) << 20U) |
 8007cc4:	4313      	orrs	r3, r2
                 ((iface_mode == CanardSTM32IfaceModeSilent) ? CANARD_STM32_CAN_BTR_SILM : 0);
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	2a01      	cmp	r2, #1
 8007cca:	d102      	bne.n	8007cd2 <canardSTM32Init+0x112>
 8007ccc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cd0:	e000      	b.n	8007cd4 <canardSTM32Init+0x114>
 8007cd2:	2200      	movs	r2, #0
    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 8007cd4:	4936      	ldr	r1, [pc, #216]	; (8007db0 <canardSTM32Init+0x1f0>)
                 ((timings->bit_rate_prescaler - 1U)                & 1023U) |
 8007cd6:	4313      	orrs	r3, r2
    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 8007cd8:	61cb      	str	r3, [r1, #28]

    CANARD_ASSERT(0 == BXCAN->IER);             // Making sure the iterrupts are indeed disabled
 8007cda:	4b35      	ldr	r3, [pc, #212]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <canardSTM32Init+0x12e>
 8007ce2:	4b34      	ldr	r3, [pc, #208]	; (8007db4 <canardSTM32Init+0x1f4>)
 8007ce4:	4a34      	ldr	r2, [pc, #208]	; (8007db8 <canardSTM32Init+0x1f8>)
 8007ce6:	21ea      	movs	r1, #234	; 0xea
 8007ce8:	4834      	ldr	r0, [pc, #208]	; (8007dbc <canardSTM32Init+0x1fc>)
 8007cea:	f000 f9bb 	bl	8008064 <__assert_func>

    BXCAN->MCR &= ~CANARD_STM32_CAN_MCR_INRQ;   // Leave init mode
 8007cee:	4b30      	ldr	r3, [pc, #192]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a2f      	ldr	r2, [pc, #188]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007cf4:	f023 0301 	bic.w	r3, r3, #1
 8007cf8:	6013      	str	r3, [r2, #0]

    if (!waitMSRINAKBitStateChange(BXCAN, false))
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	482c      	ldr	r0, [pc, #176]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007cfe:	f7ff ff03 	bl	8007b08 <waitMSRINAKBitStateChange>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f083 0301 	eor.w	r3, r3, #1
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <canardSTM32Init+0x15a>
    {
        BXCAN->MCR = CANARD_STM32_CAN_MCR_RESET;
 8007d0e:	4b28      	ldr	r3, [pc, #160]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007d10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007d14:	601a      	str	r2, [r3, #0]
        return -CANARD_STM32_ERROR_MSR_INAK_NOT_CLEARED;
 8007d16:	4b2a      	ldr	r3, [pc, #168]	; (8007dc0 <canardSTM32Init+0x200>)
 8007d18:	e042      	b.n	8007da0 <canardSTM32Init+0x1e0>
     * CAN2 filters are offset by 14.
     * We use 14 filters at most always which simplifies the code and ensures compatibility with all
     * MCU within the STM32 family.
     */
    {
        uint32_t fmr = CANARD_STM32_CAN1->FMR & 0xFFFFC0F1U;
 8007d1a:	4b25      	ldr	r3, [pc, #148]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007d1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007d24:	f023 030e 	bic.w	r3, r3, #14
 8007d28:	60fb      	str	r3, [r7, #12]
        fmr |= CANARD_STM32_NUM_ACCEPTANCE_FILTERS << 8U;                // CAN2 start bank = 14 (if CAN2 is present)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8007d30:	60fb      	str	r3, [r7, #12]
        CANARD_STM32_CAN1->FMR = fmr | CANARD_STM32_CAN_FMR_FINIT;
 8007d32:	4a1f      	ldr	r2, [pc, #124]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f043 0301 	orr.w	r3, r3, #1
 8007d3a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    CANARD_ASSERT(((CANARD_STM32_CAN1->FMR >> 8U) & 0x3FU) == CANARD_STM32_NUM_ACCEPTANCE_FILTERS);
 8007d3e:	4b1c      	ldr	r3, [pc, #112]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007d40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d44:	0a1b      	lsrs	r3, r3, #8
 8007d46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d4a:	2b0e      	cmp	r3, #14
 8007d4c:	d006      	beq.n	8007d5c <canardSTM32Init+0x19c>
 8007d4e:	4b1d      	ldr	r3, [pc, #116]	; (8007dc4 <canardSTM32Init+0x204>)
 8007d50:	4a19      	ldr	r2, [pc, #100]	; (8007db8 <canardSTM32Init+0x1f8>)
 8007d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d56:	4819      	ldr	r0, [pc, #100]	; (8007dbc <canardSTM32Init+0x1fc>)
 8007d58:	f000 f984 	bl	8008064 <__assert_func>

    CANARD_STM32_CAN1->FM1R = 0;                                        // Indentifier Mask mode
 8007d5c:	4b14      	ldr	r3, [pc, #80]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    CANARD_STM32_CAN1->FS1R = 0x0FFFFFFF;                               // All 32-bit
 8007d64:	4b12      	ldr	r3, [pc, #72]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007d66:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007d6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    // Filters are alternating between FIFO0 and FIFO1 in order to equalize the load.
    // This will cause occasional priority inversion and frame reordering on reception,
    // but that is acceptable for UAVCAN, and a majority of other protocols will tolerate
    // this too, since there will be no reordering within the same CAN ID.
    CANARD_STM32_CAN1->FFA1R = 0x0AAAAAAA;
 8007d6e:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007d70:	4a15      	ldr	r2, [pc, #84]	; (8007dc8 <canardSTM32Init+0x208>)
 8007d72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#if CANARD_STM32_USE_CAN2
    CANARD_STM32_CAN1->FilterRegister[CANARD_STM32_NUM_ACCEPTANCE_FILTERS].FR1 = 0;
    CANARD_STM32_CAN1->FilterRegister[CANARD_STM32_NUM_ACCEPTANCE_FILTERS].FR2 = 0;
    CANARD_STM32_CAN1->FA1R = (1 << CANARD_STM32_NUM_ACCEPTANCE_FILTERS);  // One filter enabled
#else
    CANARD_STM32_CAN1->FilterRegister[0].FR1 = 0;
 8007d76:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    CANARD_STM32_CAN1->FilterRegister[0].FR2 = 0;
 8007d7e:	4b0c      	ldr	r3, [pc, #48]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
    CANARD_STM32_CAN1->FA1R = 1;                                        // One filter enabled
 8007d86:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
#endif

    CANARD_STM32_CAN1->FMR &= ~CANARD_STM32_CAN_FMR_FINIT;              // Leave initialization mode
 8007d8e:	4b08      	ldr	r3, [pc, #32]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007d90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d94:	4a06      	ldr	r2, [pc, #24]	; (8007db0 <canardSTM32Init+0x1f0>)
 8007d96:	f023 0301 	bic.w	r3, r3, #1
 8007d9a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    return 0;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20001e60 	.word	0x20001e60
 8007dac:	20001e70 	.word	0x20001e70
 8007db0:	40006400 	.word	0x40006400
 8007db4:	08009434 	.word	0x08009434
 8007db8:	08009788 	.word	0x08009788
 8007dbc:	0800946c 	.word	0x0800946c
 8007dc0:	fffffc16 	.word	0xfffffc16
 8007dc4:	08009498 	.word	0x08009498
 8007dc8:	0aaaaaaa 	.word	0x0aaaaaaa

08007dcc <canardSTM32Transmit>:


int16_t canardSTM32Transmit(const CanardCANFrame* const frame)
{
 8007dcc:	b590      	push	{r4, r7, lr}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
    if (frame == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d102      	bne.n	8007de0 <canardSTM32Transmit+0x14>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8007dda:	f06f 0301 	mvn.w	r3, #1
 8007dde:	e0ab      	b.n	8007f38 <canardSTM32Transmit+0x16c>
    }

    if (frame->id & CANARD_CAN_FRAME_ERR)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <canardSTM32Transmit+0x24>
    {
        return -CANARD_STM32_ERROR_UNSUPPORTED_FRAME_FORMAT;
 8007dec:	4b54      	ldr	r3, [pc, #336]	; (8007f40 <canardSTM32Transmit+0x174>)
 8007dee:	e0a3      	b.n	8007f38 <canardSTM32Transmit+0x16c>
    }

    /*
     * Handling error status might free up some slots through aborts
     */
    processErrorStatus();
 8007df0:	f7ff feb2 	bl	8007b58 <processErrorStatus>

    /*
     * Seeking an empty slot, checking if priority inversion would occur if we enqueued now.
     * We can always enqueue safely if all TX mailboxes are free and no transmissions are pending.
     */
    uint8_t tx_mailbox = 0xFF;
 8007df4:	23ff      	movs	r3, #255	; 0xff
 8007df6:	75fb      	strb	r3, [r7, #23]

    static const uint32_t AllTME = CANARD_STM32_CAN_TSR_TME0 | CANARD_STM32_CAN_TSR_TME1 | CANARD_STM32_CAN_TSR_TME2;

    if ((BXCAN->TSR & AllTME) != AllTME)                // At least one TX mailbox is used, detailed check is needed
 8007df8:	4b52      	ldr	r3, [pc, #328]	; (8007f44 <canardSTM32Transmit+0x178>)
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	4b52      	ldr	r3, [pc, #328]	; (8007f48 <canardSTM32Transmit+0x17c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	401a      	ands	r2, r3
 8007e02:	4b51      	ldr	r3, [pc, #324]	; (8007f48 <canardSTM32Transmit+0x17c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d053      	beq.n	8007eb2 <canardSTM32Transmit+0xe6>
    {
        const bool tme[3] =
        {
            (BXCAN->TSR & CANARD_STM32_CAN_TSR_TME0) != 0,
 8007e0a:	4b4e      	ldr	r3, [pc, #312]	; (8007f44 <canardSTM32Transmit+0x178>)
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bf14      	ite	ne
 8007e16:	2301      	movne	r3, #1
 8007e18:	2300      	moveq	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
        const bool tme[3] =
 8007e1c:	733b      	strb	r3, [r7, #12]
            (BXCAN->TSR & CANARD_STM32_CAN_TSR_TME1) != 0,
 8007e1e:	4b49      	ldr	r3, [pc, #292]	; (8007f44 <canardSTM32Transmit+0x178>)
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	bf14      	ite	ne
 8007e2a:	2301      	movne	r3, #1
 8007e2c:	2300      	moveq	r3, #0
 8007e2e:	b2db      	uxtb	r3, r3
        const bool tme[3] =
 8007e30:	737b      	strb	r3, [r7, #13]
            (BXCAN->TSR & CANARD_STM32_CAN_TSR_TME2) != 0
 8007e32:	4b44      	ldr	r3, [pc, #272]	; (8007f44 <canardSTM32Transmit+0x178>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	bf14      	ite	ne
 8007e3e:	2301      	movne	r3, #1
 8007e40:	2300      	moveq	r3, #0
 8007e42:	b2db      	uxtb	r3, r3
        const bool tme[3] =
 8007e44:	73bb      	strb	r3, [r7, #14]
        };

        for (uint8_t i = 0; i < 3; i++)
 8007e46:	2300      	movs	r3, #0
 8007e48:	75bb      	strb	r3, [r7, #22]
 8007e4a:	e025      	b.n	8007e98 <canardSTM32Transmit+0xcc>
        {
            if (tme[i])                                 // This TX mailbox is free, we can use it
 8007e4c:	7dbb      	ldrb	r3, [r7, #22]
 8007e4e:	f107 0218 	add.w	r2, r7, #24
 8007e52:	4413      	add	r3, r2
 8007e54:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <canardSTM32Transmit+0x96>
            {
                tx_mailbox = i;
 8007e5c:	7dbb      	ldrb	r3, [r7, #22]
 8007e5e:	75fb      	strb	r3, [r7, #23]
 8007e60:	e017      	b.n	8007e92 <canardSTM32Transmit+0xc6>
            }
            else                                        // This TX mailbox is pending, check for priority inversion
            {
                if (!isFramePriorityHigher(frame->id, convertFrameIDRegisterToCanard(BXCAN->TxMailbox[i].TIR)))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681c      	ldr	r4, [r3, #0]
 8007e66:	4a37      	ldr	r2, [pc, #220]	; (8007f44 <canardSTM32Transmit+0x178>)
 8007e68:	7dbb      	ldrb	r3, [r7, #22]
 8007e6a:	3318      	adds	r3, #24
 8007e6c:	011b      	lsls	r3, r3, #4
 8007e6e:	4413      	add	r3, r2
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff fe24 	bl	8007ac0 <convertFrameIDRegisterToCanard>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f7ff fda3 	bl	80079c8 <isFramePriorityHigher>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f083 0301 	eor.w	r3, r3, #1
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <canardSTM32Transmit+0xc6>
                {
                    // There's a mailbox whose priority is higher or equal the priority of the new frame.
                    return 0;                           // Priority inversion would occur! Reject transmission.
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e052      	b.n	8007f38 <canardSTM32Transmit+0x16c>
        for (uint8_t i = 0; i < 3; i++)
 8007e92:	7dbb      	ldrb	r3, [r7, #22]
 8007e94:	3301      	adds	r3, #1
 8007e96:	75bb      	strb	r3, [r7, #22]
 8007e98:	7dbb      	ldrb	r3, [r7, #22]
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d9d6      	bls.n	8007e4c <canardSTM32Transmit+0x80>
                }
            }
        }

        if (tx_mailbox == 0xFF)
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ea0:	2bff      	cmp	r3, #255	; 0xff
 8007ea2:	d108      	bne.n	8007eb6 <canardSTM32Transmit+0xea>
             * This situation is even less likely to cause any noticeable disruptions on the CAN bus. Despite that,
             * it is better to warn the developer about that during debugging, so we fire an assertion failure here.
             * It is perfectly safe to remove it.
             */
#if CANARD_STM32_DEBUG_INNER_PRIORITY_INVERSION
            CANARD_ASSERT(!"CAN PRIO INV");
 8007ea4:	4b29      	ldr	r3, [pc, #164]	; (8007f4c <canardSTM32Transmit+0x180>)
 8007ea6:	4a2a      	ldr	r2, [pc, #168]	; (8007f50 <canardSTM32Transmit+0x184>)
 8007ea8:	f240 115f 	movw	r1, #351	; 0x15f
 8007eac:	4829      	ldr	r0, [pc, #164]	; (8007f54 <canardSTM32Transmit+0x188>)
 8007eae:	f000 f8d9 	bl	8008064 <__assert_func>
            return 0;
        }
    }
    else                                                // All TX mailboxes are free, use first
    {
        tx_mailbox = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]
    }

    CANARD_ASSERT(tx_mailbox < 3);                      // Index check - the value must be correct here
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d906      	bls.n	8007eca <canardSTM32Transmit+0xfe>
 8007ebc:	4b26      	ldr	r3, [pc, #152]	; (8007f58 <canardSTM32Transmit+0x18c>)
 8007ebe:	4a24      	ldr	r2, [pc, #144]	; (8007f50 <canardSTM32Transmit+0x184>)
 8007ec0:	f240 1169 	movw	r1, #361	; 0x169
 8007ec4:	4823      	ldr	r0, [pc, #140]	; (8007f54 <canardSTM32Transmit+0x188>)
 8007ec6:	f000 f8cd 	bl	8008064 <__assert_func>

    /*
     * By this time we've proved that a priority inversion would not occur, and we've also found a free TX mailbox.
     * Therefore it is safe to enqueue the frame now.
     */
    volatile CanardSTM32TxMailboxType* const mb = &BXCAN->TxMailbox[tx_mailbox];
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	011b      	lsls	r3, r3, #4
 8007ece:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ed2:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8007ed6:	613b      	str	r3, [r7, #16]

    mb->TDTR = frame->data_len;                         // DLC equals data length except in CAN FD
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	7b1b      	ldrb	r3, [r3, #12]
 8007edc:	461a      	mov	r2, r3
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	605a      	str	r2, [r3, #4]

    mb->TDHR = (((uint32_t)frame->data[7]) << 24U) |
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	7adb      	ldrb	r3, [r3, #11]
 8007ee6:	061a      	lsls	r2, r3, #24
               (((uint32_t)frame->data[6]) << 16U) |
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	7a9b      	ldrb	r3, [r3, #10]
 8007eec:	041b      	lsls	r3, r3, #16
    mb->TDHR = (((uint32_t)frame->data[7]) << 24U) |
 8007eee:	431a      	orrs	r2, r3
               (((uint32_t)frame->data[5]) <<  8U) |
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	7a5b      	ldrb	r3, [r3, #9]
 8007ef4:	021b      	lsls	r3, r3, #8
               (((uint32_t)frame->data[6]) << 16U) |
 8007ef6:	4313      	orrs	r3, r2
               (((uint32_t)frame->data[4]) <<  0U);
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	7a12      	ldrb	r2, [r2, #8]
               (((uint32_t)frame->data[5]) <<  8U) |
 8007efc:	431a      	orrs	r2, r3
    mb->TDHR = (((uint32_t)frame->data[7]) << 24U) |
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	60da      	str	r2, [r3, #12]
    mb->TDLR = (((uint32_t)frame->data[3]) << 24U) |
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	79db      	ldrb	r3, [r3, #7]
 8007f06:	061a      	lsls	r2, r3, #24
               (((uint32_t)frame->data[2]) << 16U) |
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	799b      	ldrb	r3, [r3, #6]
 8007f0c:	041b      	lsls	r3, r3, #16
    mb->TDLR = (((uint32_t)frame->data[3]) << 24U) |
 8007f0e:	431a      	orrs	r2, r3
               (((uint32_t)frame->data[1]) <<  8U) |
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	795b      	ldrb	r3, [r3, #5]
 8007f14:	021b      	lsls	r3, r3, #8
               (((uint32_t)frame->data[2]) << 16U) |
 8007f16:	4313      	orrs	r3, r2
               (((uint32_t)frame->data[0]) <<  0U);
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	7912      	ldrb	r2, [r2, #4]
               (((uint32_t)frame->data[1]) <<  8U) |
 8007f1c:	431a      	orrs	r2, r3
    mb->TDLR = (((uint32_t)frame->data[3]) << 24U) |
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	609a      	str	r2, [r3, #8]

    mb->TIR = convertFrameIDCanardToRegister(frame->id) | CANARD_STM32_CAN_TIR_TXRQ;    // Go.
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7ff fda9 	bl	8007a7e <convertFrameIDCanardToRegister>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	f043 0201 	orr.w	r2, r3, #1
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	601a      	str	r2, [r3, #0]

    /*
     * The frame is now enqueued and pending transmission.
     */
    return 1;
 8007f36:	2301      	movs	r3, #1
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	371c      	adds	r7, #28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd90      	pop	{r4, r7, pc}
 8007f40:	fffffc15 	.word	0xfffffc15
 8007f44:	40006400 	.word	0x40006400
 8007f48:	08009798 	.word	0x08009798
 8007f4c:	080094e4 	.word	0x080094e4
 8007f50:	0800979c 	.word	0x0800979c
 8007f54:	0800946c 	.word	0x0800946c
 8007f58:	080094f4 	.word	0x080094f4

08007f5c <canardSTM32Receive>:


int16_t canardSTM32Receive(CanardCANFrame* const out_frame)
{
 8007f5c:	b590      	push	{r4, r7, lr}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
    if (out_frame == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d102      	bne.n	8007f70 <canardSTM32Receive+0x14>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8007f6a:	f06f 0301 	mvn.w	r3, #1
 8007f6e:	e06f      	b.n	8008050 <canardSTM32Receive+0xf4>
    };

    /*
     * This function must be polled periodically, so we use this opportunity to do it.
     */
    processErrorStatus();
 8007f70:	f7ff fdf2 	bl	8007b58 <processErrorStatus>

    /*
     * Reading the TX FIFO
     */
    for (uint_fast8_t i = 0; i < 2; i++)
 8007f74:	2300      	movs	r3, #0
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	e066      	b.n	8008048 <canardSTM32Receive+0xec>
    {
        volatile CanardSTM32RxMailboxType* const mb = &BXCAN->RxMailbox[i];
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	011a      	lsls	r2, r3, #4
 8007f7e:	4b36      	ldr	r3, [pc, #216]	; (8008058 <canardSTM32Receive+0xfc>)
 8007f80:	4413      	add	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]

        if (((*RFxR[i]) & CANARD_STM32_CAN_RFR_FMP_MASK) != 0)
 8007f84:	4a35      	ldr	r2, [pc, #212]	; (800805c <canardSTM32Receive+0x100>)
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d055      	beq.n	8008042 <canardSTM32Receive+0xe6>
        {
            if (*RFxR[i] & CANARD_STM32_CAN_RFR_FOVR)
 8007f96:	4a31      	ldr	r2, [pc, #196]	; (800805c <canardSTM32Receive+0x100>)
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0310 	and.w	r3, r3, #16
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d008      	beq.n	8007fba <canardSTM32Receive+0x5e>
            {
                g_stats.rx_overflow_count++;
 8007fa8:	4b2d      	ldr	r3, [pc, #180]	; (8008060 <canardSTM32Receive+0x104>)
 8007faa:	e9d3 1200 	ldrd	r1, r2, [r3]
 8007fae:	1c4b      	adds	r3, r1, #1
 8007fb0:	f142 0400 	adc.w	r4, r2, #0
 8007fb4:	4a2a      	ldr	r2, [pc, #168]	; (8008060 <canardSTM32Receive+0x104>)
 8007fb6:	e9c2 3400 	strd	r3, r4, [r2]
            }

            out_frame->id = convertFrameIDRegisterToCanard(mb->RIR);
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff fd7e 	bl	8007ac0 <convertFrameIDRegisterToCanard>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	601a      	str	r2, [r3, #0]

            out_frame->data_len = (uint8_t)(mb->RDTR & CANARD_STM32_CAN_RDTR_DLC_MASK);
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f003 030f 	and.w	r3, r3, #15
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	731a      	strb	r2, [r3, #12]

            // Caching to regular (non volatile) memory for faster reads
            const uint32_t rdlr = mb->RDLR;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	60fb      	str	r3, [r7, #12]
            const uint32_t rdhr = mb->RDHR;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	60bb      	str	r3, [r7, #8]

            out_frame->data[0] = (uint8_t)(0xFFU & (rdlr >>  0U));
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	711a      	strb	r2, [r3, #4]
            out_frame->data[1] = (uint8_t)(0xFFU & (rdlr >>  8U));
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	0a1b      	lsrs	r3, r3, #8
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	715a      	strb	r2, [r3, #5]
            out_frame->data[2] = (uint8_t)(0xFFU & (rdlr >> 16U));
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	0c1b      	lsrs	r3, r3, #16
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	719a      	strb	r2, [r3, #6]
            out_frame->data[3] = (uint8_t)(0xFFU & (rdlr >> 24U));
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	0e1b      	lsrs	r3, r3, #24
 8008006:	b2da      	uxtb	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	71da      	strb	r2, [r3, #7]
            out_frame->data[4] = (uint8_t)(0xFFU & (rdhr >>  0U));
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	b2da      	uxtb	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	721a      	strb	r2, [r3, #8]
            out_frame->data[5] = (uint8_t)(0xFFU & (rdhr >>  8U));
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	0a1b      	lsrs	r3, r3, #8
 8008018:	b2da      	uxtb	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	725a      	strb	r2, [r3, #9]
            out_frame->data[6] = (uint8_t)(0xFFU & (rdhr >> 16U));
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	0c1b      	lsrs	r3, r3, #16
 8008022:	b2da      	uxtb	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	729a      	strb	r2, [r3, #10]
            out_frame->data[7] = (uint8_t)(0xFFU & (rdhr >> 24U));
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	0e1b      	lsrs	r3, r3, #24
 800802c:	b2da      	uxtb	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	72da      	strb	r2, [r3, #11]

            // Release FIFO entry we just read
            *RFxR[i] = CANARD_STM32_CAN_RFR_RFOM | CANARD_STM32_CAN_RFR_FOVR | CANARD_STM32_CAN_RFR_FULL;
 8008032:	4a0a      	ldr	r2, [pc, #40]	; (800805c <canardSTM32Receive+0x100>)
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800803a:	2238      	movs	r2, #56	; 0x38
 800803c:	601a      	str	r2, [r3, #0]

            // Reading successful
            return 1;
 800803e:	2301      	movs	r3, #1
 8008040:	e006      	b.n	8008050 <canardSTM32Receive+0xf4>
    for (uint_fast8_t i = 0; i < 2; i++)
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	3301      	adds	r3, #1
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d995      	bls.n	8007f7a <canardSTM32Receive+0x1e>
        }
    }

    // No frames to read
    return 0;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	371c      	adds	r7, #28
 8008054:	46bd      	mov	sp, r7
 8008056:	bd90      	pop	{r4, r7, pc}
 8008058:	400065b0 	.word	0x400065b0
 800805c:	080097b0 	.word	0x080097b0
 8008060:	20001e60 	.word	0x20001e60

08008064 <__assert_func>:
 8008064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008066:	461c      	mov	r4, r3
 8008068:	4b09      	ldr	r3, [pc, #36]	; (8008090 <__assert_func+0x2c>)
 800806a:	4605      	mov	r5, r0
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68d8      	ldr	r0, [r3, #12]
 8008070:	b152      	cbz	r2, 8008088 <__assert_func+0x24>
 8008072:	4b08      	ldr	r3, [pc, #32]	; (8008094 <__assert_func+0x30>)
 8008074:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008078:	9100      	str	r1, [sp, #0]
 800807a:	462b      	mov	r3, r5
 800807c:	4622      	mov	r2, r4
 800807e:	4906      	ldr	r1, [pc, #24]	; (8008098 <__assert_func+0x34>)
 8008080:	f000 f814 	bl	80080ac <fiprintf>
 8008084:	f000 fbf2 	bl	800886c <abort>
 8008088:	4b04      	ldr	r3, [pc, #16]	; (800809c <__assert_func+0x38>)
 800808a:	461a      	mov	r2, r3
 800808c:	e7f2      	b.n	8008074 <__assert_func+0x10>
 800808e:	bf00      	nop
 8008090:	20000088 	.word	0x20000088
 8008094:	080097b8 	.word	0x080097b8
 8008098:	080097c5 	.word	0x080097c5
 800809c:	080097f3 	.word	0x080097f3

080080a0 <__errno>:
 80080a0:	4b01      	ldr	r3, [pc, #4]	; (80080a8 <__errno+0x8>)
 80080a2:	6818      	ldr	r0, [r3, #0]
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	20000088 	.word	0x20000088

080080ac <fiprintf>:
 80080ac:	b40e      	push	{r1, r2, r3}
 80080ae:	b503      	push	{r0, r1, lr}
 80080b0:	4601      	mov	r1, r0
 80080b2:	ab03      	add	r3, sp, #12
 80080b4:	4805      	ldr	r0, [pc, #20]	; (80080cc <fiprintf+0x20>)
 80080b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ba:	6800      	ldr	r0, [r0, #0]
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	f000 f865 	bl	800818c <_vfiprintf_r>
 80080c2:	b002      	add	sp, #8
 80080c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080c8:	b003      	add	sp, #12
 80080ca:	4770      	bx	lr
 80080cc:	20000088 	.word	0x20000088

080080d0 <__libc_init_array>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	2500      	movs	r5, #0
 80080d4:	4e0c      	ldr	r6, [pc, #48]	; (8008108 <__libc_init_array+0x38>)
 80080d6:	4c0d      	ldr	r4, [pc, #52]	; (800810c <__libc_init_array+0x3c>)
 80080d8:	1ba4      	subs	r4, r4, r6
 80080da:	10a4      	asrs	r4, r4, #2
 80080dc:	42a5      	cmp	r5, r4
 80080de:	d109      	bne.n	80080f4 <__libc_init_array+0x24>
 80080e0:	f000 ff60 	bl	8008fa4 <_init>
 80080e4:	2500      	movs	r5, #0
 80080e6:	4e0a      	ldr	r6, [pc, #40]	; (8008110 <__libc_init_array+0x40>)
 80080e8:	4c0a      	ldr	r4, [pc, #40]	; (8008114 <__libc_init_array+0x44>)
 80080ea:	1ba4      	subs	r4, r4, r6
 80080ec:	10a4      	asrs	r4, r4, #2
 80080ee:	42a5      	cmp	r5, r4
 80080f0:	d105      	bne.n	80080fe <__libc_init_array+0x2e>
 80080f2:	bd70      	pop	{r4, r5, r6, pc}
 80080f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080f8:	4798      	blx	r3
 80080fa:	3501      	adds	r5, #1
 80080fc:	e7ee      	b.n	80080dc <__libc_init_array+0xc>
 80080fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008102:	4798      	blx	r3
 8008104:	3501      	adds	r5, #1
 8008106:	e7f2      	b.n	80080ee <__libc_init_array+0x1e>
 8008108:	0800988c 	.word	0x0800988c
 800810c:	0800988c 	.word	0x0800988c
 8008110:	0800988c 	.word	0x0800988c
 8008114:	08009890 	.word	0x08009890

08008118 <memcpy>:
 8008118:	b510      	push	{r4, lr}
 800811a:	1e43      	subs	r3, r0, #1
 800811c:	440a      	add	r2, r1
 800811e:	4291      	cmp	r1, r2
 8008120:	d100      	bne.n	8008124 <memcpy+0xc>
 8008122:	bd10      	pop	{r4, pc}
 8008124:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008128:	f803 4f01 	strb.w	r4, [r3, #1]!
 800812c:	e7f7      	b.n	800811e <memcpy+0x6>

0800812e <memset>:
 800812e:	4603      	mov	r3, r0
 8008130:	4402      	add	r2, r0
 8008132:	4293      	cmp	r3, r2
 8008134:	d100      	bne.n	8008138 <memset+0xa>
 8008136:	4770      	bx	lr
 8008138:	f803 1b01 	strb.w	r1, [r3], #1
 800813c:	e7f9      	b.n	8008132 <memset+0x4>

0800813e <__sfputc_r>:
 800813e:	6893      	ldr	r3, [r2, #8]
 8008140:	b410      	push	{r4}
 8008142:	3b01      	subs	r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	6093      	str	r3, [r2, #8]
 8008148:	da07      	bge.n	800815a <__sfputc_r+0x1c>
 800814a:	6994      	ldr	r4, [r2, #24]
 800814c:	42a3      	cmp	r3, r4
 800814e:	db01      	blt.n	8008154 <__sfputc_r+0x16>
 8008150:	290a      	cmp	r1, #10
 8008152:	d102      	bne.n	800815a <__sfputc_r+0x1c>
 8008154:	bc10      	pop	{r4}
 8008156:	f000 bac9 	b.w	80086ec <__swbuf_r>
 800815a:	6813      	ldr	r3, [r2, #0]
 800815c:	1c58      	adds	r0, r3, #1
 800815e:	6010      	str	r0, [r2, #0]
 8008160:	7019      	strb	r1, [r3, #0]
 8008162:	4608      	mov	r0, r1
 8008164:	bc10      	pop	{r4}
 8008166:	4770      	bx	lr

08008168 <__sfputs_r>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	4606      	mov	r6, r0
 800816c:	460f      	mov	r7, r1
 800816e:	4614      	mov	r4, r2
 8008170:	18d5      	adds	r5, r2, r3
 8008172:	42ac      	cmp	r4, r5
 8008174:	d101      	bne.n	800817a <__sfputs_r+0x12>
 8008176:	2000      	movs	r0, #0
 8008178:	e007      	b.n	800818a <__sfputs_r+0x22>
 800817a:	463a      	mov	r2, r7
 800817c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008180:	4630      	mov	r0, r6
 8008182:	f7ff ffdc 	bl	800813e <__sfputc_r>
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	d1f3      	bne.n	8008172 <__sfputs_r+0xa>
 800818a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800818c <_vfiprintf_r>:
 800818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008190:	460c      	mov	r4, r1
 8008192:	b09d      	sub	sp, #116	; 0x74
 8008194:	4617      	mov	r7, r2
 8008196:	461d      	mov	r5, r3
 8008198:	4606      	mov	r6, r0
 800819a:	b118      	cbz	r0, 80081a4 <_vfiprintf_r+0x18>
 800819c:	6983      	ldr	r3, [r0, #24]
 800819e:	b90b      	cbnz	r3, 80081a4 <_vfiprintf_r+0x18>
 80081a0:	f000 fc5c 	bl	8008a5c <__sinit>
 80081a4:	4b7c      	ldr	r3, [pc, #496]	; (8008398 <_vfiprintf_r+0x20c>)
 80081a6:	429c      	cmp	r4, r3
 80081a8:	d158      	bne.n	800825c <_vfiprintf_r+0xd0>
 80081aa:	6874      	ldr	r4, [r6, #4]
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	0718      	lsls	r0, r3, #28
 80081b0:	d55e      	bpl.n	8008270 <_vfiprintf_r+0xe4>
 80081b2:	6923      	ldr	r3, [r4, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d05b      	beq.n	8008270 <_vfiprintf_r+0xe4>
 80081b8:	2300      	movs	r3, #0
 80081ba:	9309      	str	r3, [sp, #36]	; 0x24
 80081bc:	2320      	movs	r3, #32
 80081be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081c2:	2330      	movs	r3, #48	; 0x30
 80081c4:	f04f 0b01 	mov.w	fp, #1
 80081c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081cc:	9503      	str	r5, [sp, #12]
 80081ce:	46b8      	mov	r8, r7
 80081d0:	4645      	mov	r5, r8
 80081d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081d6:	b10b      	cbz	r3, 80081dc <_vfiprintf_r+0x50>
 80081d8:	2b25      	cmp	r3, #37	; 0x25
 80081da:	d154      	bne.n	8008286 <_vfiprintf_r+0xfa>
 80081dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80081e0:	d00b      	beq.n	80081fa <_vfiprintf_r+0x6e>
 80081e2:	4653      	mov	r3, sl
 80081e4:	463a      	mov	r2, r7
 80081e6:	4621      	mov	r1, r4
 80081e8:	4630      	mov	r0, r6
 80081ea:	f7ff ffbd 	bl	8008168 <__sfputs_r>
 80081ee:	3001      	adds	r0, #1
 80081f0:	f000 80c2 	beq.w	8008378 <_vfiprintf_r+0x1ec>
 80081f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f6:	4453      	add	r3, sl
 80081f8:	9309      	str	r3, [sp, #36]	; 0x24
 80081fa:	f898 3000 	ldrb.w	r3, [r8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 80ba 	beq.w	8008378 <_vfiprintf_r+0x1ec>
 8008204:	2300      	movs	r3, #0
 8008206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800820a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800820e:	9304      	str	r3, [sp, #16]
 8008210:	9307      	str	r3, [sp, #28]
 8008212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008216:	931a      	str	r3, [sp, #104]	; 0x68
 8008218:	46a8      	mov	r8, r5
 800821a:	2205      	movs	r2, #5
 800821c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008220:	485e      	ldr	r0, [pc, #376]	; (800839c <_vfiprintf_r+0x210>)
 8008222:	f000 fd09 	bl	8008c38 <memchr>
 8008226:	9b04      	ldr	r3, [sp, #16]
 8008228:	bb78      	cbnz	r0, 800828a <_vfiprintf_r+0xfe>
 800822a:	06d9      	lsls	r1, r3, #27
 800822c:	bf44      	itt	mi
 800822e:	2220      	movmi	r2, #32
 8008230:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008234:	071a      	lsls	r2, r3, #28
 8008236:	bf44      	itt	mi
 8008238:	222b      	movmi	r2, #43	; 0x2b
 800823a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800823e:	782a      	ldrb	r2, [r5, #0]
 8008240:	2a2a      	cmp	r2, #42	; 0x2a
 8008242:	d02a      	beq.n	800829a <_vfiprintf_r+0x10e>
 8008244:	46a8      	mov	r8, r5
 8008246:	2000      	movs	r0, #0
 8008248:	250a      	movs	r5, #10
 800824a:	9a07      	ldr	r2, [sp, #28]
 800824c:	4641      	mov	r1, r8
 800824e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008252:	3b30      	subs	r3, #48	; 0x30
 8008254:	2b09      	cmp	r3, #9
 8008256:	d969      	bls.n	800832c <_vfiprintf_r+0x1a0>
 8008258:	b360      	cbz	r0, 80082b4 <_vfiprintf_r+0x128>
 800825a:	e024      	b.n	80082a6 <_vfiprintf_r+0x11a>
 800825c:	4b50      	ldr	r3, [pc, #320]	; (80083a0 <_vfiprintf_r+0x214>)
 800825e:	429c      	cmp	r4, r3
 8008260:	d101      	bne.n	8008266 <_vfiprintf_r+0xda>
 8008262:	68b4      	ldr	r4, [r6, #8]
 8008264:	e7a2      	b.n	80081ac <_vfiprintf_r+0x20>
 8008266:	4b4f      	ldr	r3, [pc, #316]	; (80083a4 <_vfiprintf_r+0x218>)
 8008268:	429c      	cmp	r4, r3
 800826a:	bf08      	it	eq
 800826c:	68f4      	ldreq	r4, [r6, #12]
 800826e:	e79d      	b.n	80081ac <_vfiprintf_r+0x20>
 8008270:	4621      	mov	r1, r4
 8008272:	4630      	mov	r0, r6
 8008274:	f000 fa8c 	bl	8008790 <__swsetup_r>
 8008278:	2800      	cmp	r0, #0
 800827a:	d09d      	beq.n	80081b8 <_vfiprintf_r+0x2c>
 800827c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008280:	b01d      	add	sp, #116	; 0x74
 8008282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008286:	46a8      	mov	r8, r5
 8008288:	e7a2      	b.n	80081d0 <_vfiprintf_r+0x44>
 800828a:	4a44      	ldr	r2, [pc, #272]	; (800839c <_vfiprintf_r+0x210>)
 800828c:	4645      	mov	r5, r8
 800828e:	1a80      	subs	r0, r0, r2
 8008290:	fa0b f000 	lsl.w	r0, fp, r0
 8008294:	4318      	orrs	r0, r3
 8008296:	9004      	str	r0, [sp, #16]
 8008298:	e7be      	b.n	8008218 <_vfiprintf_r+0x8c>
 800829a:	9a03      	ldr	r2, [sp, #12]
 800829c:	1d11      	adds	r1, r2, #4
 800829e:	6812      	ldr	r2, [r2, #0]
 80082a0:	9103      	str	r1, [sp, #12]
 80082a2:	2a00      	cmp	r2, #0
 80082a4:	db01      	blt.n	80082aa <_vfiprintf_r+0x11e>
 80082a6:	9207      	str	r2, [sp, #28]
 80082a8:	e004      	b.n	80082b4 <_vfiprintf_r+0x128>
 80082aa:	4252      	negs	r2, r2
 80082ac:	f043 0302 	orr.w	r3, r3, #2
 80082b0:	9207      	str	r2, [sp, #28]
 80082b2:	9304      	str	r3, [sp, #16]
 80082b4:	f898 3000 	ldrb.w	r3, [r8]
 80082b8:	2b2e      	cmp	r3, #46	; 0x2e
 80082ba:	d10e      	bne.n	80082da <_vfiprintf_r+0x14e>
 80082bc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80082c0:	2b2a      	cmp	r3, #42	; 0x2a
 80082c2:	d138      	bne.n	8008336 <_vfiprintf_r+0x1aa>
 80082c4:	9b03      	ldr	r3, [sp, #12]
 80082c6:	f108 0802 	add.w	r8, r8, #2
 80082ca:	1d1a      	adds	r2, r3, #4
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	9203      	str	r2, [sp, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	bfb8      	it	lt
 80082d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80082d8:	9305      	str	r3, [sp, #20]
 80082da:	4d33      	ldr	r5, [pc, #204]	; (80083a8 <_vfiprintf_r+0x21c>)
 80082dc:	2203      	movs	r2, #3
 80082de:	f898 1000 	ldrb.w	r1, [r8]
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 fca8 	bl	8008c38 <memchr>
 80082e8:	b140      	cbz	r0, 80082fc <_vfiprintf_r+0x170>
 80082ea:	2340      	movs	r3, #64	; 0x40
 80082ec:	1b40      	subs	r0, r0, r5
 80082ee:	fa03 f000 	lsl.w	r0, r3, r0
 80082f2:	9b04      	ldr	r3, [sp, #16]
 80082f4:	f108 0801 	add.w	r8, r8, #1
 80082f8:	4303      	orrs	r3, r0
 80082fa:	9304      	str	r3, [sp, #16]
 80082fc:	f898 1000 	ldrb.w	r1, [r8]
 8008300:	2206      	movs	r2, #6
 8008302:	482a      	ldr	r0, [pc, #168]	; (80083ac <_vfiprintf_r+0x220>)
 8008304:	f108 0701 	add.w	r7, r8, #1
 8008308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800830c:	f000 fc94 	bl	8008c38 <memchr>
 8008310:	2800      	cmp	r0, #0
 8008312:	d037      	beq.n	8008384 <_vfiprintf_r+0x1f8>
 8008314:	4b26      	ldr	r3, [pc, #152]	; (80083b0 <_vfiprintf_r+0x224>)
 8008316:	bb1b      	cbnz	r3, 8008360 <_vfiprintf_r+0x1d4>
 8008318:	9b03      	ldr	r3, [sp, #12]
 800831a:	3307      	adds	r3, #7
 800831c:	f023 0307 	bic.w	r3, r3, #7
 8008320:	3308      	adds	r3, #8
 8008322:	9303      	str	r3, [sp, #12]
 8008324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008326:	444b      	add	r3, r9
 8008328:	9309      	str	r3, [sp, #36]	; 0x24
 800832a:	e750      	b.n	80081ce <_vfiprintf_r+0x42>
 800832c:	fb05 3202 	mla	r2, r5, r2, r3
 8008330:	2001      	movs	r0, #1
 8008332:	4688      	mov	r8, r1
 8008334:	e78a      	b.n	800824c <_vfiprintf_r+0xc0>
 8008336:	2300      	movs	r3, #0
 8008338:	250a      	movs	r5, #10
 800833a:	4619      	mov	r1, r3
 800833c:	f108 0801 	add.w	r8, r8, #1
 8008340:	9305      	str	r3, [sp, #20]
 8008342:	4640      	mov	r0, r8
 8008344:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008348:	3a30      	subs	r2, #48	; 0x30
 800834a:	2a09      	cmp	r2, #9
 800834c:	d903      	bls.n	8008356 <_vfiprintf_r+0x1ca>
 800834e:	2b00      	cmp	r3, #0
 8008350:	d0c3      	beq.n	80082da <_vfiprintf_r+0x14e>
 8008352:	9105      	str	r1, [sp, #20]
 8008354:	e7c1      	b.n	80082da <_vfiprintf_r+0x14e>
 8008356:	fb05 2101 	mla	r1, r5, r1, r2
 800835a:	2301      	movs	r3, #1
 800835c:	4680      	mov	r8, r0
 800835e:	e7f0      	b.n	8008342 <_vfiprintf_r+0x1b6>
 8008360:	ab03      	add	r3, sp, #12
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	4622      	mov	r2, r4
 8008366:	4b13      	ldr	r3, [pc, #76]	; (80083b4 <_vfiprintf_r+0x228>)
 8008368:	a904      	add	r1, sp, #16
 800836a:	4630      	mov	r0, r6
 800836c:	f3af 8000 	nop.w
 8008370:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008374:	4681      	mov	r9, r0
 8008376:	d1d5      	bne.n	8008324 <_vfiprintf_r+0x198>
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	065b      	lsls	r3, r3, #25
 800837c:	f53f af7e 	bmi.w	800827c <_vfiprintf_r+0xf0>
 8008380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008382:	e77d      	b.n	8008280 <_vfiprintf_r+0xf4>
 8008384:	ab03      	add	r3, sp, #12
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	4622      	mov	r2, r4
 800838a:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <_vfiprintf_r+0x228>)
 800838c:	a904      	add	r1, sp, #16
 800838e:	4630      	mov	r0, r6
 8008390:	f000 f888 	bl	80084a4 <_printf_i>
 8008394:	e7ec      	b.n	8008370 <_vfiprintf_r+0x1e4>
 8008396:	bf00      	nop
 8008398:	0800984c 	.word	0x0800984c
 800839c:	080097f8 	.word	0x080097f8
 80083a0:	0800986c 	.word	0x0800986c
 80083a4:	0800982c 	.word	0x0800982c
 80083a8:	080097fe 	.word	0x080097fe
 80083ac:	08009802 	.word	0x08009802
 80083b0:	00000000 	.word	0x00000000
 80083b4:	08008169 	.word	0x08008169

080083b8 <_printf_common>:
 80083b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083bc:	4691      	mov	r9, r2
 80083be:	461f      	mov	r7, r3
 80083c0:	688a      	ldr	r2, [r1, #8]
 80083c2:	690b      	ldr	r3, [r1, #16]
 80083c4:	4606      	mov	r6, r0
 80083c6:	4293      	cmp	r3, r2
 80083c8:	bfb8      	it	lt
 80083ca:	4613      	movlt	r3, r2
 80083cc:	f8c9 3000 	str.w	r3, [r9]
 80083d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083d4:	460c      	mov	r4, r1
 80083d6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083da:	b112      	cbz	r2, 80083e2 <_printf_common+0x2a>
 80083dc:	3301      	adds	r3, #1
 80083de:	f8c9 3000 	str.w	r3, [r9]
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	0699      	lsls	r1, r3, #26
 80083e6:	bf42      	ittt	mi
 80083e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80083ec:	3302      	addmi	r3, #2
 80083ee:	f8c9 3000 	strmi.w	r3, [r9]
 80083f2:	6825      	ldr	r5, [r4, #0]
 80083f4:	f015 0506 	ands.w	r5, r5, #6
 80083f8:	d107      	bne.n	800840a <_printf_common+0x52>
 80083fa:	f104 0a19 	add.w	sl, r4, #25
 80083fe:	68e3      	ldr	r3, [r4, #12]
 8008400:	f8d9 2000 	ldr.w	r2, [r9]
 8008404:	1a9b      	subs	r3, r3, r2
 8008406:	42ab      	cmp	r3, r5
 8008408:	dc29      	bgt.n	800845e <_printf_common+0xa6>
 800840a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800840e:	6822      	ldr	r2, [r4, #0]
 8008410:	3300      	adds	r3, #0
 8008412:	bf18      	it	ne
 8008414:	2301      	movne	r3, #1
 8008416:	0692      	lsls	r2, r2, #26
 8008418:	d42e      	bmi.n	8008478 <_printf_common+0xc0>
 800841a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800841e:	4639      	mov	r1, r7
 8008420:	4630      	mov	r0, r6
 8008422:	47c0      	blx	r8
 8008424:	3001      	adds	r0, #1
 8008426:	d021      	beq.n	800846c <_printf_common+0xb4>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	68e5      	ldr	r5, [r4, #12]
 800842c:	f003 0306 	and.w	r3, r3, #6
 8008430:	2b04      	cmp	r3, #4
 8008432:	bf18      	it	ne
 8008434:	2500      	movne	r5, #0
 8008436:	f8d9 2000 	ldr.w	r2, [r9]
 800843a:	f04f 0900 	mov.w	r9, #0
 800843e:	bf08      	it	eq
 8008440:	1aad      	subeq	r5, r5, r2
 8008442:	68a3      	ldr	r3, [r4, #8]
 8008444:	6922      	ldr	r2, [r4, #16]
 8008446:	bf08      	it	eq
 8008448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800844c:	4293      	cmp	r3, r2
 800844e:	bfc4      	itt	gt
 8008450:	1a9b      	subgt	r3, r3, r2
 8008452:	18ed      	addgt	r5, r5, r3
 8008454:	341a      	adds	r4, #26
 8008456:	454d      	cmp	r5, r9
 8008458:	d11a      	bne.n	8008490 <_printf_common+0xd8>
 800845a:	2000      	movs	r0, #0
 800845c:	e008      	b.n	8008470 <_printf_common+0xb8>
 800845e:	2301      	movs	r3, #1
 8008460:	4652      	mov	r2, sl
 8008462:	4639      	mov	r1, r7
 8008464:	4630      	mov	r0, r6
 8008466:	47c0      	blx	r8
 8008468:	3001      	adds	r0, #1
 800846a:	d103      	bne.n	8008474 <_printf_common+0xbc>
 800846c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008474:	3501      	adds	r5, #1
 8008476:	e7c2      	b.n	80083fe <_printf_common+0x46>
 8008478:	2030      	movs	r0, #48	; 0x30
 800847a:	18e1      	adds	r1, r4, r3
 800847c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008486:	4422      	add	r2, r4
 8008488:	3302      	adds	r3, #2
 800848a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800848e:	e7c4      	b.n	800841a <_printf_common+0x62>
 8008490:	2301      	movs	r3, #1
 8008492:	4622      	mov	r2, r4
 8008494:	4639      	mov	r1, r7
 8008496:	4630      	mov	r0, r6
 8008498:	47c0      	blx	r8
 800849a:	3001      	adds	r0, #1
 800849c:	d0e6      	beq.n	800846c <_printf_common+0xb4>
 800849e:	f109 0901 	add.w	r9, r9, #1
 80084a2:	e7d8      	b.n	8008456 <_printf_common+0x9e>

080084a4 <_printf_i>:
 80084a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80084ac:	460c      	mov	r4, r1
 80084ae:	7e09      	ldrb	r1, [r1, #24]
 80084b0:	b085      	sub	sp, #20
 80084b2:	296e      	cmp	r1, #110	; 0x6e
 80084b4:	4617      	mov	r7, r2
 80084b6:	4606      	mov	r6, r0
 80084b8:	4698      	mov	r8, r3
 80084ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084bc:	f000 80b3 	beq.w	8008626 <_printf_i+0x182>
 80084c0:	d822      	bhi.n	8008508 <_printf_i+0x64>
 80084c2:	2963      	cmp	r1, #99	; 0x63
 80084c4:	d036      	beq.n	8008534 <_printf_i+0x90>
 80084c6:	d80a      	bhi.n	80084de <_printf_i+0x3a>
 80084c8:	2900      	cmp	r1, #0
 80084ca:	f000 80b9 	beq.w	8008640 <_printf_i+0x19c>
 80084ce:	2958      	cmp	r1, #88	; 0x58
 80084d0:	f000 8083 	beq.w	80085da <_printf_i+0x136>
 80084d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80084dc:	e032      	b.n	8008544 <_printf_i+0xa0>
 80084de:	2964      	cmp	r1, #100	; 0x64
 80084e0:	d001      	beq.n	80084e6 <_printf_i+0x42>
 80084e2:	2969      	cmp	r1, #105	; 0x69
 80084e4:	d1f6      	bne.n	80084d4 <_printf_i+0x30>
 80084e6:	6820      	ldr	r0, [r4, #0]
 80084e8:	6813      	ldr	r3, [r2, #0]
 80084ea:	0605      	lsls	r5, r0, #24
 80084ec:	f103 0104 	add.w	r1, r3, #4
 80084f0:	d52a      	bpl.n	8008548 <_printf_i+0xa4>
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6011      	str	r1, [r2, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	da03      	bge.n	8008502 <_printf_i+0x5e>
 80084fa:	222d      	movs	r2, #45	; 0x2d
 80084fc:	425b      	negs	r3, r3
 80084fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008502:	486f      	ldr	r0, [pc, #444]	; (80086c0 <_printf_i+0x21c>)
 8008504:	220a      	movs	r2, #10
 8008506:	e039      	b.n	800857c <_printf_i+0xd8>
 8008508:	2973      	cmp	r1, #115	; 0x73
 800850a:	f000 809d 	beq.w	8008648 <_printf_i+0x1a4>
 800850e:	d808      	bhi.n	8008522 <_printf_i+0x7e>
 8008510:	296f      	cmp	r1, #111	; 0x6f
 8008512:	d020      	beq.n	8008556 <_printf_i+0xb2>
 8008514:	2970      	cmp	r1, #112	; 0x70
 8008516:	d1dd      	bne.n	80084d4 <_printf_i+0x30>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	f043 0320 	orr.w	r3, r3, #32
 800851e:	6023      	str	r3, [r4, #0]
 8008520:	e003      	b.n	800852a <_printf_i+0x86>
 8008522:	2975      	cmp	r1, #117	; 0x75
 8008524:	d017      	beq.n	8008556 <_printf_i+0xb2>
 8008526:	2978      	cmp	r1, #120	; 0x78
 8008528:	d1d4      	bne.n	80084d4 <_printf_i+0x30>
 800852a:	2378      	movs	r3, #120	; 0x78
 800852c:	4865      	ldr	r0, [pc, #404]	; (80086c4 <_printf_i+0x220>)
 800852e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008532:	e055      	b.n	80085e0 <_printf_i+0x13c>
 8008534:	6813      	ldr	r3, [r2, #0]
 8008536:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800853a:	1d19      	adds	r1, r3, #4
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6011      	str	r1, [r2, #0]
 8008540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008544:	2301      	movs	r3, #1
 8008546:	e08c      	b.n	8008662 <_printf_i+0x1be>
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800854e:	6011      	str	r1, [r2, #0]
 8008550:	bf18      	it	ne
 8008552:	b21b      	sxthne	r3, r3
 8008554:	e7cf      	b.n	80084f6 <_printf_i+0x52>
 8008556:	6813      	ldr	r3, [r2, #0]
 8008558:	6825      	ldr	r5, [r4, #0]
 800855a:	1d18      	adds	r0, r3, #4
 800855c:	6010      	str	r0, [r2, #0]
 800855e:	0628      	lsls	r0, r5, #24
 8008560:	d501      	bpl.n	8008566 <_printf_i+0xc2>
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	e002      	b.n	800856c <_printf_i+0xc8>
 8008566:	0668      	lsls	r0, r5, #25
 8008568:	d5fb      	bpl.n	8008562 <_printf_i+0xbe>
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	296f      	cmp	r1, #111	; 0x6f
 800856e:	bf14      	ite	ne
 8008570:	220a      	movne	r2, #10
 8008572:	2208      	moveq	r2, #8
 8008574:	4852      	ldr	r0, [pc, #328]	; (80086c0 <_printf_i+0x21c>)
 8008576:	2100      	movs	r1, #0
 8008578:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800857c:	6865      	ldr	r5, [r4, #4]
 800857e:	2d00      	cmp	r5, #0
 8008580:	60a5      	str	r5, [r4, #8]
 8008582:	f2c0 8095 	blt.w	80086b0 <_printf_i+0x20c>
 8008586:	6821      	ldr	r1, [r4, #0]
 8008588:	f021 0104 	bic.w	r1, r1, #4
 800858c:	6021      	str	r1, [r4, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d13d      	bne.n	800860e <_printf_i+0x16a>
 8008592:	2d00      	cmp	r5, #0
 8008594:	f040 808e 	bne.w	80086b4 <_printf_i+0x210>
 8008598:	4665      	mov	r5, ip
 800859a:	2a08      	cmp	r2, #8
 800859c:	d10b      	bne.n	80085b6 <_printf_i+0x112>
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	07db      	lsls	r3, r3, #31
 80085a2:	d508      	bpl.n	80085b6 <_printf_i+0x112>
 80085a4:	6923      	ldr	r3, [r4, #16]
 80085a6:	6862      	ldr	r2, [r4, #4]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	bfde      	ittt	le
 80085ac:	2330      	movle	r3, #48	; 0x30
 80085ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80085b6:	ebac 0305 	sub.w	r3, ip, r5
 80085ba:	6123      	str	r3, [r4, #16]
 80085bc:	f8cd 8000 	str.w	r8, [sp]
 80085c0:	463b      	mov	r3, r7
 80085c2:	aa03      	add	r2, sp, #12
 80085c4:	4621      	mov	r1, r4
 80085c6:	4630      	mov	r0, r6
 80085c8:	f7ff fef6 	bl	80083b8 <_printf_common>
 80085cc:	3001      	adds	r0, #1
 80085ce:	d14d      	bne.n	800866c <_printf_i+0x1c8>
 80085d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085d4:	b005      	add	sp, #20
 80085d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085da:	4839      	ldr	r0, [pc, #228]	; (80086c0 <_printf_i+0x21c>)
 80085dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80085e0:	6813      	ldr	r3, [r2, #0]
 80085e2:	6821      	ldr	r1, [r4, #0]
 80085e4:	1d1d      	adds	r5, r3, #4
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6015      	str	r5, [r2, #0]
 80085ea:	060a      	lsls	r2, r1, #24
 80085ec:	d50b      	bpl.n	8008606 <_printf_i+0x162>
 80085ee:	07ca      	lsls	r2, r1, #31
 80085f0:	bf44      	itt	mi
 80085f2:	f041 0120 	orrmi.w	r1, r1, #32
 80085f6:	6021      	strmi	r1, [r4, #0]
 80085f8:	b91b      	cbnz	r3, 8008602 <_printf_i+0x15e>
 80085fa:	6822      	ldr	r2, [r4, #0]
 80085fc:	f022 0220 	bic.w	r2, r2, #32
 8008600:	6022      	str	r2, [r4, #0]
 8008602:	2210      	movs	r2, #16
 8008604:	e7b7      	b.n	8008576 <_printf_i+0xd2>
 8008606:	064d      	lsls	r5, r1, #25
 8008608:	bf48      	it	mi
 800860a:	b29b      	uxthmi	r3, r3
 800860c:	e7ef      	b.n	80085ee <_printf_i+0x14a>
 800860e:	4665      	mov	r5, ip
 8008610:	fbb3 f1f2 	udiv	r1, r3, r2
 8008614:	fb02 3311 	mls	r3, r2, r1, r3
 8008618:	5cc3      	ldrb	r3, [r0, r3]
 800861a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800861e:	460b      	mov	r3, r1
 8008620:	2900      	cmp	r1, #0
 8008622:	d1f5      	bne.n	8008610 <_printf_i+0x16c>
 8008624:	e7b9      	b.n	800859a <_printf_i+0xf6>
 8008626:	6813      	ldr	r3, [r2, #0]
 8008628:	6825      	ldr	r5, [r4, #0]
 800862a:	1d18      	adds	r0, r3, #4
 800862c:	6961      	ldr	r1, [r4, #20]
 800862e:	6010      	str	r0, [r2, #0]
 8008630:	0628      	lsls	r0, r5, #24
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	d501      	bpl.n	800863a <_printf_i+0x196>
 8008636:	6019      	str	r1, [r3, #0]
 8008638:	e002      	b.n	8008640 <_printf_i+0x19c>
 800863a:	066a      	lsls	r2, r5, #25
 800863c:	d5fb      	bpl.n	8008636 <_printf_i+0x192>
 800863e:	8019      	strh	r1, [r3, #0]
 8008640:	2300      	movs	r3, #0
 8008642:	4665      	mov	r5, ip
 8008644:	6123      	str	r3, [r4, #16]
 8008646:	e7b9      	b.n	80085bc <_printf_i+0x118>
 8008648:	6813      	ldr	r3, [r2, #0]
 800864a:	1d19      	adds	r1, r3, #4
 800864c:	6011      	str	r1, [r2, #0]
 800864e:	681d      	ldr	r5, [r3, #0]
 8008650:	6862      	ldr	r2, [r4, #4]
 8008652:	2100      	movs	r1, #0
 8008654:	4628      	mov	r0, r5
 8008656:	f000 faef 	bl	8008c38 <memchr>
 800865a:	b108      	cbz	r0, 8008660 <_printf_i+0x1bc>
 800865c:	1b40      	subs	r0, r0, r5
 800865e:	6060      	str	r0, [r4, #4]
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	6123      	str	r3, [r4, #16]
 8008664:	2300      	movs	r3, #0
 8008666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800866a:	e7a7      	b.n	80085bc <_printf_i+0x118>
 800866c:	6923      	ldr	r3, [r4, #16]
 800866e:	462a      	mov	r2, r5
 8008670:	4639      	mov	r1, r7
 8008672:	4630      	mov	r0, r6
 8008674:	47c0      	blx	r8
 8008676:	3001      	adds	r0, #1
 8008678:	d0aa      	beq.n	80085d0 <_printf_i+0x12c>
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	079b      	lsls	r3, r3, #30
 800867e:	d413      	bmi.n	80086a8 <_printf_i+0x204>
 8008680:	68e0      	ldr	r0, [r4, #12]
 8008682:	9b03      	ldr	r3, [sp, #12]
 8008684:	4298      	cmp	r0, r3
 8008686:	bfb8      	it	lt
 8008688:	4618      	movlt	r0, r3
 800868a:	e7a3      	b.n	80085d4 <_printf_i+0x130>
 800868c:	2301      	movs	r3, #1
 800868e:	464a      	mov	r2, r9
 8008690:	4639      	mov	r1, r7
 8008692:	4630      	mov	r0, r6
 8008694:	47c0      	blx	r8
 8008696:	3001      	adds	r0, #1
 8008698:	d09a      	beq.n	80085d0 <_printf_i+0x12c>
 800869a:	3501      	adds	r5, #1
 800869c:	68e3      	ldr	r3, [r4, #12]
 800869e:	9a03      	ldr	r2, [sp, #12]
 80086a0:	1a9b      	subs	r3, r3, r2
 80086a2:	42ab      	cmp	r3, r5
 80086a4:	dcf2      	bgt.n	800868c <_printf_i+0x1e8>
 80086a6:	e7eb      	b.n	8008680 <_printf_i+0x1dc>
 80086a8:	2500      	movs	r5, #0
 80086aa:	f104 0919 	add.w	r9, r4, #25
 80086ae:	e7f5      	b.n	800869c <_printf_i+0x1f8>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1ac      	bne.n	800860e <_printf_i+0x16a>
 80086b4:	7803      	ldrb	r3, [r0, #0]
 80086b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086be:	e76c      	b.n	800859a <_printf_i+0xf6>
 80086c0:	08009809 	.word	0x08009809
 80086c4:	0800981a 	.word	0x0800981a

080086c8 <strncmp>:
 80086c8:	b510      	push	{r4, lr}
 80086ca:	b16a      	cbz	r2, 80086e8 <strncmp+0x20>
 80086cc:	3901      	subs	r1, #1
 80086ce:	1884      	adds	r4, r0, r2
 80086d0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80086d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80086d8:	4293      	cmp	r3, r2
 80086da:	d103      	bne.n	80086e4 <strncmp+0x1c>
 80086dc:	42a0      	cmp	r0, r4
 80086de:	d001      	beq.n	80086e4 <strncmp+0x1c>
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1f5      	bne.n	80086d0 <strncmp+0x8>
 80086e4:	1a98      	subs	r0, r3, r2
 80086e6:	bd10      	pop	{r4, pc}
 80086e8:	4610      	mov	r0, r2
 80086ea:	e7fc      	b.n	80086e6 <strncmp+0x1e>

080086ec <__swbuf_r>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	460e      	mov	r6, r1
 80086f0:	4614      	mov	r4, r2
 80086f2:	4605      	mov	r5, r0
 80086f4:	b118      	cbz	r0, 80086fe <__swbuf_r+0x12>
 80086f6:	6983      	ldr	r3, [r0, #24]
 80086f8:	b90b      	cbnz	r3, 80086fe <__swbuf_r+0x12>
 80086fa:	f000 f9af 	bl	8008a5c <__sinit>
 80086fe:	4b21      	ldr	r3, [pc, #132]	; (8008784 <__swbuf_r+0x98>)
 8008700:	429c      	cmp	r4, r3
 8008702:	d12a      	bne.n	800875a <__swbuf_r+0x6e>
 8008704:	686c      	ldr	r4, [r5, #4]
 8008706:	69a3      	ldr	r3, [r4, #24]
 8008708:	60a3      	str	r3, [r4, #8]
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	071a      	lsls	r2, r3, #28
 800870e:	d52e      	bpl.n	800876e <__swbuf_r+0x82>
 8008710:	6923      	ldr	r3, [r4, #16]
 8008712:	b363      	cbz	r3, 800876e <__swbuf_r+0x82>
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	6820      	ldr	r0, [r4, #0]
 8008718:	b2f6      	uxtb	r6, r6
 800871a:	1ac0      	subs	r0, r0, r3
 800871c:	6963      	ldr	r3, [r4, #20]
 800871e:	4637      	mov	r7, r6
 8008720:	4283      	cmp	r3, r0
 8008722:	dc04      	bgt.n	800872e <__swbuf_r+0x42>
 8008724:	4621      	mov	r1, r4
 8008726:	4628      	mov	r0, r5
 8008728:	f000 f92e 	bl	8008988 <_fflush_r>
 800872c:	bb28      	cbnz	r0, 800877a <__swbuf_r+0x8e>
 800872e:	68a3      	ldr	r3, [r4, #8]
 8008730:	3001      	adds	r0, #1
 8008732:	3b01      	subs	r3, #1
 8008734:	60a3      	str	r3, [r4, #8]
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	6022      	str	r2, [r4, #0]
 800873c:	701e      	strb	r6, [r3, #0]
 800873e:	6963      	ldr	r3, [r4, #20]
 8008740:	4283      	cmp	r3, r0
 8008742:	d004      	beq.n	800874e <__swbuf_r+0x62>
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	07db      	lsls	r3, r3, #31
 8008748:	d519      	bpl.n	800877e <__swbuf_r+0x92>
 800874a:	2e0a      	cmp	r6, #10
 800874c:	d117      	bne.n	800877e <__swbuf_r+0x92>
 800874e:	4621      	mov	r1, r4
 8008750:	4628      	mov	r0, r5
 8008752:	f000 f919 	bl	8008988 <_fflush_r>
 8008756:	b190      	cbz	r0, 800877e <__swbuf_r+0x92>
 8008758:	e00f      	b.n	800877a <__swbuf_r+0x8e>
 800875a:	4b0b      	ldr	r3, [pc, #44]	; (8008788 <__swbuf_r+0x9c>)
 800875c:	429c      	cmp	r4, r3
 800875e:	d101      	bne.n	8008764 <__swbuf_r+0x78>
 8008760:	68ac      	ldr	r4, [r5, #8]
 8008762:	e7d0      	b.n	8008706 <__swbuf_r+0x1a>
 8008764:	4b09      	ldr	r3, [pc, #36]	; (800878c <__swbuf_r+0xa0>)
 8008766:	429c      	cmp	r4, r3
 8008768:	bf08      	it	eq
 800876a:	68ec      	ldreq	r4, [r5, #12]
 800876c:	e7cb      	b.n	8008706 <__swbuf_r+0x1a>
 800876e:	4621      	mov	r1, r4
 8008770:	4628      	mov	r0, r5
 8008772:	f000 f80d 	bl	8008790 <__swsetup_r>
 8008776:	2800      	cmp	r0, #0
 8008778:	d0cc      	beq.n	8008714 <__swbuf_r+0x28>
 800877a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800877e:	4638      	mov	r0, r7
 8008780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008782:	bf00      	nop
 8008784:	0800984c 	.word	0x0800984c
 8008788:	0800986c 	.word	0x0800986c
 800878c:	0800982c 	.word	0x0800982c

08008790 <__swsetup_r>:
 8008790:	4b32      	ldr	r3, [pc, #200]	; (800885c <__swsetup_r+0xcc>)
 8008792:	b570      	push	{r4, r5, r6, lr}
 8008794:	681d      	ldr	r5, [r3, #0]
 8008796:	4606      	mov	r6, r0
 8008798:	460c      	mov	r4, r1
 800879a:	b125      	cbz	r5, 80087a6 <__swsetup_r+0x16>
 800879c:	69ab      	ldr	r3, [r5, #24]
 800879e:	b913      	cbnz	r3, 80087a6 <__swsetup_r+0x16>
 80087a0:	4628      	mov	r0, r5
 80087a2:	f000 f95b 	bl	8008a5c <__sinit>
 80087a6:	4b2e      	ldr	r3, [pc, #184]	; (8008860 <__swsetup_r+0xd0>)
 80087a8:	429c      	cmp	r4, r3
 80087aa:	d10f      	bne.n	80087cc <__swsetup_r+0x3c>
 80087ac:	686c      	ldr	r4, [r5, #4]
 80087ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	0715      	lsls	r5, r2, #28
 80087b6:	d42c      	bmi.n	8008812 <__swsetup_r+0x82>
 80087b8:	06d0      	lsls	r0, r2, #27
 80087ba:	d411      	bmi.n	80087e0 <__swsetup_r+0x50>
 80087bc:	2209      	movs	r2, #9
 80087be:	6032      	str	r2, [r6, #0]
 80087c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087c4:	81a3      	strh	r3, [r4, #12]
 80087c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087ca:	e03e      	b.n	800884a <__swsetup_r+0xba>
 80087cc:	4b25      	ldr	r3, [pc, #148]	; (8008864 <__swsetup_r+0xd4>)
 80087ce:	429c      	cmp	r4, r3
 80087d0:	d101      	bne.n	80087d6 <__swsetup_r+0x46>
 80087d2:	68ac      	ldr	r4, [r5, #8]
 80087d4:	e7eb      	b.n	80087ae <__swsetup_r+0x1e>
 80087d6:	4b24      	ldr	r3, [pc, #144]	; (8008868 <__swsetup_r+0xd8>)
 80087d8:	429c      	cmp	r4, r3
 80087da:	bf08      	it	eq
 80087dc:	68ec      	ldreq	r4, [r5, #12]
 80087de:	e7e6      	b.n	80087ae <__swsetup_r+0x1e>
 80087e0:	0751      	lsls	r1, r2, #29
 80087e2:	d512      	bpl.n	800880a <__swsetup_r+0x7a>
 80087e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087e6:	b141      	cbz	r1, 80087fa <__swsetup_r+0x6a>
 80087e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087ec:	4299      	cmp	r1, r3
 80087ee:	d002      	beq.n	80087f6 <__swsetup_r+0x66>
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 fa2f 	bl	8008c54 <_free_r>
 80087f6:	2300      	movs	r3, #0
 80087f8:	6363      	str	r3, [r4, #52]	; 0x34
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008800:	81a3      	strh	r3, [r4, #12]
 8008802:	2300      	movs	r3, #0
 8008804:	6063      	str	r3, [r4, #4]
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	f043 0308 	orr.w	r3, r3, #8
 8008810:	81a3      	strh	r3, [r4, #12]
 8008812:	6923      	ldr	r3, [r4, #16]
 8008814:	b94b      	cbnz	r3, 800882a <__swsetup_r+0x9a>
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800881c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008820:	d003      	beq.n	800882a <__swsetup_r+0x9a>
 8008822:	4621      	mov	r1, r4
 8008824:	4630      	mov	r0, r6
 8008826:	f000 f9c7 	bl	8008bb8 <__smakebuf_r>
 800882a:	89a2      	ldrh	r2, [r4, #12]
 800882c:	f012 0301 	ands.w	r3, r2, #1
 8008830:	d00c      	beq.n	800884c <__swsetup_r+0xbc>
 8008832:	2300      	movs	r3, #0
 8008834:	60a3      	str	r3, [r4, #8]
 8008836:	6963      	ldr	r3, [r4, #20]
 8008838:	425b      	negs	r3, r3
 800883a:	61a3      	str	r3, [r4, #24]
 800883c:	6923      	ldr	r3, [r4, #16]
 800883e:	b953      	cbnz	r3, 8008856 <__swsetup_r+0xc6>
 8008840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008844:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008848:	d1ba      	bne.n	80087c0 <__swsetup_r+0x30>
 800884a:	bd70      	pop	{r4, r5, r6, pc}
 800884c:	0792      	lsls	r2, r2, #30
 800884e:	bf58      	it	pl
 8008850:	6963      	ldrpl	r3, [r4, #20]
 8008852:	60a3      	str	r3, [r4, #8]
 8008854:	e7f2      	b.n	800883c <__swsetup_r+0xac>
 8008856:	2000      	movs	r0, #0
 8008858:	e7f7      	b.n	800884a <__swsetup_r+0xba>
 800885a:	bf00      	nop
 800885c:	20000088 	.word	0x20000088
 8008860:	0800984c 	.word	0x0800984c
 8008864:	0800986c 	.word	0x0800986c
 8008868:	0800982c 	.word	0x0800982c

0800886c <abort>:
 800886c:	b508      	push	{r3, lr}
 800886e:	2006      	movs	r0, #6
 8008870:	f000 face 	bl	8008e10 <raise>
 8008874:	2001      	movs	r0, #1
 8008876:	f7fc fa48 	bl	8004d0a <_exit>
	...

0800887c <__sflush_r>:
 800887c:	898a      	ldrh	r2, [r1, #12]
 800887e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008882:	4605      	mov	r5, r0
 8008884:	0710      	lsls	r0, r2, #28
 8008886:	460c      	mov	r4, r1
 8008888:	d458      	bmi.n	800893c <__sflush_r+0xc0>
 800888a:	684b      	ldr	r3, [r1, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	dc05      	bgt.n	800889c <__sflush_r+0x20>
 8008890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	dc02      	bgt.n	800889c <__sflush_r+0x20>
 8008896:	2000      	movs	r0, #0
 8008898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800889c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800889e:	2e00      	cmp	r6, #0
 80088a0:	d0f9      	beq.n	8008896 <__sflush_r+0x1a>
 80088a2:	2300      	movs	r3, #0
 80088a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088a8:	682f      	ldr	r7, [r5, #0]
 80088aa:	6a21      	ldr	r1, [r4, #32]
 80088ac:	602b      	str	r3, [r5, #0]
 80088ae:	d032      	beq.n	8008916 <__sflush_r+0x9a>
 80088b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	075a      	lsls	r2, r3, #29
 80088b6:	d505      	bpl.n	80088c4 <__sflush_r+0x48>
 80088b8:	6863      	ldr	r3, [r4, #4]
 80088ba:	1ac0      	subs	r0, r0, r3
 80088bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088be:	b10b      	cbz	r3, 80088c4 <__sflush_r+0x48>
 80088c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088c2:	1ac0      	subs	r0, r0, r3
 80088c4:	2300      	movs	r3, #0
 80088c6:	4602      	mov	r2, r0
 80088c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ca:	6a21      	ldr	r1, [r4, #32]
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b0      	blx	r6
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	d106      	bne.n	80088e4 <__sflush_r+0x68>
 80088d6:	6829      	ldr	r1, [r5, #0]
 80088d8:	291d      	cmp	r1, #29
 80088da:	d848      	bhi.n	800896e <__sflush_r+0xf2>
 80088dc:	4a29      	ldr	r2, [pc, #164]	; (8008984 <__sflush_r+0x108>)
 80088de:	40ca      	lsrs	r2, r1
 80088e0:	07d6      	lsls	r6, r2, #31
 80088e2:	d544      	bpl.n	800896e <__sflush_r+0xf2>
 80088e4:	2200      	movs	r2, #0
 80088e6:	6062      	str	r2, [r4, #4]
 80088e8:	6922      	ldr	r2, [r4, #16]
 80088ea:	04d9      	lsls	r1, r3, #19
 80088ec:	6022      	str	r2, [r4, #0]
 80088ee:	d504      	bpl.n	80088fa <__sflush_r+0x7e>
 80088f0:	1c42      	adds	r2, r0, #1
 80088f2:	d101      	bne.n	80088f8 <__sflush_r+0x7c>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	b903      	cbnz	r3, 80088fa <__sflush_r+0x7e>
 80088f8:	6560      	str	r0, [r4, #84]	; 0x54
 80088fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088fc:	602f      	str	r7, [r5, #0]
 80088fe:	2900      	cmp	r1, #0
 8008900:	d0c9      	beq.n	8008896 <__sflush_r+0x1a>
 8008902:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008906:	4299      	cmp	r1, r3
 8008908:	d002      	beq.n	8008910 <__sflush_r+0x94>
 800890a:	4628      	mov	r0, r5
 800890c:	f000 f9a2 	bl	8008c54 <_free_r>
 8008910:	2000      	movs	r0, #0
 8008912:	6360      	str	r0, [r4, #52]	; 0x34
 8008914:	e7c0      	b.n	8008898 <__sflush_r+0x1c>
 8008916:	2301      	movs	r3, #1
 8008918:	4628      	mov	r0, r5
 800891a:	47b0      	blx	r6
 800891c:	1c41      	adds	r1, r0, #1
 800891e:	d1c8      	bne.n	80088b2 <__sflush_r+0x36>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0c5      	beq.n	80088b2 <__sflush_r+0x36>
 8008926:	2b1d      	cmp	r3, #29
 8008928:	d001      	beq.n	800892e <__sflush_r+0xb2>
 800892a:	2b16      	cmp	r3, #22
 800892c:	d101      	bne.n	8008932 <__sflush_r+0xb6>
 800892e:	602f      	str	r7, [r5, #0]
 8008930:	e7b1      	b.n	8008896 <__sflush_r+0x1a>
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008938:	81a3      	strh	r3, [r4, #12]
 800893a:	e7ad      	b.n	8008898 <__sflush_r+0x1c>
 800893c:	690f      	ldr	r7, [r1, #16]
 800893e:	2f00      	cmp	r7, #0
 8008940:	d0a9      	beq.n	8008896 <__sflush_r+0x1a>
 8008942:	0793      	lsls	r3, r2, #30
 8008944:	bf18      	it	ne
 8008946:	2300      	movne	r3, #0
 8008948:	680e      	ldr	r6, [r1, #0]
 800894a:	bf08      	it	eq
 800894c:	694b      	ldreq	r3, [r1, #20]
 800894e:	eba6 0807 	sub.w	r8, r6, r7
 8008952:	600f      	str	r7, [r1, #0]
 8008954:	608b      	str	r3, [r1, #8]
 8008956:	f1b8 0f00 	cmp.w	r8, #0
 800895a:	dd9c      	ble.n	8008896 <__sflush_r+0x1a>
 800895c:	4643      	mov	r3, r8
 800895e:	463a      	mov	r2, r7
 8008960:	6a21      	ldr	r1, [r4, #32]
 8008962:	4628      	mov	r0, r5
 8008964:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008966:	47b0      	blx	r6
 8008968:	2800      	cmp	r0, #0
 800896a:	dc06      	bgt.n	800897a <__sflush_r+0xfe>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008972:	81a3      	strh	r3, [r4, #12]
 8008974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008978:	e78e      	b.n	8008898 <__sflush_r+0x1c>
 800897a:	4407      	add	r7, r0
 800897c:	eba8 0800 	sub.w	r8, r8, r0
 8008980:	e7e9      	b.n	8008956 <__sflush_r+0xda>
 8008982:	bf00      	nop
 8008984:	20400001 	.word	0x20400001

08008988 <_fflush_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	690b      	ldr	r3, [r1, #16]
 800898c:	4605      	mov	r5, r0
 800898e:	460c      	mov	r4, r1
 8008990:	b1db      	cbz	r3, 80089ca <_fflush_r+0x42>
 8008992:	b118      	cbz	r0, 800899c <_fflush_r+0x14>
 8008994:	6983      	ldr	r3, [r0, #24]
 8008996:	b90b      	cbnz	r3, 800899c <_fflush_r+0x14>
 8008998:	f000 f860 	bl	8008a5c <__sinit>
 800899c:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <_fflush_r+0x48>)
 800899e:	429c      	cmp	r4, r3
 80089a0:	d109      	bne.n	80089b6 <_fflush_r+0x2e>
 80089a2:	686c      	ldr	r4, [r5, #4]
 80089a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a8:	b17b      	cbz	r3, 80089ca <_fflush_r+0x42>
 80089aa:	4621      	mov	r1, r4
 80089ac:	4628      	mov	r0, r5
 80089ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089b2:	f7ff bf63 	b.w	800887c <__sflush_r>
 80089b6:	4b07      	ldr	r3, [pc, #28]	; (80089d4 <_fflush_r+0x4c>)
 80089b8:	429c      	cmp	r4, r3
 80089ba:	d101      	bne.n	80089c0 <_fflush_r+0x38>
 80089bc:	68ac      	ldr	r4, [r5, #8]
 80089be:	e7f1      	b.n	80089a4 <_fflush_r+0x1c>
 80089c0:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <_fflush_r+0x50>)
 80089c2:	429c      	cmp	r4, r3
 80089c4:	bf08      	it	eq
 80089c6:	68ec      	ldreq	r4, [r5, #12]
 80089c8:	e7ec      	b.n	80089a4 <_fflush_r+0x1c>
 80089ca:	2000      	movs	r0, #0
 80089cc:	bd38      	pop	{r3, r4, r5, pc}
 80089ce:	bf00      	nop
 80089d0:	0800984c 	.word	0x0800984c
 80089d4:	0800986c 	.word	0x0800986c
 80089d8:	0800982c 	.word	0x0800982c

080089dc <std>:
 80089dc:	2300      	movs	r3, #0
 80089de:	b510      	push	{r4, lr}
 80089e0:	4604      	mov	r4, r0
 80089e2:	e9c0 3300 	strd	r3, r3, [r0]
 80089e6:	6083      	str	r3, [r0, #8]
 80089e8:	8181      	strh	r1, [r0, #12]
 80089ea:	6643      	str	r3, [r0, #100]	; 0x64
 80089ec:	81c2      	strh	r2, [r0, #14]
 80089ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089f2:	6183      	str	r3, [r0, #24]
 80089f4:	4619      	mov	r1, r3
 80089f6:	2208      	movs	r2, #8
 80089f8:	305c      	adds	r0, #92	; 0x5c
 80089fa:	f7ff fb98 	bl	800812e <memset>
 80089fe:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <std+0x38>)
 8008a00:	6224      	str	r4, [r4, #32]
 8008a02:	6263      	str	r3, [r4, #36]	; 0x24
 8008a04:	4b04      	ldr	r3, [pc, #16]	; (8008a18 <std+0x3c>)
 8008a06:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a08:	4b04      	ldr	r3, [pc, #16]	; (8008a1c <std+0x40>)
 8008a0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a0c:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <std+0x44>)
 8008a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8008a10:	bd10      	pop	{r4, pc}
 8008a12:	bf00      	nop
 8008a14:	08008e49 	.word	0x08008e49
 8008a18:	08008e6b 	.word	0x08008e6b
 8008a1c:	08008ea3 	.word	0x08008ea3
 8008a20:	08008ec7 	.word	0x08008ec7

08008a24 <_cleanup_r>:
 8008a24:	4901      	ldr	r1, [pc, #4]	; (8008a2c <_cleanup_r+0x8>)
 8008a26:	f000 b885 	b.w	8008b34 <_fwalk_reent>
 8008a2a:	bf00      	nop
 8008a2c:	08008989 	.word	0x08008989

08008a30 <__sfmoreglue>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	2568      	movs	r5, #104	; 0x68
 8008a34:	1e4a      	subs	r2, r1, #1
 8008a36:	4355      	muls	r5, r2
 8008a38:	460e      	mov	r6, r1
 8008a3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a3e:	f000 f955 	bl	8008cec <_malloc_r>
 8008a42:	4604      	mov	r4, r0
 8008a44:	b140      	cbz	r0, 8008a58 <__sfmoreglue+0x28>
 8008a46:	2100      	movs	r1, #0
 8008a48:	e9c0 1600 	strd	r1, r6, [r0]
 8008a4c:	300c      	adds	r0, #12
 8008a4e:	60a0      	str	r0, [r4, #8]
 8008a50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a54:	f7ff fb6b 	bl	800812e <memset>
 8008a58:	4620      	mov	r0, r4
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}

08008a5c <__sinit>:
 8008a5c:	6983      	ldr	r3, [r0, #24]
 8008a5e:	b510      	push	{r4, lr}
 8008a60:	4604      	mov	r4, r0
 8008a62:	bb33      	cbnz	r3, 8008ab2 <__sinit+0x56>
 8008a64:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008a68:	6503      	str	r3, [r0, #80]	; 0x50
 8008a6a:	4b12      	ldr	r3, [pc, #72]	; (8008ab4 <__sinit+0x58>)
 8008a6c:	4a12      	ldr	r2, [pc, #72]	; (8008ab8 <__sinit+0x5c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6282      	str	r2, [r0, #40]	; 0x28
 8008a72:	4298      	cmp	r0, r3
 8008a74:	bf04      	itt	eq
 8008a76:	2301      	moveq	r3, #1
 8008a78:	6183      	streq	r3, [r0, #24]
 8008a7a:	f000 f81f 	bl	8008abc <__sfp>
 8008a7e:	6060      	str	r0, [r4, #4]
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 f81b 	bl	8008abc <__sfp>
 8008a86:	60a0      	str	r0, [r4, #8]
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 f817 	bl	8008abc <__sfp>
 8008a8e:	2200      	movs	r2, #0
 8008a90:	60e0      	str	r0, [r4, #12]
 8008a92:	2104      	movs	r1, #4
 8008a94:	6860      	ldr	r0, [r4, #4]
 8008a96:	f7ff ffa1 	bl	80089dc <std>
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	2109      	movs	r1, #9
 8008a9e:	68a0      	ldr	r0, [r4, #8]
 8008aa0:	f7ff ff9c 	bl	80089dc <std>
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	2112      	movs	r1, #18
 8008aa8:	68e0      	ldr	r0, [r4, #12]
 8008aaa:	f7ff ff97 	bl	80089dc <std>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	61a3      	str	r3, [r4, #24]
 8008ab2:	bd10      	pop	{r4, pc}
 8008ab4:	080097f4 	.word	0x080097f4
 8008ab8:	08008a25 	.word	0x08008a25

08008abc <__sfp>:
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abe:	4b1b      	ldr	r3, [pc, #108]	; (8008b2c <__sfp+0x70>)
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	681e      	ldr	r6, [r3, #0]
 8008ac4:	69b3      	ldr	r3, [r6, #24]
 8008ac6:	b913      	cbnz	r3, 8008ace <__sfp+0x12>
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff ffc7 	bl	8008a5c <__sinit>
 8008ace:	3648      	adds	r6, #72	; 0x48
 8008ad0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	d503      	bpl.n	8008ae0 <__sfp+0x24>
 8008ad8:	6833      	ldr	r3, [r6, #0]
 8008ada:	b133      	cbz	r3, 8008aea <__sfp+0x2e>
 8008adc:	6836      	ldr	r6, [r6, #0]
 8008ade:	e7f7      	b.n	8008ad0 <__sfp+0x14>
 8008ae0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ae4:	b16d      	cbz	r5, 8008b02 <__sfp+0x46>
 8008ae6:	3468      	adds	r4, #104	; 0x68
 8008ae8:	e7f4      	b.n	8008ad4 <__sfp+0x18>
 8008aea:	2104      	movs	r1, #4
 8008aec:	4638      	mov	r0, r7
 8008aee:	f7ff ff9f 	bl	8008a30 <__sfmoreglue>
 8008af2:	6030      	str	r0, [r6, #0]
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d1f1      	bne.n	8008adc <__sfp+0x20>
 8008af8:	230c      	movs	r3, #12
 8008afa:	4604      	mov	r4, r0
 8008afc:	603b      	str	r3, [r7, #0]
 8008afe:	4620      	mov	r0, r4
 8008b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b02:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <__sfp+0x74>)
 8008b04:	6665      	str	r5, [r4, #100]	; 0x64
 8008b06:	e9c4 5500 	strd	r5, r5, [r4]
 8008b0a:	60a5      	str	r5, [r4, #8]
 8008b0c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008b10:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008b14:	2208      	movs	r2, #8
 8008b16:	4629      	mov	r1, r5
 8008b18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b1c:	f7ff fb07 	bl	800812e <memset>
 8008b20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b28:	e7e9      	b.n	8008afe <__sfp+0x42>
 8008b2a:	bf00      	nop
 8008b2c:	080097f4 	.word	0x080097f4
 8008b30:	ffff0001 	.word	0xffff0001

08008b34 <_fwalk_reent>:
 8008b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b38:	4680      	mov	r8, r0
 8008b3a:	4689      	mov	r9, r1
 8008b3c:	2600      	movs	r6, #0
 8008b3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b42:	b914      	cbnz	r4, 8008b4a <_fwalk_reent+0x16>
 8008b44:	4630      	mov	r0, r6
 8008b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b4a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008b4e:	3f01      	subs	r7, #1
 8008b50:	d501      	bpl.n	8008b56 <_fwalk_reent+0x22>
 8008b52:	6824      	ldr	r4, [r4, #0]
 8008b54:	e7f5      	b.n	8008b42 <_fwalk_reent+0xe>
 8008b56:	89ab      	ldrh	r3, [r5, #12]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d907      	bls.n	8008b6c <_fwalk_reent+0x38>
 8008b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b60:	3301      	adds	r3, #1
 8008b62:	d003      	beq.n	8008b6c <_fwalk_reent+0x38>
 8008b64:	4629      	mov	r1, r5
 8008b66:	4640      	mov	r0, r8
 8008b68:	47c8      	blx	r9
 8008b6a:	4306      	orrs	r6, r0
 8008b6c:	3568      	adds	r5, #104	; 0x68
 8008b6e:	e7ee      	b.n	8008b4e <_fwalk_reent+0x1a>

08008b70 <__swhatbuf_r>:
 8008b70:	b570      	push	{r4, r5, r6, lr}
 8008b72:	460e      	mov	r6, r1
 8008b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b78:	b096      	sub	sp, #88	; 0x58
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	4614      	mov	r4, r2
 8008b7e:	461d      	mov	r5, r3
 8008b80:	da07      	bge.n	8008b92 <__swhatbuf_r+0x22>
 8008b82:	2300      	movs	r3, #0
 8008b84:	602b      	str	r3, [r5, #0]
 8008b86:	89b3      	ldrh	r3, [r6, #12]
 8008b88:	061a      	lsls	r2, r3, #24
 8008b8a:	d410      	bmi.n	8008bae <__swhatbuf_r+0x3e>
 8008b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b90:	e00e      	b.n	8008bb0 <__swhatbuf_r+0x40>
 8008b92:	466a      	mov	r2, sp
 8008b94:	f000 f9be 	bl	8008f14 <_fstat_r>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	dbf2      	blt.n	8008b82 <__swhatbuf_r+0x12>
 8008b9c:	9a01      	ldr	r2, [sp, #4]
 8008b9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ba2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ba6:	425a      	negs	r2, r3
 8008ba8:	415a      	adcs	r2, r3
 8008baa:	602a      	str	r2, [r5, #0]
 8008bac:	e7ee      	b.n	8008b8c <__swhatbuf_r+0x1c>
 8008bae:	2340      	movs	r3, #64	; 0x40
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	6023      	str	r3, [r4, #0]
 8008bb4:	b016      	add	sp, #88	; 0x58
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}

08008bb8 <__smakebuf_r>:
 8008bb8:	898b      	ldrh	r3, [r1, #12]
 8008bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bbc:	079d      	lsls	r5, r3, #30
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	d507      	bpl.n	8008bd4 <__smakebuf_r+0x1c>
 8008bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	6123      	str	r3, [r4, #16]
 8008bcc:	2301      	movs	r3, #1
 8008bce:	6163      	str	r3, [r4, #20]
 8008bd0:	b002      	add	sp, #8
 8008bd2:	bd70      	pop	{r4, r5, r6, pc}
 8008bd4:	ab01      	add	r3, sp, #4
 8008bd6:	466a      	mov	r2, sp
 8008bd8:	f7ff ffca 	bl	8008b70 <__swhatbuf_r>
 8008bdc:	9900      	ldr	r1, [sp, #0]
 8008bde:	4605      	mov	r5, r0
 8008be0:	4630      	mov	r0, r6
 8008be2:	f000 f883 	bl	8008cec <_malloc_r>
 8008be6:	b948      	cbnz	r0, 8008bfc <__smakebuf_r+0x44>
 8008be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bec:	059a      	lsls	r2, r3, #22
 8008bee:	d4ef      	bmi.n	8008bd0 <__smakebuf_r+0x18>
 8008bf0:	f023 0303 	bic.w	r3, r3, #3
 8008bf4:	f043 0302 	orr.w	r3, r3, #2
 8008bf8:	81a3      	strh	r3, [r4, #12]
 8008bfa:	e7e3      	b.n	8008bc4 <__smakebuf_r+0xc>
 8008bfc:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <__smakebuf_r+0x7c>)
 8008bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	6020      	str	r0, [r4, #0]
 8008c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c08:	81a3      	strh	r3, [r4, #12]
 8008c0a:	9b00      	ldr	r3, [sp, #0]
 8008c0c:	6120      	str	r0, [r4, #16]
 8008c0e:	6163      	str	r3, [r4, #20]
 8008c10:	9b01      	ldr	r3, [sp, #4]
 8008c12:	b15b      	cbz	r3, 8008c2c <__smakebuf_r+0x74>
 8008c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f000 f98d 	bl	8008f38 <_isatty_r>
 8008c1e:	b128      	cbz	r0, 8008c2c <__smakebuf_r+0x74>
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	f023 0303 	bic.w	r3, r3, #3
 8008c26:	f043 0301 	orr.w	r3, r3, #1
 8008c2a:	81a3      	strh	r3, [r4, #12]
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	431d      	orrs	r5, r3
 8008c30:	81a5      	strh	r5, [r4, #12]
 8008c32:	e7cd      	b.n	8008bd0 <__smakebuf_r+0x18>
 8008c34:	08008a25 	.word	0x08008a25

08008c38 <memchr>:
 8008c38:	b510      	push	{r4, lr}
 8008c3a:	b2c9      	uxtb	r1, r1
 8008c3c:	4402      	add	r2, r0
 8008c3e:	4290      	cmp	r0, r2
 8008c40:	4603      	mov	r3, r0
 8008c42:	d101      	bne.n	8008c48 <memchr+0x10>
 8008c44:	2300      	movs	r3, #0
 8008c46:	e003      	b.n	8008c50 <memchr+0x18>
 8008c48:	781c      	ldrb	r4, [r3, #0]
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	428c      	cmp	r4, r1
 8008c4e:	d1f6      	bne.n	8008c3e <memchr+0x6>
 8008c50:	4618      	mov	r0, r3
 8008c52:	bd10      	pop	{r4, pc}

08008c54 <_free_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4605      	mov	r5, r0
 8008c58:	2900      	cmp	r1, #0
 8008c5a:	d043      	beq.n	8008ce4 <_free_r+0x90>
 8008c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c60:	1f0c      	subs	r4, r1, #4
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	bfb8      	it	lt
 8008c66:	18e4      	addlt	r4, r4, r3
 8008c68:	f000 f988 	bl	8008f7c <__malloc_lock>
 8008c6c:	4a1e      	ldr	r2, [pc, #120]	; (8008ce8 <_free_r+0x94>)
 8008c6e:	6813      	ldr	r3, [r2, #0]
 8008c70:	4610      	mov	r0, r2
 8008c72:	b933      	cbnz	r3, 8008c82 <_free_r+0x2e>
 8008c74:	6063      	str	r3, [r4, #4]
 8008c76:	6014      	str	r4, [r2, #0]
 8008c78:	4628      	mov	r0, r5
 8008c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c7e:	f000 b97e 	b.w	8008f7e <__malloc_unlock>
 8008c82:	42a3      	cmp	r3, r4
 8008c84:	d90b      	bls.n	8008c9e <_free_r+0x4a>
 8008c86:	6821      	ldr	r1, [r4, #0]
 8008c88:	1862      	adds	r2, r4, r1
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	bf01      	itttt	eq
 8008c8e:	681a      	ldreq	r2, [r3, #0]
 8008c90:	685b      	ldreq	r3, [r3, #4]
 8008c92:	1852      	addeq	r2, r2, r1
 8008c94:	6022      	streq	r2, [r4, #0]
 8008c96:	6063      	str	r3, [r4, #4]
 8008c98:	6004      	str	r4, [r0, #0]
 8008c9a:	e7ed      	b.n	8008c78 <_free_r+0x24>
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	b10a      	cbz	r2, 8008ca6 <_free_r+0x52>
 8008ca2:	42a2      	cmp	r2, r4
 8008ca4:	d9fa      	bls.n	8008c9c <_free_r+0x48>
 8008ca6:	6819      	ldr	r1, [r3, #0]
 8008ca8:	1858      	adds	r0, r3, r1
 8008caa:	42a0      	cmp	r0, r4
 8008cac:	d10b      	bne.n	8008cc6 <_free_r+0x72>
 8008cae:	6820      	ldr	r0, [r4, #0]
 8008cb0:	4401      	add	r1, r0
 8008cb2:	1858      	adds	r0, r3, r1
 8008cb4:	4282      	cmp	r2, r0
 8008cb6:	6019      	str	r1, [r3, #0]
 8008cb8:	d1de      	bne.n	8008c78 <_free_r+0x24>
 8008cba:	6810      	ldr	r0, [r2, #0]
 8008cbc:	6852      	ldr	r2, [r2, #4]
 8008cbe:	4401      	add	r1, r0
 8008cc0:	6019      	str	r1, [r3, #0]
 8008cc2:	605a      	str	r2, [r3, #4]
 8008cc4:	e7d8      	b.n	8008c78 <_free_r+0x24>
 8008cc6:	d902      	bls.n	8008cce <_free_r+0x7a>
 8008cc8:	230c      	movs	r3, #12
 8008cca:	602b      	str	r3, [r5, #0]
 8008ccc:	e7d4      	b.n	8008c78 <_free_r+0x24>
 8008cce:	6820      	ldr	r0, [r4, #0]
 8008cd0:	1821      	adds	r1, r4, r0
 8008cd2:	428a      	cmp	r2, r1
 8008cd4:	bf01      	itttt	eq
 8008cd6:	6811      	ldreq	r1, [r2, #0]
 8008cd8:	6852      	ldreq	r2, [r2, #4]
 8008cda:	1809      	addeq	r1, r1, r0
 8008cdc:	6021      	streq	r1, [r4, #0]
 8008cde:	6062      	str	r2, [r4, #4]
 8008ce0:	605c      	str	r4, [r3, #4]
 8008ce2:	e7c9      	b.n	8008c78 <_free_r+0x24>
 8008ce4:	bd38      	pop	{r3, r4, r5, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20001e74 	.word	0x20001e74

08008cec <_malloc_r>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	1ccd      	adds	r5, r1, #3
 8008cf0:	f025 0503 	bic.w	r5, r5, #3
 8008cf4:	3508      	adds	r5, #8
 8008cf6:	2d0c      	cmp	r5, #12
 8008cf8:	bf38      	it	cc
 8008cfa:	250c      	movcc	r5, #12
 8008cfc:	2d00      	cmp	r5, #0
 8008cfe:	4606      	mov	r6, r0
 8008d00:	db01      	blt.n	8008d06 <_malloc_r+0x1a>
 8008d02:	42a9      	cmp	r1, r5
 8008d04:	d903      	bls.n	8008d0e <_malloc_r+0x22>
 8008d06:	230c      	movs	r3, #12
 8008d08:	6033      	str	r3, [r6, #0]
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	bd70      	pop	{r4, r5, r6, pc}
 8008d0e:	f000 f935 	bl	8008f7c <__malloc_lock>
 8008d12:	4a21      	ldr	r2, [pc, #132]	; (8008d98 <_malloc_r+0xac>)
 8008d14:	6814      	ldr	r4, [r2, #0]
 8008d16:	4621      	mov	r1, r4
 8008d18:	b991      	cbnz	r1, 8008d40 <_malloc_r+0x54>
 8008d1a:	4c20      	ldr	r4, [pc, #128]	; (8008d9c <_malloc_r+0xb0>)
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	b91b      	cbnz	r3, 8008d28 <_malloc_r+0x3c>
 8008d20:	4630      	mov	r0, r6
 8008d22:	f000 f83d 	bl	8008da0 <_sbrk_r>
 8008d26:	6020      	str	r0, [r4, #0]
 8008d28:	4629      	mov	r1, r5
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f000 f838 	bl	8008da0 <_sbrk_r>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d124      	bne.n	8008d7e <_malloc_r+0x92>
 8008d34:	230c      	movs	r3, #12
 8008d36:	4630      	mov	r0, r6
 8008d38:	6033      	str	r3, [r6, #0]
 8008d3a:	f000 f920 	bl	8008f7e <__malloc_unlock>
 8008d3e:	e7e4      	b.n	8008d0a <_malloc_r+0x1e>
 8008d40:	680b      	ldr	r3, [r1, #0]
 8008d42:	1b5b      	subs	r3, r3, r5
 8008d44:	d418      	bmi.n	8008d78 <_malloc_r+0x8c>
 8008d46:	2b0b      	cmp	r3, #11
 8008d48:	d90f      	bls.n	8008d6a <_malloc_r+0x7e>
 8008d4a:	600b      	str	r3, [r1, #0]
 8008d4c:	18cc      	adds	r4, r1, r3
 8008d4e:	50cd      	str	r5, [r1, r3]
 8008d50:	4630      	mov	r0, r6
 8008d52:	f000 f914 	bl	8008f7e <__malloc_unlock>
 8008d56:	f104 000b 	add.w	r0, r4, #11
 8008d5a:	1d23      	adds	r3, r4, #4
 8008d5c:	f020 0007 	bic.w	r0, r0, #7
 8008d60:	1ac3      	subs	r3, r0, r3
 8008d62:	d0d3      	beq.n	8008d0c <_malloc_r+0x20>
 8008d64:	425a      	negs	r2, r3
 8008d66:	50e2      	str	r2, [r4, r3]
 8008d68:	e7d0      	b.n	8008d0c <_malloc_r+0x20>
 8008d6a:	684b      	ldr	r3, [r1, #4]
 8008d6c:	428c      	cmp	r4, r1
 8008d6e:	bf16      	itet	ne
 8008d70:	6063      	strne	r3, [r4, #4]
 8008d72:	6013      	streq	r3, [r2, #0]
 8008d74:	460c      	movne	r4, r1
 8008d76:	e7eb      	b.n	8008d50 <_malloc_r+0x64>
 8008d78:	460c      	mov	r4, r1
 8008d7a:	6849      	ldr	r1, [r1, #4]
 8008d7c:	e7cc      	b.n	8008d18 <_malloc_r+0x2c>
 8008d7e:	1cc4      	adds	r4, r0, #3
 8008d80:	f024 0403 	bic.w	r4, r4, #3
 8008d84:	42a0      	cmp	r0, r4
 8008d86:	d005      	beq.n	8008d94 <_malloc_r+0xa8>
 8008d88:	1a21      	subs	r1, r4, r0
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f000 f808 	bl	8008da0 <_sbrk_r>
 8008d90:	3001      	adds	r0, #1
 8008d92:	d0cf      	beq.n	8008d34 <_malloc_r+0x48>
 8008d94:	6025      	str	r5, [r4, #0]
 8008d96:	e7db      	b.n	8008d50 <_malloc_r+0x64>
 8008d98:	20001e74 	.word	0x20001e74
 8008d9c:	20001e78 	.word	0x20001e78

08008da0 <_sbrk_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	2300      	movs	r3, #0
 8008da4:	4c05      	ldr	r4, [pc, #20]	; (8008dbc <_sbrk_r+0x1c>)
 8008da6:	4605      	mov	r5, r0
 8008da8:	4608      	mov	r0, r1
 8008daa:	6023      	str	r3, [r4, #0]
 8008dac:	f7fc f820 	bl	8004df0 <_sbrk>
 8008db0:	1c43      	adds	r3, r0, #1
 8008db2:	d102      	bne.n	8008dba <_sbrk_r+0x1a>
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	b103      	cbz	r3, 8008dba <_sbrk_r+0x1a>
 8008db8:	602b      	str	r3, [r5, #0]
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	20001f9c 	.word	0x20001f9c

08008dc0 <_raise_r>:
 8008dc0:	291f      	cmp	r1, #31
 8008dc2:	b538      	push	{r3, r4, r5, lr}
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	460d      	mov	r5, r1
 8008dc8:	d904      	bls.n	8008dd4 <_raise_r+0x14>
 8008dca:	2316      	movs	r3, #22
 8008dcc:	6003      	str	r3, [r0, #0]
 8008dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008dd6:	b112      	cbz	r2, 8008dde <_raise_r+0x1e>
 8008dd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ddc:	b94b      	cbnz	r3, 8008df2 <_raise_r+0x32>
 8008dde:	4620      	mov	r0, r4
 8008de0:	f000 f830 	bl	8008e44 <_getpid_r>
 8008de4:	462a      	mov	r2, r5
 8008de6:	4601      	mov	r1, r0
 8008de8:	4620      	mov	r0, r4
 8008dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dee:	f000 b817 	b.w	8008e20 <_kill_r>
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d00a      	beq.n	8008e0c <_raise_r+0x4c>
 8008df6:	1c59      	adds	r1, r3, #1
 8008df8:	d103      	bne.n	8008e02 <_raise_r+0x42>
 8008dfa:	2316      	movs	r3, #22
 8008dfc:	6003      	str	r3, [r0, #0]
 8008dfe:	2001      	movs	r0, #1
 8008e00:	e7e7      	b.n	8008dd2 <_raise_r+0x12>
 8008e02:	2400      	movs	r4, #0
 8008e04:	4628      	mov	r0, r5
 8008e06:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e0a:	4798      	blx	r3
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	e7e0      	b.n	8008dd2 <_raise_r+0x12>

08008e10 <raise>:
 8008e10:	4b02      	ldr	r3, [pc, #8]	; (8008e1c <raise+0xc>)
 8008e12:	4601      	mov	r1, r0
 8008e14:	6818      	ldr	r0, [r3, #0]
 8008e16:	f7ff bfd3 	b.w	8008dc0 <_raise_r>
 8008e1a:	bf00      	nop
 8008e1c:	20000088 	.word	0x20000088

08008e20 <_kill_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	2300      	movs	r3, #0
 8008e24:	4c06      	ldr	r4, [pc, #24]	; (8008e40 <_kill_r+0x20>)
 8008e26:	4605      	mov	r5, r0
 8008e28:	4608      	mov	r0, r1
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	f7fb ff5c 	bl	8004cea <_kill>
 8008e32:	1c43      	adds	r3, r0, #1
 8008e34:	d102      	bne.n	8008e3c <_kill_r+0x1c>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	b103      	cbz	r3, 8008e3c <_kill_r+0x1c>
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	bd38      	pop	{r3, r4, r5, pc}
 8008e3e:	bf00      	nop
 8008e40:	20001f9c 	.word	0x20001f9c

08008e44 <_getpid_r>:
 8008e44:	f7fb bf4a 	b.w	8004cdc <_getpid>

08008e48 <__sread>:
 8008e48:	b510      	push	{r4, lr}
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e50:	f000 f896 	bl	8008f80 <_read_r>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	bfab      	itete	ge
 8008e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e5c:	181b      	addge	r3, r3, r0
 8008e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e62:	bfac      	ite	ge
 8008e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e66:	81a3      	strhlt	r3, [r4, #12]
 8008e68:	bd10      	pop	{r4, pc}

08008e6a <__swrite>:
 8008e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e6e:	461f      	mov	r7, r3
 8008e70:	898b      	ldrh	r3, [r1, #12]
 8008e72:	4605      	mov	r5, r0
 8008e74:	05db      	lsls	r3, r3, #23
 8008e76:	460c      	mov	r4, r1
 8008e78:	4616      	mov	r6, r2
 8008e7a:	d505      	bpl.n	8008e88 <__swrite+0x1e>
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e84:	f000 f868 	bl	8008f58 <_lseek_r>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	4632      	mov	r2, r6
 8008e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e90:	81a3      	strh	r3, [r4, #12]
 8008e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e96:	463b      	mov	r3, r7
 8008e98:	4628      	mov	r0, r5
 8008e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9e:	f000 b817 	b.w	8008ed0 <_write_r>

08008ea2 <__sseek>:
 8008ea2:	b510      	push	{r4, lr}
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eaa:	f000 f855 	bl	8008f58 <_lseek_r>
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	bf15      	itete	ne
 8008eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ebe:	81a3      	strheq	r3, [r4, #12]
 8008ec0:	bf18      	it	ne
 8008ec2:	81a3      	strhne	r3, [r4, #12]
 8008ec4:	bd10      	pop	{r4, pc}

08008ec6 <__sclose>:
 8008ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eca:	f000 b813 	b.w	8008ef4 <_close_r>
	...

08008ed0 <_write_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	4608      	mov	r0, r1
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	2200      	movs	r2, #0
 8008eda:	4c05      	ldr	r4, [pc, #20]	; (8008ef0 <_write_r+0x20>)
 8008edc:	6022      	str	r2, [r4, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f7fb ff3a 	bl	8004d58 <_write>
 8008ee4:	1c43      	adds	r3, r0, #1
 8008ee6:	d102      	bne.n	8008eee <_write_r+0x1e>
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	b103      	cbz	r3, 8008eee <_write_r+0x1e>
 8008eec:	602b      	str	r3, [r5, #0]
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	20001f9c 	.word	0x20001f9c

08008ef4 <_close_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4c05      	ldr	r4, [pc, #20]	; (8008f10 <_close_r+0x1c>)
 8008efa:	4605      	mov	r5, r0
 8008efc:	4608      	mov	r0, r1
 8008efe:	6023      	str	r3, [r4, #0]
 8008f00:	f7fb ff46 	bl	8004d90 <_close>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_close_r+0x1a>
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_close_r+0x1a>
 8008f0c:	602b      	str	r3, [r5, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	20001f9c 	.word	0x20001f9c

08008f14 <_fstat_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	2300      	movs	r3, #0
 8008f18:	4c06      	ldr	r4, [pc, #24]	; (8008f34 <_fstat_r+0x20>)
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	4608      	mov	r0, r1
 8008f1e:	4611      	mov	r1, r2
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	f7fb ff40 	bl	8004da6 <_fstat>
 8008f26:	1c43      	adds	r3, r0, #1
 8008f28:	d102      	bne.n	8008f30 <_fstat_r+0x1c>
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	b103      	cbz	r3, 8008f30 <_fstat_r+0x1c>
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	bd38      	pop	{r3, r4, r5, pc}
 8008f32:	bf00      	nop
 8008f34:	20001f9c 	.word	0x20001f9c

08008f38 <_isatty_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4c05      	ldr	r4, [pc, #20]	; (8008f54 <_isatty_r+0x1c>)
 8008f3e:	4605      	mov	r5, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	6023      	str	r3, [r4, #0]
 8008f44:	f7fb ff3e 	bl	8004dc4 <_isatty>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_isatty_r+0x1a>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_isatty_r+0x1a>
 8008f50:	602b      	str	r3, [r5, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	20001f9c 	.word	0x20001f9c

08008f58 <_lseek_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	4608      	mov	r0, r1
 8008f5e:	4611      	mov	r1, r2
 8008f60:	2200      	movs	r2, #0
 8008f62:	4c05      	ldr	r4, [pc, #20]	; (8008f78 <_lseek_r+0x20>)
 8008f64:	6022      	str	r2, [r4, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f7fb ff36 	bl	8004dd8 <_lseek>
 8008f6c:	1c43      	adds	r3, r0, #1
 8008f6e:	d102      	bne.n	8008f76 <_lseek_r+0x1e>
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	b103      	cbz	r3, 8008f76 <_lseek_r+0x1e>
 8008f74:	602b      	str	r3, [r5, #0]
 8008f76:	bd38      	pop	{r3, r4, r5, pc}
 8008f78:	20001f9c 	.word	0x20001f9c

08008f7c <__malloc_lock>:
 8008f7c:	4770      	bx	lr

08008f7e <__malloc_unlock>:
 8008f7e:	4770      	bx	lr

08008f80 <_read_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4605      	mov	r5, r0
 8008f84:	4608      	mov	r0, r1
 8008f86:	4611      	mov	r1, r2
 8008f88:	2200      	movs	r2, #0
 8008f8a:	4c05      	ldr	r4, [pc, #20]	; (8008fa0 <_read_r+0x20>)
 8008f8c:	6022      	str	r2, [r4, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	f7fb fec5 	bl	8004d1e <_read>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	d102      	bne.n	8008f9e <_read_r+0x1e>
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	b103      	cbz	r3, 8008f9e <_read_r+0x1e>
 8008f9c:	602b      	str	r3, [r5, #0]
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	20001f9c 	.word	0x20001f9c

08008fa4 <_init>:
 8008fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa6:	bf00      	nop
 8008fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008faa:	bc08      	pop	{r3}
 8008fac:	469e      	mov	lr, r3
 8008fae:	4770      	bx	lr

08008fb0 <_fini>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	bf00      	nop
 8008fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb6:	bc08      	pop	{r3}
 8008fb8:	469e      	mov	lr, r3
 8008fba:	4770      	bx	lr
