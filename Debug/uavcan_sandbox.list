
uavcan_sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c3c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08009d4c  08009d4c  00019d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4fc  0800a4fc  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800a4fc  0800a4fc  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a4fc  0800a4fc  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4fc  0800a4fc  0001a4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a500  0800a500  0001a500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800a504  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e98  200000f0  0800a5f0  000200f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001f88  0800a5f0  00021f88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4e6  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d3c  00000000  00000000  0003f5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017d0  00000000  00000000  00043338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001678  00000000  00000000  00044b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018e77  00000000  00000000  00046180  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123f8  00000000  00000000  0005eff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000843e3  00000000  00000000  000713ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f57d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e78  00000000  00000000  000f5850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000f0 	.word	0x200000f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d34 	.word	0x08009d34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f4 	.word	0x200000f4
 800014c:	08009d34 	.word	0x08009d34

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_d2f>:
 80004d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004e0:	bf24      	itt	cs
 80004e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004ea:	d90d      	bls.n	8000508 <__aeabi_d2f+0x30>
 80004ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000500:	bf08      	it	eq
 8000502:	f020 0001 	biceq.w	r0, r0, #1
 8000506:	4770      	bx	lr
 8000508:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800050c:	d121      	bne.n	8000552 <__aeabi_d2f+0x7a>
 800050e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000512:	bfbc      	itt	lt
 8000514:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000518:	4770      	bxlt	lr
 800051a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800051e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000522:	f1c2 0218 	rsb	r2, r2, #24
 8000526:	f1c2 0c20 	rsb	ip, r2, #32
 800052a:	fa10 f30c 	lsls.w	r3, r0, ip
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	bf18      	it	ne
 8000534:	f040 0001 	orrne.w	r0, r0, #1
 8000538:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800053c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000540:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000544:	ea40 000c 	orr.w	r0, r0, ip
 8000548:	fa23 f302 	lsr.w	r3, r3, r2
 800054c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000550:	e7cc      	b.n	80004ec <__aeabi_d2f+0x14>
 8000552:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000556:	d107      	bne.n	8000568 <__aeabi_d2f+0x90>
 8000558:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800055c:	bf1e      	ittt	ne
 800055e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000562:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000566:	4770      	bxne	lr
 8000568:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800056c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000570:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__aeabi_frsub>:
 8000578:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800057c:	e002      	b.n	8000584 <__addsf3>
 800057e:	bf00      	nop

08000580 <__aeabi_fsub>:
 8000580:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000584 <__addsf3>:
 8000584:	0042      	lsls	r2, r0, #1
 8000586:	bf1f      	itttt	ne
 8000588:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800058c:	ea92 0f03 	teqne	r2, r3
 8000590:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000594:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000598:	d06a      	beq.n	8000670 <__addsf3+0xec>
 800059a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800059e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005a2:	bfc1      	itttt	gt
 80005a4:	18d2      	addgt	r2, r2, r3
 80005a6:	4041      	eorgt	r1, r0
 80005a8:	4048      	eorgt	r0, r1
 80005aa:	4041      	eorgt	r1, r0
 80005ac:	bfb8      	it	lt
 80005ae:	425b      	neglt	r3, r3
 80005b0:	2b19      	cmp	r3, #25
 80005b2:	bf88      	it	hi
 80005b4:	4770      	bxhi	lr
 80005b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005c2:	bf18      	it	ne
 80005c4:	4240      	negne	r0, r0
 80005c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005d2:	bf18      	it	ne
 80005d4:	4249      	negne	r1, r1
 80005d6:	ea92 0f03 	teq	r2, r3
 80005da:	d03f      	beq.n	800065c <__addsf3+0xd8>
 80005dc:	f1a2 0201 	sub.w	r2, r2, #1
 80005e0:	fa41 fc03 	asr.w	ip, r1, r3
 80005e4:	eb10 000c 	adds.w	r0, r0, ip
 80005e8:	f1c3 0320 	rsb	r3, r3, #32
 80005ec:	fa01 f103 	lsl.w	r1, r1, r3
 80005f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005f4:	d502      	bpl.n	80005fc <__addsf3+0x78>
 80005f6:	4249      	negs	r1, r1
 80005f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000600:	d313      	bcc.n	800062a <__addsf3+0xa6>
 8000602:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000606:	d306      	bcc.n	8000616 <__addsf3+0x92>
 8000608:	0840      	lsrs	r0, r0, #1
 800060a:	ea4f 0131 	mov.w	r1, r1, rrx
 800060e:	f102 0201 	add.w	r2, r2, #1
 8000612:	2afe      	cmp	r2, #254	; 0xfe
 8000614:	d251      	bcs.n	80006ba <__addsf3+0x136>
 8000616:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800061a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800061e:	bf08      	it	eq
 8000620:	f020 0001 	biceq.w	r0, r0, #1
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	4770      	bx	lr
 800062a:	0049      	lsls	r1, r1, #1
 800062c:	eb40 0000 	adc.w	r0, r0, r0
 8000630:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000634:	f1a2 0201 	sub.w	r2, r2, #1
 8000638:	d1ed      	bne.n	8000616 <__addsf3+0x92>
 800063a:	fab0 fc80 	clz	ip, r0
 800063e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000642:	ebb2 020c 	subs.w	r2, r2, ip
 8000646:	fa00 f00c 	lsl.w	r0, r0, ip
 800064a:	bfaa      	itet	ge
 800064c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000650:	4252      	neglt	r2, r2
 8000652:	4318      	orrge	r0, r3
 8000654:	bfbc      	itt	lt
 8000656:	40d0      	lsrlt	r0, r2
 8000658:	4318      	orrlt	r0, r3
 800065a:	4770      	bx	lr
 800065c:	f092 0f00 	teq	r2, #0
 8000660:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000664:	bf06      	itte	eq
 8000666:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800066a:	3201      	addeq	r2, #1
 800066c:	3b01      	subne	r3, #1
 800066e:	e7b5      	b.n	80005dc <__addsf3+0x58>
 8000670:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000674:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000678:	bf18      	it	ne
 800067a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800067e:	d021      	beq.n	80006c4 <__addsf3+0x140>
 8000680:	ea92 0f03 	teq	r2, r3
 8000684:	d004      	beq.n	8000690 <__addsf3+0x10c>
 8000686:	f092 0f00 	teq	r2, #0
 800068a:	bf08      	it	eq
 800068c:	4608      	moveq	r0, r1
 800068e:	4770      	bx	lr
 8000690:	ea90 0f01 	teq	r0, r1
 8000694:	bf1c      	itt	ne
 8000696:	2000      	movne	r0, #0
 8000698:	4770      	bxne	lr
 800069a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800069e:	d104      	bne.n	80006aa <__addsf3+0x126>
 80006a0:	0040      	lsls	r0, r0, #1
 80006a2:	bf28      	it	cs
 80006a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006a8:	4770      	bx	lr
 80006aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006ae:	bf3c      	itt	cc
 80006b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bxcc	lr
 80006b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006c2:	4770      	bx	lr
 80006c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006c8:	bf16      	itet	ne
 80006ca:	4608      	movne	r0, r1
 80006cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006d0:	4601      	movne	r1, r0
 80006d2:	0242      	lsls	r2, r0, #9
 80006d4:	bf06      	itte	eq
 80006d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006da:	ea90 0f01 	teqeq	r0, r1
 80006de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006e2:	4770      	bx	lr

080006e4 <__aeabi_ui2f>:
 80006e4:	f04f 0300 	mov.w	r3, #0
 80006e8:	e004      	b.n	80006f4 <__aeabi_i2f+0x8>
 80006ea:	bf00      	nop

080006ec <__aeabi_i2f>:
 80006ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	ea5f 0c00 	movs.w	ip, r0
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000700:	4601      	mov	r1, r0
 8000702:	f04f 0000 	mov.w	r0, #0
 8000706:	e01c      	b.n	8000742 <__aeabi_l2f+0x2a>

08000708 <__aeabi_ul2f>:
 8000708:	ea50 0201 	orrs.w	r2, r0, r1
 800070c:	bf08      	it	eq
 800070e:	4770      	bxeq	lr
 8000710:	f04f 0300 	mov.w	r3, #0
 8000714:	e00a      	b.n	800072c <__aeabi_l2f+0x14>
 8000716:	bf00      	nop

08000718 <__aeabi_l2f>:
 8000718:	ea50 0201 	orrs.w	r2, r0, r1
 800071c:	bf08      	it	eq
 800071e:	4770      	bxeq	lr
 8000720:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000724:	d502      	bpl.n	800072c <__aeabi_l2f+0x14>
 8000726:	4240      	negs	r0, r0
 8000728:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800072c:	ea5f 0c01 	movs.w	ip, r1
 8000730:	bf02      	ittt	eq
 8000732:	4684      	moveq	ip, r0
 8000734:	4601      	moveq	r1, r0
 8000736:	2000      	moveq	r0, #0
 8000738:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800073c:	bf08      	it	eq
 800073e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000742:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000746:	fabc f28c 	clz	r2, ip
 800074a:	3a08      	subs	r2, #8
 800074c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000750:	db10      	blt.n	8000774 <__aeabi_l2f+0x5c>
 8000752:	fa01 fc02 	lsl.w	ip, r1, r2
 8000756:	4463      	add	r3, ip
 8000758:	fa00 fc02 	lsl.w	ip, r0, r2
 800075c:	f1c2 0220 	rsb	r2, r2, #32
 8000760:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000764:	fa20 f202 	lsr.w	r2, r0, r2
 8000768:	eb43 0002 	adc.w	r0, r3, r2
 800076c:	bf08      	it	eq
 800076e:	f020 0001 	biceq.w	r0, r0, #1
 8000772:	4770      	bx	lr
 8000774:	f102 0220 	add.w	r2, r2, #32
 8000778:	fa01 fc02 	lsl.w	ip, r1, r2
 800077c:	f1c2 0220 	rsb	r2, r2, #32
 8000780:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000784:	fa21 f202 	lsr.w	r2, r1, r2
 8000788:	eb43 0002 	adc.w	r0, r3, r2
 800078c:	bf08      	it	eq
 800078e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000792:	4770      	bx	lr

08000794 <__aeabi_fmul>:
 8000794:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000798:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800079c:	bf1e      	ittt	ne
 800079e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007a2:	ea92 0f0c 	teqne	r2, ip
 80007a6:	ea93 0f0c 	teqne	r3, ip
 80007aa:	d06f      	beq.n	800088c <__aeabi_fmul+0xf8>
 80007ac:	441a      	add	r2, r3
 80007ae:	ea80 0c01 	eor.w	ip, r0, r1
 80007b2:	0240      	lsls	r0, r0, #9
 80007b4:	bf18      	it	ne
 80007b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007ba:	d01e      	beq.n	80007fa <__aeabi_fmul+0x66>
 80007bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007c8:	fba0 3101 	umull	r3, r1, r0, r1
 80007cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007d4:	bf3e      	ittt	cc
 80007d6:	0049      	lslcc	r1, r1, #1
 80007d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007dc:	005b      	lslcc	r3, r3, #1
 80007de:	ea40 0001 	orr.w	r0, r0, r1
 80007e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007e6:	2afd      	cmp	r2, #253	; 0xfd
 80007e8:	d81d      	bhi.n	8000826 <__aeabi_fmul+0x92>
 80007ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007f2:	bf08      	it	eq
 80007f4:	f020 0001 	biceq.w	r0, r0, #1
 80007f8:	4770      	bx	lr
 80007fa:	f090 0f00 	teq	r0, #0
 80007fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000802:	bf08      	it	eq
 8000804:	0249      	lsleq	r1, r1, #9
 8000806:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800080a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800080e:	3a7f      	subs	r2, #127	; 0x7f
 8000810:	bfc2      	ittt	gt
 8000812:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000816:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800081a:	4770      	bxgt	lr
 800081c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	3a01      	subs	r2, #1
 8000826:	dc5d      	bgt.n	80008e4 <__aeabi_fmul+0x150>
 8000828:	f112 0f19 	cmn.w	r2, #25
 800082c:	bfdc      	itt	le
 800082e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000832:	4770      	bxle	lr
 8000834:	f1c2 0200 	rsb	r2, r2, #0
 8000838:	0041      	lsls	r1, r0, #1
 800083a:	fa21 f102 	lsr.w	r1, r1, r2
 800083e:	f1c2 0220 	rsb	r2, r2, #32
 8000842:	fa00 fc02 	lsl.w	ip, r0, r2
 8000846:	ea5f 0031 	movs.w	r0, r1, rrx
 800084a:	f140 0000 	adc.w	r0, r0, #0
 800084e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000852:	bf08      	it	eq
 8000854:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000858:	4770      	bx	lr
 800085a:	f092 0f00 	teq	r2, #0
 800085e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000862:	bf02      	ittt	eq
 8000864:	0040      	lsleq	r0, r0, #1
 8000866:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800086a:	3a01      	subeq	r2, #1
 800086c:	d0f9      	beq.n	8000862 <__aeabi_fmul+0xce>
 800086e:	ea40 000c 	orr.w	r0, r0, ip
 8000872:	f093 0f00 	teq	r3, #0
 8000876:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800087a:	bf02      	ittt	eq
 800087c:	0049      	lsleq	r1, r1, #1
 800087e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000882:	3b01      	subeq	r3, #1
 8000884:	d0f9      	beq.n	800087a <__aeabi_fmul+0xe6>
 8000886:	ea41 010c 	orr.w	r1, r1, ip
 800088a:	e78f      	b.n	80007ac <__aeabi_fmul+0x18>
 800088c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000890:	ea92 0f0c 	teq	r2, ip
 8000894:	bf18      	it	ne
 8000896:	ea93 0f0c 	teqne	r3, ip
 800089a:	d00a      	beq.n	80008b2 <__aeabi_fmul+0x11e>
 800089c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008a0:	bf18      	it	ne
 80008a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008a6:	d1d8      	bne.n	800085a <__aeabi_fmul+0xc6>
 80008a8:	ea80 0001 	eor.w	r0, r0, r1
 80008ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008b0:	4770      	bx	lr
 80008b2:	f090 0f00 	teq	r0, #0
 80008b6:	bf17      	itett	ne
 80008b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008bc:	4608      	moveq	r0, r1
 80008be:	f091 0f00 	teqne	r1, #0
 80008c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008c6:	d014      	beq.n	80008f2 <__aeabi_fmul+0x15e>
 80008c8:	ea92 0f0c 	teq	r2, ip
 80008cc:	d101      	bne.n	80008d2 <__aeabi_fmul+0x13e>
 80008ce:	0242      	lsls	r2, r0, #9
 80008d0:	d10f      	bne.n	80008f2 <__aeabi_fmul+0x15e>
 80008d2:	ea93 0f0c 	teq	r3, ip
 80008d6:	d103      	bne.n	80008e0 <__aeabi_fmul+0x14c>
 80008d8:	024b      	lsls	r3, r1, #9
 80008da:	bf18      	it	ne
 80008dc:	4608      	movne	r0, r1
 80008de:	d108      	bne.n	80008f2 <__aeabi_fmul+0x15e>
 80008e0:	ea80 0001 	eor.w	r0, r0, r1
 80008e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f0:	4770      	bx	lr
 80008f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008fa:	4770      	bx	lr

080008fc <__aeabi_fdiv>:
 80008fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000900:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000904:	bf1e      	ittt	ne
 8000906:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800090a:	ea92 0f0c 	teqne	r2, ip
 800090e:	ea93 0f0c 	teqne	r3, ip
 8000912:	d069      	beq.n	80009e8 <__aeabi_fdiv+0xec>
 8000914:	eba2 0203 	sub.w	r2, r2, r3
 8000918:	ea80 0c01 	eor.w	ip, r0, r1
 800091c:	0249      	lsls	r1, r1, #9
 800091e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000922:	d037      	beq.n	8000994 <__aeabi_fdiv+0x98>
 8000924:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000928:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800092c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000930:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000934:	428b      	cmp	r3, r1
 8000936:	bf38      	it	cc
 8000938:	005b      	lslcc	r3, r3, #1
 800093a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800093e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000942:	428b      	cmp	r3, r1
 8000944:	bf24      	itt	cs
 8000946:	1a5b      	subcs	r3, r3, r1
 8000948:	ea40 000c 	orrcs.w	r0, r0, ip
 800094c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000950:	bf24      	itt	cs
 8000952:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000956:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800095e:	bf24      	itt	cs
 8000960:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800096c:	bf24      	itt	cs
 800096e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000972:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000976:	011b      	lsls	r3, r3, #4
 8000978:	bf18      	it	ne
 800097a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800097e:	d1e0      	bne.n	8000942 <__aeabi_fdiv+0x46>
 8000980:	2afd      	cmp	r2, #253	; 0xfd
 8000982:	f63f af50 	bhi.w	8000826 <__aeabi_fmul+0x92>
 8000986:	428b      	cmp	r3, r1
 8000988:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000998:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800099c:	327f      	adds	r2, #127	; 0x7f
 800099e:	bfc2      	ittt	gt
 80009a0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009a4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009a8:	4770      	bxgt	lr
 80009aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ae:	f04f 0300 	mov.w	r3, #0
 80009b2:	3a01      	subs	r2, #1
 80009b4:	e737      	b.n	8000826 <__aeabi_fmul+0x92>
 80009b6:	f092 0f00 	teq	r2, #0
 80009ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009be:	bf02      	ittt	eq
 80009c0:	0040      	lsleq	r0, r0, #1
 80009c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009c6:	3a01      	subeq	r2, #1
 80009c8:	d0f9      	beq.n	80009be <__aeabi_fdiv+0xc2>
 80009ca:	ea40 000c 	orr.w	r0, r0, ip
 80009ce:	f093 0f00 	teq	r3, #0
 80009d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d6:	bf02      	ittt	eq
 80009d8:	0049      	lsleq	r1, r1, #1
 80009da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009de:	3b01      	subeq	r3, #1
 80009e0:	d0f9      	beq.n	80009d6 <__aeabi_fdiv+0xda>
 80009e2:	ea41 010c 	orr.w	r1, r1, ip
 80009e6:	e795      	b.n	8000914 <__aeabi_fdiv+0x18>
 80009e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009ec:	ea92 0f0c 	teq	r2, ip
 80009f0:	d108      	bne.n	8000a04 <__aeabi_fdiv+0x108>
 80009f2:	0242      	lsls	r2, r0, #9
 80009f4:	f47f af7d 	bne.w	80008f2 <__aeabi_fmul+0x15e>
 80009f8:	ea93 0f0c 	teq	r3, ip
 80009fc:	f47f af70 	bne.w	80008e0 <__aeabi_fmul+0x14c>
 8000a00:	4608      	mov	r0, r1
 8000a02:	e776      	b.n	80008f2 <__aeabi_fmul+0x15e>
 8000a04:	ea93 0f0c 	teq	r3, ip
 8000a08:	d104      	bne.n	8000a14 <__aeabi_fdiv+0x118>
 8000a0a:	024b      	lsls	r3, r1, #9
 8000a0c:	f43f af4c 	beq.w	80008a8 <__aeabi_fmul+0x114>
 8000a10:	4608      	mov	r0, r1
 8000a12:	e76e      	b.n	80008f2 <__aeabi_fmul+0x15e>
 8000a14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a18:	bf18      	it	ne
 8000a1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a1e:	d1ca      	bne.n	80009b6 <__aeabi_fdiv+0xba>
 8000a20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a24:	f47f af5c 	bne.w	80008e0 <__aeabi_fmul+0x14c>
 8000a28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a2c:	f47f af3c 	bne.w	80008a8 <__aeabi_fmul+0x114>
 8000a30:	e75f      	b.n	80008f2 <__aeabi_fmul+0x15e>
 8000a32:	bf00      	nop

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_Init+0x28>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_Init+0x28>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f9cd 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f004 ffba 	bl	80059c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f004 fef6 	bl	8005840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40022000 	.word	0x40022000

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x20>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <HAL_IncTick+0x20>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	20000004 	.word	0x20000004
 8000a80:	20001e74 	.word	0x20001e74

08000a84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <HAL_GetTick+0x10>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	20001e74 	.word	0x20001e74

08000a98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e0ed      	b.n	8000c86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f004 fefa 	bl	80058b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f022 0202 	bic.w	r2, r2, #2
 8000aca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000acc:	f7ff ffda 	bl	8000a84 <HAL_GetTick>
 8000ad0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ad2:	e012      	b.n	8000afa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ad4:	f7ff ffd6 	bl	8000a84 <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	2b0a      	cmp	r3, #10
 8000ae0:	d90b      	bls.n	8000afa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2205      	movs	r2, #5
 8000af2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e0c5      	b.n	8000c86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1e5      	bne.n	8000ad4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f042 0201 	orr.w	r2, r2, #1
 8000b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b18:	f7ff ffb4 	bl	8000a84 <HAL_GetTick>
 8000b1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b1e:	e012      	b.n	8000b46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b20:	f7ff ffb0 	bl	8000a84 <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d90b      	bls.n	8000b46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2205      	movs	r2, #5
 8000b3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e09f      	b.n	8000c86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0e5      	beq.n	8000b20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7e1b      	ldrb	r3, [r3, #24]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d108      	bne.n	8000b6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	e007      	b.n	8000b7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7e5b      	ldrb	r3, [r3, #25]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d108      	bne.n	8000b98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e007      	b.n	8000ba8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ba6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	7e9b      	ldrb	r3, [r3, #26]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d108      	bne.n	8000bc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f042 0220 	orr.w	r2, r2, #32
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	e007      	b.n	8000bd2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0220 	bic.w	r2, r2, #32
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7edb      	ldrb	r3, [r3, #27]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d108      	bne.n	8000bec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0210 	bic.w	r2, r2, #16
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	e007      	b.n	8000bfc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f042 0210 	orr.w	r2, r2, #16
 8000bfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	7f1b      	ldrb	r3, [r3, #28]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d108      	bne.n	8000c16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0208 	orr.w	r2, r2, #8
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e007      	b.n	8000c26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 0208 	bic.w	r2, r2, #8
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7f5b      	ldrb	r3, [r3, #29]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d108      	bne.n	8000c40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f042 0204 	orr.w	r2, r2, #4
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	e007      	b.n	8000c50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f022 0204 	bic.w	r2, r2, #4
 8000c4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	ea42 0103 	orr.w	r1, r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	430a      	orrs	r2, r1
 8000c74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db0b      	blt.n	8000d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 021f 	and.w	r2, r3, #31
 8000d0c:	4906      	ldr	r1, [pc, #24]	; (8000d28 <__NVIC_EnableIRQ+0x34>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	2001      	movs	r0, #1
 8000d16:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff4f 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff64 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ffb2 	bl	8000d80 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff81 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff57 	bl	8000cf4 <__NVIC_EnableIRQ>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b08b      	sub	sp, #44	; 0x2c
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e62:	e127      	b.n	80010b4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e64:	2201      	movs	r2, #1
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 8116 	bne.w	80010ae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d034      	beq.n	8000ef4 <HAL_GPIO_Init+0xa4>
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	d80d      	bhi.n	8000eaa <HAL_GPIO_Init+0x5a>
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d02b      	beq.n	8000eea <HAL_GPIO_Init+0x9a>
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d804      	bhi.n	8000ea0 <HAL_GPIO_Init+0x50>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d031      	beq.n	8000efe <HAL_GPIO_Init+0xae>
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d01c      	beq.n	8000ed8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e9e:	e048      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d043      	beq.n	8000f2c <HAL_GPIO_Init+0xdc>
 8000ea4:	2b11      	cmp	r3, #17
 8000ea6:	d01b      	beq.n	8000ee0 <HAL_GPIO_Init+0x90>
          break;
 8000ea8:	e043      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000eaa:	4a89      	ldr	r2, [pc, #548]	; (80010d0 <HAL_GPIO_Init+0x280>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d026      	beq.n	8000efe <HAL_GPIO_Init+0xae>
 8000eb0:	4a87      	ldr	r2, [pc, #540]	; (80010d0 <HAL_GPIO_Init+0x280>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d806      	bhi.n	8000ec4 <HAL_GPIO_Init+0x74>
 8000eb6:	4a87      	ldr	r2, [pc, #540]	; (80010d4 <HAL_GPIO_Init+0x284>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d020      	beq.n	8000efe <HAL_GPIO_Init+0xae>
 8000ebc:	4a86      	ldr	r2, [pc, #536]	; (80010d8 <HAL_GPIO_Init+0x288>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d01d      	beq.n	8000efe <HAL_GPIO_Init+0xae>
          break;
 8000ec2:	e036      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ec4:	4a85      	ldr	r2, [pc, #532]	; (80010dc <HAL_GPIO_Init+0x28c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d019      	beq.n	8000efe <HAL_GPIO_Init+0xae>
 8000eca:	4a85      	ldr	r2, [pc, #532]	; (80010e0 <HAL_GPIO_Init+0x290>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d016      	beq.n	8000efe <HAL_GPIO_Init+0xae>
 8000ed0:	4a84      	ldr	r2, [pc, #528]	; (80010e4 <HAL_GPIO_Init+0x294>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0xae>
          break;
 8000ed6:	e02c      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	623b      	str	r3, [r7, #32]
          break;
 8000ede:	e028      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e023      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	3308      	adds	r3, #8
 8000ef0:	623b      	str	r3, [r7, #32]
          break;
 8000ef2:	e01e      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	330c      	adds	r3, #12
 8000efa:	623b      	str	r3, [r7, #32]
          break;
 8000efc:	e019      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f06:	2304      	movs	r3, #4
 8000f08:	623b      	str	r3, [r7, #32]
          break;
 8000f0a:	e012      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d105      	bne.n	8000f20 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f14:	2308      	movs	r3, #8
 8000f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	611a      	str	r2, [r3, #16]
          break;
 8000f1e:	e008      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f20:	2308      	movs	r3, #8
 8000f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	615a      	str	r2, [r3, #20]
          break;
 8000f2a:	e002      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	2bff      	cmp	r3, #255	; 0xff
 8000f36:	d801      	bhi.n	8000f3c <HAL_GPIO_Init+0xec>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	e001      	b.n	8000f40 <HAL_GPIO_Init+0xf0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3304      	adds	r3, #4
 8000f40:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	2bff      	cmp	r3, #255	; 0xff
 8000f46:	d802      	bhi.n	8000f4e <HAL_GPIO_Init+0xfe>
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_Init+0x104>
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	3b08      	subs	r3, #8
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	401a      	ands	r2, r3
 8000f66:	6a39      	ldr	r1, [r7, #32]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 8096 	beq.w	80010ae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f82:	4b59      	ldr	r3, [pc, #356]	; (80010e8 <HAL_GPIO_Init+0x298>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	4a58      	ldr	r2, [pc, #352]	; (80010e8 <HAL_GPIO_Init+0x298>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6193      	str	r3, [r2, #24]
 8000f8e:	4b56      	ldr	r3, [pc, #344]	; (80010e8 <HAL_GPIO_Init+0x298>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f9a:	4a54      	ldr	r2, [pc, #336]	; (80010ec <HAL_GPIO_Init+0x29c>)
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4b      	ldr	r2, [pc, #300]	; (80010f0 <HAL_GPIO_Init+0x2a0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d013      	beq.n	8000fee <HAL_GPIO_Init+0x19e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4a      	ldr	r2, [pc, #296]	; (80010f4 <HAL_GPIO_Init+0x2a4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d00d      	beq.n	8000fea <HAL_GPIO_Init+0x19a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a49      	ldr	r2, [pc, #292]	; (80010f8 <HAL_GPIO_Init+0x2a8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0x196>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a48      	ldr	r2, [pc, #288]	; (80010fc <HAL_GPIO_Init+0x2ac>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_GPIO_Init+0x192>
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x1a0>
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x1a0>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x1a0>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x1a0>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff2:	f002 0203 	and.w	r2, r2, #3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001000:	493a      	ldr	r1, [pc, #232]	; (80010ec <HAL_GPIO_Init+0x29c>)
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d006      	beq.n	8001028 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800101a:	4b39      	ldr	r3, [pc, #228]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	4938      	ldr	r1, [pc, #224]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	600b      	str	r3, [r1, #0]
 8001026:	e006      	b.n	8001036 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001028:	4b35      	ldr	r3, [pc, #212]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	43db      	mvns	r3, r3
 8001030:	4933      	ldr	r1, [pc, #204]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001032:	4013      	ands	r3, r2
 8001034:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001042:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	492e      	ldr	r1, [pc, #184]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	604b      	str	r3, [r1, #4]
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	43db      	mvns	r3, r3
 8001058:	4929      	ldr	r1, [pc, #164]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 800105a:	4013      	ands	r3, r2
 800105c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	4924      	ldr	r1, [pc, #144]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	608b      	str	r3, [r1, #8]
 8001076:	e006      	b.n	8001086 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	43db      	mvns	r3, r3
 8001080:	491f      	ldr	r1, [pc, #124]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001082:	4013      	ands	r3, r2
 8001084:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d006      	beq.n	80010a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	491a      	ldr	r1, [pc, #104]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	60cb      	str	r3, [r1, #12]
 800109e:	e006      	b.n	80010ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	4915      	ldr	r1, [pc, #84]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	3301      	adds	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	fa22 f303 	lsr.w	r3, r2, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f47f aed0 	bne.w	8000e64 <HAL_GPIO_Init+0x14>
  }
}
 80010c4:	bf00      	nop
 80010c6:	372c      	adds	r7, #44	; 0x2c
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	10210000 	.word	0x10210000
 80010d4:	10110000 	.word	0x10110000
 80010d8:	10120000 	.word	0x10120000
 80010dc:	10310000 	.word	0x10310000
 80010e0:	10320000 	.word	0x10320000
 80010e4:	10220000 	.word	0x10220000
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010000 	.word	0x40010000
 80010f0:	40010800 	.word	0x40010800
 80010f4:	40010c00 	.word	0x40010c00
 80010f8:	40011000 	.word	0x40011000
 80010fc:	40011400 	.word	0x40011400
 8001100:	40010400 	.word	0x40010400

08001104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
 8001110:	4613      	mov	r3, r2
 8001112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001114:	787b      	ldrb	r3, [r7, #1]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001120:	e003      	b.n	800112a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	041a      	lsls	r2, r3, #16
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	611a      	str	r2, [r3, #16]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	887b      	ldrh	r3, [r7, #2]
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800114c:	887a      	ldrh	r2, [r7, #2]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001152:	e002      	b.n	800115a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001154:	887a      	ldrh	r2, [r7, #2]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	611a      	str	r2, [r3, #16]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e10f      	b.n	8001396 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d106      	bne.n	8001190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f004 fbdc 	bl	8005948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2224      	movs	r2, #36	; 0x24
 8001194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0201 	bic.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011a8:	f001 f97c 	bl	80024a4 <HAL_RCC_GetPCLK1Freq>
 80011ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	4a7b      	ldr	r2, [pc, #492]	; (80013a0 <HAL_I2C_Init+0x23c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d807      	bhi.n	80011c8 <HAL_I2C_Init+0x64>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a7a      	ldr	r2, [pc, #488]	; (80013a4 <HAL_I2C_Init+0x240>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	bf94      	ite	ls
 80011c0:	2301      	movls	r3, #1
 80011c2:	2300      	movhi	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	e006      	b.n	80011d6 <HAL_I2C_Init+0x72>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4a77      	ldr	r2, [pc, #476]	; (80013a8 <HAL_I2C_Init+0x244>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	bf94      	ite	ls
 80011d0:	2301      	movls	r3, #1
 80011d2:	2300      	movhi	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0db      	b.n	8001396 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4a72      	ldr	r2, [pc, #456]	; (80013ac <HAL_I2C_Init+0x248>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	0c9b      	lsrs	r3, r3, #18
 80011e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4a64      	ldr	r2, [pc, #400]	; (80013a0 <HAL_I2C_Init+0x23c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d802      	bhi.n	8001218 <HAL_I2C_Init+0xb4>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3301      	adds	r3, #1
 8001216:	e009      	b.n	800122c <HAL_I2C_Init+0xc8>
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800121e:	fb02 f303 	mul.w	r3, r2, r3
 8001222:	4a63      	ldr	r2, [pc, #396]	; (80013b0 <HAL_I2C_Init+0x24c>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	099b      	lsrs	r3, r3, #6
 800122a:	3301      	adds	r3, #1
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	430b      	orrs	r3, r1
 8001232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800123e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4956      	ldr	r1, [pc, #344]	; (80013a0 <HAL_I2C_Init+0x23c>)
 8001248:	428b      	cmp	r3, r1
 800124a:	d80d      	bhi.n	8001268 <HAL_I2C_Init+0x104>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1e59      	subs	r1, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fbb1 f3f3 	udiv	r3, r1, r3
 800125a:	3301      	adds	r3, #1
 800125c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001260:	2b04      	cmp	r3, #4
 8001262:	bf38      	it	cc
 8001264:	2304      	movcc	r3, #4
 8001266:	e04f      	b.n	8001308 <HAL_I2C_Init+0x1a4>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d111      	bne.n	8001294 <HAL_I2C_Init+0x130>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1e58      	subs	r0, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6859      	ldr	r1, [r3, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	440b      	add	r3, r1
 800127e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001282:	3301      	adds	r3, #1
 8001284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	e012      	b.n	80012ba <HAL_I2C_Init+0x156>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	1e58      	subs	r0, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6859      	ldr	r1, [r3, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	0099      	lsls	r1, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012aa:	3301      	adds	r3, #1
 80012ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_I2C_Init+0x15e>
 80012be:	2301      	movs	r3, #1
 80012c0:	e022      	b.n	8001308 <HAL_I2C_Init+0x1a4>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10e      	bne.n	80012e8 <HAL_I2C_Init+0x184>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1e58      	subs	r0, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6859      	ldr	r1, [r3, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	440b      	add	r3, r1
 80012d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012dc:	3301      	adds	r3, #1
 80012de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e6:	e00f      	b.n	8001308 <HAL_I2C_Init+0x1a4>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	1e58      	subs	r0, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	0099      	lsls	r1, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fe:	3301      	adds	r3, #1
 8001300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	6809      	ldr	r1, [r1, #0]
 800130c:	4313      	orrs	r3, r2
 800130e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69da      	ldr	r2, [r3, #28]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001336:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6911      	ldr	r1, [r2, #16]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68d2      	ldr	r2, [r2, #12]
 8001342:	4311      	orrs	r1, r2
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	430b      	orrs	r3, r1
 800134a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695a      	ldr	r2, [r3, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0201 	orr.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2220      	movs	r2, #32
 8001382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	000186a0 	.word	0x000186a0
 80013a4:	001e847f 	.word	0x001e847f
 80013a8:	003d08ff 	.word	0x003d08ff
 80013ac:	431bde83 	.word	0x431bde83
 80013b0:	10624dd3 	.word	0x10624dd3

080013b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	4608      	mov	r0, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	461a      	mov	r2, r3
 80013c2:	4603      	mov	r3, r0
 80013c4:	817b      	strh	r3, [r7, #10]
 80013c6:	460b      	mov	r3, r1
 80013c8:	813b      	strh	r3, [r7, #8]
 80013ca:	4613      	mov	r3, r2
 80013cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013ce:	f7ff fb59 	bl	8000a84 <HAL_GetTick>
 80013d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b20      	cmp	r3, #32
 80013de:	f040 8218 	bne.w	8001812 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2319      	movs	r3, #25
 80013e8:	2201      	movs	r2, #1
 80013ea:	4981      	ldr	r1, [pc, #516]	; (80015f0 <HAL_I2C_Mem_Read+0x23c>)
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 fae7 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80013f8:	2302      	movs	r3, #2
 80013fa:	e20b      	b.n	8001814 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_I2C_Mem_Read+0x56>
 8001406:	2302      	movs	r3, #2
 8001408:	e204      	b.n	8001814 <HAL_I2C_Mem_Read+0x460>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b01      	cmp	r3, #1
 800141e:	d007      	beq.n	8001430 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800143e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2222      	movs	r2, #34	; 0x22
 8001444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001466:	b29a      	uxth	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4a61      	ldr	r2, [pc, #388]	; (80015f4 <HAL_I2C_Mem_Read+0x240>)
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001472:	88f8      	ldrh	r0, [r7, #6]
 8001474:	893a      	ldrh	r2, [r7, #8]
 8001476:	8979      	ldrh	r1, [r7, #10]
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	4603      	mov	r3, r0
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f9cc 	bl	8001820 <I2C_RequestMemoryRead>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e1c0      	b.n	8001814 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001496:	2b00      	cmp	r3, #0
 8001498:	d113      	bne.n	80014c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	623b      	str	r3, [r7, #32]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	623b      	str	r3, [r7, #32]
 80014ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	e194      	b.n	80017ec <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d11d      	bne.n	8001506 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014d8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014da:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001500:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001502:	b662      	cpsie	i
 8001504:	e172      	b.n	80017ec <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150a:	2b02      	cmp	r3, #2
 800150c:	d11d      	bne.n	800154a <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800151c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800151e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001544:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001546:	b662      	cpsie	i
 8001548:	e150      	b.n	80017ec <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001558:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001570:	e13c      	b.n	80017ec <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001576:	2b03      	cmp	r3, #3
 8001578:	f200 80f5 	bhi.w	8001766 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001580:	2b01      	cmp	r3, #1
 8001582:	d123      	bne.n	80015cc <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001586:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f000 fb30 	bl	8001bee <I2C_WaitOnRXNEFlagUntilTimeout>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e13d      	b.n	8001814 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691a      	ldr	r2, [r3, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015ca:	e10f      	b.n	80017ec <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d150      	bne.n	8001676 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015da:	2200      	movs	r2, #0
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <HAL_I2C_Mem_Read+0x244>)
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 f9ee 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d008      	beq.n	80015fc <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e112      	b.n	8001814 <HAL_I2C_Mem_Read+0x460>
 80015ee:	bf00      	nop
 80015f0:	00100002 	.word	0x00100002
 80015f4:	ffff0000 	.word	0xffff0000
 80015f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800160c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	3b01      	subs	r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001640:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165e:	3b01      	subs	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166a:	b29b      	uxth	r3, r3
 800166c:	3b01      	subs	r3, #1
 800166e:	b29a      	uxth	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001674:	e0ba      	b.n	80017ec <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800167c:	2200      	movs	r2, #0
 800167e:	4967      	ldr	r1, [pc, #412]	; (800181c <HAL_I2C_Mem_Read+0x468>)
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 f99d 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0c1      	b.n	8001814 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800169e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016da:	2200      	movs	r2, #0
 80016dc:	494f      	ldr	r1, [pc, #316]	; (800181c <HAL_I2C_Mem_Read+0x468>)
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 f96e 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e092      	b.n	8001814 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016fc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171a:	3b01      	subs	r3, #1
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001726:	b29b      	uxth	r3, r3
 8001728:	3b01      	subs	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001730:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174e:	3b01      	subs	r3, #1
 8001750:	b29a      	uxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175a:	b29b      	uxth	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001764:	e042      	b.n	80017ec <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001768:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 fa3f 	bl	8001bee <I2C_WaitOnRXNEFlagUntilTimeout>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e04c      	b.n	8001814 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001796:	3b01      	subs	r3, #1
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d118      	bne.n	80017ec <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f47f aebe 	bne.w	8001572 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8001812:	2302      	movs	r3, #2
  }
}
 8001814:	4618      	mov	r0, r3
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	00010004 	.word	0x00010004

08001820 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af02      	add	r7, sp, #8
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	4608      	mov	r0, r1
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4603      	mov	r3, r0
 8001830:	817b      	strh	r3, [r7, #10]
 8001832:	460b      	mov	r3, r1
 8001834:	813b      	strh	r3, [r7, #8]
 8001836:	4613      	mov	r3, r2
 8001838:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001848:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001858:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	2200      	movs	r2, #0
 8001862:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f8aa 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e09e      	b.n	80019b4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001876:	897b      	ldrh	r3, [r7, #10]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001884:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	6a3a      	ldr	r2, [r7, #32]
 800188a:	494c      	ldr	r1, [pc, #304]	; (80019bc <I2C_RequestMemoryRead+0x19c>)
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 f8ee 	bl	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e08b      	b.n	80019b4 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b4:	6a39      	ldr	r1, [r7, #32]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f958 	bl	8001b6c <I2C_WaitOnTXEFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00d      	beq.n	80018de <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d107      	bne.n	80018da <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e06a      	b.n	80019b4 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d105      	bne.n	80018f0 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018e4:	893b      	ldrh	r3, [r7, #8]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	e021      	b.n	8001934 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018f0:	893b      	ldrh	r3, [r7, #8]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001900:	6a39      	ldr	r1, [r7, #32]
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 f932 	bl	8001b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00d      	beq.n	800192a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	2b04      	cmp	r3, #4
 8001914:	d107      	bne.n	8001926 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001924:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e044      	b.n	80019b4 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800192a:	893b      	ldrh	r3, [r7, #8]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001936:	6a39      	ldr	r1, [r7, #32]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f917 	bl	8001b6c <I2C_WaitOnTXEFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00d      	beq.n	8001960 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	2b04      	cmp	r3, #4
 800194a:	d107      	bne.n	800195c <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e029      	b.n	80019b4 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800196e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	2200      	movs	r2, #0
 8001978:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 f81f 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e013      	b.n	80019b4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800198c:	897b      	ldrh	r3, [r7, #10]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	6a3a      	ldr	r2, [r7, #32]
 80019a0:	4906      	ldr	r1, [pc, #24]	; (80019bc <I2C_RequestMemoryRead+0x19c>)
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f863 	bl	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	00010002 	.word	0x00010002

080019c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	4613      	mov	r3, r2
 80019ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019d0:	e025      	b.n	8001a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019d8:	d021      	beq.n	8001a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019da:	f7ff f853 	bl	8000a84 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d302      	bcc.n	80019f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d116      	bne.n	8001a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2220      	movs	r2, #32
 80019fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f043 0220 	orr.w	r2, r3, #32
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e023      	b.n	8001a66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d10d      	bne.n	8001a44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4013      	ands	r3, r2
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	bf0c      	ite	eq
 8001a3a:	2301      	moveq	r3, #1
 8001a3c:	2300      	movne	r3, #0
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	e00c      	b.n	8001a5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf0c      	ite	eq
 8001a56:	2301      	moveq	r3, #1
 8001a58:	2300      	movne	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d0b6      	beq.n	80019d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a7c:	e051      	b.n	8001b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8c:	d123      	bne.n	8001ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001aa6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f043 0204 	orr.w	r2, r3, #4
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e046      	b.n	8001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001adc:	d021      	beq.n	8001b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ade:	f7fe ffd1 	bl	8000a84 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d302      	bcc.n	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d116      	bne.n	8001b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2220      	movs	r2, #32
 8001afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f043 0220 	orr.w	r2, r3, #32
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e020      	b.n	8001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	0c1b      	lsrs	r3, r3, #16
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d10c      	bne.n	8001b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4013      	ands	r3, r2
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bf14      	ite	ne
 8001b3e:	2301      	movne	r3, #1
 8001b40:	2300      	moveq	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	e00b      	b.n	8001b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4013      	ands	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d18d      	bne.n	8001a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b78:	e02d      	b.n	8001bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f88d 	bl	8001c9a <I2C_IsAcknowledgeFailed>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e02d      	b.n	8001be6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b90:	d021      	beq.n	8001bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b92:	f7fe ff77 	bl	8000a84 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d302      	bcc.n	8001ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d116      	bne.n	8001bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f043 0220 	orr.w	r2, r3, #32
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e007      	b.n	8001be6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be0:	2b80      	cmp	r3, #128	; 0x80
 8001be2:	d1ca      	bne.n	8001b7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001bfa:	e042      	b.n	8001c82 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b10      	cmp	r3, #16
 8001c08:	d119      	bne.n	8001c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f06f 0210 	mvn.w	r2, #16
 8001c12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e029      	b.n	8001c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3e:	f7fe ff21 	bl	8000a84 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d116      	bne.n	8001c82 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f043 0220 	orr.w	r2, r3, #32
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e007      	b.n	8001c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8c:	2b40      	cmp	r3, #64	; 0x40
 8001c8e:	d1b5      	bne.n	8001bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb0:	d11b      	bne.n	8001cea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f043 0204 	orr.w	r2, r3, #4
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e26c      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8087 	beq.w	8001e26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d18:	4b92      	ldr	r3, [pc, #584]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d00c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d24:	4b8f      	ldr	r3, [pc, #572]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d112      	bne.n	8001d56 <HAL_RCC_OscConfig+0x5e>
 8001d30:	4b8c      	ldr	r3, [pc, #560]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d10b      	bne.n	8001d56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3e:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d06c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x12c>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d168      	bne.n	8001e24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e246      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x76>
 8001d60:	4b80      	ldr	r3, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a7f      	ldr	r2, [pc, #508]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	e02e      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x98>
 8001d76:	4b7b      	ldr	r3, [pc, #492]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a7a      	ldr	r2, [pc, #488]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b78      	ldr	r3, [pc, #480]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a77      	ldr	r2, [pc, #476]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e01d      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0xbc>
 8001d9a:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a71      	ldr	r2, [pc, #452]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6e      	ldr	r2, [pc, #440]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001db4:	4b6b      	ldr	r3, [pc, #428]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a6a      	ldr	r2, [pc, #424]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b68      	ldr	r3, [pc, #416]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a67      	ldr	r2, [pc, #412]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fe56 	bl	8000a84 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7fe fe52 	bl	8000a84 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1fa      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0xe4>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7fe fe42 	bl	8000a84 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7fe fe3e 	bl	8000a84 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e1e6      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e16:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x10c>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d063      	beq.n	8001efa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e32:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e3e:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d11c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x18c>
 8001e4a:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d116      	bne.n	8001e84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x176>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e1ba      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4939      	ldr	r1, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	e03a      	b.n	8001efa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d020      	beq.n	8001ece <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <HAL_RCC_OscConfig+0x270>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7fe fdf7 	bl	8000a84 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7fe fdf3 	bl	8000a84 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e19b      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4927      	ldr	r1, [pc, #156]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]
 8001ecc:	e015      	b.n	8001efa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fdd6 	bl	8000a84 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001edc:	f7fe fdd2 	bl	8000a84 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e17a      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d03a      	beq.n	8001f7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d019      	beq.n	8001f42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <HAL_RCC_OscConfig+0x274>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7fe fdb6 	bl	8000a84 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7fe fdb2 	bl	8000a84 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e15a      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f000 fb0a 	bl	8002554 <RCC_Delay>
 8001f40:	e01c      	b.n	8001f7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_RCC_OscConfig+0x274>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7fe fd9c 	bl	8000a84 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4e:	e00f      	b.n	8001f70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7fe fd98 	bl	8000a84 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d908      	bls.n	8001f70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e140      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	42420000 	.word	0x42420000
 8001f6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f70:	4b9e      	ldr	r3, [pc, #632]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1e9      	bne.n	8001f50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80a6 	beq.w	80020d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8e:	4b97      	ldr	r3, [pc, #604]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10d      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b94      	ldr	r3, [pc, #592]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a93      	ldr	r2, [pc, #588]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b91      	ldr	r3, [pc, #580]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4b8e      	ldr	r3, [pc, #568]	; (80021f0 <HAL_RCC_OscConfig+0x4f8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc2:	4b8b      	ldr	r3, [pc, #556]	; (80021f0 <HAL_RCC_OscConfig+0x4f8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a8a      	ldr	r2, [pc, #552]	; (80021f0 <HAL_RCC_OscConfig+0x4f8>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fce:	f7fe fd59 	bl	8000a84 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7fe fd55 	bl	8000a84 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b64      	cmp	r3, #100	; 0x64
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e0fd      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	4b81      	ldr	r3, [pc, #516]	; (80021f0 <HAL_RCC_OscConfig+0x4f8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x312>
 8001ffc:	4b7b      	ldr	r3, [pc, #492]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4a7a      	ldr	r2, [pc, #488]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6213      	str	r3, [r2, #32]
 8002008:	e02d      	b.n	8002066 <HAL_RCC_OscConfig+0x36e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x334>
 8002012:	4b76      	ldr	r3, [pc, #472]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a75      	ldr	r2, [pc, #468]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6213      	str	r3, [r2, #32]
 800201e:	4b73      	ldr	r3, [pc, #460]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a72      	ldr	r2, [pc, #456]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	e01c      	b.n	8002066 <HAL_RCC_OscConfig+0x36e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b05      	cmp	r3, #5
 8002032:	d10c      	bne.n	800204e <HAL_RCC_OscConfig+0x356>
 8002034:	4b6d      	ldr	r3, [pc, #436]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4a6c      	ldr	r2, [pc, #432]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6213      	str	r3, [r2, #32]
 8002040:	4b6a      	ldr	r3, [pc, #424]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4a69      	ldr	r2, [pc, #420]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6213      	str	r3, [r2, #32]
 800204c:	e00b      	b.n	8002066 <HAL_RCC_OscConfig+0x36e>
 800204e:	4b67      	ldr	r3, [pc, #412]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a66      	ldr	r2, [pc, #408]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6213      	str	r3, [r2, #32]
 800205a:	4b64      	ldr	r3, [pc, #400]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a63      	ldr	r2, [pc, #396]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d015      	beq.n	800209a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7fe fd09 	bl	8000a84 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe fd05 	bl	8000a84 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0ab      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	4b57      	ldr	r3, [pc, #348]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ee      	beq.n	8002076 <HAL_RCC_OscConfig+0x37e>
 8002098:	e014      	b.n	80020c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7fe fcf3 	bl	8000a84 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7fe fcef 	bl	8000a84 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e095      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b8:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1ee      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d105      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ca:	4b48      	ldr	r3, [pc, #288]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4a47      	ldr	r2, [pc, #284]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8081 	beq.w	80021e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e0:	4b42      	ldr	r3, [pc, #264]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d061      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d146      	bne.n	8002182 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f4:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <HAL_RCC_OscConfig+0x4fc>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7fe fcc3 	bl	8000a84 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002102:	f7fe fcbf 	bl	8000a84 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e067      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002114:	4b35      	ldr	r3, [pc, #212]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d108      	bne.n	800213c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	492d      	ldr	r1, [pc, #180]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800213c:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a19      	ldr	r1, [r3, #32]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	430b      	orrs	r3, r1
 800214e:	4927      	ldr	r1, [pc, #156]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002154:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_RCC_OscConfig+0x4fc>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7fe fc93 	bl	8000a84 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7fe fc8f 	bl	8000a84 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e037      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x46a>
 8002180:	e02f      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_RCC_OscConfig+0x4fc>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7fe fc7c 	bl	8000a84 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002190:	f7fe fc78 	bl	8000a84 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e020      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x498>
 80021ae:	e018      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e013      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40007000 	.word	0x40007000
 80021f4:	42420060 	.word	0x42420060

080021f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0d0      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d910      	bls.n	800223c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b67      	ldr	r3, [pc, #412]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4965      	ldr	r1, [pc, #404]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b63      	ldr	r3, [pc, #396]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0b8      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d020      	beq.n	800228a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002254:	4b59      	ldr	r3, [pc, #356]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800225e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002276:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002278:	4b50      	ldr	r3, [pc, #320]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	494d      	ldr	r1, [pc, #308]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d040      	beq.n	8002318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d115      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e07f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e073      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e06b      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b39      	ldr	r3, [pc, #228]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4936      	ldr	r1, [pc, #216]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7fe fbcc 	bl	8000a84 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7fe fbc8 	bl	8000a84 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e053      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d210      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 0207 	bic.w	r2, r3, #7
 800232e:	4922      	ldr	r1, [pc, #136]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e032      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4916      	ldr	r1, [pc, #88]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d009      	beq.n	8002386 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	490e      	ldr	r1, [pc, #56]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002386:	f000 f821 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 800238a:	4601      	mov	r1, r0
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	fa21 f303 	lsr.w	r3, r1, r3
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_RCC_ClockConfig+0x1cc>)
 80023a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_ClockConfig+0x1d0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 fb0c 	bl	80059c4 <HAL_InitTick>

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40022000 	.word	0x40022000
 80023bc:	40021000 	.word	0x40021000
 80023c0:	0800a2cc 	.word	0x0800a2cc
 80023c4:	2000000c 	.word	0x2000000c
 80023c8:	20000000 	.word	0x20000000

080023cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023cc:	b490      	push	{r4, r7}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <HAL_RCC_GetSysClockFreq+0xb0>)
 80023d4:	1d3c      	adds	r4, r7, #4
 80023d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023dc:	4b28      	ldr	r3, [pc, #160]	; (8002480 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023f6:	4b23      	ldr	r3, [pc, #140]	; (8002484 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b04      	cmp	r3, #4
 8002404:	d002      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x40>
 8002406:	2b08      	cmp	r3, #8
 8002408:	d003      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0x46>
 800240a:	e02d      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800240c:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_RCC_GetSysClockFreq+0xbc>)
 800240e:	623b      	str	r3, [r7, #32]
      break;
 8002410:	e02d      	b.n	800246e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	0c9b      	lsrs	r3, r3, #18
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800241e:	4413      	add	r3, r2
 8002420:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002424:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	0c5b      	lsrs	r3, r3, #17
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800243e:	4413      	add	r3, r2
 8002440:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002444:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_RCC_GetSysClockFreq+0xbc>)
 800244a:	fb02 f203 	mul.w	r2, r2, r3
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
 8002456:	e004      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	4a0c      	ldr	r2, [pc, #48]	; (800248c <HAL_RCC_GetSysClockFreq+0xc0>)
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	623b      	str	r3, [r7, #32]
      break;
 8002466:	e002      	b.n	800246e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_RCC_GetSysClockFreq+0xbc>)
 800246a:	623b      	str	r3, [r7, #32]
      break;
 800246c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246e:	6a3b      	ldr	r3, [r7, #32]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3728      	adds	r7, #40	; 0x28
 8002474:	46bd      	mov	sp, r7
 8002476:	bc90      	pop	{r4, r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	08009d4c 	.word	0x08009d4c
 8002480:	08009d5c 	.word	0x08009d5c
 8002484:	40021000 	.word	0x40021000
 8002488:	007a1200 	.word	0x007a1200
 800248c:	003d0900 	.word	0x003d0900

08002490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002494:	4b02      	ldr	r3, [pc, #8]	; (80024a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	2000000c 	.word	0x2000000c

080024a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024a8:	f7ff fff2 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024ac:	4601      	mov	r1, r0
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	0800a2dc 	.word	0x0800a2dc

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024d0:	f7ff ffde 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024d4:	4601      	mov	r1, r0
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	0adb      	lsrs	r3, r3, #11
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4a03      	ldr	r2, [pc, #12]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	0800a2dc 	.word	0x0800a2dc

080024f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	220f      	movs	r2, #15
 8002502:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_RCC_GetClockConfig+0x58>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0203 	and.w	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_RCC_GetClockConfig+0x58>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_GetClockConfig+0x58>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_RCC_GetClockConfig+0x58>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	08db      	lsrs	r3, r3, #3
 800252e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCC_GetClockConfig+0x5c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0207 	and.w	r2, r3, #7
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40021000 	.word	0x40021000
 8002550:	40022000 	.word	0x40022000

08002554 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <RCC_Delay+0x34>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0a      	ldr	r2, [pc, #40]	; (800258c <RCC_Delay+0x38>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0a5b      	lsrs	r3, r3, #9
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	fb02 f303 	mul.w	r3, r2, r3
 800256e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002570:	bf00      	nop
  }
  while (Delay --);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	60fa      	str	r2, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f9      	bne.n	8002570 <RCC_Delay+0x1c>
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	2000000c 	.word	0x2000000c
 800258c:	10624dd3 	.word	0x10624dd3

08002590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e01d      	b.n	80025de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f815 	bl	80025e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f000 f962 	bl	8002898 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b06      	cmp	r3, #6
 8002620:	d007      	beq.n	8002632 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b02      	cmp	r3, #2
 8002652:	d122      	bne.n	800269a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b02      	cmp	r3, #2
 8002660:	d11b      	bne.n	800269a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f06f 0202 	mvn.w	r2, #2
 800266a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f8ed 	bl	8002860 <HAL_TIM_IC_CaptureCallback>
 8002686:	e005      	b.n	8002694 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f8e0 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f8ef 	bl	8002872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d122      	bne.n	80026ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d11b      	bne.n	80026ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f06f 0204 	mvn.w	r2, #4
 80026be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f8c3 	bl	8002860 <HAL_TIM_IC_CaptureCallback>
 80026da:	e005      	b.n	80026e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f8b6 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f8c5 	bl	8002872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d122      	bne.n	8002742 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b08      	cmp	r3, #8
 8002708:	d11b      	bne.n	8002742 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f06f 0208 	mvn.w	r2, #8
 8002712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2204      	movs	r2, #4
 8002718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f899 	bl	8002860 <HAL_TIM_IC_CaptureCallback>
 800272e:	e005      	b.n	800273c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f88c 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f89b 	bl	8002872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b10      	cmp	r3, #16
 800274e:	d122      	bne.n	8002796 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b10      	cmp	r3, #16
 800275c:	d11b      	bne.n	8002796 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f06f 0210 	mvn.w	r2, #16
 8002766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2208      	movs	r2, #8
 800276c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f86f 	bl	8002860 <HAL_TIM_IC_CaptureCallback>
 8002782:	e005      	b.n	8002790 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f862 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f871 	bl	8002872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d10e      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d107      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f06f 0201 	mvn.w	r2, #1
 80027ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f003 f827 	bl	8005810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d10e      	bne.n	80027ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	2b80      	cmp	r3, #128	; 0x80
 80027dc:	d107      	bne.n	80027ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f8c0 	bl	800296e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d10e      	bne.n	800281a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b40      	cmp	r3, #64	; 0x40
 8002808:	d107      	bne.n	800281a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f835 	bl	8002884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b20      	cmp	r3, #32
 8002826:	d10e      	bne.n	8002846 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b20      	cmp	r3, #32
 8002834:	d107      	bne.n	8002846 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f06f 0220 	mvn.w	r2, #32
 800283e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f88b 	bl	800295c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
	...

08002898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a29      	ldr	r2, [pc, #164]	; (8002950 <TIM_Base_SetConfig+0xb8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00b      	beq.n	80028c8 <TIM_Base_SetConfig+0x30>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b6:	d007      	beq.n	80028c8 <TIM_Base_SetConfig+0x30>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a26      	ldr	r2, [pc, #152]	; (8002954 <TIM_Base_SetConfig+0xbc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d003      	beq.n	80028c8 <TIM_Base_SetConfig+0x30>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a25      	ldr	r2, [pc, #148]	; (8002958 <TIM_Base_SetConfig+0xc0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d108      	bne.n	80028da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <TIM_Base_SetConfig+0xb8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00b      	beq.n	80028fa <TIM_Base_SetConfig+0x62>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e8:	d007      	beq.n	80028fa <TIM_Base_SetConfig+0x62>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a19      	ldr	r2, [pc, #100]	; (8002954 <TIM_Base_SetConfig+0xbc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d003      	beq.n	80028fa <TIM_Base_SetConfig+0x62>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a18      	ldr	r2, [pc, #96]	; (8002958 <TIM_Base_SetConfig+0xc0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d108      	bne.n	800290c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a07      	ldr	r2, [pc, #28]	; (8002950 <TIM_Base_SetConfig+0xb8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d103      	bne.n	8002940 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	615a      	str	r2, [r3, #20]
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	40012c00 	.word	0x40012c00
 8002954:	40000400 	.word	0x40000400
 8002958:	40000800 	.word	0x40000800

0800295c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002986:	f3ef 8305 	mrs	r3, IPSR
 800298a:	60bb      	str	r3, [r7, #8]
  return(result);
 800298c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10f      	bne.n	80029b2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002992:	f3ef 8310 	mrs	r3, PRIMASK
 8002996:	607b      	str	r3, [r7, #4]
  return(result);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <osKernelInitialize+0x32>
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <osKernelInitialize+0x60>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d109      	bne.n	80029ba <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029a6:	f3ef 8311 	mrs	r3, BASEPRI
 80029aa:	603b      	str	r3, [r7, #0]
  return(result);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80029b2:	f06f 0305 	mvn.w	r3, #5
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	e00c      	b.n	80029d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <osKernelInitialize+0x60>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <osKernelInitialize+0x60>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e002      	b.n	80029d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80029d4:	68fb      	ldr	r3, [r7, #12]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	2000010c 	.word	0x2000010c

080029e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029ea:	f3ef 8305 	mrs	r3, IPSR
 80029ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80029f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f6:	f3ef 8310 	mrs	r3, PRIMASK
 80029fa:	607b      	str	r3, [r7, #4]
  return(result);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <osKernelStart+0x32>
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <osKernelStart+0x64>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d109      	bne.n	8002a1e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8002a0e:	603b      	str	r3, [r7, #0]
  return(result);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002a16:	f06f 0305 	mvn.w	r3, #5
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e00e      	b.n	8002a3c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <osKernelStart+0x64>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d107      	bne.n	8002a36 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <osKernelStart+0x64>)
 8002a28:	2202      	movs	r2, #2
 8002a2a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002a2c:	f001 f926 	bl	8003c7c <vTaskStartScheduler>
      stat = osOK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e002      	b.n	8002a3c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	2000010c 	.word	0x2000010c

08002a4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b092      	sub	sp, #72	; 0x48
 8002a50:	af04      	add	r7, sp, #16
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a5c:	f3ef 8305 	mrs	r3, IPSR
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f040 8094 	bne.w	8002b92 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6e:	623b      	str	r3, [r7, #32]
  return(result);
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 808d 	bne.w	8002b92 <osThreadNew+0x146>
 8002a78:	4b48      	ldr	r3, [pc, #288]	; (8002b9c <osThreadNew+0x150>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d106      	bne.n	8002a8e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a80:	f3ef 8311 	mrs	r3, BASEPRI
 8002a84:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f040 8082 	bne.w	8002b92 <osThreadNew+0x146>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d07e      	beq.n	8002b92 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002a98:	2318      	movs	r3, #24
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002aa0:	f107 031b 	add.w	r3, r7, #27
 8002aa4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d045      	beq.n	8002b3e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <osThreadNew+0x74>
        name = attr->name;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <osThreadNew+0x9a>
 8002ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad6:	2b38      	cmp	r3, #56	; 0x38
 8002ad8:	d805      	bhi.n	8002ae6 <osThreadNew+0x9a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <osThreadNew+0x9e>
        return (NULL);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e054      	b.n	8002b94 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	089b      	lsrs	r3, r3, #2
 8002af8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00e      	beq.n	8002b20 <osThreadNew+0xd4>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b5b      	cmp	r3, #91	; 0x5b
 8002b08:	d90a      	bls.n	8002b20 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d006      	beq.n	8002b20 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <osThreadNew+0xd4>
        mem = 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1e:	e010      	b.n	8002b42 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10c      	bne.n	8002b42 <osThreadNew+0xf6>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d108      	bne.n	8002b42 <osThreadNew+0xf6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d104      	bne.n	8002b42 <osThreadNew+0xf6>
          mem = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3c:	e001      	b.n	8002b42 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d110      	bne.n	8002b6a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b50:	9202      	str	r2, [sp, #8]
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fef8 	bl	8003954 <xTaskCreateStatic>
 8002b64:	4603      	mov	r3, r0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e013      	b.n	8002b92 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d110      	bne.n	8002b92 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 ff3f 	bl	8003a06 <xTaskCreate>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d001      	beq.n	8002b92 <osThreadNew+0x146>
          hTask = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b92:	697b      	ldr	r3, [r7, #20]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3738      	adds	r7, #56	; 0x38
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	2000010c 	.word	0x2000010c

08002ba0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bac:	f3ef 8305 	mrs	r3, IPSR
 8002bb0:	613b      	str	r3, [r7, #16]
  return(result);
 8002bb2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f040 8085 	bne.w	8002cc4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bba:	f3ef 8310 	mrs	r3, PRIMASK
 8002bbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d17e      	bne.n	8002cc4 <osMutexNew+0x124>
 8002bc6:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <osMutexNew+0x130>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d105      	bne.n	8002bda <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bce:	f3ef 8311 	mrs	r3, BASEPRI
 8002bd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d174      	bne.n	8002cc4 <osMutexNew+0x124>
    if (attr != NULL) {
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <osMutexNew+0x48>
      type = attr->attr_bits;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	623b      	str	r3, [r7, #32]
 8002be6:	e001      	b.n	8002bec <osMutexNew+0x4c>
    } else {
      type = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <osMutexNew+0x5c>
      rmtx = 1U;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e001      	b.n	8002c00 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d15c      	bne.n	8002cc4 <osMutexNew+0x124>
      mem = -1;
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c0e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d015      	beq.n	8002c42 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d006      	beq.n	8002c2c <osMutexNew+0x8c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b4f      	cmp	r3, #79	; 0x4f
 8002c24:	d902      	bls.n	8002c2c <osMutexNew+0x8c>
          mem = 1;
 8002c26:	2301      	movs	r3, #1
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	e00c      	b.n	8002c46 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d108      	bne.n	8002c46 <osMutexNew+0xa6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <osMutexNew+0xa6>
            mem = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	e001      	b.n	8002c46 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d112      	bne.n	8002c72 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4619      	mov	r1, r3
 8002c58:	2004      	movs	r0, #4
 8002c5a:	f000 fa89 	bl	8003170 <xQueueCreateMutexStatic>
 8002c5e:	6278      	str	r0, [r7, #36]	; 0x24
 8002c60:	e016      	b.n	8002c90 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	4619      	mov	r1, r3
 8002c68:	2001      	movs	r0, #1
 8002c6a:	f000 fa81 	bl	8003170 <xQueueCreateMutexStatic>
 8002c6e:	6278      	str	r0, [r7, #36]	; 0x24
 8002c70:	e00e      	b.n	8002c90 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8002c7e:	2004      	movs	r0, #4
 8002c80:	f000 fa5e 	bl	8003140 <xQueueCreateMutex>
 8002c84:	6278      	str	r0, [r7, #36]	; 0x24
 8002c86:	e003      	b.n	8002c90 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8002c88:	2001      	movs	r0, #1
 8002c8a:	f000 fa59 	bl	8003140 <xQueueCreateMutex>
 8002c8e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <osMutexNew+0x110>
        if (attr != NULL) {
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <osMutexNew+0x104>
          name = attr->name;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e001      	b.n	8002ca8 <osMutexNew+0x108>
        } else {
          name = NULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8002ca8:	6979      	ldr	r1, [r7, #20]
 8002caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cac:	f000 fdf6 	bl	800389c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <osMutexNew+0x124>
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3728      	adds	r7, #40	; 0x28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	2000010c 	.word	0x2000010c

08002cd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4a06      	ldr	r2, [pc, #24]	; (8002cfc <vApplicationGetIdleTaskMemory+0x28>)
 8002ce4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <vApplicationGetIdleTaskMemory+0x2c>)
 8002cea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	601a      	str	r2, [r3, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	20000110 	.word	0x20000110
 8002d00:	2000016c 	.word	0x2000016c

08002d04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4a07      	ldr	r2, [pc, #28]	; (8002d30 <vApplicationGetTimerTaskMemory+0x2c>)
 8002d14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4a06      	ldr	r2, [pc, #24]	; (8002d34 <vApplicationGetTimerTaskMemory+0x30>)
 8002d1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d22:	601a      	str	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	2000036c 	.word	0x2000036c
 8002d34:	200003c8 	.word	0x200003c8

08002d38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f103 0208 	add.w	r2, r3, #8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f103 0208 	add.w	r2, r3, #8
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f103 0208 	add.w	r2, r3, #8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr

08002d8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	601a      	str	r2, [r3, #0]
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dea:	d103      	bne.n	8002df4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e00c      	b.n	8002e0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3308      	adds	r3, #8
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	e002      	b.n	8002e02 <vListInsert+0x2e>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d2f6      	bcs.n	8002dfc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	601a      	str	r2, [r3, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6892      	ldr	r2, [r2, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6852      	ldr	r2, [r2, #4]
 8002e64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d103      	bne.n	8002e78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	1e5a      	subs	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
	...

08002e98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	e7fe      	b.n	8002ebe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002ec0:	f001 ffea 	bl	8004e98 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	441a      	add	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	68f9      	ldr	r1, [r7, #12]
 8002ef4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	441a      	add	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	22ff      	movs	r2, #255	; 0xff
 8002f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	22ff      	movs	r2, #255	; 0xff
 8002f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d114      	bne.n	8002f40 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01a      	beq.n	8002f54 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3310      	adds	r3, #16
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 f92e 	bl	8004184 <xTaskRemoveFromEventList>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d012      	beq.n	8002f54 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <xQueueGenericReset+0xcc>)
 8002f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	e009      	b.n	8002f54 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	3310      	adds	r3, #16
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fef7 	bl	8002d38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3324      	adds	r3, #36	; 0x24
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fef2 	bl	8002d38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f54:	f001 ffce 	bl	8004ef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f58:	2301      	movs	r3, #1
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	e000ed04 	.word	0xe000ed04

08002f68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08e      	sub	sp, #56	; 0x38
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d109      	bne.n	8002f90 <xQueueGenericCreateStatic+0x28>
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f8e:	e7fe      	b.n	8002f8e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <xQueueGenericCreateStatic+0x42>
 8002f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa8:	e7fe      	b.n	8002fa8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <xQueueGenericCreateStatic+0x4e>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <xQueueGenericCreateStatic+0x52>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <xQueueGenericCreateStatic+0x54>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d109      	bne.n	8002fd4 <xQueueGenericCreateStatic+0x6c>
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	623b      	str	r3, [r7, #32]
 8002fd2:	e7fe      	b.n	8002fd2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <xQueueGenericCreateStatic+0x78>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <xQueueGenericCreateStatic+0x7c>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <xQueueGenericCreateStatic+0x7e>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <xQueueGenericCreateStatic+0x96>
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	e7fe      	b.n	8002ffc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ffe:	2350      	movs	r3, #80	; 0x50
 8003000:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b50      	cmp	r3, #80	; 0x50
 8003006:	d009      	beq.n	800301c <xQueueGenericCreateStatic+0xb4>
 8003008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	e7fe      	b.n	800301a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00d      	beq.n	8003042 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800302e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f842 	bl	80030c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003044:	4618      	mov	r0, r3
 8003046:	3730      	adds	r7, #48	; 0x30
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	4613      	mov	r3, r2
 8003058:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <xQueueGenericCreate+0x28>
 8003060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	e7fe      	b.n	8003072 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	e004      	b.n	800308a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	fb02 f303 	mul.w	r3, r2, r3
 8003088:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3350      	adds	r3, #80	; 0x50
 800308e:	4618      	mov	r0, r3
 8003090:	f001 fff8 	bl	8005084 <pvPortMalloc>
 8003094:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00f      	beq.n	80030bc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	3350      	adds	r3, #80	; 0x50
 80030a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030aa:	79fa      	ldrb	r2, [r7, #7]
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f805 	bl	80030c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80030bc:	69bb      	ldr	r3, [r7, #24]
	}
 80030be:	4618      	mov	r0, r3
 80030c0:	3720      	adds	r7, #32
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d103      	bne.n	80030e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	e002      	b.n	80030e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80030f4:	2101      	movs	r1, #1
 80030f6:	69b8      	ldr	r0, [r7, #24]
 80030f8:	f7ff fece 	bl	8002e98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00e      	beq.n	8003138 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800312c:	2300      	movs	r3, #0
 800312e:	2200      	movs	r2, #0
 8003130:	2100      	movs	r1, #0
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f838 	bl	80031a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800314a:	2301      	movs	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	461a      	mov	r2, r3
 8003156:	6939      	ldr	r1, [r7, #16]
 8003158:	6978      	ldr	r0, [r7, #20]
 800315a:	f7ff ff77 	bl	800304c <xQueueGenericCreate>
 800315e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff ffd3 	bl	800310c <prvInitialiseMutex>

		return pxNewQueue;
 8003166:	68fb      	ldr	r3, [r7, #12]
	}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af02      	add	r7, sp, #8
 8003176:	4603      	mov	r3, r0
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800317c:	2301      	movs	r3, #1
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2200      	movs	r2, #0
 800318c:	6939      	ldr	r1, [r7, #16]
 800318e:	6978      	ldr	r0, [r7, #20]
 8003190:	f7ff feea 	bl	8002f68 <xQueueGenericCreateStatic>
 8003194:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f7ff ffb8 	bl	800310c <prvInitialiseMutex>

		return pxNewQueue;
 800319c:	68fb      	ldr	r3, [r7, #12]
	}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08e      	sub	sp, #56	; 0x38
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031b6:	2300      	movs	r3, #0
 80031b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <xQueueGenericSend+0x30>
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d6:	e7fe      	b.n	80031d6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <xQueueGenericSend+0x3e>
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <xQueueGenericSend+0x42>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <xQueueGenericSend+0x44>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d109      	bne.n	8003204 <xQueueGenericSend+0x5c>
 80031f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
 8003202:	e7fe      	b.n	8003202 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d103      	bne.n	8003212 <xQueueGenericSend+0x6a>
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <xQueueGenericSend+0x6e>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <xQueueGenericSend+0x70>
 8003216:	2300      	movs	r3, #0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <xQueueGenericSend+0x88>
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	623b      	str	r3, [r7, #32]
 800322e:	e7fe      	b.n	800322e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003230:	f001 f962 	bl	80044f8 <xTaskGetSchedulerState>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <xQueueGenericSend+0x98>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <xQueueGenericSend+0x9c>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <xQueueGenericSend+0x9e>
 8003244:	2300      	movs	r3, #0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <xQueueGenericSend+0xb6>
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	e7fe      	b.n	800325c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800325e:	f001 fe1b 	bl	8004e98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	429a      	cmp	r2, r3
 800326c:	d302      	bcc.n	8003274 <xQueueGenericSend+0xcc>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d129      	bne.n	80032c8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800327a:	f000 f9ff 	bl	800367c <prvCopyDataToQueue>
 800327e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	3324      	adds	r3, #36	; 0x24
 800328c:	4618      	mov	r0, r3
 800328e:	f000 ff79 	bl	8004184 <xTaskRemoveFromEventList>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003298:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <xQueueGenericSend+0x1f0>)
 800329a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	e00a      	b.n	80032c0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032b0:	4b39      	ldr	r3, [pc, #228]	; (8003398 <xQueueGenericSend+0x1f0>)
 80032b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032c0:	f001 fe18 	bl	8004ef4 <vPortExitCritical>
				return pdPASS;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e063      	b.n	8003390 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d103      	bne.n	80032d6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032ce:	f001 fe11 	bl	8004ef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e05c      	b.n	8003390 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 ffb1 	bl	8004248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032e6:	2301      	movs	r3, #1
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032ea:	f001 fe03 	bl	8004ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032ee:	f000 fd29 	bl	8003d44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032f2:	f001 fdd1 	bl	8004e98 <vPortEnterCritical>
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003302:	d103      	bne.n	800330c <xQueueGenericSend+0x164>
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003312:	b25b      	sxtb	r3, r3
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003318:	d103      	bne.n	8003322 <xQueueGenericSend+0x17a>
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003322:	f001 fde7 	bl	8004ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003326:	1d3a      	adds	r2, r7, #4
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	4611      	mov	r1, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f000 ffa0 	bl	8004274 <xTaskCheckForTimeOut>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d124      	bne.n	8003384 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800333a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800333c:	f000 fa96 	bl	800386c <prvIsQueueFull>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d018      	beq.n	8003378 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	3310      	adds	r3, #16
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f000 feca 	bl	80040e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003356:	f000 fa21 	bl	800379c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800335a:	f000 fd01 	bl	8003d60 <xTaskResumeAll>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	f47f af7c 	bne.w	800325e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <xQueueGenericSend+0x1f0>)
 8003368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	e772      	b.n	800325e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800337a:	f000 fa0f 	bl	800379c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800337e:	f000 fcef 	bl	8003d60 <xTaskResumeAll>
 8003382:	e76c      	b.n	800325e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003386:	f000 fa09 	bl	800379c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800338a:	f000 fce9 	bl	8003d60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800338e:	2300      	movs	r3, #0
		}
	}
}
 8003390:	4618      	mov	r0, r3
 8003392:	3738      	adds	r7, #56	; 0x38
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	e000ed04 	.word	0xe000ed04

0800339c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08e      	sub	sp, #56	; 0x38
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d109      	bne.n	80033c8 <xQueueGenericSendFromISR+0x2c>
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
 80033c6:	e7fe      	b.n	80033c6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <xQueueGenericSendFromISR+0x3a>
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <xQueueGenericSendFromISR+0x3e>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <xQueueGenericSendFromISR+0x40>
 80033da:	2300      	movs	r3, #0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <xQueueGenericSendFromISR+0x58>
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	623b      	str	r3, [r7, #32]
 80033f2:	e7fe      	b.n	80033f2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d103      	bne.n	8003402 <xQueueGenericSendFromISR+0x66>
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <xQueueGenericSendFromISR+0x6a>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <xQueueGenericSendFromISR+0x6c>
 8003406:	2300      	movs	r3, #0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <xQueueGenericSendFromISR+0x84>
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	e7fe      	b.n	800341e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003420:	f001 fdf4 	bl	800500c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003424:	f3ef 8211 	mrs	r2, BASEPRI
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	61ba      	str	r2, [r7, #24]
 800343a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800343c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003448:	429a      	cmp	r2, r3
 800344a:	d302      	bcc.n	8003452 <xQueueGenericSendFromISR+0xb6>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d12c      	bne.n	80034ac <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003462:	f000 f90b 	bl	800367c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003466:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346e:	d112      	bne.n	8003496 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	2b00      	cmp	r3, #0
 8003476:	d016      	beq.n	80034a6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	3324      	adds	r3, #36	; 0x24
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fe81 	bl	8004184 <xTaskRemoveFromEventList>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00e      	beq.n	80034a6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e007      	b.n	80034a6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003496:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800349a:	3301      	adds	r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	b25a      	sxtb	r2, r3
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80034a6:	2301      	movs	r3, #1
 80034a8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80034aa:	e001      	b.n	80034b0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	637b      	str	r3, [r7, #52]	; 0x34
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3738      	adds	r7, #56	; 0x38
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08c      	sub	sp, #48	; 0x30
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <xQueueReceive+0x2e>
	__asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	e7fe      	b.n	80034f0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d103      	bne.n	8003500 <xQueueReceive+0x3c>
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <xQueueReceive+0x40>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <xQueueReceive+0x42>
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <xQueueReceive+0x5a>
 800350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	e7fe      	b.n	800351c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800351e:	f000 ffeb 	bl	80044f8 <xTaskGetSchedulerState>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <xQueueReceive+0x6a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <xQueueReceive+0x6e>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <xQueueReceive+0x70>
 8003532:	2300      	movs	r3, #0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <xQueueReceive+0x88>
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	e7fe      	b.n	800354a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800354c:	f001 fca4 	bl	8004e98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01f      	beq.n	800359c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003560:	f000 f8f6 	bl	8003750 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	1e5a      	subs	r2, r3, #1
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00f      	beq.n	8003594 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	3310      	adds	r3, #16
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fe03 	bl	8004184 <xTaskRemoveFromEventList>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003584:	4b3c      	ldr	r3, [pc, #240]	; (8003678 <xQueueReceive+0x1b4>)
 8003586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003594:	f001 fcae 	bl	8004ef4 <vPortExitCritical>
				return pdPASS;
 8003598:	2301      	movs	r3, #1
 800359a:	e069      	b.n	8003670 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035a2:	f001 fca7 	bl	8004ef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e062      	b.n	8003670 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d106      	bne.n	80035be <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035b0:	f107 0310 	add.w	r3, r7, #16
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fe47 	bl	8004248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035ba:	2301      	movs	r3, #1
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035be:	f001 fc99 	bl	8004ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035c2:	f000 fbbf 	bl	8003d44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035c6:	f001 fc67 	bl	8004e98 <vPortEnterCritical>
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d0:	b25b      	sxtb	r3, r3
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d6:	d103      	bne.n	80035e0 <xQueueReceive+0x11c>
 80035d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e6:	b25b      	sxtb	r3, r3
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ec:	d103      	bne.n	80035f6 <xQueueReceive+0x132>
 80035ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035f6:	f001 fc7d 	bl	8004ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035fa:	1d3a      	adds	r2, r7, #4
 80035fc:	f107 0310 	add.w	r3, r7, #16
 8003600:	4611      	mov	r1, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fe36 	bl	8004274 <xTaskCheckForTimeOut>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d123      	bne.n	8003656 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800360e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003610:	f000 f916 	bl	8003840 <prvIsQueueEmpty>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d017      	beq.n	800364a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	3324      	adds	r3, #36	; 0x24
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fd60 	bl	80040e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800362a:	f000 f8b7 	bl	800379c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800362e:	f000 fb97 	bl	8003d60 <xTaskResumeAll>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d189      	bne.n	800354c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <xQueueReceive+0x1b4>)
 800363a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	e780      	b.n	800354c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800364a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800364c:	f000 f8a6 	bl	800379c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003650:	f000 fb86 	bl	8003d60 <xTaskResumeAll>
 8003654:	e77a      	b.n	800354c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003658:	f000 f8a0 	bl	800379c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800365c:	f000 fb80 	bl	8003d60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003662:	f000 f8ed 	bl	8003840 <prvIsQueueEmpty>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	f43f af6f 	beq.w	800354c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800366e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003670:	4618      	mov	r0, r3
 8003672:	3730      	adds	r7, #48	; 0x30
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	e000ed04 	.word	0xe000ed04

0800367c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10d      	bne.n	80036b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d14d      	bne.n	800373e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 ff44 	bl	8004534 <xTaskPriorityDisinherit>
 80036ac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	e043      	b.n	800373e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d119      	bne.n	80036f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6898      	ldr	r0, [r3, #8]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	461a      	mov	r2, r3
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	f005 fbee 	bl	8008ea8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	441a      	add	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d32b      	bcc.n	800373e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	609a      	str	r2, [r3, #8]
 80036ee:	e026      	b.n	800373e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68d8      	ldr	r0, [r3, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	461a      	mov	r2, r3
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	f005 fbd4 	bl	8008ea8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	425b      	negs	r3, r3
 800370a:	441a      	add	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d207      	bcs.n	800372c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	425b      	negs	r3, r3
 8003726:	441a      	add	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d105      	bne.n	800373e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	3b01      	subs	r3, #1
 800373c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003746:	697b      	ldr	r3, [r7, #20]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d018      	beq.n	8003794 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	441a      	add	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	429a      	cmp	r2, r3
 800377a:	d303      	bcc.n	8003784 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68d9      	ldr	r1, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	461a      	mov	r2, r3
 800378e:	6838      	ldr	r0, [r7, #0]
 8003790:	f005 fb8a 	bl	8008ea8 <memcpy>
	}
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037a4:	f001 fb78 	bl	8004e98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037b0:	e011      	b.n	80037d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d012      	beq.n	80037e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3324      	adds	r3, #36	; 0x24
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fce0 	bl	8004184 <xTaskRemoveFromEventList>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037ca:	f000 fdb3 	bl	8004334 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	dce9      	bgt.n	80037b2 <prvUnlockQueue+0x16>
 80037de:	e000      	b.n	80037e2 <prvUnlockQueue+0x46>
					break;
 80037e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	22ff      	movs	r2, #255	; 0xff
 80037e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037ea:	f001 fb83 	bl	8004ef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037ee:	f001 fb53 	bl	8004e98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037fa:	e011      	b.n	8003820 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d012      	beq.n	800382a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3310      	adds	r3, #16
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fcbb 	bl	8004184 <xTaskRemoveFromEventList>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003814:	f000 fd8e 	bl	8004334 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003818:	7bbb      	ldrb	r3, [r7, #14]
 800381a:	3b01      	subs	r3, #1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003824:	2b00      	cmp	r3, #0
 8003826:	dce9      	bgt.n	80037fc <prvUnlockQueue+0x60>
 8003828:	e000      	b.n	800382c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800382a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	22ff      	movs	r2, #255	; 0xff
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003834:	f001 fb5e 	bl	8004ef4 <vPortExitCritical>
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003848:	f001 fb26 	bl	8004e98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003854:	2301      	movs	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e001      	b.n	800385e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800385e:	f001 fb49 	bl	8004ef4 <vPortExitCritical>

	return xReturn;
 8003862:	68fb      	ldr	r3, [r7, #12]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003874:	f001 fb10 	bl	8004e98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003880:	429a      	cmp	r2, r3
 8003882:	d102      	bne.n	800388a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003884:	2301      	movs	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e001      	b.n	800388e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800388e:	f001 fb31 	bl	8004ef4 <vPortExitCritical>

	return xReturn;
 8003892:	68fb      	ldr	r3, [r7, #12]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	e014      	b.n	80038d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038ac:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <vQueueAddToRegistry+0x4c>)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038b8:	490b      	ldr	r1, [pc, #44]	; (80038e8 <vQueueAddToRegistry+0x4c>)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038c2:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <vQueueAddToRegistry+0x4c>)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038ce:	e005      	b.n	80038dc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3301      	adds	r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b07      	cmp	r3, #7
 80038da:	d9e7      	bls.n	80038ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20001e78 	.word	0x20001e78

080038ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038fc:	f001 facc 	bl	8004e98 <vPortEnterCritical>
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003906:	b25b      	sxtb	r3, r3
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800390c:	d103      	bne.n	8003916 <vQueueWaitForMessageRestricted+0x2a>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800391c:	b25b      	sxtb	r3, r3
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003922:	d103      	bne.n	800392c <vQueueWaitForMessageRestricted+0x40>
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800392c:	f001 fae2 	bl	8004ef4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	2b00      	cmp	r3, #0
 8003936:	d106      	bne.n	8003946 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	3324      	adds	r3, #36	; 0x24
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fbf5 	bl	8004130 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003946:	6978      	ldr	r0, [r7, #20]
 8003948:	f7ff ff28 	bl	800379c <prvUnlockQueue>
	}
 800394c:	bf00      	nop
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08e      	sub	sp, #56	; 0x38
 8003958:	af04      	add	r7, sp, #16
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003964:	2b00      	cmp	r3, #0
 8003966:	d109      	bne.n	800397c <xTaskCreateStatic+0x28>
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	623b      	str	r3, [r7, #32]
 800397a:	e7fe      	b.n	800397a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <xTaskCreateStatic+0x42>
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	e7fe      	b.n	8003994 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003996:	235c      	movs	r3, #92	; 0x5c
 8003998:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b5c      	cmp	r3, #92	; 0x5c
 800399e:	d009      	beq.n	80039b4 <xTaskCreateStatic+0x60>
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	e7fe      	b.n	80039b2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01e      	beq.n	80039f8 <xTaskCreateStatic+0xa4>
 80039ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01b      	beq.n	80039f8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039d2:	2300      	movs	r3, #0
 80039d4:	9303      	str	r3, [sp, #12]
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	9302      	str	r3, [sp, #8]
 80039da:	f107 0314 	add.w	r3, r7, #20
 80039de:	9301      	str	r3, [sp, #4]
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f850 	bl	8003a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039f2:	f000 f8d3 	bl	8003b9c <prvAddNewTaskToReadyList>
 80039f6:	e001      	b.n	80039fc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039fc:	697b      	ldr	r3, [r7, #20]
	}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3728      	adds	r7, #40	; 0x28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b08c      	sub	sp, #48	; 0x30
 8003a0a:	af04      	add	r7, sp, #16
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f001 fb32 	bl	8005084 <pvPortMalloc>
 8003a20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00e      	beq.n	8003a46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a28:	205c      	movs	r0, #92	; 0x5c
 8003a2a:	f001 fb2b 	bl	8005084 <pvPortMalloc>
 8003a2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a3c:	e005      	b.n	8003a4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a3e:	6978      	ldr	r0, [r7, #20]
 8003a40:	f001 fbe2 	bl	8005208 <vPortFree>
 8003a44:	e001      	b.n	8003a4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d017      	beq.n	8003a80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	9303      	str	r3, [sp, #12]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	9302      	str	r3, [sp, #8]
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f80e 	bl	8003a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a74:	69f8      	ldr	r0, [r7, #28]
 8003a76:	f000 f891 	bl	8003b9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	e002      	b.n	8003a86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a86:	69bb      	ldr	r3, [r7, #24]
	}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	21a5      	movs	r1, #165	; 0xa5
 8003aaa:	f005 fa08 	bl	8008ebe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f023 0307 	bic.w	r3, r3, #7
 8003ac6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <prvInitialiseNewTask+0x56>
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	e7fe      	b.n	8003ae4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e012      	b.n	8003b12 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	4413      	add	r3, r2
 8003af2:	7819      	ldrb	r1, [r3, #0]
 8003af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	3334      	adds	r3, #52	; 0x34
 8003afc:	460a      	mov	r2, r1
 8003afe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d006      	beq.n	8003b1a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b0f      	cmp	r3, #15
 8003b16:	d9e9      	bls.n	8003aec <prvInitialiseNewTask+0x5c>
 8003b18:	e000      	b.n	8003b1c <prvInitialiseNewTask+0x8c>
		{
			break;
 8003b1a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	2b37      	cmp	r3, #55	; 0x37
 8003b28:	d901      	bls.n	8003b2e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b2a:	2337      	movs	r3, #55	; 0x37
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b38:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	3304      	adds	r3, #4
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff f916 	bl	8002d76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	3318      	adds	r3, #24
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff f911 	bl	8002d76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	69b8      	ldr	r0, [r7, #24]
 8003b7e:	f001 f8a3 	bl	8004cc8 <pxPortInitialiseStack>
 8003b82:	4602      	mov	r2, r0
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b94:	bf00      	nop
 8003b96:	3720      	adds	r7, #32
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ba4:	f001 f978 	bl	8004e98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ba8:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <prvAddNewTaskToReadyList+0xc4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3301      	adds	r3, #1
 8003bae:	4a2c      	ldr	r2, [pc, #176]	; (8003c60 <prvAddNewTaskToReadyList+0xc4>)
 8003bb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bb2:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <prvAddNewTaskToReadyList+0xc8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bba:	4a2a      	ldr	r2, [pc, #168]	; (8003c64 <prvAddNewTaskToReadyList+0xc8>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bc0:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <prvAddNewTaskToReadyList+0xc4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d110      	bne.n	8003bea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bc8:	f000 fbd8 	bl	800437c <prvInitialiseTaskLists>
 8003bcc:	e00d      	b.n	8003bea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bce:	4b26      	ldr	r3, [pc, #152]	; (8003c68 <prvAddNewTaskToReadyList+0xcc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bd6:	4b23      	ldr	r3, [pc, #140]	; (8003c64 <prvAddNewTaskToReadyList+0xc8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d802      	bhi.n	8003bea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003be4:	4a1f      	ldr	r2, [pc, #124]	; (8003c64 <prvAddNewTaskToReadyList+0xc8>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bea:	4b20      	ldr	r3, [pc, #128]	; (8003c6c <prvAddNewTaskToReadyList+0xd0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	4a1e      	ldr	r2, [pc, #120]	; (8003c6c <prvAddNewTaskToReadyList+0xd0>)
 8003bf2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <prvAddNewTaskToReadyList+0xd0>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <prvAddNewTaskToReadyList+0xd4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d903      	bls.n	8003c10 <prvAddNewTaskToReadyList+0x74>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <prvAddNewTaskToReadyList+0xd4>)
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <prvAddNewTaskToReadyList+0xd8>)
 8003c1e:	441a      	add	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4619      	mov	r1, r3
 8003c26:	4610      	mov	r0, r2
 8003c28:	f7ff f8b1 	bl	8002d8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c2c:	f001 f962 	bl	8004ef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c30:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <prvAddNewTaskToReadyList+0xcc>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00e      	beq.n	8003c56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <prvAddNewTaskToReadyList+0xc8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d207      	bcs.n	8003c56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <prvAddNewTaskToReadyList+0xdc>)
 8003c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000c9c 	.word	0x20000c9c
 8003c64:	200007c8 	.word	0x200007c8
 8003c68:	20000ca8 	.word	0x20000ca8
 8003c6c:	20000cb8 	.word	0x20000cb8
 8003c70:	20000ca4 	.word	0x20000ca4
 8003c74:	200007cc 	.word	0x200007cc
 8003c78:	e000ed04 	.word	0xe000ed04

08003c7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c8a:	463a      	mov	r2, r7
 8003c8c:	1d39      	adds	r1, r7, #4
 8003c8e:	f107 0308 	add.w	r3, r7, #8
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff f81e 	bl	8002cd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c98:	6839      	ldr	r1, [r7, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	9202      	str	r2, [sp, #8]
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	460a      	mov	r2, r1
 8003caa:	4920      	ldr	r1, [pc, #128]	; (8003d2c <vTaskStartScheduler+0xb0>)
 8003cac:	4820      	ldr	r0, [pc, #128]	; (8003d30 <vTaskStartScheduler+0xb4>)
 8003cae:	f7ff fe51 	bl	8003954 <xTaskCreateStatic>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <vTaskStartScheduler+0xb8>)
 8003cb6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cb8:	4b1e      	ldr	r3, [pc, #120]	; (8003d34 <vTaskStartScheduler+0xb8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	e001      	b.n	8003cca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d102      	bne.n	8003cd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003cd0:	f000 fcf0 	bl	80046b4 <xTimerCreateTimerTask>
 8003cd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d115      	bne.n	8003d08 <vTaskStartScheduler+0x8c>
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <vTaskStartScheduler+0xbc>)
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cf4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cf6:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <vTaskStartScheduler+0xc0>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003cfc:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <vTaskStartScheduler+0xc4>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d02:	f001 f859 	bl	8004db8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d06:	e00d      	b.n	8003d24 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d0e:	d109      	bne.n	8003d24 <vTaskStartScheduler+0xa8>
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e7fe      	b.n	8003d22 <vTaskStartScheduler+0xa6>
}
 8003d24:	bf00      	nop
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	08009d60 	.word	0x08009d60
 8003d30:	0800434d 	.word	0x0800434d
 8003d34:	20000cc0 	.word	0x20000cc0
 8003d38:	20000cbc 	.word	0x20000cbc
 8003d3c:	20000ca8 	.word	0x20000ca8
 8003d40:	20000ca0 	.word	0x20000ca0

08003d44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <vTaskSuspendAll+0x18>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	4a03      	ldr	r2, [pc, #12]	; (8003d5c <vTaskSuspendAll+0x18>)
 8003d50:	6013      	str	r3, [r2, #0]
}
 8003d52:	bf00      	nop
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000cc4 	.word	0x20000cc4

08003d60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d6e:	4b41      	ldr	r3, [pc, #260]	; (8003e74 <xTaskResumeAll+0x114>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <xTaskResumeAll+0x2a>
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	e7fe      	b.n	8003d88 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d8a:	f001 f885 	bl	8004e98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d8e:	4b39      	ldr	r3, [pc, #228]	; (8003e74 <xTaskResumeAll+0x114>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	4a37      	ldr	r2, [pc, #220]	; (8003e74 <xTaskResumeAll+0x114>)
 8003d96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d98:	4b36      	ldr	r3, [pc, #216]	; (8003e74 <xTaskResumeAll+0x114>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d162      	bne.n	8003e66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003da0:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <xTaskResumeAll+0x118>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d05e      	beq.n	8003e66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003da8:	e02f      	b.n	8003e0a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003daa:	4b34      	ldr	r3, [pc, #208]	; (8003e7c <xTaskResumeAll+0x11c>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3318      	adds	r3, #24
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff f844 	bl	8002e44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff f83f 	bl	8002e44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dca:	4b2d      	ldr	r3, [pc, #180]	; (8003e80 <xTaskResumeAll+0x120>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d903      	bls.n	8003dda <xTaskResumeAll+0x7a>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	4a2a      	ldr	r2, [pc, #168]	; (8003e80 <xTaskResumeAll+0x120>)
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4a27      	ldr	r2, [pc, #156]	; (8003e84 <xTaskResumeAll+0x124>)
 8003de8:	441a      	add	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3304      	adds	r3, #4
 8003dee:	4619      	mov	r1, r3
 8003df0:	4610      	mov	r0, r2
 8003df2:	f7fe ffcc 	bl	8002d8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfa:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <xTaskResumeAll+0x128>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d302      	bcc.n	8003e0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <xTaskResumeAll+0x12c>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e0a:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <xTaskResumeAll+0x11c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1cb      	bne.n	8003daa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e18:	f000 fb4a 	bl	80044b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e1c:	4b1c      	ldr	r3, [pc, #112]	; (8003e90 <xTaskResumeAll+0x130>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d010      	beq.n	8003e4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e28:	f000 f844 	bl	8003eb4 <xTaskIncrementTick>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e32:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <xTaskResumeAll+0x12c>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f1      	bne.n	8003e28 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <xTaskResumeAll+0x130>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e4a:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <xTaskResumeAll+0x12c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d009      	beq.n	8003e66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e52:	2301      	movs	r3, #1
 8003e54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <xTaskResumeAll+0x134>)
 8003e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e66:	f001 f845 	bl	8004ef4 <vPortExitCritical>

	return xAlreadyYielded;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000cc4 	.word	0x20000cc4
 8003e78:	20000c9c 	.word	0x20000c9c
 8003e7c:	20000c5c 	.word	0x20000c5c
 8003e80:	20000ca4 	.word	0x20000ca4
 8003e84:	200007cc 	.word	0x200007cc
 8003e88:	200007c8 	.word	0x200007c8
 8003e8c:	20000cb0 	.word	0x20000cb0
 8003e90:	20000cac 	.word	0x20000cac
 8003e94:	e000ed04 	.word	0xe000ed04

08003e98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e9e:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <xTaskGetTickCount+0x18>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ea4:	687b      	ldr	r3, [r7, #4]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr
 8003eb0:	20000ca0 	.word	0x20000ca0

08003eb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ebe:	4b51      	ldr	r3, [pc, #324]	; (8004004 <xTaskIncrementTick+0x150>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 808d 	bne.w	8003fe2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ec8:	4b4f      	ldr	r3, [pc, #316]	; (8004008 <xTaskIncrementTick+0x154>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ed0:	4a4d      	ldr	r2, [pc, #308]	; (8004008 <xTaskIncrementTick+0x154>)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d11f      	bne.n	8003f1c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003edc:	4b4b      	ldr	r3, [pc, #300]	; (800400c <xTaskIncrementTick+0x158>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <xTaskIncrementTick+0x46>
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	e7fe      	b.n	8003ef8 <xTaskIncrementTick+0x44>
 8003efa:	4b44      	ldr	r3, [pc, #272]	; (800400c <xTaskIncrementTick+0x158>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	4b43      	ldr	r3, [pc, #268]	; (8004010 <xTaskIncrementTick+0x15c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a41      	ldr	r2, [pc, #260]	; (800400c <xTaskIncrementTick+0x158>)
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4a41      	ldr	r2, [pc, #260]	; (8004010 <xTaskIncrementTick+0x15c>)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	4b41      	ldr	r3, [pc, #260]	; (8004014 <xTaskIncrementTick+0x160>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3301      	adds	r3, #1
 8003f14:	4a3f      	ldr	r2, [pc, #252]	; (8004014 <xTaskIncrementTick+0x160>)
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	f000 faca 	bl	80044b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f1c:	4b3e      	ldr	r3, [pc, #248]	; (8004018 <xTaskIncrementTick+0x164>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d34e      	bcc.n	8003fc4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f26:	4b39      	ldr	r3, [pc, #228]	; (800400c <xTaskIncrementTick+0x158>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <xTaskIncrementTick+0x80>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <xTaskIncrementTick+0x82>
 8003f34:	2300      	movs	r3, #0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f3a:	4b37      	ldr	r3, [pc, #220]	; (8004018 <xTaskIncrementTick+0x164>)
 8003f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f40:	601a      	str	r2, [r3, #0]
					break;
 8003f42:	e03f      	b.n	8003fc4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f44:	4b31      	ldr	r3, [pc, #196]	; (800400c <xTaskIncrementTick+0x158>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d203      	bcs.n	8003f64 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f5c:	4a2e      	ldr	r2, [pc, #184]	; (8004018 <xTaskIncrementTick+0x164>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6013      	str	r3, [r2, #0]
						break;
 8003f62:	e02f      	b.n	8003fc4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	3304      	adds	r3, #4
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fe ff6b 	bl	8002e44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	3318      	adds	r3, #24
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe ff62 	bl	8002e44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	4b25      	ldr	r3, [pc, #148]	; (800401c <xTaskIncrementTick+0x168>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d903      	bls.n	8003f94 <xTaskIncrementTick+0xe0>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	4a22      	ldr	r2, [pc, #136]	; (800401c <xTaskIncrementTick+0x168>)
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4a1f      	ldr	r2, [pc, #124]	; (8004020 <xTaskIncrementTick+0x16c>)
 8003fa2:	441a      	add	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f7fe feef 	bl	8002d8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <xTaskIncrementTick+0x170>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d3b3      	bcc.n	8003f26 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fc2:	e7b0      	b.n	8003f26 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fc4:	4b17      	ldr	r3, [pc, #92]	; (8004024 <xTaskIncrementTick+0x170>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fca:	4915      	ldr	r1, [pc, #84]	; (8004020 <xTaskIncrementTick+0x16c>)
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d907      	bls.n	8003fec <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	e004      	b.n	8003fec <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <xTaskIncrementTick+0x174>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	4a0f      	ldr	r2, [pc, #60]	; (8004028 <xTaskIncrementTick+0x174>)
 8003fea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003fec:	4b0f      	ldr	r3, [pc, #60]	; (800402c <xTaskIncrementTick+0x178>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ff8:	697b      	ldr	r3, [r7, #20]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000cc4 	.word	0x20000cc4
 8004008:	20000ca0 	.word	0x20000ca0
 800400c:	20000c54 	.word	0x20000c54
 8004010:	20000c58 	.word	0x20000c58
 8004014:	20000cb4 	.word	0x20000cb4
 8004018:	20000cbc 	.word	0x20000cbc
 800401c:	20000ca4 	.word	0x20000ca4
 8004020:	200007cc 	.word	0x200007cc
 8004024:	200007c8 	.word	0x200007c8
 8004028:	20000cac 	.word	0x20000cac
 800402c:	20000cb0 	.word	0x20000cb0

08004030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004036:	4b27      	ldr	r3, [pc, #156]	; (80040d4 <vTaskSwitchContext+0xa4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800403e:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <vTaskSwitchContext+0xa8>)
 8004040:	2201      	movs	r2, #1
 8004042:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004044:	e040      	b.n	80040c8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <vTaskSwitchContext+0xa8>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800404c:	4b23      	ldr	r3, [pc, #140]	; (80040dc <vTaskSwitchContext+0xac>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	e00f      	b.n	8004074 <vTaskSwitchContext+0x44>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <vTaskSwitchContext+0x3e>
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	607b      	str	r3, [r7, #4]
 800406c:	e7fe      	b.n	800406c <vTaskSwitchContext+0x3c>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3b01      	subs	r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	491a      	ldr	r1, [pc, #104]	; (80040e0 <vTaskSwitchContext+0xb0>)
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0e5      	beq.n	8004054 <vTaskSwitchContext+0x24>
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <vTaskSwitchContext+0xb0>)
 8004094:	4413      	add	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3308      	adds	r3, #8
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d104      	bne.n	80040b8 <vTaskSwitchContext+0x88>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	605a      	str	r2, [r3, #4]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <vTaskSwitchContext+0xb4>)
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	4a06      	ldr	r2, [pc, #24]	; (80040dc <vTaskSwitchContext+0xac>)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6013      	str	r3, [r2, #0]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	20000cc4 	.word	0x20000cc4
 80040d8:	20000cb0 	.word	0x20000cb0
 80040dc:	20000ca4 	.word	0x20000ca4
 80040e0:	200007cc 	.word	0x200007cc
 80040e4:	200007c8 	.word	0x200007c8

080040e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <vTaskPlaceOnEventList+0x24>
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	e7fe      	b.n	800410a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800410c:	4b07      	ldr	r3, [pc, #28]	; (800412c <vTaskPlaceOnEventList+0x44>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3318      	adds	r3, #24
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fe fe5d 	bl	8002dd4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800411a:	2101      	movs	r1, #1
 800411c:	6838      	ldr	r0, [r7, #0]
 800411e:	f000 fa75 	bl	800460c <prvAddCurrentTaskToDelayedList>
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200007c8 	.word	0x200007c8

08004130 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <vTaskPlaceOnEventListRestricted+0x26>
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e7fe      	b.n	8004154 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <vTaskPlaceOnEventListRestricted+0x50>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3318      	adds	r3, #24
 800415c:	4619      	mov	r1, r3
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7fe fe15 	bl	8002d8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800416a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800416e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	68b8      	ldr	r0, [r7, #8]
 8004174:	f000 fa4a 	bl	800460c <prvAddCurrentTaskToDelayedList>
	}
 8004178:	bf00      	nop
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	200007c8 	.word	0x200007c8

08004184 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <xTaskRemoveFromEventList+0x2a>
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e7fe      	b.n	80041ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	3318      	adds	r3, #24
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fe46 	bl	8002e44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041b8:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <xTaskRemoveFromEventList+0xac>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11d      	bne.n	80041fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fe fe3d 	bl	8002e44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ce:	4b19      	ldr	r3, [pc, #100]	; (8004234 <xTaskRemoveFromEventList+0xb0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d903      	bls.n	80041de <xTaskRemoveFromEventList+0x5a>
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	4a16      	ldr	r2, [pc, #88]	; (8004234 <xTaskRemoveFromEventList+0xb0>)
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4a13      	ldr	r2, [pc, #76]	; (8004238 <xTaskRemoveFromEventList+0xb4>)
 80041ec:	441a      	add	r2, r3
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f7fe fdca 	bl	8002d8e <vListInsertEnd>
 80041fa:	e005      	b.n	8004208 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	3318      	adds	r3, #24
 8004200:	4619      	mov	r1, r3
 8004202:	480e      	ldr	r0, [pc, #56]	; (800423c <xTaskRemoveFromEventList+0xb8>)
 8004204:	f7fe fdc3 	bl	8002d8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420c:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <xTaskRemoveFromEventList+0xbc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	429a      	cmp	r2, r3
 8004214:	d905      	bls.n	8004222 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004216:	2301      	movs	r3, #1
 8004218:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <xTaskRemoveFromEventList+0xc0>)
 800421c:	2201      	movs	r2, #1
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e001      	b.n	8004226 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004226:	697b      	ldr	r3, [r7, #20]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000cc4 	.word	0x20000cc4
 8004234:	20000ca4 	.word	0x20000ca4
 8004238:	200007cc 	.word	0x200007cc
 800423c:	20000c5c 	.word	0x20000c5c
 8004240:	200007c8 	.word	0x200007c8
 8004244:	20000cb0 	.word	0x20000cb0

08004248 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <vTaskInternalSetTimeOutState+0x24>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <vTaskInternalSetTimeOutState+0x28>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	605a      	str	r2, [r3, #4]
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000cb4 	.word	0x20000cb4
 8004270:	20000ca0 	.word	0x20000ca0

08004274 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d109      	bne.n	8004298 <xTaskCheckForTimeOut+0x24>
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	e7fe      	b.n	8004296 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <xTaskCheckForTimeOut+0x3e>
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e7fe      	b.n	80042b0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80042b2:	f000 fdf1 	bl	8004e98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <xTaskCheckForTimeOut+0xb8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ce:	d102      	bne.n	80042d6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	e023      	b.n	800431e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b15      	ldr	r3, [pc, #84]	; (8004330 <xTaskCheckForTimeOut+0xbc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d007      	beq.n	80042f2 <xTaskCheckForTimeOut+0x7e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d302      	bcc.n	80042f2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	e015      	b.n	800431e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d20b      	bcs.n	8004314 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	1ad2      	subs	r2, r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff ff9d 	bl	8004248 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	e004      	b.n	800431e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800431a:	2301      	movs	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800431e:	f000 fde9 	bl	8004ef4 <vPortExitCritical>

	return xReturn;
 8004322:	69fb      	ldr	r3, [r7, #28]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3720      	adds	r7, #32
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000ca0 	.word	0x20000ca0
 8004330:	20000cb4 	.word	0x20000cb4

08004334 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004338:	4b03      	ldr	r3, [pc, #12]	; (8004348 <vTaskMissedYield+0x14>)
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]
}
 800433e:	bf00      	nop
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000cb0 	.word	0x20000cb0

0800434c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004354:	f000 f852 	bl	80043fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004358:	4b06      	ldr	r3, [pc, #24]	; (8004374 <prvIdleTask+0x28>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d9f9      	bls.n	8004354 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <prvIdleTask+0x2c>)
 8004362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004370:	e7f0      	b.n	8004354 <prvIdleTask+0x8>
 8004372:	bf00      	nop
 8004374:	200007cc 	.word	0x200007cc
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004382:	2300      	movs	r3, #0
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	e00c      	b.n	80043a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4a12      	ldr	r2, [pc, #72]	; (80043dc <prvInitialiseTaskLists+0x60>)
 8004394:	4413      	add	r3, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe fcce 	bl	8002d38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3301      	adds	r3, #1
 80043a0:	607b      	str	r3, [r7, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b37      	cmp	r3, #55	; 0x37
 80043a6:	d9ef      	bls.n	8004388 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043a8:	480d      	ldr	r0, [pc, #52]	; (80043e0 <prvInitialiseTaskLists+0x64>)
 80043aa:	f7fe fcc5 	bl	8002d38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043ae:	480d      	ldr	r0, [pc, #52]	; (80043e4 <prvInitialiseTaskLists+0x68>)
 80043b0:	f7fe fcc2 	bl	8002d38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043b4:	480c      	ldr	r0, [pc, #48]	; (80043e8 <prvInitialiseTaskLists+0x6c>)
 80043b6:	f7fe fcbf 	bl	8002d38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043ba:	480c      	ldr	r0, [pc, #48]	; (80043ec <prvInitialiseTaskLists+0x70>)
 80043bc:	f7fe fcbc 	bl	8002d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043c0:	480b      	ldr	r0, [pc, #44]	; (80043f0 <prvInitialiseTaskLists+0x74>)
 80043c2:	f7fe fcb9 	bl	8002d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <prvInitialiseTaskLists+0x78>)
 80043c8:	4a05      	ldr	r2, [pc, #20]	; (80043e0 <prvInitialiseTaskLists+0x64>)
 80043ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <prvInitialiseTaskLists+0x7c>)
 80043ce:	4a05      	ldr	r2, [pc, #20]	; (80043e4 <prvInitialiseTaskLists+0x68>)
 80043d0:	601a      	str	r2, [r3, #0]
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	200007cc 	.word	0x200007cc
 80043e0:	20000c2c 	.word	0x20000c2c
 80043e4:	20000c40 	.word	0x20000c40
 80043e8:	20000c5c 	.word	0x20000c5c
 80043ec:	20000c70 	.word	0x20000c70
 80043f0:	20000c88 	.word	0x20000c88
 80043f4:	20000c54 	.word	0x20000c54
 80043f8:	20000c58 	.word	0x20000c58

080043fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004402:	e019      	b.n	8004438 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004404:	f000 fd48 	bl	8004e98 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <prvCheckTasksWaitingTermination+0x4c>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	4618      	mov	r0, r3
 8004416:	f7fe fd15 	bl	8002e44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800441a:	4b0c      	ldr	r3, [pc, #48]	; (800444c <prvCheckTasksWaitingTermination+0x50>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3b01      	subs	r3, #1
 8004420:	4a0a      	ldr	r2, [pc, #40]	; (800444c <prvCheckTasksWaitingTermination+0x50>)
 8004422:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004424:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <prvCheckTasksWaitingTermination+0x54>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3b01      	subs	r3, #1
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <prvCheckTasksWaitingTermination+0x54>)
 800442c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800442e:	f000 fd61 	bl	8004ef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f80e 	bl	8004454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <prvCheckTasksWaitingTermination+0x54>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e1      	bne.n	8004404 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20000c70 	.word	0x20000c70
 800444c:	20000c9c 	.word	0x20000c9c
 8004450:	20000c84 	.word	0x20000c84

08004454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004462:	2b00      	cmp	r3, #0
 8004464:	d108      	bne.n	8004478 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fecc 	bl	8005208 <vPortFree>
				vPortFree( pxTCB );
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fec9 	bl	8005208 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004476:	e017      	b.n	80044a8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800447e:	2b01      	cmp	r3, #1
 8004480:	d103      	bne.n	800448a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fec0 	bl	8005208 <vPortFree>
	}
 8004488:	e00e      	b.n	80044a8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004490:	2b02      	cmp	r3, #2
 8004492:	d009      	beq.n	80044a8 <prvDeleteTCB+0x54>
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	e7fe      	b.n	80044a6 <prvDeleteTCB+0x52>
	}
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044b6:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <prvResetNextTaskUnblockTime+0x40>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <prvResetNextTaskUnblockTime+0x14>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <prvResetNextTaskUnblockTime+0x16>
 80044c4:	2300      	movs	r3, #0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044ca:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <prvResetNextTaskUnblockTime+0x44>)
 80044cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044d2:	e008      	b.n	80044e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <prvResetNextTaskUnblockTime+0x40>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4a04      	ldr	r2, [pc, #16]	; (80044f4 <prvResetNextTaskUnblockTime+0x44>)
 80044e4:	6013      	str	r3, [r2, #0]
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	20000c54 	.word	0x20000c54
 80044f4:	20000cbc 	.word	0x20000cbc

080044f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044fe:	4b0b      	ldr	r3, [pc, #44]	; (800452c <xTaskGetSchedulerState+0x34>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d102      	bne.n	800450c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004506:	2301      	movs	r3, #1
 8004508:	607b      	str	r3, [r7, #4]
 800450a:	e008      	b.n	800451e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800450c:	4b08      	ldr	r3, [pc, #32]	; (8004530 <xTaskGetSchedulerState+0x38>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d102      	bne.n	800451a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004514:	2302      	movs	r3, #2
 8004516:	607b      	str	r3, [r7, #4]
 8004518:	e001      	b.n	800451e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800451a:	2300      	movs	r3, #0
 800451c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800451e:	687b      	ldr	r3, [r7, #4]
	}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000ca8 	.word	0x20000ca8
 8004530:	20000cc4 	.word	0x20000cc4

08004534 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d054      	beq.n	80045f4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800454a:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <xTaskPriorityDisinherit+0xcc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	429a      	cmp	r2, r3
 8004552:	d009      	beq.n	8004568 <xTaskPriorityDisinherit+0x34>
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	e7fe      	b.n	8004566 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <xTaskPriorityDisinherit+0x50>
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	e7fe      	b.n	8004582 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004588:	1e5a      	subs	r2, r3, #1
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004596:	429a      	cmp	r2, r3
 8004598:	d02c      	beq.n	80045f4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d128      	bne.n	80045f4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	3304      	adds	r3, #4
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe fc4c 	bl	8002e44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <xTaskPriorityDisinherit+0xd0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d903      	bls.n	80045d4 <xTaskPriorityDisinherit+0xa0>
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <xTaskPriorityDisinherit+0xd0>)
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4a09      	ldr	r2, [pc, #36]	; (8004608 <xTaskPriorityDisinherit+0xd4>)
 80045e2:	441a      	add	r2, r3
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f7fe fbcf 	bl	8002d8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045f4:	697b      	ldr	r3, [r7, #20]
	}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	200007c8 	.word	0x200007c8
 8004604:	20000ca4 	.word	0x20000ca4
 8004608:	200007cc 	.word	0x200007cc

0800460c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004616:	4b21      	ldr	r3, [pc, #132]	; (800469c <prvAddCurrentTaskToDelayedList+0x90>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800461c:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3304      	adds	r3, #4
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe fc0e 	bl	8002e44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800462e:	d10a      	bne.n	8004646 <prvAddCurrentTaskToDelayedList+0x3a>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004636:	4b1a      	ldr	r3, [pc, #104]	; (80046a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4819      	ldr	r0, [pc, #100]	; (80046a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004640:	f7fe fba5 	bl	8002d8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004644:	e026      	b.n	8004694 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4413      	add	r3, r2
 800464c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	429a      	cmp	r2, r3
 800465c:	d209      	bcs.n	8004672 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f7fe fbb2 	bl	8002dd4 <vListInsert>
}
 8004670:	e010      	b.n	8004694 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004672:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3304      	adds	r3, #4
 800467c:	4619      	mov	r1, r3
 800467e:	4610      	mov	r0, r2
 8004680:	f7fe fba8 	bl	8002dd4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004684:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	429a      	cmp	r2, r3
 800468c:	d202      	bcs.n	8004694 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800468e:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	6013      	str	r3, [r2, #0]
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000ca0 	.word	0x20000ca0
 80046a0:	200007c8 	.word	0x200007c8
 80046a4:	20000c88 	.word	0x20000c88
 80046a8:	20000c58 	.word	0x20000c58
 80046ac:	20000c54 	.word	0x20000c54
 80046b0:	20000cbc 	.word	0x20000cbc

080046b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08a      	sub	sp, #40	; 0x28
 80046b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80046be:	f000 fac3 	bl	8004c48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80046c2:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <xTimerCreateTimerTask+0x80>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d021      	beq.n	800470e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80046d2:	1d3a      	adds	r2, r7, #4
 80046d4:	f107 0108 	add.w	r1, r7, #8
 80046d8:	f107 030c 	add.w	r3, r7, #12
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe fb11 	bl	8002d04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	9202      	str	r2, [sp, #8]
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	2302      	movs	r3, #2
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	2300      	movs	r3, #0
 80046f2:	460a      	mov	r2, r1
 80046f4:	4910      	ldr	r1, [pc, #64]	; (8004738 <xTimerCreateTimerTask+0x84>)
 80046f6:	4811      	ldr	r0, [pc, #68]	; (800473c <xTimerCreateTimerTask+0x88>)
 80046f8:	f7ff f92c 	bl	8003954 <xTaskCreateStatic>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b10      	ldr	r3, [pc, #64]	; (8004740 <xTimerCreateTimerTask+0x8c>)
 8004700:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <xTimerCreateTimerTask+0x8c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800470a:	2301      	movs	r3, #1
 800470c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <xTimerCreateTimerTask+0x74>
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	e7fe      	b.n	8004726 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004728:	697b      	ldr	r3, [r7, #20]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000cf8 	.word	0x20000cf8
 8004738:	08009d68 	.word	0x08009d68
 800473c:	0800485d 	.word	0x0800485d
 8004740:	20000cfc 	.word	0x20000cfc

08004744 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <xTimerGenericCommand+0x2c>
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	623b      	str	r3, [r7, #32]
 800476e:	e7fe      	b.n	800476e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004770:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <xTimerGenericCommand+0x94>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d02a      	beq.n	80047ce <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b05      	cmp	r3, #5
 8004788:	dc18      	bgt.n	80047bc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800478a:	f7ff feb5 	bl	80044f8 <xTaskGetSchedulerState>
 800478e:	4603      	mov	r3, r0
 8004790:	2b02      	cmp	r3, #2
 8004792:	d109      	bne.n	80047a8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004794:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <xTimerGenericCommand+0x94>)
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	f107 0110 	add.w	r1, r7, #16
 800479c:	2300      	movs	r3, #0
 800479e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a0:	f7fe fd02 	bl	80031a8 <xQueueGenericSend>
 80047a4:	6278      	str	r0, [r7, #36]	; 0x24
 80047a6:	e012      	b.n	80047ce <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <xTimerGenericCommand+0x94>)
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	f107 0110 	add.w	r1, r7, #16
 80047b0:	2300      	movs	r3, #0
 80047b2:	2200      	movs	r2, #0
 80047b4:	f7fe fcf8 	bl	80031a8 <xQueueGenericSend>
 80047b8:	6278      	str	r0, [r7, #36]	; 0x24
 80047ba:	e008      	b.n	80047ce <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80047bc:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <xTimerGenericCommand+0x94>)
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	f107 0110 	add.w	r1, r7, #16
 80047c4:	2300      	movs	r3, #0
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	f7fe fde8 	bl	800339c <xQueueGenericSendFromISR>
 80047cc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3728      	adds	r7, #40	; 0x28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000cf8 	.word	0x20000cf8

080047dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047e6:	4b1c      	ldr	r3, [pc, #112]	; (8004858 <prvProcessExpiredTimer+0x7c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fe fb25 	bl	8002e44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d121      	bne.n	8004846 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	18d1      	adds	r1, r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	6978      	ldr	r0, [r7, #20]
 8004810:	f000 f8c8 	bl	80049a4 <prvInsertTimerInActiveList>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d015      	beq.n	8004846 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800481a:	2300      	movs	r3, #0
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	2300      	movs	r3, #0
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	2100      	movs	r1, #0
 8004824:	6978      	ldr	r0, [r7, #20]
 8004826:	f7ff ff8d 	bl	8004744 <xTimerGenericCommand>
 800482a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <prvProcessExpiredTimer+0x6a>
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e7fe      	b.n	8004844 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	6978      	ldr	r0, [r7, #20]
 800484c:	4798      	blx	r3
}
 800484e:	bf00      	nop
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000cf0 	.word	0x20000cf0

0800485c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004864:	f107 0308 	add.w	r3, r7, #8
 8004868:	4618      	mov	r0, r3
 800486a:	f000 f857 	bl	800491c <prvGetNextExpireTime>
 800486e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4619      	mov	r1, r3
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f803 	bl	8004880 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800487a:	f000 f8d5 	bl	8004a28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800487e:	e7f1      	b.n	8004864 <prvTimerTask+0x8>

08004880 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800488a:	f7ff fa5b 	bl	8003d44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800488e:	f107 0308 	add.w	r3, r7, #8
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f866 	bl	8004964 <prvSampleTimeNow>
 8004898:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d130      	bne.n	8004902 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <prvProcessTimerOrBlockTask+0x3c>
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d806      	bhi.n	80048bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80048ae:	f7ff fa57 	bl	8003d60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048b2:	68f9      	ldr	r1, [r7, #12]
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff ff91 	bl	80047dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80048ba:	e024      	b.n	8004906 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048c2:	4b13      	ldr	r3, [pc, #76]	; (8004910 <prvProcessTimerOrBlockTask+0x90>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <prvProcessTimerOrBlockTask+0x94>)
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	4619      	mov	r1, r3
 80048e2:	f7ff f803 	bl	80038ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048e6:	f7ff fa3b 	bl	8003d60 <xTaskResumeAll>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048f0:	4b09      	ldr	r3, [pc, #36]	; (8004918 <prvProcessTimerOrBlockTask+0x98>)
 80048f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	f3bf 8f6f 	isb	sy
}
 8004900:	e001      	b.n	8004906 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004902:	f7ff fa2d 	bl	8003d60 <xTaskResumeAll>
}
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000cf4 	.word	0x20000cf4
 8004914:	20000cf8 	.word	0x20000cf8
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004924:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <prvGetNextExpireTime+0x44>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d105      	bne.n	800494e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <prvGetNextExpireTime+0x44>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	e001      	b.n	8004952 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004952:	68fb      	ldr	r3, [r7, #12]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20000cf0 	.word	0x20000cf0

08004964 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800496c:	f7ff fa94 	bl	8003e98 <xTaskGetTickCount>
 8004970:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <prvSampleTimeNow+0x3c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	429a      	cmp	r2, r3
 800497a:	d205      	bcs.n	8004988 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800497c:	f000 f904 	bl	8004b88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	e002      	b.n	800498e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800498e:	4a04      	ldr	r2, [pc, #16]	; (80049a0 <prvSampleTimeNow+0x3c>)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004994:	68fb      	ldr	r3, [r7, #12]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000d00 	.word	0x20000d00

080049a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d812      	bhi.n	80049f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d302      	bcc.n	80049de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049d8:	2301      	movs	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e01b      	b.n	8004a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <prvInsertTimerInActiveList+0x7c>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f7fe f9f3 	bl	8002dd4 <vListInsert>
 80049ee:	e012      	b.n	8004a16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d206      	bcs.n	8004a06 <prvInsertTimerInActiveList+0x62>
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d302      	bcc.n	8004a06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a00:	2301      	movs	r3, #1
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	e007      	b.n	8004a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a06:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <prvInsertTimerInActiveList+0x80>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4610      	mov	r0, r2
 8004a12:	f7fe f9df 	bl	8002dd4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a16:	697b      	ldr	r3, [r7, #20]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000cf4 	.word	0x20000cf4
 8004a24:	20000cf0 	.word	0x20000cf0

08004a28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08e      	sub	sp, #56	; 0x38
 8004a2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a2e:	e099      	b.n	8004b64 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	da17      	bge.n	8004a66 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a36:	1d3b      	adds	r3, r7, #4
 8004a38:	3304      	adds	r3, #4
 8004a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <prvProcessReceivedCommands+0x2e>
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	e7fe      	b.n	8004a54 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a5c:	6850      	ldr	r0, [r2, #4]
 8004a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a60:	6892      	ldr	r2, [r2, #8]
 8004a62:	4611      	mov	r1, r2
 8004a64:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	db7a      	blt.n	8004b62 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe f9e1 	bl	8002e44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a82:	463b      	mov	r3, r7
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff ff6d 	bl	8004964 <prvSampleTimeNow>
 8004a8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b09      	cmp	r3, #9
 8004a90:	d868      	bhi.n	8004b64 <prvProcessReceivedCommands+0x13c>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <prvProcessReceivedCommands+0x70>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004ac1 	.word	0x08004ac1
 8004a9c:	08004ac1 	.word	0x08004ac1
 8004aa0:	08004ac1 	.word	0x08004ac1
 8004aa4:	08004b65 	.word	0x08004b65
 8004aa8:	08004b1b 	.word	0x08004b1b
 8004aac:	08004b51 	.word	0x08004b51
 8004ab0:	08004ac1 	.word	0x08004ac1
 8004ab4:	08004ac1 	.word	0x08004ac1
 8004ab8:	08004b65 	.word	0x08004b65
 8004abc:	08004b1b 	.word	0x08004b1b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	18d1      	adds	r1, r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ace:	f7ff ff69 	bl	80049a4 <prvInsertTimerInActiveList>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d045      	beq.n	8004b64 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ade:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d13d      	bne.n	8004b64 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	441a      	add	r2, r3
 8004af0:	2300      	movs	r3, #0
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	2300      	movs	r3, #0
 8004af6:	2100      	movs	r1, #0
 8004af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004afa:	f7ff fe23 	bl	8004744 <xTimerGenericCommand>
 8004afe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d12e      	bne.n	8004b64 <prvProcessReceivedCommands+0x13c>
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	61bb      	str	r3, [r7, #24]
 8004b18:	e7fe      	b.n	8004b18 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d109      	bne.n	8004b3c <prvProcessReceivedCommands+0x114>
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	e7fe      	b.n	8004b3a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	18d1      	adds	r1, r2, r3
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b4a:	f7ff ff2b 	bl	80049a4 <prvInsertTimerInActiveList>
					break;
 8004b4e:	e009      	b.n	8004b64 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d104      	bne.n	8004b64 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b5c:	f000 fb54 	bl	8005208 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b60:	e000      	b.n	8004b64 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b62:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b64:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <prvProcessReceivedCommands+0x15c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	1d39      	adds	r1, r7, #4
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe fca9 	bl	80034c4 <xQueueReceive>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f47f af5b 	bne.w	8004a30 <prvProcessReceivedCommands+0x8>
	}
}
 8004b7a:	bf00      	nop
 8004b7c:	3730      	adds	r7, #48	; 0x30
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000cf8 	.word	0x20000cf8

08004b88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b8e:	e044      	b.n	8004c1a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b90:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <prvSwitchTimerLists+0xb8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b9a:	4b29      	ldr	r3, [pc, #164]	; (8004c40 <prvSwitchTimerLists+0xb8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fe f94b 	bl	8002e44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d12d      	bne.n	8004c1a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d90e      	bls.n	8004bee <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bdc:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <prvSwitchTimerLists+0xb8>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3304      	adds	r3, #4
 8004be4:	4619      	mov	r1, r3
 8004be6:	4610      	mov	r0, r2
 8004be8:	f7fe f8f4 	bl	8002dd4 <vListInsert>
 8004bec:	e015      	b.n	8004c1a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bee:	2300      	movs	r3, #0
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff fda3 	bl	8004744 <xTimerGenericCommand>
 8004bfe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <prvSwitchTimerLists+0x92>
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	e7fe      	b.n	8004c18 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c1a:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <prvSwitchTimerLists+0xb8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1b5      	bne.n	8004b90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <prvSwitchTimerLists+0xb8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <prvSwitchTimerLists+0xbc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <prvSwitchTimerLists+0xb8>)
 8004c30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c32:	4a04      	ldr	r2, [pc, #16]	; (8004c44 <prvSwitchTimerLists+0xbc>)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	6013      	str	r3, [r2, #0]
}
 8004c38:	bf00      	nop
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000cf0 	.word	0x20000cf0
 8004c44:	20000cf4 	.word	0x20000cf4

08004c48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c4e:	f000 f923 	bl	8004e98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <prvCheckForValidListAndQueue+0x60>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d120      	bne.n	8004c9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c5a:	4814      	ldr	r0, [pc, #80]	; (8004cac <prvCheckForValidListAndQueue+0x64>)
 8004c5c:	f7fe f86c 	bl	8002d38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c60:	4813      	ldr	r0, [pc, #76]	; (8004cb0 <prvCheckForValidListAndQueue+0x68>)
 8004c62:	f7fe f869 	bl	8002d38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c66:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <prvCheckForValidListAndQueue+0x6c>)
 8004c68:	4a10      	ldr	r2, [pc, #64]	; (8004cac <prvCheckForValidListAndQueue+0x64>)
 8004c6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c6c:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <prvCheckForValidListAndQueue+0x70>)
 8004c6e:	4a10      	ldr	r2, [pc, #64]	; (8004cb0 <prvCheckForValidListAndQueue+0x68>)
 8004c70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c72:	2300      	movs	r3, #0
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <prvCheckForValidListAndQueue+0x74>)
 8004c78:	4a11      	ldr	r2, [pc, #68]	; (8004cc0 <prvCheckForValidListAndQueue+0x78>)
 8004c7a:	2110      	movs	r1, #16
 8004c7c:	200a      	movs	r0, #10
 8004c7e:	f7fe f973 	bl	8002f68 <xQueueGenericCreateStatic>
 8004c82:	4602      	mov	r2, r0
 8004c84:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <prvCheckForValidListAndQueue+0x60>)
 8004c86:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c88:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <prvCheckForValidListAndQueue+0x60>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <prvCheckForValidListAndQueue+0x60>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	490b      	ldr	r1, [pc, #44]	; (8004cc4 <prvCheckForValidListAndQueue+0x7c>)
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe fe00 	bl	800389c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c9c:	f000 f92a 	bl	8004ef4 <vPortExitCritical>
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000cf8 	.word	0x20000cf8
 8004cac:	20000cc8 	.word	0x20000cc8
 8004cb0:	20000cdc 	.word	0x20000cdc
 8004cb4:	20000cf0 	.word	0x20000cf0
 8004cb8:	20000cf4 	.word	0x20000cf4
 8004cbc:	20000da4 	.word	0x20000da4
 8004cc0:	20000d04 	.word	0x20000d04
 8004cc4:	08009d70 	.word	0x08009d70

08004cc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3b04      	subs	r3, #4
 8004cd8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3b04      	subs	r3, #4
 8004ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f023 0201 	bic.w	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3b04      	subs	r3, #4
 8004cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cf8:	4a08      	ldr	r2, [pc, #32]	; (8004d1c <pxPortInitialiseStack+0x54>)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3b14      	subs	r3, #20
 8004d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3b20      	subs	r3, #32
 8004d0e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d10:	68fb      	ldr	r3, [r7, #12]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr
 8004d1c:	08004d21 	.word	0x08004d21

08004d20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <prvTaskExitError+0x4c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d32:	d009      	beq.n	8004d48 <prvTaskExitError+0x28>
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	e7fe      	b.n	8004d46 <prvTaskExitError+0x26>
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d5a:	bf00      	nop
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0fc      	beq.n	8004d5c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	20000008 	.word	0x20000008

08004d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <pxCurrentTCBConst2>)
 8004d72:	6819      	ldr	r1, [r3, #0]
 8004d74:	6808      	ldr	r0, [r1, #0]
 8004d76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d7a:	f380 8809 	msr	PSP, r0
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f380 8811 	msr	BASEPRI, r0
 8004d8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004d8e:	4770      	bx	lr

08004d90 <pxCurrentTCBConst2>:
 8004d90:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop

08004d98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004d98:	4806      	ldr	r0, [pc, #24]	; (8004db4 <prvPortStartFirstTask+0x1c>)
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	6800      	ldr	r0, [r0, #0]
 8004d9e:	f380 8808 	msr	MSP, r0
 8004da2:	b662      	cpsie	i
 8004da4:	b661      	cpsie	f
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	df00      	svc	0
 8004db0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004db2:	bf00      	nop
 8004db4:	e000ed08 	.word	0xe000ed08

08004db8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dbe:	4b31      	ldr	r3, [pc, #196]	; (8004e84 <xPortStartScheduler+0xcc>)
 8004dc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	22ff      	movs	r2, #255	; 0xff
 8004dce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	4b29      	ldr	r3, [pc, #164]	; (8004e88 <xPortStartScheduler+0xd0>)
 8004de4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004de6:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004de8:	2207      	movs	r2, #7
 8004dea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dec:	e009      	b.n	8004e02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004dee:	4b27      	ldr	r3, [pc, #156]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	4a25      	ldr	r2, [pc, #148]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004df6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0a:	2b80      	cmp	r3, #128	; 0x80
 8004e0c:	d0ef      	beq.n	8004dee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e0e:	4b1f      	ldr	r3, [pc, #124]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f1c3 0307 	rsb	r3, r3, #7
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d009      	beq.n	8004e2e <xPortStartScheduler+0x76>
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	e7fe      	b.n	8004e2c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e2e:	4b17      	ldr	r3, [pc, #92]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004e36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e38:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e40:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <xPortStartScheduler+0xd4>)
 8004e42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e4c:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <xPortStartScheduler+0xd8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a0f      	ldr	r2, [pc, #60]	; (8004e90 <xPortStartScheduler+0xd8>)
 8004e52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e58:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <xPortStartScheduler+0xd8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a0c      	ldr	r2, [pc, #48]	; (8004e90 <xPortStartScheduler+0xd8>)
 8004e5e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e64:	f000 f8b0 	bl	8004fc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <xPortStartScheduler+0xdc>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e6e:	f7ff ff93 	bl	8004d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e72:	f7ff f8dd 	bl	8004030 <vTaskSwitchContext>
	prvTaskExitError();
 8004e76:	f7ff ff53 	bl	8004d20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	e000e400 	.word	0xe000e400
 8004e88:	20000df4 	.word	0x20000df4
 8004e8c:	20000df8 	.word	0x20000df8
 8004e90:	e000ed20 	.word	0xe000ed20
 8004e94:	20000008 	.word	0x20000008

08004e98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004eb0:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <vPortEnterCritical+0x54>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	4a0d      	ldr	r2, [pc, #52]	; (8004eec <vPortEnterCritical+0x54>)
 8004eb8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004eba:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <vPortEnterCritical+0x54>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d10e      	bne.n	8004ee0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <vPortEnterCritical+0x58>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <vPortEnterCritical+0x48>
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	e7fe      	b.n	8004ede <vPortEnterCritical+0x46>
	}
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000008 	.word	0x20000008
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004efa:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <vPortExitCritical+0x48>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <vPortExitCritical+0x22>
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	607b      	str	r3, [r7, #4]
 8004f14:	e7fe      	b.n	8004f14 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004f16:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <vPortExitCritical+0x48>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	4a07      	ldr	r2, [pc, #28]	; (8004f3c <vPortExitCritical+0x48>)
 8004f1e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <vPortExitCritical+0x48>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <vPortExitCritical+0x3e>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr
 8004f3c:	20000008 	.word	0x20000008

08004f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f40:	f3ef 8009 	mrs	r0, PSP
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <pxCurrentTCBConst>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f50:	6010      	str	r0, [r2, #0]
 8004f52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004f56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f5a:	f380 8811 	msr	BASEPRI, r0
 8004f5e:	f7ff f867 	bl	8004030 <vTaskSwitchContext>
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f380 8811 	msr	BASEPRI, r0
 8004f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	6808      	ldr	r0, [r1, #0]
 8004f72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f76:	f380 8809 	msr	PSP, r0
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	4770      	bx	lr

08004f80 <pxCurrentTCBConst>:
 8004f80:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fa0:	f7fe ff88 	bl	8003eb4 <xTaskIncrementTick>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <SysTick_Handler+0x3c>)
 8004fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	e000ed04 	.word	0xe000ed04

08004fc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <vPortSetupTimerInterrupt+0x30>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <vPortSetupTimerInterrupt+0x34>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fd8:	4b09      	ldr	r3, [pc, #36]	; (8005000 <vPortSetupTimerInterrupt+0x38>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a09      	ldr	r2, [pc, #36]	; (8005004 <vPortSetupTimerInterrupt+0x3c>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	4a08      	ldr	r2, [pc, #32]	; (8005008 <vPortSetupTimerInterrupt+0x40>)
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fea:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <vPortSetupTimerInterrupt+0x30>)
 8004fec:	2207      	movs	r2, #7
 8004fee:	601a      	str	r2, [r3, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr
 8004ff8:	e000e010 	.word	0xe000e010
 8004ffc:	e000e018 	.word	0xe000e018
 8005000:	2000000c 	.word	0x2000000c
 8005004:	10624dd3 	.word	0x10624dd3
 8005008:	e000e014 	.word	0xe000e014

0800500c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005012:	f3ef 8305 	mrs	r3, IPSR
 8005016:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b0f      	cmp	r3, #15
 800501c:	d913      	bls.n	8005046 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800501e:	4a15      	ldr	r2, [pc, #84]	; (8005074 <vPortValidateInterruptPriority+0x68>)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005028:	4b13      	ldr	r3, [pc, #76]	; (8005078 <vPortValidateInterruptPriority+0x6c>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	7afa      	ldrb	r2, [r7, #11]
 800502e:	429a      	cmp	r2, r3
 8005030:	d209      	bcs.n	8005046 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	607b      	str	r3, [r7, #4]
 8005044:	e7fe      	b.n	8005044 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005046:	4b0d      	ldr	r3, [pc, #52]	; (800507c <vPortValidateInterruptPriority+0x70>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800504e:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <vPortValidateInterruptPriority+0x74>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d909      	bls.n	800506a <vPortValidateInterruptPriority+0x5e>
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	e7fe      	b.n	8005068 <vPortValidateInterruptPriority+0x5c>
	}
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	e000e3f0 	.word	0xe000e3f0
 8005078:	20000df4 	.word	0x20000df4
 800507c:	e000ed0c 	.word	0xe000ed0c
 8005080:	20000df8 	.word	0x20000df8

08005084 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	; 0x28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800508c:	2300      	movs	r3, #0
 800508e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005090:	f7fe fe58 	bl	8003d44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005094:	4b57      	ldr	r3, [pc, #348]	; (80051f4 <pvPortMalloc+0x170>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800509c:	f000 f90c 	bl	80052b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050a0:	4b55      	ldr	r3, [pc, #340]	; (80051f8 <pvPortMalloc+0x174>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f040 808c 	bne.w	80051c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01c      	beq.n	80050ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80050b4:	2208      	movs	r2, #8
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d013      	beq.n	80050ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f023 0307 	bic.w	r3, r3, #7
 80050cc:	3308      	adds	r3, #8
 80050ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <pvPortMalloc+0x6a>
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	e7fe      	b.n	80050ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d068      	beq.n	80051c6 <pvPortMalloc+0x142>
 80050f4:	4b41      	ldr	r3, [pc, #260]	; (80051fc <pvPortMalloc+0x178>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d863      	bhi.n	80051c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050fe:	4b40      	ldr	r3, [pc, #256]	; (8005200 <pvPortMalloc+0x17c>)
 8005100:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005102:	4b3f      	ldr	r3, [pc, #252]	; (8005200 <pvPortMalloc+0x17c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005108:	e004      	b.n	8005114 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	429a      	cmp	r2, r3
 800511c:	d903      	bls.n	8005126 <pvPortMalloc+0xa2>
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f1      	bne.n	800510a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005126:	4b33      	ldr	r3, [pc, #204]	; (80051f4 <pvPortMalloc+0x170>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512c:	429a      	cmp	r2, r3
 800512e:	d04a      	beq.n	80051c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2208      	movs	r2, #8
 8005136:	4413      	add	r3, r2
 8005138:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	1ad2      	subs	r2, r2, r3
 800514a:	2308      	movs	r3, #8
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	429a      	cmp	r2, r3
 8005150:	d91e      	bls.n	8005190 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4413      	add	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <pvPortMalloc+0xf4>
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	e7fe      	b.n	8005176 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	1ad2      	subs	r2, r2, r3
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800518a:	69b8      	ldr	r0, [r7, #24]
 800518c:	f000 f8f6 	bl	800537c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005190:	4b1a      	ldr	r3, [pc, #104]	; (80051fc <pvPortMalloc+0x178>)
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	4a18      	ldr	r2, [pc, #96]	; (80051fc <pvPortMalloc+0x178>)
 800519c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800519e:	4b17      	ldr	r3, [pc, #92]	; (80051fc <pvPortMalloc+0x178>)
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b18      	ldr	r3, [pc, #96]	; (8005204 <pvPortMalloc+0x180>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d203      	bcs.n	80051b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051aa:	4b14      	ldr	r3, [pc, #80]	; (80051fc <pvPortMalloc+0x178>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a15      	ldr	r2, [pc, #84]	; (8005204 <pvPortMalloc+0x180>)
 80051b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <pvPortMalloc+0x174>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051c6:	f7fe fdcb 	bl	8003d60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <pvPortMalloc+0x164>
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e7fe      	b.n	80051e6 <pvPortMalloc+0x162>
	return pvReturn;
 80051e8:	69fb      	ldr	r3, [r7, #28]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3728      	adds	r7, #40	; 0x28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20001a04 	.word	0x20001a04
 80051f8:	20001a10 	.word	0x20001a10
 80051fc:	20001a08 	.word	0x20001a08
 8005200:	200019fc 	.word	0x200019fc
 8005204:	20001a0c 	.word	0x20001a0c

08005208 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d046      	beq.n	80052a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800521a:	2308      	movs	r3, #8
 800521c:	425b      	negs	r3, r3
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4413      	add	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	4b20      	ldr	r3, [pc, #128]	; (80052b0 <vPortFree+0xa8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4013      	ands	r3, r2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d109      	bne.n	800524a <vPortFree+0x42>
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e7fe      	b.n	8005248 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d009      	beq.n	8005266 <vPortFree+0x5e>
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	e7fe      	b.n	8005264 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <vPortFree+0xa8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d019      	beq.n	80052a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d115      	bne.n	80052a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <vPortFree+0xa8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	43db      	mvns	r3, r3
 8005286:	401a      	ands	r2, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800528c:	f7fe fd5a 	bl	8003d44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <vPortFree+0xac>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4413      	add	r3, r2
 800529a:	4a06      	ldr	r2, [pc, #24]	; (80052b4 <vPortFree+0xac>)
 800529c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800529e:	6938      	ldr	r0, [r7, #16]
 80052a0:	f000 f86c 	bl	800537c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80052a4:	f7fe fd5c 	bl	8003d60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052a8:	bf00      	nop
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	20001a10 	.word	0x20001a10
 80052b4:	20001a08 	.word	0x20001a08

080052b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80052c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052c4:	4b27      	ldr	r3, [pc, #156]	; (8005364 <prvHeapInit+0xac>)
 80052c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3307      	adds	r3, #7
 80052d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0307 	bic.w	r3, r3, #7
 80052de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	4a1f      	ldr	r2, [pc, #124]	; (8005364 <prvHeapInit+0xac>)
 80052e8:	4413      	add	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052f0:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <prvHeapInit+0xb0>)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052f6:	4b1c      	ldr	r3, [pc, #112]	; (8005368 <prvHeapInit+0xb0>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	4413      	add	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005304:	2208      	movs	r2, #8
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0307 	bic.w	r3, r3, #7
 8005312:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4a15      	ldr	r2, [pc, #84]	; (800536c <prvHeapInit+0xb4>)
 8005318:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800531a:	4b14      	ldr	r3, [pc, #80]	; (800536c <prvHeapInit+0xb4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2200      	movs	r2, #0
 8005320:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <prvHeapInit+0xb4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	1ad2      	subs	r2, r2, r3
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <prvHeapInit+0xb4>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4a0a      	ldr	r2, [pc, #40]	; (8005370 <prvHeapInit+0xb8>)
 8005346:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4a09      	ldr	r2, [pc, #36]	; (8005374 <prvHeapInit+0xbc>)
 800534e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005350:	4b09      	ldr	r3, [pc, #36]	; (8005378 <prvHeapInit+0xc0>)
 8005352:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005356:	601a      	str	r2, [r3, #0]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000dfc 	.word	0x20000dfc
 8005368:	200019fc 	.word	0x200019fc
 800536c:	20001a04 	.word	0x20001a04
 8005370:	20001a0c 	.word	0x20001a0c
 8005374:	20001a08 	.word	0x20001a08
 8005378:	20001a10 	.word	0x20001a10

0800537c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005384:	4b27      	ldr	r3, [pc, #156]	; (8005424 <prvInsertBlockIntoFreeList+0xa8>)
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	e002      	b.n	8005390 <prvInsertBlockIntoFreeList+0x14>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	429a      	cmp	r2, r3
 8005398:	d8f7      	bhi.n	800538a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	4413      	add	r3, r2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d108      	bne.n	80053be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	441a      	add	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	441a      	add	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d118      	bne.n	8005404 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <prvInsertBlockIntoFreeList+0xac>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d00d      	beq.n	80053fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	441a      	add	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	e008      	b.n	800540c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <prvInsertBlockIntoFreeList+0xac>)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e003      	b.n	800540c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	429a      	cmp	r2, r3
 8005412:	d002      	beq.n	800541a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800541a:	bf00      	nop
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr
 8005424:	200019fc 	.word	0x200019fc
 8005428:	20001a04 	.word	0x20001a04

0800542c <measure_ms4525do>:
#include "MS4525DO.h"


uint8_t measure_ms4525do(I2C_HandleTypeDef* i2c, float* pressure, float* temperature)
{
 800542c:	b590      	push	{r4, r7, lr}
 800542e:	b091      	sub	sp, #68	; 0x44
 8005430:	af04      	add	r7, sp, #16
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
	uint8_t Temp_L;
	uint16_t dp_raw;
	uint16_t dT_raw;

	uint8_t data[4];
	HAL_I2C_Mem_Read(i2c, I2C_ADDRESS_MS4525DO, 0x00, 1, data, 4, HAL_MAX_DELAY);
 8005438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800543c:	9302      	str	r3, [sp, #8]
 800543e:	2304      	movs	r3, #4
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	f107 0310 	add.w	r3, r7, #16
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	2301      	movs	r3, #1
 800544a:	2200      	movs	r2, #0
 800544c:	2150      	movs	r1, #80	; 0x50
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7fb ffb0 	bl	80013b4 <HAL_I2C_Mem_Read>




	Press_H = data[0];
 8005454:	7c3b      	ldrb	r3, [r7, #16]
 8005456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Press_L = data[1];
 800545a:	7c7b      	ldrb	r3, [r7, #17]
 800545c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	Temp_H = data[2];
 8005460:	7cbb      	ldrb	r3, [r7, #18]
 8005462:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	Temp_L = data[3];
 8005466:	7cfb      	ldrb	r3, [r7, #19]
 8005468:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	 _status = (Press_H >> 6) & 0x03;
 800546c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005470:	099b      	lsrs	r3, r3, #6
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	Press_H = Press_H & 0x3f;
 8005476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800547a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800547e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dp_raw = (((uint16_t)Press_H) << 8) | Press_L;
 8005482:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	b21a      	sxth	r2, r3
 800548a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800548e:	b21b      	sxth	r3, r3
 8005490:	4313      	orrs	r3, r2
 8005492:	b21b      	sxth	r3, r3
 8005494:	853b      	strh	r3, [r7, #40]	; 0x28

	Temp_L = (Temp_L >> 5);
 8005496:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	dT_raw= (((uint16_t)Temp_H) << 3) | Temp_L;
 80054a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	b21a      	sxth	r2, r3
 80054a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80054ac:	b21b      	sxth	r3, r3
 80054ae:	4313      	orrs	r3, r2
 80054b0:	b21b      	sxth	r3, r3
 80054b2:	84fb      	strh	r3, [r7, #38]	; 0x26



	const float P_max = 1.0;
 80054b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80054b8:	623b      	str	r3, [r7, #32]
	const float P_min = - P_max;
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80054c0:	61fb      	str	r3, [r7, #28]
	const float PSI_to_Pa = 6894.757f;
 80054c2:	4b24      	ldr	r3, [pc, #144]	; (8005554 <measure_ms4525do+0x128>)
 80054c4:	61bb      	str	r3, [r7, #24]

	float diff_press_PSI  = -((dp_raw - 0.1f*16383) * (P_max-P_min)/(0.8f*16383) + P_min);
 80054c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fb f90f 	bl	80006ec <__aeabi_i2f>
 80054ce:	4603      	mov	r3, r0
 80054d0:	4921      	ldr	r1, [pc, #132]	; (8005558 <measure_ms4525do+0x12c>)
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fb f854 	bl	8000580 <__aeabi_fsub>
 80054d8:	4603      	mov	r3, r0
 80054da:	461c      	mov	r4, r3
 80054dc:	69f9      	ldr	r1, [r7, #28]
 80054de:	6a38      	ldr	r0, [r7, #32]
 80054e0:	f7fb f84e 	bl	8000580 <__aeabi_fsub>
 80054e4:	4603      	mov	r3, r0
 80054e6:	4619      	mov	r1, r3
 80054e8:	4620      	mov	r0, r4
 80054ea:	f7fb f953 	bl	8000794 <__aeabi_fmul>
 80054ee:	4603      	mov	r3, r0
 80054f0:	491a      	ldr	r1, [pc, #104]	; (800555c <measure_ms4525do+0x130>)
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fb fa02 	bl	80008fc <__aeabi_fdiv>
 80054f8:	4603      	mov	r3, r0
 80054fa:	69f9      	ldr	r1, [r7, #28]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fb f841 	bl	8000584 <__addsf3>
 8005502:	4603      	mov	r3, r0
 8005504:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005508:	617b      	str	r3, [r7, #20]
	*pressure  = diff_press_PSI * PSI_to_Pa;
 800550a:	69b9      	ldr	r1, [r7, #24]
 800550c:	6978      	ldr	r0, [r7, #20]
 800550e:	f7fb f941 	bl	8000794 <__aeabi_fmul>
 8005512:	4603      	mov	r3, r0
 8005514:	461a      	mov	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	601a      	str	r2, [r3, #0]

	*temperature = ((200.0f * dT_raw) / 2047) - 50;
 800551a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800551c:	4618      	mov	r0, r3
 800551e:	f7fb f8e5 	bl	80006ec <__aeabi_i2f>
 8005522:	4603      	mov	r3, r0
 8005524:	490e      	ldr	r1, [pc, #56]	; (8005560 <measure_ms4525do+0x134>)
 8005526:	4618      	mov	r0, r3
 8005528:	f7fb f934 	bl	8000794 <__aeabi_fmul>
 800552c:	4603      	mov	r3, r0
 800552e:	490d      	ldr	r1, [pc, #52]	; (8005564 <measure_ms4525do+0x138>)
 8005530:	4618      	mov	r0, r3
 8005532:	f7fb f9e3 	bl	80008fc <__aeabi_fdiv>
 8005536:	4603      	mov	r3, r0
 8005538:	490b      	ldr	r1, [pc, #44]	; (8005568 <measure_ms4525do+0x13c>)
 800553a:	4618      	mov	r0, r3
 800553c:	f7fb f820 	bl	8000580 <__aeabi_fsub>
 8005540:	4603      	mov	r3, r0
 8005542:	461a      	mov	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	601a      	str	r2, [r3, #0]


	return _status;
 8005548:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800554c:	4618      	mov	r0, r3
 800554e:	3734      	adds	r7, #52	; 0x34
 8005550:	46bd      	mov	sp, r7
 8005552:	bd90      	pop	{r4, r7, pc}
 8005554:	45d7760e 	.word	0x45d7760e
 8005558:	44ccc99a 	.word	0x44ccc99a
 800555c:	464cc99a 	.word	0x464cc99a
 8005560:	43480000 	.word	0x43480000
 8005564:	44ffe000 	.word	0x44ffe000
 8005568:	42480000 	.word	0x42480000

0800556c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005570:	f7fb fa60 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005574:	f000 f826 	bl	80055c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005578:	f000 f8c8 	bl	800570c <MX_GPIO_Init>
  MX_CAN_Init();
 800557c:	f000 f864 	bl	8005648 <MX_CAN_Init>
  MX_I2C1_Init();
 8005580:	f000 f896 	bl	80056b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uavcanInit();
 8005584:	f000 fd1a 	bl	8005fbc <uavcanInit>
  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8005588:	f7fd f9fa 	bl	8002980 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of measurementMutex */
  measurementMutexHandle = osMutexNew(&measurementMutex_attributes);
 800558c:	4808      	ldr	r0, [pc, #32]	; (80055b0 <main+0x44>)
 800558e:	f7fd fb07 	bl	8002ba0 <osMutexNew>
 8005592:	4602      	mov	r2, r0
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <main+0x48>)
 8005596:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask01, NULL, &Task1_attributes);
 8005598:	4a07      	ldr	r2, [pc, #28]	; (80055b8 <main+0x4c>)
 800559a:	2100      	movs	r1, #0
 800559c:	4807      	ldr	r0, [pc, #28]	; (80055bc <main+0x50>)
 800559e:	f7fd fa55 	bl	8002a4c <osThreadNew>
 80055a2:	4602      	mov	r2, r0
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <main+0x54>)
 80055a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80055a8:	f7fd fa1c 	bl	80029e4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80055ac:	e7fe      	b.n	80055ac <main+0x40>
 80055ae:	bf00      	nop
 80055b0:	0800a2bc 	.word	0x0800a2bc
 80055b4:	20001f40 	.word	0x20001f40
 80055b8:	0800a298 	.word	0x0800a298
 80055bc:	080057a5 	.word	0x080057a5
 80055c0:	20001f38 	.word	0x20001f38

080055c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b090      	sub	sp, #64	; 0x40
 80055c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80055ca:	f107 0318 	add.w	r3, r7, #24
 80055ce:	2228      	movs	r2, #40	; 0x28
 80055d0:	2100      	movs	r1, #0
 80055d2:	4618      	mov	r0, r3
 80055d4:	f003 fc73 	bl	8008ebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80055d8:	1d3b      	adds	r3, r7, #4
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	605a      	str	r2, [r3, #4]
 80055e0:	609a      	str	r2, [r3, #8]
 80055e2:	60da      	str	r2, [r3, #12]
 80055e4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80055e6:	2302      	movs	r3, #2
 80055e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80055ea:	2301      	movs	r3, #1
 80055ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80055ee:	2310      	movs	r3, #16
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055f2:	2302      	movs	r3, #2
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80055f6:	2300      	movs	r3, #0
 80055f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80055fa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005600:	f107 0318 	add.w	r3, r7, #24
 8005604:	4618      	mov	r0, r3
 8005606:	f7fc fb77 	bl	8001cf8 <HAL_RCC_OscConfig>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8005610:	f000 f910 	bl	8005834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005614:	230f      	movs	r3, #15
 8005616:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005618:	2302      	movs	r3, #2
 800561a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800562a:	1d3b      	adds	r3, r7, #4
 800562c:	2102      	movs	r1, #2
 800562e:	4618      	mov	r0, r3
 8005630:	f7fc fde2 	bl	80021f8 <HAL_RCC_ClockConfig>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800563a:	f000 f8fb 	bl	8005834 <Error_Handler>
  }
}
 800563e:	bf00      	nop
 8005640:	3740      	adds	r7, #64	; 0x40
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800564c:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <MX_CAN_Init+0x60>)
 800564e:	4a17      	ldr	r2, [pc, #92]	; (80056ac <MX_CAN_Init+0x64>)
 8005650:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8005652:	4b15      	ldr	r3, [pc, #84]	; (80056a8 <MX_CAN_Init+0x60>)
 8005654:	2210      	movs	r2, #16
 8005656:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8005658:	4b13      	ldr	r3, [pc, #76]	; (80056a8 <MX_CAN_Init+0x60>)
 800565a:	2200      	movs	r2, #0
 800565c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <MX_CAN_Init+0x60>)
 8005660:	2200      	movs	r2, #0
 8005662:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8005664:	4b10      	ldr	r3, [pc, #64]	; (80056a8 <MX_CAN_Init+0x60>)
 8005666:	2200      	movs	r2, #0
 8005668:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800566a:	4b0f      	ldr	r3, [pc, #60]	; (80056a8 <MX_CAN_Init+0x60>)
 800566c:	2200      	movs	r2, #0
 800566e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8005670:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <MX_CAN_Init+0x60>)
 8005672:	2200      	movs	r2, #0
 8005674:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8005676:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <MX_CAN_Init+0x60>)
 8005678:	2200      	movs	r2, #0
 800567a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800567c:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <MX_CAN_Init+0x60>)
 800567e:	2200      	movs	r2, #0
 8005680:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8005682:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <MX_CAN_Init+0x60>)
 8005684:	2200      	movs	r2, #0
 8005686:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8005688:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <MX_CAN_Init+0x60>)
 800568a:	2200      	movs	r2, #0
 800568c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800568e:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <MX_CAN_Init+0x60>)
 8005690:	2200      	movs	r2, #0
 8005692:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8005694:	4804      	ldr	r0, [pc, #16]	; (80056a8 <MX_CAN_Init+0x60>)
 8005696:	f7fb f9ff 	bl	8000a98 <HAL_CAN_Init>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80056a0:	f000 f8c8 	bl	8005834 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80056a4:	bf00      	nop
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20001f0c 	.word	0x20001f0c
 80056ac:	40006400 	.word	0x40006400

080056b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80056b4:	4b12      	ldr	r3, [pc, #72]	; (8005700 <MX_I2C1_Init+0x50>)
 80056b6:	4a13      	ldr	r2, [pc, #76]	; (8005704 <MX_I2C1_Init+0x54>)
 80056b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <MX_I2C1_Init+0x50>)
 80056bc:	4a12      	ldr	r2, [pc, #72]	; (8005708 <MX_I2C1_Init+0x58>)
 80056be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80056c0:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <MX_I2C1_Init+0x50>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80056c6:	4b0e      	ldr	r3, [pc, #56]	; (8005700 <MX_I2C1_Init+0x50>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056cc:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <MX_I2C1_Init+0x50>)
 80056ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80056d4:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <MX_I2C1_Init+0x50>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <MX_I2C1_Init+0x50>)
 80056dc:	2200      	movs	r2, #0
 80056de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <MX_I2C1_Init+0x50>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <MX_I2C1_Init+0x50>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80056ec:	4804      	ldr	r0, [pc, #16]	; (8005700 <MX_I2C1_Init+0x50>)
 80056ee:	f7fb fd39 	bl	8001164 <HAL_I2C_Init>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80056f8:	f000 f89c 	bl	8005834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80056fc:	bf00      	nop
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20001eb8 	.word	0x20001eb8
 8005704:	40005400 	.word	0x40005400
 8005708:	000186a0 	.word	0x000186a0

0800570c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005712:	f107 0310 	add.w	r3, r7, #16
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	605a      	str	r2, [r3, #4]
 800571c:	609a      	str	r2, [r3, #8]
 800571e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005720:	4b1e      	ldr	r3, [pc, #120]	; (800579c <MX_GPIO_Init+0x90>)
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	4a1d      	ldr	r2, [pc, #116]	; (800579c <MX_GPIO_Init+0x90>)
 8005726:	f043 0310 	orr.w	r3, r3, #16
 800572a:	6193      	str	r3, [r2, #24]
 800572c:	4b1b      	ldr	r3, [pc, #108]	; (800579c <MX_GPIO_Init+0x90>)
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005738:	4b18      	ldr	r3, [pc, #96]	; (800579c <MX_GPIO_Init+0x90>)
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	4a17      	ldr	r2, [pc, #92]	; (800579c <MX_GPIO_Init+0x90>)
 800573e:	f043 0304 	orr.w	r3, r3, #4
 8005742:	6193      	str	r3, [r2, #24]
 8005744:	4b15      	ldr	r3, [pc, #84]	; (800579c <MX_GPIO_Init+0x90>)
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	60bb      	str	r3, [r7, #8]
 800574e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005750:	4b12      	ldr	r3, [pc, #72]	; (800579c <MX_GPIO_Init+0x90>)
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	4a11      	ldr	r2, [pc, #68]	; (800579c <MX_GPIO_Init+0x90>)
 8005756:	f043 0308 	orr.w	r3, r3, #8
 800575a:	6193      	str	r3, [r2, #24]
 800575c:	4b0f      	ldr	r3, [pc, #60]	; (800579c <MX_GPIO_Init+0x90>)
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	607b      	str	r3, [r7, #4]
 8005766:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005768:	2200      	movs	r2, #0
 800576a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800576e:	480c      	ldr	r0, [pc, #48]	; (80057a0 <MX_GPIO_Init+0x94>)
 8005770:	f7fb fcc8 	bl	8001104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800577a:	2301      	movs	r3, #1
 800577c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005782:	2302      	movs	r3, #2
 8005784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005786:	f107 0310 	add.w	r3, r7, #16
 800578a:	4619      	mov	r1, r3
 800578c:	4804      	ldr	r0, [pc, #16]	; (80057a0 <MX_GPIO_Init+0x94>)
 800578e:	f7fb fb5f 	bl	8000e50 <HAL_GPIO_Init>

}
 8005792:	bf00      	nop
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40021000 	.word	0x40021000
 80057a0:	40011000 	.word	0x40011000

080057a4 <StartTask01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  static uint32_t publish_time = 0;

  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GetTick() < publish_time + 50) {
 80057ac:	f7fb f96a 	bl	8000a84 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	4b12      	ldr	r3, [pc, #72]	; (80057fc <StartTask01+0x58>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3332      	adds	r3, #50	; 0x32
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d318      	bcc.n	80057ee <StartTask01+0x4a>

	  	} // rate limiting
	  	else{
	  		publish_time = HAL_GetTick();
 80057bc:	f7fb f962 	bl	8000a84 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <StartTask01+0x58>)
 80057c4:	601a      	str	r2, [r3, #0]
	  		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80057c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057ca:	480d      	ldr	r0, [pc, #52]	; (8005800 <StartTask01+0x5c>)
 80057cc:	f7fb fcb2 	bl	8001134 <HAL_GPIO_TogglePin>
	  		measure_ms4525do(&hi2c1, &press, &temp);
 80057d0:	4a0c      	ldr	r2, [pc, #48]	; (8005804 <StartTask01+0x60>)
 80057d2:	490d      	ldr	r1, [pc, #52]	; (8005808 <StartTask01+0x64>)
 80057d4:	480d      	ldr	r0, [pc, #52]	; (800580c <StartTask01+0x68>)
 80057d6:	f7ff fe29 	bl	800542c <measure_ms4525do>
	  		publishAirspeed(fabs(press), temp);
 80057da:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <StartTask01+0x64>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057e2:	4b08      	ldr	r3, [pc, #32]	; (8005804 <StartTask01+0x60>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4619      	mov	r1, r3
 80057e8:	4610      	mov	r0, r2
 80057ea:	f000 fd09 	bl	8006200 <publishAirspeed>

	  	}

	  	//publishAirspeed(40.1, 324.1);
	  	sendCanard();
 80057ee:	f000 fc1d 	bl	800602c <sendCanard>
	  	receiveCanard();
 80057f2:	f000 fc3f 	bl	8006074 <receiveCanard>
	  	spinCanard();
 80057f6:	f000 fc5f 	bl	80060b8 <spinCanard>
	  if(HAL_GetTick() < publish_time + 50) {
 80057fa:	e7d7      	b.n	80057ac <StartTask01+0x8>
 80057fc:	20001a14 	.word	0x20001a14
 8005800:	40011000 	.word	0x40011000
 8005804:	20001f34 	.word	0x20001f34
 8005808:	20001f3c 	.word	0x20001f3c
 800580c:	20001eb8 	.word	0x20001eb8

08005810 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a04      	ldr	r2, [pc, #16]	; (8005830 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d101      	bne.n	8005826 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005822:	f7fb f91d 	bl	8000a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40012c00 	.word	0x40012c00

08005834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005838:	bf00      	nop
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005846:	4b18      	ldr	r3, [pc, #96]	; (80058a8 <HAL_MspInit+0x68>)
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <HAL_MspInit+0x68>)
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	6193      	str	r3, [r2, #24]
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <HAL_MspInit+0x68>)
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	60bb      	str	r3, [r7, #8]
 800585c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800585e:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <HAL_MspInit+0x68>)
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	4a11      	ldr	r2, [pc, #68]	; (80058a8 <HAL_MspInit+0x68>)
 8005864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005868:	61d3      	str	r3, [r2, #28]
 800586a:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <HAL_MspInit+0x68>)
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005876:	2200      	movs	r2, #0
 8005878:	210f      	movs	r1, #15
 800587a:	f06f 0001 	mvn.w	r0, #1
 800587e:	f7fb fabc 	bl	8000dfa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005882:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <HAL_MspInit+0x6c>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	4a04      	ldr	r2, [pc, #16]	; (80058ac <HAL_MspInit+0x6c>)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40021000 	.word	0x40021000
 80058ac:	40010000 	.word	0x40010000

080058b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b8:	f107 0310 	add.w	r3, r7, #16
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	605a      	str	r2, [r3, #4]
 80058c2:	609a      	str	r2, [r3, #8]
 80058c4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1c      	ldr	r2, [pc, #112]	; (800593c <HAL_CAN_MspInit+0x8c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d131      	bne.n	8005934 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80058d0:	4b1b      	ldr	r3, [pc, #108]	; (8005940 <HAL_CAN_MspInit+0x90>)
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <HAL_CAN_MspInit+0x90>)
 80058d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80058da:	61d3      	str	r3, [r2, #28]
 80058dc:	4b18      	ldr	r3, [pc, #96]	; (8005940 <HAL_CAN_MspInit+0x90>)
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058e8:	4b15      	ldr	r3, [pc, #84]	; (8005940 <HAL_CAN_MspInit+0x90>)
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	4a14      	ldr	r2, [pc, #80]	; (8005940 <HAL_CAN_MspInit+0x90>)
 80058ee:	f043 0304 	orr.w	r3, r3, #4
 80058f2:	6193      	str	r3, [r2, #24]
 80058f4:	4b12      	ldr	r3, [pc, #72]	; (8005940 <HAL_CAN_MspInit+0x90>)
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005900:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005904:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590a:	2300      	movs	r3, #0
 800590c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800590e:	f107 0310 	add.w	r3, r7, #16
 8005912:	4619      	mov	r1, r3
 8005914:	480b      	ldr	r0, [pc, #44]	; (8005944 <HAL_CAN_MspInit+0x94>)
 8005916:	f7fb fa9b 	bl	8000e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800591a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800591e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005920:	2302      	movs	r3, #2
 8005922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005924:	2303      	movs	r3, #3
 8005926:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005928:	f107 0310 	add.w	r3, r7, #16
 800592c:	4619      	mov	r1, r3
 800592e:	4805      	ldr	r0, [pc, #20]	; (8005944 <HAL_CAN_MspInit+0x94>)
 8005930:	f7fb fa8e 	bl	8000e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005934:	bf00      	nop
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40006400 	.word	0x40006400
 8005940:	40021000 	.word	0x40021000
 8005944:	40010800 	.word	0x40010800

08005948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005950:	f107 0310 	add.w	r3, r7, #16
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	605a      	str	r2, [r3, #4]
 800595a:	609a      	str	r2, [r3, #8]
 800595c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <HAL_I2C_MspInit+0x70>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d123      	bne.n	80059b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005968:	4b14      	ldr	r3, [pc, #80]	; (80059bc <HAL_I2C_MspInit+0x74>)
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	4a13      	ldr	r2, [pc, #76]	; (80059bc <HAL_I2C_MspInit+0x74>)
 800596e:	f043 0308 	orr.w	r3, r3, #8
 8005972:	6193      	str	r3, [r2, #24]
 8005974:	4b11      	ldr	r3, [pc, #68]	; (80059bc <HAL_I2C_MspInit+0x74>)
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005980:	23c0      	movs	r3, #192	; 0xc0
 8005982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005984:	2312      	movs	r3, #18
 8005986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005988:	2303      	movs	r3, #3
 800598a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800598c:	f107 0310 	add.w	r3, r7, #16
 8005990:	4619      	mov	r1, r3
 8005992:	480b      	ldr	r0, [pc, #44]	; (80059c0 <HAL_I2C_MspInit+0x78>)
 8005994:	f7fb fa5c 	bl	8000e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005998:	4b08      	ldr	r3, [pc, #32]	; (80059bc <HAL_I2C_MspInit+0x74>)
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	4a07      	ldr	r2, [pc, #28]	; (80059bc <HAL_I2C_MspInit+0x74>)
 800599e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059a2:	61d3      	str	r3, [r2, #28]
 80059a4:	4b05      	ldr	r3, [pc, #20]	; (80059bc <HAL_I2C_MspInit+0x74>)
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059ac:	60bb      	str	r3, [r7, #8]
 80059ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80059b0:	bf00      	nop
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40005400 	.word	0x40005400
 80059bc:	40021000 	.word	0x40021000
 80059c0:	40010c00 	.word	0x40010c00

080059c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08c      	sub	sp, #48	; 0x30
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80059d4:	2200      	movs	r2, #0
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	2019      	movs	r0, #25
 80059da:	f7fb fa0e 	bl	8000dfa <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80059de:	2019      	movs	r0, #25
 80059e0:	f7fb fa27 	bl	8000e32 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80059e4:	4b1e      	ldr	r3, [pc, #120]	; (8005a60 <HAL_InitTick+0x9c>)
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	4a1d      	ldr	r2, [pc, #116]	; (8005a60 <HAL_InitTick+0x9c>)
 80059ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059ee:	6193      	str	r3, [r2, #24]
 80059f0:	4b1b      	ldr	r3, [pc, #108]	; (8005a60 <HAL_InitTick+0x9c>)
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80059fc:	f107 0210 	add.w	r2, r7, #16
 8005a00:	f107 0314 	add.w	r3, r7, #20
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fc fd74 	bl	80024f4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005a0c:	f7fc fd5e 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8005a10:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a14:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <HAL_InitTick+0xa0>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	0c9b      	lsrs	r3, r3, #18
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005a20:	4b11      	ldr	r3, [pc, #68]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a22:	4a12      	ldr	r2, [pc, #72]	; (8005a6c <HAL_InitTick+0xa8>)
 8005a24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005a26:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005a2e:	4a0e      	ldr	r2, [pc, #56]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005a40:	4809      	ldr	r0, [pc, #36]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a42:	f7fc fda5 	bl	8002590 <HAL_TIM_Base_Init>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005a4c:	4806      	ldr	r0, [pc, #24]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a4e:	f7fc fdd3 	bl	80025f8 <HAL_TIM_Base_Start_IT>
 8005a52:	4603      	mov	r3, r0
 8005a54:	e000      	b.n	8005a58 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3730      	adds	r7, #48	; 0x30
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40021000 	.word	0x40021000
 8005a64:	431bde83 	.word	0x431bde83
 8005a68:	20001f44 	.word	0x20001f44
 8005a6c:	40012c00 	.word	0x40012c00

08005a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr

08005a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a80:	e7fe      	b.n	8005a80 <HardFault_Handler+0x4>

08005a82 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a82:	b480      	push	{r7}
 8005a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a86:	e7fe      	b.n	8005a86 <MemManage_Handler+0x4>

08005a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a8c:	e7fe      	b.n	8005a8c <BusFault_Handler+0x4>

08005a8e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a92:	e7fe      	b.n	8005a92 <UsageFault_Handler+0x4>

08005a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a98:	bf00      	nop
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr

08005aa0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005aa4:	4802      	ldr	r0, [pc, #8]	; (8005ab0 <TIM1_UP_IRQHandler+0x10>)
 8005aa6:	f7fc fdca 	bl	800263e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005aaa:	bf00      	nop
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20001f44 	.word	0x20001f44

08005ab4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
	return 1;
 8005ab8:	2301      	movs	r3, #1
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr

08005ac2 <_kill>:

int _kill(int pid, int sig)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005acc:	f003 f9b0 	bl	8008e30 <__errno>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	2316      	movs	r3, #22
 8005ad4:	6013      	str	r3, [r2, #0]
	return -1;
 8005ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <_exit>:

void _exit (int status)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005aea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff ffe7 	bl	8005ac2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005af4:	e7fe      	b.n	8005af4 <_exit+0x12>

08005af6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b086      	sub	sp, #24
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	e00a      	b.n	8005b1e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005b08:	f3af 8000 	nop.w
 8005b0c:	4601      	mov	r1, r0
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	60ba      	str	r2, [r7, #8]
 8005b14:	b2ca      	uxtb	r2, r1
 8005b16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	dbf0      	blt.n	8005b08 <_read+0x12>
	}

return len;
 8005b26:	687b      	ldr	r3, [r7, #4]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	e009      	b.n	8005b56 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	60ba      	str	r2, [r7, #8]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	3301      	adds	r3, #1
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	dbf1      	blt.n	8005b42 <_write+0x12>
	}
	return len;
 8005b5e:	687b      	ldr	r3, [r7, #4]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <_close>:

int _close(int file)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	return -1;
 8005b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr

08005b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b8e:	605a      	str	r2, [r3, #4]
	return 0;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <_isatty>:

int _isatty(int file)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	return 1;
 8005ba4:	2301      	movs	r3, #1
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr

08005bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
	return 0;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr

08005bc8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005bd0:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <_sbrk+0x50>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d102      	bne.n	8005bde <_sbrk+0x16>
		heap_end = &end;
 8005bd8:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <_sbrk+0x50>)
 8005bda:	4a10      	ldr	r2, [pc, #64]	; (8005c1c <_sbrk+0x54>)
 8005bdc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005bde:	4b0e      	ldr	r3, [pc, #56]	; (8005c18 <_sbrk+0x50>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005be4:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <_sbrk+0x50>)
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4413      	add	r3, r2
 8005bec:	466a      	mov	r2, sp
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d907      	bls.n	8005c02 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005bf2:	f003 f91d 	bl	8008e30 <__errno>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	230c      	movs	r3, #12
 8005bfa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c00:	e006      	b.n	8005c10 <_sbrk+0x48>
	}

	heap_end += incr;
 8005c02:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <_sbrk+0x50>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4413      	add	r3, r2
 8005c0a:	4a03      	ldr	r2, [pc, #12]	; (8005c18 <_sbrk+0x50>)
 8005c0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20001a18 	.word	0x20001a18
 8005c1c:	20001f88 	.word	0x20001f88

08005c20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005c24:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <SystemInit+0x5c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a14      	ldr	r2, [pc, #80]	; (8005c7c <SystemInit+0x5c>)
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005c30:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <SystemInit+0x5c>)
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	4911      	ldr	r1, [pc, #68]	; (8005c7c <SystemInit+0x5c>)
 8005c36:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <SystemInit+0x60>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <SystemInit+0x5c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a0e      	ldr	r2, [pc, #56]	; (8005c7c <SystemInit+0x5c>)
 8005c42:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c4a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <SystemInit+0x5c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <SystemInit+0x5c>)
 8005c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c56:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005c58:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <SystemInit+0x5c>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	4a07      	ldr	r2, [pc, #28]	; (8005c7c <SystemInit+0x5c>)
 8005c5e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005c62:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <SystemInit+0x5c>)
 8005c66:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005c6a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <SystemInit+0x64>)
 8005c6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c72:	609a      	str	r2, [r3, #8]
#endif 
}
 8005c74:	bf00      	nop
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	f8ff0000 	.word	0xf8ff0000
 8005c84:	e000ed00 	.word	0xe000ed00

08005c88 <canardSTM32ComputeCANTimings>:
 */
static inline
int16_t canardSTM32ComputeCANTimings(const uint32_t peripheral_clock_rate,
                                     const uint32_t target_bitrate,
                                     CanardSTM32CANTimings* const out_timings)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
    if (target_bitrate < 1000)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c9a:	d201      	bcs.n	8005ca0 <canardSTM32ComputeCANTimings+0x18>
    {
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;
 8005c9c:	4b66      	ldr	r3, [pc, #408]	; (8005e38 <canardSTM32ComputeCANTimings+0x1b0>)
 8005c9e:	e0c7      	b.n	8005e30 <canardSTM32ComputeCANTimings+0x1a8>
    }

    CANARD_ASSERT(out_timings != NULL);  // NOLINT
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d105      	bne.n	8005cb2 <canardSTM32ComputeCANTimings+0x2a>
 8005ca6:	4b65      	ldr	r3, [pc, #404]	; (8005e3c <canardSTM32ComputeCANTimings+0x1b4>)
 8005ca8:	4a65      	ldr	r2, [pc, #404]	; (8005e40 <canardSTM32ComputeCANTimings+0x1b8>)
 8005caa:	21c7      	movs	r1, #199	; 0xc7
 8005cac:	4865      	ldr	r0, [pc, #404]	; (8005e44 <canardSTM32ComputeCANTimings+0x1bc>)
 8005cae:	f003 f8a1 	bl	8008df4 <__assert_func>
    memset(out_timings, 0, sizeof(*out_timings));
 8005cb2:	2206      	movs	r2, #6
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f003 f901 	bl	8008ebe <memset>
     *   1000 kbps      8       10
     *   500  kbps      16      17
     *   250  kbps      16      17
     *   125  kbps      16      17
     */
    const uint8_t max_quanta_per_bit = (uint8_t)((target_bitrate >= 1000000) ? 10 : 17);    // NOLINT
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4a62      	ldr	r2, [pc, #392]	; (8005e48 <canardSTM32ComputeCANTimings+0x1c0>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d901      	bls.n	8005cc8 <canardSTM32ComputeCANTimings+0x40>
 8005cc4:	230a      	movs	r3, #10
 8005cc6:	e000      	b.n	8005cca <canardSTM32ComputeCANTimings+0x42>
 8005cc8:	2311      	movs	r3, #17
 8005cca:	773b      	strb	r3, [r7, #28]
    CANARD_ASSERT(max_quanta_per_bit <= (MaxBS1 + MaxBS2));
 8005ccc:	7f3a      	ldrb	r2, [r7, #28]
 8005cce:	4b5f      	ldr	r3, [pc, #380]	; (8005e4c <canardSTM32ComputeCANTimings+0x1c4>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4b5e      	ldr	r3, [pc, #376]	; (8005e50 <canardSTM32ComputeCANTimings+0x1c8>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	440b      	add	r3, r1
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	dd05      	ble.n	8005cea <canardSTM32ComputeCANTimings+0x62>
 8005cde:	4b5d      	ldr	r3, [pc, #372]	; (8005e54 <canardSTM32ComputeCANTimings+0x1cc>)
 8005ce0:	4a57      	ldr	r2, [pc, #348]	; (8005e40 <canardSTM32ComputeCANTimings+0x1b8>)
 8005ce2:	21dc      	movs	r1, #220	; 0xdc
 8005ce4:	4857      	ldr	r0, [pc, #348]	; (8005e44 <canardSTM32ComputeCANTimings+0x1bc>)
 8005ce6:	f003 f885 	bl	8008df4 <__assert_func>
     *   BS = 1 + BS1 + BS2                                             -- Number of time quanta per bit
     *   PRESCALER_BS = PRESCALER * BS
     * ==>
     *   PRESCALER_BS = PCLK / BITRATE
     */
    const uint32_t prescaler_bs = peripheral_clock_rate / target_bitrate;
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf2:	61bb      	str	r3, [r7, #24]

    /*
     * Searching for such prescaler value so that the number of quanta per bit is highest.
     */
    uint8_t bs1_bs2_sum = (uint8_t)(max_quanta_per_bit - 1);    // NOLINT
 8005cf4:	7f3b      	ldrb	r3, [r7, #28]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	77fb      	strb	r3, [r7, #31]

    while ((prescaler_bs % (1U + bs1_bs2_sum)) != 0)
 8005cfa:	e007      	b.n	8005d0c <canardSTM32ComputeCANTimings+0x84>
    {
        if (bs1_bs2_sum <= 2)
 8005cfc:	7ffb      	ldrb	r3, [r7, #31]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d801      	bhi.n	8005d06 <canardSTM32ComputeCANTimings+0x7e>
        {
            return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;          // No solution
 8005d02:	4b4d      	ldr	r3, [pc, #308]	; (8005e38 <canardSTM32ComputeCANTimings+0x1b0>)
 8005d04:	e094      	b.n	8005e30 <canardSTM32ComputeCANTimings+0x1a8>
        }
        bs1_bs2_sum--;
 8005d06:	7ffb      	ldrb	r3, [r7, #31]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	77fb      	strb	r3, [r7, #31]
    while ((prescaler_bs % (1U + bs1_bs2_sum)) != 0)
 8005d0c:	7ffb      	ldrb	r3, [r7, #31]
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d16:	fb02 f201 	mul.w	r2, r2, r1
 8005d1a:	1a9b      	subs	r3, r3, r2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1ed      	bne.n	8005cfc <canardSTM32ComputeCANTimings+0x74>
    }

    const uint32_t prescaler = prescaler_bs / (1U + bs1_bs2_sum);
 8005d20:	7ffb      	ldrb	r3, [r7, #31]
 8005d22:	3301      	adds	r3, #1
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2a:	617b      	str	r3, [r7, #20]
    if ((prescaler < 1U) || (prescaler > 1024U))
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <canardSTM32ComputeCANTimings+0xb2>
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d38:	d901      	bls.n	8005d3e <canardSTM32ComputeCANTimings+0xb6>
    {
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;              // No solution
 8005d3a:	4b3f      	ldr	r3, [pc, #252]	; (8005e38 <canardSTM32ComputeCANTimings+0x1b0>)
 8005d3c:	e078      	b.n	8005e30 <canardSTM32ComputeCANTimings+0x1a8>
     *
     * Since the optimal solution is so close to the maximum, we prepare two solutions, and then pick the best one:
     *   - With rounding to nearest
     *   - With rounding to zero
     */
    uint8_t bs1 = (uint8_t)(((7 * bs1_bs2_sum - 1) + 4) / 8);       // Trying rounding to nearest first  // NOLINT
 8005d3e:	7ffa      	ldrb	r2, [r7, #31]
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	3303      	adds	r3, #3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	da00      	bge.n	8005d4e <canardSTM32ComputeCANTimings+0xc6>
 8005d4c:	3307      	adds	r3, #7
 8005d4e:	10db      	asrs	r3, r3, #3
 8005d50:	77bb      	strb	r3, [r7, #30]
    uint8_t bs2 = (uint8_t)(bs1_bs2_sum - bs1);  // NOLINT
 8005d52:	7ffa      	ldrb	r2, [r7, #31]
 8005d54:	7fbb      	ldrb	r3, [r7, #30]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	777b      	strb	r3, [r7, #29]
    CANARD_ASSERT(bs1_bs2_sum > bs1);
 8005d5a:	7ffa      	ldrb	r2, [r7, #31]
 8005d5c:	7fbb      	ldrb	r3, [r7, #30]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d806      	bhi.n	8005d70 <canardSTM32ComputeCANTimings+0xe8>
 8005d62:	4b3d      	ldr	r3, [pc, #244]	; (8005e58 <canardSTM32ComputeCANTimings+0x1d0>)
 8005d64:	4a36      	ldr	r2, [pc, #216]	; (8005e40 <canardSTM32ComputeCANTimings+0x1b8>)
 8005d66:	f240 1115 	movw	r1, #277	; 0x115
 8005d6a:	4836      	ldr	r0, [pc, #216]	; (8005e44 <canardSTM32ComputeCANTimings+0x1bc>)
 8005d6c:	f003 f842 	bl	8008df4 <__assert_func>

    {
        const uint16_t sample_point_permill = (uint16_t)(1000U * (1U + bs1) / (1U + bs1 + bs2));  // NOLINT
 8005d70:	7fbb      	ldrb	r3, [r7, #30]
 8005d72:	3301      	adds	r3, #1
 8005d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d78:	fb02 f203 	mul.w	r2, r2, r3
 8005d7c:	7fb9      	ldrb	r1, [r7, #30]
 8005d7e:	7f7b      	ldrb	r3, [r7, #29]
 8005d80:	440b      	add	r3, r1
 8005d82:	3301      	adds	r3, #1
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	827b      	strh	r3, [r7, #18]

        if (sample_point_permill > MaxSamplePointLocationPermill)   // Strictly more!
 8005d8a:	4b34      	ldr	r3, [pc, #208]	; (8005e5c <canardSTM32ComputeCANTimings+0x1d4>)
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	8a7a      	ldrh	r2, [r7, #18]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d90d      	bls.n	8005db0 <canardSTM32ComputeCANTimings+0x128>
        {
            bs1 = (uint8_t)((7 * bs1_bs2_sum - 1) / 8);             // Nope, too far; now rounding to zero
 8005d94:	7ffa      	ldrb	r2, [r7, #31]
 8005d96:	4613      	mov	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	1a9b      	subs	r3, r3, r2
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	da00      	bge.n	8005da4 <canardSTM32ComputeCANTimings+0x11c>
 8005da2:	3307      	adds	r3, #7
 8005da4:	10db      	asrs	r3, r3, #3
 8005da6:	77bb      	strb	r3, [r7, #30]
            bs2 = (uint8_t)(bs1_bs2_sum - bs1);
 8005da8:	7ffa      	ldrb	r2, [r7, #31]
 8005daa:	7fbb      	ldrb	r3, [r7, #30]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	777b      	strb	r3, [r7, #29]
        }
    }

    const bool valid = (bs1 >= 1) && (bs1 <= MaxBS1) && (bs2 >= 1) && (bs2 <= MaxBS2);
 8005db0:	7fbb      	ldrb	r3, [r7, #30]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00e      	beq.n	8005dd4 <canardSTM32ComputeCANTimings+0x14c>
 8005db6:	4b25      	ldr	r3, [pc, #148]	; (8005e4c <canardSTM32ComputeCANTimings+0x1c4>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	7fba      	ldrb	r2, [r7, #30]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d809      	bhi.n	8005dd4 <canardSTM32ComputeCANTimings+0x14c>
 8005dc0:	7f7b      	ldrb	r3, [r7, #29]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d006      	beq.n	8005dd4 <canardSTM32ComputeCANTimings+0x14c>
 8005dc6:	4b22      	ldr	r3, [pc, #136]	; (8005e50 <canardSTM32ComputeCANTimings+0x1c8>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	7f7a      	ldrb	r2, [r7, #29]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d801      	bhi.n	8005dd4 <canardSTM32ComputeCANTimings+0x14c>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <canardSTM32ComputeCANTimings+0x14e>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	747b      	strb	r3, [r7, #17]
 8005dd8:	7c7b      	ldrb	r3, [r7, #17]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	747b      	strb	r3, [r7, #17]
     * def sample_point_from_btr(x):
     *     assert 0b0011110010000000111111000000000 & x == 0
     *     ts2,ts1,brp = (x>>20)&7, (x>>16)&15, x&511
     *     return (1+ts1+1)/(1+ts1+1+ts2+1)
     */
    if ((target_bitrate != (peripheral_clock_rate / (prescaler * (1U + bs1 + bs2)))) ||
 8005de0:	7fba      	ldrb	r2, [r7, #30]
 8005de2:	7f7b      	ldrb	r3, [r7, #29]
 8005de4:	4413      	add	r3, r2
 8005de6:	3301      	adds	r3, #1
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	fb02 f303 	mul.w	r3, r2, r3
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d105      	bne.n	8005e06 <canardSTM32ComputeCANTimings+0x17e>
        !valid)
 8005dfa:	7c7b      	ldrb	r3, [r7, #17]
 8005dfc:	f083 0301 	eor.w	r3, r3, #1
 8005e00:	b2db      	uxtb	r3, r3
    if ((target_bitrate != (peripheral_clock_rate / (prescaler * (1U + bs1 + bs2)))) ||
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d006      	beq.n	8005e14 <canardSTM32ComputeCANTimings+0x18c>
    {
        // This actually means that the algorithm has a logic error, hence assert(0).
        CANARD_ASSERT(0);  // NOLINT
 8005e06:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <canardSTM32ComputeCANTimings+0x1d8>)
 8005e08:	4a0d      	ldr	r2, [pc, #52]	; (8005e40 <canardSTM32ComputeCANTimings+0x1b8>)
 8005e0a:	f240 112f 	movw	r1, #303	; 0x12f
 8005e0e:	480d      	ldr	r0, [pc, #52]	; (8005e44 <canardSTM32ComputeCANTimings+0x1bc>)
 8005e10:	f002 fff0 	bl	8008df4 <__assert_func>
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;
    }

    out_timings->bit_rate_prescaler = (uint16_t) prescaler;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	801a      	strh	r2, [r3, #0]
    out_timings->max_resynchronization_jump_width = 1;      // One is recommended by UAVCAN, CANOpen, and DeviceNet
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	711a      	strb	r2, [r3, #4]
    out_timings->bit_segment_1 = bs1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	7fba      	ldrb	r2, [r7, #30]
 8005e26:	709a      	strb	r2, [r3, #2]
    out_timings->bit_segment_2 = bs2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	7f7a      	ldrb	r2, [r7, #29]
 8005e2c:	70da      	strb	r2, [r3, #3]

    return 0;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	fffffc18 	.word	0xfffffc18
 8005e3c:	08009d94 	.word	0x08009d94
 8005e40:	0800a2e4 	.word	0x0800a2e4
 8005e44:	08009db0 	.word	0x08009db0
 8005e48:	000f423f 	.word	0x000f423f
 8005e4c:	0800a301 	.word	0x0800a301
 8005e50:	0800a302 	.word	0x0800a302
 8005e54:	08009ddc 	.word	0x08009ddc
 8005e58:	08009e04 	.word	0x08009e04
 8005e5c:	0800a304 	.word	0x0800a304
 8005e60:	08009e18 	.word	0x08009e18
 8005e64:	00000000 	.word	0x00000000

08005e68 <shouldAcceptTransfer>:
bool shouldAcceptTransfer(const CanardInstance* ins,
                          uint64_t* out_data_type_signature,
                          uint16_t data_type_id,
                          CanardTransferType transfer_type,
                          uint8_t source_node_id)
{
 8005e68:	b490      	push	{r4, r7}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4611      	mov	r1, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	460b      	mov	r3, r1
 8005e78:	80fb      	strh	r3, [r7, #6]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	717b      	strb	r3, [r7, #5]
    if ((transfer_type == CanardTransferTypeRequest) &&(data_type_id == UAVCAN_GET_NODE_INFO_DATA_TYPE_ID))
 8005e7e:	797b      	ldrb	r3, [r7, #5]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d10a      	bne.n	8005e9a <shouldAcceptTransfer+0x32>
 8005e84:	88fb      	ldrh	r3, [r7, #6]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d107      	bne.n	8005e9a <shouldAcceptTransfer+0x32>
    {
        *out_data_type_signature = UAVCAN_GET_NODE_INFO_DATA_TYPE_SIGNATURE;
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	a412      	add	r4, pc, #72	; (adr r4, 8005ed8 <shouldAcceptTransfer+0x70>)
 8005e8e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005e92:	e9c2 3400 	strd	r3, r4, [r2]
        return true;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e018      	b.n	8005ecc <shouldAcceptTransfer+0x64>
    }
    if (data_type_id == UAVCAN_EQUIPMENT_ESC_RAWCOMMAND_ID)
 8005e9a:	88fb      	ldrh	r3, [r7, #6]
 8005e9c:	f240 4206 	movw	r2, #1030	; 0x406
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d107      	bne.n	8005eb4 <shouldAcceptTransfer+0x4c>
    {
        *out_data_type_signature = UAVCAN_EQUIPMENT_ESC_RAWCOMMAND_SIGNATURE;
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	a40e      	add	r4, pc, #56	; (adr r4, 8005ee0 <shouldAcceptTransfer+0x78>)
 8005ea8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005eac:	e9c2 3400 	strd	r3, r4, [r2]
        return true;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e00b      	b.n	8005ecc <shouldAcceptTransfer+0x64>
    }
    if (data_type_id == UAVCAN_PROTOCOL_PARAM_GETSET_ID)
 8005eb4:	88fb      	ldrh	r3, [r7, #6]
 8005eb6:	2b0b      	cmp	r3, #11
 8005eb8:	d107      	bne.n	8005eca <shouldAcceptTransfer+0x62>
    {
        *out_data_type_signature = UAVCAN_PROTOCOL_PARAM_GETSET_SIGNATURE;
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	a40a      	add	r4, pc, #40	; (adr r4, 8005ee8 <shouldAcceptTransfer+0x80>)
 8005ebe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005ec2:	e9c2 3400 	strd	r3, r4, [r2]
        return true;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e000      	b.n	8005ecc <shouldAcceptTransfer+0x64>
    }
    return false;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc90      	pop	{r4, r7}
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	21c46a9e 	.word	0x21c46a9e
 8005edc:	ee468a81 	.word	0xee468a81
 8005ee0:	d7ec951d 	.word	0xd7ec951d
 8005ee4:	217f5c87 	.word	0x217f5c87
 8005ee8:	39d1a4d5 	.word	0x39d1a4d5
 8005eec:	a7b622f9 	.word	0xa7b622f9

08005ef0 <onTransferReceived>:

//////////////////////////////////////////////////////////////////////////////////////

void onTransferReceived(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
    if ((transfer->transfer_type == CanardTransferTypeRequest) && (transfer->data_type_id == UAVCAN_GET_NODE_INFO_DATA_TYPE_ID))
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	7e1b      	ldrb	r3, [r3, #24]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d106      	bne.n	8005f10 <onTransferReceived+0x20>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	8adb      	ldrh	r3, [r3, #22]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d102      	bne.n	8005f10 <onTransferReceived+0x20>
    {
        getNodeInfoHandleCanard(transfer);
 8005f0a:	6838      	ldr	r0, [r7, #0]
 8005f0c:	f000 f814 	bl	8005f38 <getNodeInfoHandleCanard>
    }

    if (transfer->data_type_id == UAVCAN_EQUIPMENT_ESC_RAWCOMMAND_ID)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	8adb      	ldrh	r3, [r3, #22]
 8005f14:	f240 4206 	movw	r2, #1030	; 0x406
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d102      	bne.n	8005f22 <onTransferReceived+0x32>
    {
        rawcmdHandleCanard(transfer);
 8005f1c:	6838      	ldr	r0, [r7, #0]
 8005f1e:	f000 fa1f 	bl	8006360 <rawcmdHandleCanard>
    }

    if (transfer->data_type_id == UAVCAN_PROTOCOL_PARAM_GETSET_ID)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	8adb      	ldrh	r3, [r3, #22]
 8005f26:	2b0b      	cmp	r3, #11
 8005f28:	d102      	bne.n	8005f30 <onTransferReceived+0x40>
    {
        getsetHandleCanard(transfer);
 8005f2a:	6838      	ldr	r0, [r7, #0]
 8005f2c:	f000 fb90 	bl	8006650 <getsetHandleCanard>
    }

}
 8005f30:	bf00      	nop
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <getNodeInfoHandleCanard>:

void getNodeInfoHandleCanard(CanardRxTransfer* transfer)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b0ea      	sub	sp, #424	; 0x1a8
 8005f3c:	af06      	add	r7, sp, #24
 8005f3e:	1d3b      	adds	r3, r7, #4
 8005f40:	6018      	str	r0, [r3, #0]
        uint8_t buffer[UAVCAN_GET_NODE_INFO_RESPONSE_MAX_SIZE];
        memset(buffer,0,UAVCAN_GET_NODE_INFO_RESPONSE_MAX_SIZE);
 8005f42:	f107 030c 	add.w	r3, r7, #12
 8005f46:	f240 1279 	movw	r2, #377	; 0x179
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f002 ffb6 	bl	8008ebe <memset>
        uint16_t len = makeNodeInfoMessage(buffer);
 8005f52:	f107 030c 	add.w	r3, r7, #12
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 f9ae 	bl	80062b8 <makeNodeInfoMessage>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
        int result = canardRequestOrRespond(&g_canard,
 8005f62:	1d3b      	adds	r3, r7, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	7ed8      	ldrb	r0, [r3, #27]
 8005f68:	1d3b      	adds	r3, r7, #4
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3319      	adds	r3, #25
 8005f6e:	1d3a      	adds	r2, r7, #4
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	7e92      	ldrb	r2, [r2, #26]
 8005f74:	f8b7 118e 	ldrh.w	r1, [r7, #398]	; 0x18e
 8005f78:	9105      	str	r1, [sp, #20]
 8005f7a:	f107 010c 	add.w	r1, r7, #12
 8005f7e:	9104      	str	r1, [sp, #16]
 8005f80:	2100      	movs	r1, #0
 8005f82:	9103      	str	r1, [sp, #12]
 8005f84:	9202      	str	r2, [sp, #8]
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	2301      	movs	r3, #1
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	a309      	add	r3, pc, #36	; (adr r3, 8005fb4 <getNodeInfoHandleCanard+0x7c>)
 8005f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f92:	4601      	mov	r1, r0
 8005f94:	4806      	ldr	r0, [pc, #24]	; (8005fb0 <getNodeInfoHandleCanard+0x78>)
 8005f96:	f000 fd55 	bl	8006a44 <canardRequestOrRespond>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
                                            &transfer->transfer_id,
                                            transfer->priority,
                                            CanardResponse,
                                            &buffer[0],
                                            (uint16_t)len);
}
 8005fa0:	bf00      	nop
 8005fa2:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	f3af 8000 	nop.w
 8005fb0:	20001a1c 	.word	0x20001a1c
 8005fb4:	21c46a9e 	.word	0x21c46a9e
 8005fb8:	ee468a81 	.word	0xee468a81

08005fbc <uavcanInit>:

void uavcanInit(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af02      	add	r7, sp, #8
    CanardSTM32CANTimings timings;
    int result = canardSTM32ComputeCANTimings(HAL_RCC_GetPCLK1Freq(), 1000000, &timings);
 8005fc2:	f7fc fa6f 	bl	80024a4 <HAL_RCC_GetPCLK1Freq>
 8005fc6:	1d3b      	adds	r3, r7, #4
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4913      	ldr	r1, [pc, #76]	; (8006018 <uavcanInit+0x5c>)
 8005fcc:	f7ff fe5c 	bl	8005c88 <canardSTM32ComputeCANTimings>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	60fb      	str	r3, [r7, #12]
    if (result)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d000      	beq.n	8005fdc <uavcanInit+0x20>
    {
        __ASM volatile("BKPT #01");
 8005fda:	be01      	bkpt	0x0001
    }
    result = canardSTM32Init(&timings, CanardSTM32IfaceModeNormal);
 8005fdc:	1d3b      	adds	r3, r7, #4
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f002 fcb5 	bl	8008950 <canardSTM32Init>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	60fb      	str	r3, [r7, #12]
    if (result)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d000      	beq.n	8005ff2 <uavcanInit+0x36>
    {
        __ASM volatile("BKPT #01");
 8005ff0:	be01      	bkpt	0x0001
    }

    canardInit(&g_canard,                         // Uninitialized library instance
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	4b09      	ldr	r3, [pc, #36]	; (800601c <uavcanInit+0x60>)
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	4b09      	ldr	r3, [pc, #36]	; (8006020 <uavcanInit+0x64>)
 8005ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006000:	4908      	ldr	r1, [pc, #32]	; (8006024 <uavcanInit+0x68>)
 8006002:	4809      	ldr	r0, [pc, #36]	; (8006028 <uavcanInit+0x6c>)
 8006004:	f000 fc0c 	bl	8006820 <canardInit>
               sizeof(g_canard_memory_pool),      // Size of the above, in bytes
               onTransferReceived,                // Callback, see CanardOnTransferReception
               shouldAcceptTransfer,              // Callback, see CanardShouldAcceptTransfer
               NULL);

    canardSetLocalNodeID(&g_canard, 11);
 8006008:	210b      	movs	r1, #11
 800600a:	4807      	ldr	r0, [pc, #28]	; (8006028 <uavcanInit+0x6c>)
 800600c:	f000 fc4c 	bl	80068a8 <canardSetLocalNodeID>
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	000f4240 	.word	0x000f4240
 800601c:	08005e69 	.word	0x08005e69
 8006020:	08005ef1 	.word	0x08005ef1
 8006024:	20001a40 	.word	0x20001a40
 8006028:	20001a1c 	.word	0x20001a1c

0800602c <sendCanard>:

void sendCanard(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
  const CanardCANFrame* txf = canardPeekTxQueue(&g_canard);
 8006032:	480f      	ldr	r0, [pc, #60]	; (8006070 <sendCanard+0x44>)
 8006034:	f000 fd72 	bl	8006b1c <canardPeekTxQueue>
 8006038:	6078      	str	r0, [r7, #4]
  while(txf)
 800603a:	e012      	b.n	8006062 <sendCanard+0x36>
    {
        const int tx_res = canardSTM32Transmit(txf);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f002 fd8d 	bl	8008b5c <canardSTM32Transmit>
 8006042:	4603      	mov	r3, r0
 8006044:	603b      	str	r3, [r7, #0]
        if (tx_res < 0)                  // Failure - drop the frame and report
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	da00      	bge.n	800604e <sendCanard+0x22>
        {
            __ASM volatile("BKPT #01");  // TODO: handle the error properly
 800604c:	be01      	bkpt	0x0001
        }
        if(tx_res > 0)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	dd02      	ble.n	800605a <sendCanard+0x2e>
        {
            canardPopTxQueue(&g_canard);
 8006054:	4806      	ldr	r0, [pc, #24]	; (8006070 <sendCanard+0x44>)
 8006056:	f000 fd73 	bl	8006b40 <canardPopTxQueue>
        }
        txf = canardPeekTxQueue(&g_canard);
 800605a:	4805      	ldr	r0, [pc, #20]	; (8006070 <sendCanard+0x44>)
 800605c:	f000 fd5e 	bl	8006b1c <canardPeekTxQueue>
 8006060:	6078      	str	r0, [r7, #4]
  while(txf)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e9      	bne.n	800603c <sendCanard+0x10>
    }
}
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20001a1c 	.word	0x20001a1c

08006074 <receiveCanard>:

void receiveCanard(void)
{
 8006074:	b590      	push	{r4, r7, lr}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
    CanardCANFrame rx_frame;
    int res = canardSTM32Receive(&rx_frame);
 800607a:	1d3b      	adds	r3, r7, #4
 800607c:	4618      	mov	r0, r3
 800607e:	f002 fe35 	bl	8008cec <canardSTM32Receive>
 8006082:	4603      	mov	r3, r0
 8006084:	617b      	str	r3, [r7, #20]
    if(res)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00e      	beq.n	80060aa <receiveCanard+0x36>
    {
        canardHandleRxFrame(&g_canard, &rx_frame, HAL_GetTick() * 1000);
 800608c:	f7fa fcfa 	bl	8000a84 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006096:	fb03 f302 	mul.w	r3, r3, r2
 800609a:	f04f 0400 	mov.w	r4, #0
 800609e:	1d39      	adds	r1, r7, #4
 80060a0:	461a      	mov	r2, r3
 80060a2:	4623      	mov	r3, r4
 80060a4:	4803      	ldr	r0, [pc, #12]	; (80060b4 <receiveCanard+0x40>)
 80060a6:	f000 fd61 	bl	8006b6c <canardHandleRxFrame>
    }
}
 80060aa:	bf00      	nop
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd90      	pop	{r4, r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20001a1c 	.word	0x20001a1c

080060b8 <spinCanard>:

void spinCanard(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	; 0x28
 80060bc:	af06      	add	r7, sp, #24
    static uint32_t spin_time = 0;
    if(HAL_GetTick() < spin_time + CANARD_SPIN_PERIOD) return;  // rate limiting
 80060be:	f7fa fce1 	bl	8000a84 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	4b14      	ldr	r3, [pc, #80]	; (8006118 <spinCanard+0x60>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3364      	adds	r3, #100	; 0x64
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d31c      	bcc.n	8006108 <spinCanard+0x50>
    spin_time = HAL_GetTick();
 80060ce:	f7fa fcd9 	bl	8000a84 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	4b10      	ldr	r3, [pc, #64]	; (8006118 <spinCanard+0x60>)
 80060d6:	601a      	str	r2, [r3, #0]
    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
    //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

    uint8_t buffer[UAVCAN_NODE_STATUS_MESSAGE_SIZE];
    static uint8_t transfer_id = 0;                           // This variable MUST BE STATIC; refer to the libcanard documentation for the background
    makeNodeStatusMessage(buffer);
 80060d8:	1d3b      	adds	r3, r7, #4
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 f8bc 	bl	8006258 <makeNodeStatusMessage>
    const int16_t bc_res = canardBroadcast(&g_canard,
 80060e0:	2307      	movs	r3, #7
 80060e2:	9304      	str	r3, [sp, #16]
 80060e4:	1d3b      	adds	r3, r7, #4
 80060e6:	9303      	str	r3, [sp, #12]
 80060e8:	2318      	movs	r3, #24
 80060ea:	9302      	str	r3, [sp, #8]
 80060ec:	4b0b      	ldr	r3, [pc, #44]	; (800611c <spinCanard+0x64>)
 80060ee:	9301      	str	r3, [sp, #4]
 80060f0:	f240 1355 	movw	r3, #341	; 0x155
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	a306      	add	r3, pc, #24	; (adr r3, 8006110 <spinCanard+0x58>)
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	4808      	ldr	r0, [pc, #32]	; (8006120 <spinCanard+0x68>)
 80060fe:	f000 fc0f 	bl	8006920 <canardBroadcast>
 8006102:	4603      	mov	r3, r0
 8006104:	81fb      	strh	r3, [r7, #14]
 8006106:	e000      	b.n	800610a <spinCanard+0x52>
    if(HAL_GetTick() < spin_time + CANARD_SPIN_PERIOD) return;  // rate limiting
 8006108:	bf00      	nop
    if(bc_res <=0){
    	//handle errr
    }


}
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	c1a7c6f1 	.word	0xc1a7c6f1
 8006114:	0f0868d0 	.word	0x0f0868d0
 8006118:	20001e4c 	.word	0x20001e4c
 800611c:	20001e50 	.word	0x20001e50
 8006120:	20001a1c 	.word	0x20001a1c
 8006124:	00000000 	.word	0x00000000

08006128 <makeRawAirDatadMessage>:




void makeRawAirDatadMessage(uint8_t buffer[UAVCAN_EQUIPMENT_AIR_DATA_RAWAIRDATA_SIZE], float diff_press, float temp)
{
 8006128:	b590      	push	{r4, r7, lr}
 800612a:	b08b      	sub	sp, #44	; 0x2c
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
	/*
	 * Full name: uavcan.equipment.air_data.RawAirData
     * Default data type ID: 1027
	 */

	memset(buffer, 0, UAVCAN_EQUIPMENT_AIR_DATA_RAWAIRDATA_SIZE);
 8006134:	2231      	movs	r2, #49	; 0x31
 8006136:	2100      	movs	r1, #0
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f002 fec0 	bl	8008ebe <memset>
	/*
	 * uint16_t canardConvertNativeFloatToFloat16(float value);
	 * float canardConvertFloat16ToNativeFloat(uint16_t value);
	 */

	 uint8_t flags = 1;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint16_t pad= 0;
 8006144:	2300      	movs	r3, #0
 8006146:	84fb      	strh	r3, [r7, #38]	; 0x26
	 //uint32_t static_pressure = convertFrom16To32(canardConvertNativeFloatToFloat16(987.456), 0);
	 //uint32_t differential_pressure = convertFrom16To32(0, canardConvertNativeFloatToFloat16(1000));
	 //uint16_t static_pressure = canardConvertNativeFloatToFloat16(4.1);
	 //uint16_t differential_pressure = canardConvertNativeFloatToFloat16(0.0);
	 float static_pressure = 101300.0;
 8006148:	4b2b      	ldr	r3, [pc, #172]	; (80061f8 <makeRawAirDatadMessage+0xd0>)
 800614a:	623b      	str	r3, [r7, #32]
	 //float differential_pressure = 1000.0;
	 float differential_pressure = diff_press;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	61fb      	str	r3, [r7, #28]


	 uint16_t static_pressure_sensor_temperature = 0.0;
 8006150:	2300      	movs	r3, #0
 8006152:	837b      	strh	r3, [r7, #26]
	 uint16_t differential_pressure_sensor_temperature = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	833b      	strh	r3, [r7, #24]
	 uint16_t static_air_temperature = canardConvertNativeFloatToFloat16(temp+273.15);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7fa f965 	bl	8000428 <__aeabi_f2d>
 800615e:	a324      	add	r3, pc, #144	; (adr r3, 80061f0 <makeRawAirDatadMessage+0xc8>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f7fa f802 	bl	800016c <__adddf3>
 8006168:	4603      	mov	r3, r0
 800616a:	460c      	mov	r4, r1
 800616c:	4618      	mov	r0, r3
 800616e:	4621      	mov	r1, r4
 8006170:	f7fa f9b2 	bl	80004d8 <__aeabi_d2f>
 8006174:	4603      	mov	r3, r0
 8006176:	4618      	mov	r0, r3
 8006178:	f001 fb18 	bl	80077ac <canardConvertNativeFloatToFloat16>
 800617c:	4603      	mov	r3, r0
 800617e:	82fb      	strh	r3, [r7, #22]
	 uint16_t pitot_temperature = 10;
 8006180:	230a      	movs	r3, #10
 8006182:	82bb      	strh	r3, [r7, #20]
	 //uint16_t padding[16];


	 canardEncodeScalar(buffer, 0, 8, &flags);
 8006184:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8006188:	2208      	movs	r2, #8
 800618a:	2100      	movs	r1, #0
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f001 fa29 	bl	80075e4 <canardEncodeScalar>
	 canardEncodeScalar(buffer, 8, 32, &static_pressure);
 8006192:	f107 0320 	add.w	r3, r7, #32
 8006196:	2220      	movs	r2, #32
 8006198:	2108      	movs	r1, #8
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f001 fa22 	bl	80075e4 <canardEncodeScalar>
	 canardEncodeScalar(buffer, 40, 32, &differential_pressure);
 80061a0:	f107 031c 	add.w	r3, r7, #28
 80061a4:	2220      	movs	r2, #32
 80061a6:	2128      	movs	r1, #40	; 0x28
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f001 fa1b 	bl	80075e4 <canardEncodeScalar>
	 canardEncodeScalar(buffer, 72, 16, &static_pressure_sensor_temperature);
 80061ae:	f107 031a 	add.w	r3, r7, #26
 80061b2:	2210      	movs	r2, #16
 80061b4:	2148      	movs	r1, #72	; 0x48
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f001 fa14 	bl	80075e4 <canardEncodeScalar>
	 canardEncodeScalar(buffer, 88, 16, &differential_pressure_sensor_temperature);
 80061bc:	f107 0318 	add.w	r3, r7, #24
 80061c0:	2210      	movs	r2, #16
 80061c2:	2158      	movs	r1, #88	; 0x58
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f001 fa0d 	bl	80075e4 <canardEncodeScalar>
	 canardEncodeScalar(buffer, 104, 16, &static_air_temperature);
 80061ca:	f107 0316 	add.w	r3, r7, #22
 80061ce:	2210      	movs	r2, #16
 80061d0:	2168      	movs	r1, #104	; 0x68
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f001 fa06 	bl	80075e4 <canardEncodeScalar>
	 canardEncodeScalar(buffer, 120, 16, &pitot_temperature);
 80061d8:	f107 0314 	add.w	r3, r7, #20
 80061dc:	2210      	movs	r2, #16
 80061de:	2178      	movs	r1, #120	; 0x78
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f001 f9ff 	bl	80075e4 <canardEncodeScalar>
	 //canardEncodeScalar(buffer, 136, 16, &pitot_temperature);


}
 80061e6:	bf00      	nop
 80061e8:	372c      	adds	r7, #44	; 0x2c
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd90      	pop	{r4, r7, pc}
 80061ee:	bf00      	nop
 80061f0:	66666666 	.word	0x66666666
 80061f4:	40711266 	.word	0x40711266
 80061f8:	47c5da00 	.word	0x47c5da00
 80061fc:	00000000 	.word	0x00000000

08006200 <publishAirspeed>:

void publishAirspeed(float diff_press, float temp)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b096      	sub	sp, #88	; 0x58
 8006204:	af06      	add	r7, sp, #24
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	*/

	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

	uint8_t buff[UAVCAN_EQUIPMENT_AIR_DATA_RAWAIRDATA_SIZE];
	makeRawAirDatadMessage(buff, diff_press, temp);
 800620a:	f107 030c 	add.w	r3, r7, #12
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff ff88 	bl	8006128 <makeRawAirDatadMessage>
	static uint8_t transfer_id;  // Note that the transfer ID variable MUST BE STATIC (or heap-allocated)!
	const int16_t airspeed_result = canardBroadcast(&g_canard, UAVCAN_EQUIPMENT_AIR_DATA_RAWAIRDATA_SIGNATURE, UAVCAN_EQUIPMENT_AIR_DATA_RAWAIRDATA_ID, &transfer_id, CANARD_TRANSFER_PRIORITY_HIGHEST, buff, UAVCAN_EQUIPMENT_AIR_DATA_RAWAIRDATA_SIZE);
 8006218:	2331      	movs	r3, #49	; 0x31
 800621a:	9304      	str	r3, [sp, #16]
 800621c:	f107 030c 	add.w	r3, r7, #12
 8006220:	9303      	str	r3, [sp, #12]
 8006222:	2300      	movs	r3, #0
 8006224:	9302      	str	r3, [sp, #8]
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <publishAirspeed+0x50>)
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	f240 4303 	movw	r3, #1027	; 0x403
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	a305      	add	r3, pc, #20	; (adr r3, 8006248 <publishAirspeed+0x48>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	4807      	ldr	r0, [pc, #28]	; (8006254 <publishAirspeed+0x54>)
 8006238:	f000 fb72 	bl	8006920 <canardBroadcast>
 800623c:	4603      	mov	r3, r0
 800623e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	{
		//handle error
	}


}
 8006240:	bf00      	nop
 8006242:	3740      	adds	r7, #64	; 0x40
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	a122f5da 	.word	0xa122f5da
 800624c:	c77df38b 	.word	0xc77df38b
 8006250:	20001e51 	.word	0x20001e51
 8006254:	20001a1c 	.word	0x20001a1c

08006258 <makeNodeStatusMessage>:




void makeNodeStatusMessage(uint8_t buffer[UAVCAN_NODE_STATUS_MESSAGE_SIZE])
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
    uint8_t node_health = UAVCAN_NODE_HEALTH_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	73fb      	strb	r3, [r7, #15]
    uint8_t node_mode   = UAVCAN_NODE_MODE_OPERATIONAL;
 8006264:	2300      	movs	r3, #0
 8006266:	73bb      	strb	r3, [r7, #14]
    memset(buffer, 0, UAVCAN_NODE_STATUS_MESSAGE_SIZE);
 8006268:	2207      	movs	r2, #7
 800626a:	2100      	movs	r1, #0
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f002 fe26 	bl	8008ebe <memset>
    uint32_t uptime_sec = (HAL_GetTick() / 1000);
 8006272:	f7fa fc07 	bl	8000a84 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <makeNodeStatusMessage+0x5c>)
 800627a:	fba3 2302 	umull	r2, r3, r3, r2
 800627e:	099b      	lsrs	r3, r3, #6
 8006280:	60bb      	str	r3, [r7, #8]
    canardEncodeScalar(buffer,  0, 32, &uptime_sec);
 8006282:	f107 0308 	add.w	r3, r7, #8
 8006286:	2220      	movs	r2, #32
 8006288:	2100      	movs	r1, #0
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f001 f9aa 	bl	80075e4 <canardEncodeScalar>
    canardEncodeScalar(buffer, 32,  2, &node_health);
 8006290:	f107 030f 	add.w	r3, r7, #15
 8006294:	2202      	movs	r2, #2
 8006296:	2120      	movs	r1, #32
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f001 f9a3 	bl	80075e4 <canardEncodeScalar>
    canardEncodeScalar(buffer, 34,  3, &node_mode);
 800629e:	f107 030e 	add.w	r3, r7, #14
 80062a2:	2203      	movs	r2, #3
 80062a4:	2122      	movs	r1, #34	; 0x22
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 f99c 	bl	80075e4 <canardEncodeScalar>
}
 80062ac:	bf00      	nop
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	10624dd3 	.word	0x10624dd3

080062b8 <makeNodeInfoMessage>:

uint16_t makeNodeInfoMessage(uint8_t buffer[UAVCAN_GET_NODE_INFO_RESPONSE_MAX_SIZE])
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
    memset(buffer, 0, UAVCAN_GET_NODE_INFO_RESPONSE_MAX_SIZE);
 80062c0:	f240 1279 	movw	r2, #377	; 0x179
 80062c4:	2100      	movs	r1, #0
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f002 fdf9 	bl	8008ebe <memset>
    makeNodeStatusMessage(buffer);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff ffc3 	bl	8006258 <makeNodeStatusMessage>

    buffer[7] = APP_VERSION_MAJOR;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3307      	adds	r3, #7
 80062d6:	2263      	movs	r2, #99	; 0x63
 80062d8:	701a      	strb	r2, [r3, #0]
    buffer[8] = APP_VERSION_MINOR;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3308      	adds	r3, #8
 80062de:	2263      	movs	r2, #99	; 0x63
 80062e0:	701a      	strb	r2, [r3, #0]
    buffer[9] = 1;                          // Optional field flags, VCS commit is set
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3309      	adds	r3, #9
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
    uint32_t u32 = GIT_HASH;
 80062ea:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <makeNodeInfoMessage+0x70>)
 80062ec:	60bb      	str	r3, [r7, #8]
    canardEncodeScalar(buffer, 80, 32, &u32);
 80062ee:	f107 0308 	add.w	r3, r7, #8
 80062f2:	2220      	movs	r2, #32
 80062f4:	2150      	movs	r1, #80	; 0x50
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f001 f974 	bl	80075e4 <canardEncodeScalar>

    readUniqueID(&buffer[24]);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3318      	adds	r3, #24
 8006300:	4618      	mov	r0, r3
 8006302:	f000 f815 	bl	8006330 <readUniqueID>
    const size_t name_len = strlen(APP_NODE_NAME);
 8006306:	2312      	movs	r3, #18
 8006308:	60fb      	str	r3, [r7, #12]
    memcpy(&buffer[41], APP_NODE_NAME, name_len);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3329      	adds	r3, #41	; 0x29
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4906      	ldr	r1, [pc, #24]	; (800632c <makeNodeInfoMessage+0x74>)
 8006312:	4618      	mov	r0, r3
 8006314:	f002 fdc8 	bl	8008ea8 <memcpy>
    return 41 + name_len ;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	b29b      	uxth	r3, r3
 800631c:	3329      	adds	r3, #41	; 0x29
 800631e:	b29b      	uxth	r3, r3
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	badc0ffe 	.word	0xbadc0ffe
 800632c:	08009e1c 	.word	0x08009e1c

08006330 <readUniqueID>:

void readUniqueID(uint8_t* out_uid)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UNIQUE_ID_LENGTH_BYTES; i++)
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]
 800633c:	e007      	b.n	800634e <readUniqueID+0x1e>
    {
        out_uid[i] = i;
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	4413      	add	r3, r2
 8006344:	7bfa      	ldrb	r2, [r7, #15]
 8006346:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < UNIQUE_ID_LENGTH_BYTES; i++)
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	3301      	adds	r3, #1
 800634c:	73fb      	strb	r3, [r7, #15]
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	2b0f      	cmp	r3, #15
 8006352:	d9f4      	bls.n	800633e <readUniqueID+0xe>
    }
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr
	...

08006360 <rawcmdHandleCanard>:


void rawcmdHandleCanard(CanardRxTransfer* transfer)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af02      	add	r7, sp, #8
 8006366:	6078      	str	r0, [r7, #4]

    int offset = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i<6; i++)
 800636c:	2300      	movs	r3, #0
 800636e:	60bb      	str	r3, [r7, #8]
 8006370:	e013      	b.n	800639a <rawcmdHandleCanard+0x3a>
    {
        if (canardDecodeScalar(transfer, offset, 14, true, &rc_pwm[i])<14) { break; }
 8006372:	68f9      	ldr	r1, [r7, #12]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	4a0c      	ldr	r2, [pc, #48]	; (80063ac <rawcmdHandleCanard+0x4c>)
 800637a:	4413      	add	r3, r2
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	2301      	movs	r3, #1
 8006380:	220e      	movs	r2, #14
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 ff5a 	bl	800723c <canardDecodeScalar>
 8006388:	4603      	mov	r3, r0
 800638a:	2b0d      	cmp	r3, #13
 800638c:	dd09      	ble.n	80063a2 <rawcmdHandleCanard+0x42>
        offset += 14;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	330e      	adds	r3, #14
 8006392:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i<6; i++)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	3301      	adds	r3, #1
 8006398:	60bb      	str	r3, [r7, #8]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b05      	cmp	r3, #5
 800639e:	dde8      	ble.n	8006372 <rawcmdHandleCanard+0x12>
    }
   // rcpwmUpdate(ar);
}
 80063a0:	e000      	b.n	80063a4 <rawcmdHandleCanard+0x44>
        if (canardDecodeScalar(transfer, offset, 14, true, &rc_pwm[i])<14) { break; }
 80063a2:	bf00      	nop
}
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20001e40 	.word	0x20001e40

080063b0 <getParamByIndex>:
    {"param1", 1, 0, 100, 25},
    {"param2", 2, 2, 8,  3 },
};

param_t * getParamByIndex(uint16_t index)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	80fb      	strh	r3, [r7, #6]
  if(index >= ARRAY_SIZE(parameters))
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d901      	bls.n	80063c4 <getParamByIndex+0x14>
  {
    return NULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	e006      	b.n	80063d2 <getParamByIndex+0x22>
  }

  return &parameters[index];
 80063c4:	88fa      	ldrh	r2, [r7, #6]
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	4a03      	ldr	r2, [pc, #12]	; (80063dc <getParamByIndex+0x2c>)
 80063d0:	4413      	add	r3, r2
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr
 80063dc:	20000010 	.word	0x20000010

080063e0 <getParamByName>:

param_t * getParamByName(uint8_t * name)
{
 80063e0:	b590      	push	{r4, r7, lr}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  for(uint16_t i = 0; i < ARRAY_SIZE(parameters); i++)
 80063e8:	2300      	movs	r3, #0
 80063ea:	81fb      	strh	r3, [r7, #14]
 80063ec:	e026      	b.n	800643c <getParamByName+0x5c>
  {
    if(strncmp((char const*)name, (char const*)parameters[i].name,strlen((char const*)parameters[i].name)) == 0)
 80063ee:	89fa      	ldrh	r2, [r7, #14]
 80063f0:	4916      	ldr	r1, [pc, #88]	; (800644c <getParamByName+0x6c>)
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	440b      	add	r3, r1
 80063fc:	681c      	ldr	r4, [r3, #0]
 80063fe:	89fa      	ldrh	r2, [r7, #14]
 8006400:	4912      	ldr	r1, [pc, #72]	; (800644c <getParamByName+0x6c>)
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	440b      	add	r3, r1
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f7f9 fe9e 	bl	8000150 <strlen>
 8006414:	4603      	mov	r3, r0
 8006416:	461a      	mov	r2, r3
 8006418:	4621      	mov	r1, r4
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f003 f81c 	bl	8009458 <strncmp>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d107      	bne.n	8006436 <getParamByName+0x56>
    {
      return &parameters[i];
 8006426:	89fa      	ldrh	r2, [r7, #14]
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	4a06      	ldr	r2, [pc, #24]	; (800644c <getParamByName+0x6c>)
 8006432:	4413      	add	r3, r2
 8006434:	e006      	b.n	8006444 <getParamByName+0x64>
  for(uint16_t i = 0; i < ARRAY_SIZE(parameters); i++)
 8006436:	89fb      	ldrh	r3, [r7, #14]
 8006438:	3301      	adds	r3, #1
 800643a:	81fb      	strh	r3, [r7, #14]
 800643c:	89fb      	ldrh	r3, [r7, #14]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d9d5      	bls.n	80063ee <getParamByName+0xe>
    }
  }
  return NULL;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	bd90      	pop	{r4, r7, pc}
 800644c:	20000010 	.word	0x20000010

08006450 <encodeParamCanard>:

uint16_t encodeParamCanard(param_t * p, uint8_t * buffer)
{
 8006450:	b5b0      	push	{r4, r5, r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
    uint8_t n     = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	72fb      	strb	r3, [r7, #11]
    int offset    = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]
    uint8_t tag   = 1;
 8006462:	2301      	movs	r3, #1
 8006464:	72bb      	strb	r3, [r7, #10]
    if(p==NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d150      	bne.n	800650e <encodeParamCanard+0xbe>
    {
        tag = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	72bb      	strb	r3, [r7, #10]
        canardEncodeScalar(buffer, offset, 5, &n);
 8006470:	68f9      	ldr	r1, [r7, #12]
 8006472:	f107 030b 	add.w	r3, r7, #11
 8006476:	2205      	movs	r2, #5
 8006478:	6838      	ldr	r0, [r7, #0]
 800647a:	f001 f8b3 	bl	80075e4 <canardEncodeScalar>
        offset += 5;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3305      	adds	r3, #5
 8006482:	60fb      	str	r3, [r7, #12]
        canardEncodeScalar(buffer, offset,3, &tag);
 8006484:	68f9      	ldr	r1, [r7, #12]
 8006486:	f107 030a 	add.w	r3, r7, #10
 800648a:	2203      	movs	r2, #3
 800648c:	6838      	ldr	r0, [r7, #0]
 800648e:	f001 f8a9 	bl	80075e4 <canardEncodeScalar>
        offset += 3;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3303      	adds	r3, #3
 8006496:	60fb      	str	r3, [r7, #12]

        canardEncodeScalar(buffer, offset, 6, &n);
 8006498:	68f9      	ldr	r1, [r7, #12]
 800649a:	f107 030b 	add.w	r3, r7, #11
 800649e:	2206      	movs	r2, #6
 80064a0:	6838      	ldr	r0, [r7, #0]
 80064a2:	f001 f89f 	bl	80075e4 <canardEncodeScalar>
        offset += 6;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3306      	adds	r3, #6
 80064aa:	60fb      	str	r3, [r7, #12]
        canardEncodeScalar(buffer, offset,2, &tag);
 80064ac:	68f9      	ldr	r1, [r7, #12]
 80064ae:	f107 030a 	add.w	r3, r7, #10
 80064b2:	2202      	movs	r2, #2
 80064b4:	6838      	ldr	r0, [r7, #0]
 80064b6:	f001 f895 	bl	80075e4 <canardEncodeScalar>
        offset += 2;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3302      	adds	r3, #2
 80064be:	60fb      	str	r3, [r7, #12]

        canardEncodeScalar(buffer, offset, 6, &n);
 80064c0:	68f9      	ldr	r1, [r7, #12]
 80064c2:	f107 030b 	add.w	r3, r7, #11
 80064c6:	2206      	movs	r2, #6
 80064c8:	6838      	ldr	r0, [r7, #0]
 80064ca:	f001 f88b 	bl	80075e4 <canardEncodeScalar>
        offset += 6;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3306      	adds	r3, #6
 80064d2:	60fb      	str	r3, [r7, #12]
        canardEncodeScalar(buffer, offset, 2, &tag);
 80064d4:	68f9      	ldr	r1, [r7, #12]
 80064d6:	f107 030a 	add.w	r3, r7, #10
 80064da:	2202      	movs	r2, #2
 80064dc:	6838      	ldr	r0, [r7, #0]
 80064de:	f001 f881 	bl	80075e4 <canardEncodeScalar>
        offset += 2;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3302      	adds	r3, #2
 80064e6:	60fb      	str	r3, [r7, #12]
        buffer[offset / 8] = 0;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	da00      	bge.n	80064f0 <encodeParamCanard+0xa0>
 80064ee:	3307      	adds	r3, #7
 80064f0:	10db      	asrs	r3, r3, #3
 80064f2:	461a      	mov	r2, r3
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	4413      	add	r3, r2
 80064f8:	2200      	movs	r2, #0
 80064fa:	701a      	strb	r2, [r3, #0]
        return ( offset / 8 + 1 );
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	da00      	bge.n	8006504 <encodeParamCanard+0xb4>
 8006502:	3307      	adds	r3, #7
 8006504:	10db      	asrs	r3, r3, #3
 8006506:	b29b      	uxth	r3, r3
 8006508:	3301      	adds	r3, #1
 800650a:	b29b      	uxth	r3, r3
 800650c:	e09b      	b.n	8006646 <encodeParamCanard+0x1f6>
    }
    canardEncodeScalar(buffer, offset, 5,&n);
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	f107 030b 	add.w	r3, r7, #11
 8006514:	2205      	movs	r2, #5
 8006516:	6838      	ldr	r0, [r7, #0]
 8006518:	f001 f864 	bl	80075e4 <canardEncodeScalar>
    offset += 5;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3305      	adds	r3, #5
 8006520:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset, 3, &tag);
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	f107 030a 	add.w	r3, r7, #10
 8006528:	2203      	movs	r2, #3
 800652a:	6838      	ldr	r0, [r7, #0]
 800652c:	f001 f85a 	bl	80075e4 <canardEncodeScalar>
    offset += 3;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3303      	adds	r3, #3
 8006534:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset, 64, &p->val);
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3308      	adds	r3, #8
 800653c:	2240      	movs	r2, #64	; 0x40
 800653e:	6838      	ldr	r0, [r7, #0]
 8006540:	f001 f850 	bl	80075e4 <canardEncodeScalar>
    offset += 64;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3340      	adds	r3, #64	; 0x40
 8006548:	60fb      	str	r3, [r7, #12]

    canardEncodeScalar(buffer, offset, 5, &n);
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	f107 030b 	add.w	r3, r7, #11
 8006550:	2205      	movs	r2, #5
 8006552:	6838      	ldr	r0, [r7, #0]
 8006554:	f001 f846 	bl	80075e4 <canardEncodeScalar>
    offset += 5;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3305      	adds	r3, #5
 800655c:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset, 3, &tag);
 800655e:	68f9      	ldr	r1, [r7, #12]
 8006560:	f107 030a 	add.w	r3, r7, #10
 8006564:	2203      	movs	r2, #3
 8006566:	6838      	ldr	r0, [r7, #0]
 8006568:	f001 f83c 	bl	80075e4 <canardEncodeScalar>
    offset += 3;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3303      	adds	r3, #3
 8006570:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset, 64, &p->defval);
 8006572:	68f9      	ldr	r1, [r7, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3320      	adds	r3, #32
 8006578:	2240      	movs	r2, #64	; 0x40
 800657a:	6838      	ldr	r0, [r7, #0]
 800657c:	f001 f832 	bl	80075e4 <canardEncodeScalar>
    offset += 64;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3340      	adds	r3, #64	; 0x40
 8006584:	60fb      	str	r3, [r7, #12]

    canardEncodeScalar(buffer, offset, 6, &n);
 8006586:	68f9      	ldr	r1, [r7, #12]
 8006588:	f107 030b 	add.w	r3, r7, #11
 800658c:	2206      	movs	r2, #6
 800658e:	6838      	ldr	r0, [r7, #0]
 8006590:	f001 f828 	bl	80075e4 <canardEncodeScalar>
    offset += 6;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3306      	adds	r3, #6
 8006598:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset, 2, &tag);
 800659a:	68f9      	ldr	r1, [r7, #12]
 800659c:	f107 030a 	add.w	r3, r7, #10
 80065a0:	2202      	movs	r2, #2
 80065a2:	6838      	ldr	r0, [r7, #0]
 80065a4:	f001 f81e 	bl	80075e4 <canardEncodeScalar>
    offset += 2;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3302      	adds	r3, #2
 80065ac:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset, 64, &p->max);
 80065ae:	68f9      	ldr	r1, [r7, #12]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3318      	adds	r3, #24
 80065b4:	2240      	movs	r2, #64	; 0x40
 80065b6:	6838      	ldr	r0, [r7, #0]
 80065b8:	f001 f814 	bl	80075e4 <canardEncodeScalar>
    offset += 64;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3340      	adds	r3, #64	; 0x40
 80065c0:	60fb      	str	r3, [r7, #12]

    canardEncodeScalar(buffer, offset, 6, &n);
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	f107 030b 	add.w	r3, r7, #11
 80065c8:	2206      	movs	r2, #6
 80065ca:	6838      	ldr	r0, [r7, #0]
 80065cc:	f001 f80a 	bl	80075e4 <canardEncodeScalar>
    offset += 6;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3306      	adds	r3, #6
 80065d4:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset,2,&tag);
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	f107 030a 	add.w	r3, r7, #10
 80065dc:	2202      	movs	r2, #2
 80065de:	6838      	ldr	r0, [r7, #0]
 80065e0:	f001 f800 	bl	80075e4 <canardEncodeScalar>
    offset += 2;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3302      	adds	r3, #2
 80065e8:	60fb      	str	r3, [r7, #12]
    canardEncodeScalar(buffer, offset,64,&p->min);
 80065ea:	68f9      	ldr	r1, [r7, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3310      	adds	r3, #16
 80065f0:	2240      	movs	r2, #64	; 0x40
 80065f2:	6838      	ldr	r0, [r7, #0]
 80065f4:	f000 fff6 	bl	80075e4 <canardEncodeScalar>
    offset += 64;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3340      	adds	r3, #64	; 0x40
 80065fc:	60fb      	str	r3, [r7, #12]

    memcpy(&buffer[offset / 8], p->name, strlen((char const*)p->name));
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	da00      	bge.n	8006606 <encodeParamCanard+0x1b6>
 8006604:	3307      	adds	r3, #7
 8006606:	10db      	asrs	r3, r3, #3
 8006608:	461a      	mov	r2, r3
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	189c      	adds	r4, r3, r2
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681d      	ldr	r5, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f7f9 fd9a 	bl	8000150 <strlen>
 800661c:	4603      	mov	r3, r0
 800661e:	461a      	mov	r2, r3
 8006620:	4629      	mov	r1, r5
 8006622:	4620      	mov	r0, r4
 8006624:	f002 fc40 	bl	8008ea8 <memcpy>
    return  (offset/8 + strlen((char const*)p->name));
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	da00      	bge.n	8006630 <encodeParamCanard+0x1e0>
 800662e:	3307      	adds	r3, #7
 8006630:	10db      	asrs	r3, r3, #3
 8006632:	b29c      	uxth	r4, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f7f9 fd89 	bl	8000150 <strlen>
 800663e:	4603      	mov	r3, r0
 8006640:	b29b      	uxth	r3, r3
 8006642:	4423      	add	r3, r4
 8006644:	b29b      	uxth	r3, r3
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006650 <getsetHandleCanard>:


void getsetHandleCanard(CanardRxTransfer* transfer)
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b0a5      	sub	sp, #148	; 0x94
 8006654:	af06      	add	r7, sp, #24
 8006656:	6078      	str	r0, [r7, #4]
    uint16_t index = 0xFFFF;
 8006658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800665c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    uint8_t tag    = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
    int offset     = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	677b      	str	r3, [r7, #116]	; 0x74
    int64_t val    = 0;
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	f04f 0400 	mov.w	r4, #0
 8006672:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

    canardDecodeScalar(transfer, offset,  13, false, &index);
 8006676:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006678:	f107 0362 	add.w	r3, r7, #98	; 0x62
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	2300      	movs	r3, #0
 8006680:	220d      	movs	r2, #13
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fdda 	bl	800723c <canardDecodeScalar>
    offset += 13;
 8006688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800668a:	330d      	adds	r3, #13
 800668c:	677b      	str	r3, [r7, #116]	; 0x74
    canardDecodeScalar(transfer, offset, 3, false, &tag);
 800668e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006690:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	2300      	movs	r3, #0
 8006698:	2203      	movs	r2, #3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fdce 	bl	800723c <canardDecodeScalar>
    offset += 3;
 80066a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066a2:	3303      	adds	r3, #3
 80066a4:	677b      	str	r3, [r7, #116]	; 0x74

    if(tag == 1)
 80066a6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d10b      	bne.n	80066c6 <getsetHandleCanard+0x76>
    {
        canardDecodeScalar(transfer, offset, 64, false, &val);
 80066ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80066b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	2300      	movs	r3, #0
 80066b8:	2240      	movs	r2, #64	; 0x40
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fdbe 	bl	800723c <canardDecodeScalar>
        offset += 64;
 80066c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066c2:	3340      	adds	r3, #64	; 0x40
 80066c4:	677b      	str	r3, [r7, #116]	; 0x74
    }

    uint16_t n = transfer->payload_len - offset / 8 ;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	8a9a      	ldrh	r2, [r3, #20]
 80066ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	da00      	bge.n	80066d2 <getsetHandleCanard+0x82>
 80066d0:	3307      	adds	r3, #7
 80066d2:	10db      	asrs	r3, r3, #3
 80066d4:	425b      	negs	r3, r3
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	4413      	add	r3, r2
 80066da:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    uint8_t name[16]      = "";
 80066de:	2300      	movs	r3, #0
 80066e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	605a      	str	r2, [r3, #4]
 80066ec:	609a      	str	r2, [r3, #8]
    for(int i = 0; i < n; i++)
 80066ee:	2300      	movs	r3, #0
 80066f0:	673b      	str	r3, [r7, #112]	; 0x70
 80066f2:	e010      	b.n	8006716 <getsetHandleCanard+0xc6>
    {
        canardDecodeScalar(transfer, offset, 8, false, &name[i]);
 80066f4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80066f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80066fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066fc:	4413      	add	r3, r2
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	2300      	movs	r3, #0
 8006702:	2208      	movs	r2, #8
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fd99 	bl	800723c <canardDecodeScalar>
        offset += 8;
 800670a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800670c:	3308      	adds	r3, #8
 800670e:	677b      	str	r3, [r7, #116]	; 0x74
    for(int i = 0; i < n; i++)
 8006710:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006712:	3301      	adds	r3, #1
 8006714:	673b      	str	r3, [r7, #112]	; 0x70
 8006716:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800671a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800671c:	429a      	cmp	r2, r3
 800671e:	dbe9      	blt.n	80066f4 <getsetHandleCanard+0xa4>
    }

    param_t * p = NULL;
 8006720:	2300      	movs	r3, #0
 8006722:	66fb      	str	r3, [r7, #108]	; 0x6c

    if(strlen((char const*)name))
 8006724:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d006      	beq.n	800673c <getsetHandleCanard+0xec>
    {
        p = getParamByName(name);
 800672e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff fe54 	bl	80063e0 <getParamByName>
 8006738:	66f8      	str	r0, [r7, #108]	; 0x6c
 800673a:	e005      	b.n	8006748 <getsetHandleCanard+0xf8>
    }
    else
    {
        p = getParamByIndex(index);
 800673c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff fe35 	bl	80063b0 <getParamByIndex>
 8006746:	66f8      	str	r0, [r7, #108]	; 0x6c
    }

    if((p)&&(tag == 1))
 8006748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d008      	beq.n	8006760 <getsetHandleCanard+0x110>
 800674e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8006752:	2b01      	cmp	r3, #1
 8006754:	d104      	bne.n	8006760 <getsetHandleCanard+0x110>
    {
        p->val = val;
 8006756:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800675a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800675c:	e9c2 3402 	strd	r3, r4, [r2, #8]
    }

    uint8_t  buffer[64] = "";
 8006760:	2300      	movs	r3, #0
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	f107 030c 	add.w	r3, r7, #12
 8006768:	223c      	movs	r2, #60	; 0x3c
 800676a:	2100      	movs	r1, #0
 800676c:	4618      	mov	r0, r3
 800676e:	f002 fba6 	bl	8008ebe <memset>
    uint16_t len = encodeParamCanard(p, buffer);
 8006772:	f107 0308 	add.w	r3, r7, #8
 8006776:	4619      	mov	r1, r3
 8006778:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800677a:	f7ff fe69 	bl	8006450 <encodeParamCanard>
 800677e:	4603      	mov	r3, r0
 8006780:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    int result = canardRequestOrRespond(&g_canard,
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	7ed8      	ldrb	r0, [r3, #27]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3319      	adds	r3, #25
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	7e92      	ldrb	r2, [r2, #26]
 8006790:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8006794:	9105      	str	r1, [sp, #20]
 8006796:	f107 0108 	add.w	r1, r7, #8
 800679a:	9104      	str	r1, [sp, #16]
 800679c:	2100      	movs	r1, #0
 800679e:	9103      	str	r1, [sp, #12]
 80067a0:	9202      	str	r2, [sp, #8]
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	230b      	movs	r3, #11
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	a308      	add	r3, pc, #32	; (adr r3, 80067cc <getsetHandleCanard+0x17c>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	4601      	mov	r1, r0
 80067b0:	4805      	ldr	r0, [pc, #20]	; (80067c8 <getsetHandleCanard+0x178>)
 80067b2:	f000 f947 	bl	8006a44 <canardRequestOrRespond>
 80067b6:	4603      	mov	r3, r0
 80067b8:	667b      	str	r3, [r7, #100]	; 0x64
                                        transfer->priority,
                                        CanardResponse,
                                        &buffer[0],
                                        (uint16_t)len);

}
 80067ba:	bf00      	nop
 80067bc:	377c      	adds	r7, #124	; 0x7c
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd90      	pop	{r4, r7, pc}
 80067c2:	bf00      	nop
 80067c4:	f3af 8000 	nop.w
 80067c8:	20001a1c 	.word	0x20001a1c
 80067cc:	39d1a4d5 	.word	0x39d1a4d5
 80067d0:	a7b622f9 	.word	0xa7b622f9

080067d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80067d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80067d6:	e003      	b.n	80067e0 <LoopCopyDataInit>

080067d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80067d8:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80067da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80067dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80067de:	3104      	adds	r1, #4

080067e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80067e0:	480a      	ldr	r0, [pc, #40]	; (800680c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80067e2:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80067e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80067e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80067e8:	d3f6      	bcc.n	80067d8 <CopyDataInit>
  ldr r2, =_sbss
 80067ea:	4a0a      	ldr	r2, [pc, #40]	; (8006814 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80067ec:	e002      	b.n	80067f4 <LoopFillZerobss>

080067ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80067ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80067f0:	f842 3b04 	str.w	r3, [r2], #4

080067f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80067f4:	4b08      	ldr	r3, [pc, #32]	; (8006818 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80067f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80067f8:	d3f9      	bcc.n	80067ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80067fa:	f7ff fa11 	bl	8005c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80067fe:	f002 fb2f 	bl	8008e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006802:	f7fe feb3 	bl	800556c <main>
  bx lr
 8006806:	4770      	bx	lr
  ldr r3, =_sidata
 8006808:	0800a504 	.word	0x0800a504
  ldr r0, =_sdata
 800680c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006810:	200000ec 	.word	0x200000ec
  ldr r2, =_sbss
 8006814:	200000f0 	.word	0x200000f0
  ldr r3, = _ebss
 8006818:	20001f88 	.word	0x20001f88

0800681c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800681c:	e7fe      	b.n	800681c <ADC1_2_IRQHandler>
	...

08006820 <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(out_ins != NULL);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d105      	bne.n	8006840 <canardInit+0x20>
 8006834:	4b19      	ldr	r3, [pc, #100]	; (800689c <canardInit+0x7c>)
 8006836:	4a1a      	ldr	r2, [pc, #104]	; (80068a0 <canardInit+0x80>)
 8006838:	214f      	movs	r1, #79	; 0x4f
 800683a:	481a      	ldr	r0, [pc, #104]	; (80068a4 <canardInit+0x84>)
 800683c:	f002 fada 	bl	8008df4 <__assert_func>
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 6);

    memset(out_ins, 0, sizeof(*out_ins));
 8006840:	2224      	movs	r2, #36	; 0x24
 8006842:	2100      	movs	r1, #0
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f002 fb3a 	bl	8008ebe <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a3a      	ldr	r2, [r7, #32]
 800685a:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	619a      	str	r2, [r3, #24]
    out_ins->tx_queue = NULL;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	61da      	str	r2, [r3, #28]
    out_ins->user_reference = user_reference;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686c:	621a      	str	r2, [r3, #32]

    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687a:	d302      	bcc.n	8006882 <canardInit+0x62>
    {
        pool_capacity = 0xFFFFU;
 800687c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006880:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	330c      	adds	r3, #12
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	b292      	uxth	r2, r2
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	4618      	mov	r0, r3
 800688e:	f001 fee3 	bl	8008658 <initPoolAllocator>
}
 8006892:	bf00      	nop
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	08009e48 	.word	0x08009e48
 80068a0:	0800a308 	.word	0x0800a308
 80068a4:	08009e60 	.word	0x08009e60

080068a8 <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d105      	bne.n	80068c6 <canardSetLocalNodeID+0x1e>
 80068ba:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <canardSetLocalNodeID+0x50>)
 80068bc:	4a0f      	ldr	r2, [pc, #60]	; (80068fc <canardSetLocalNodeID+0x54>)
 80068be:	2173      	movs	r1, #115	; 0x73
 80068c0:	480f      	ldr	r0, [pc, #60]	; (8006900 <canardSetLocalNodeID+0x58>)
 80068c2:	f002 fa97 	bl	8008df4 <__assert_func>

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <canardSetLocalNodeID+0x3c>
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d007      	beq.n	80068e4 <canardSetLocalNodeID+0x3c>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 80068d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 80068d8:	2b00      	cmp	r3, #0
 80068da:	db03      	blt.n	80068e4 <canardSetLocalNodeID+0x3c>
    {
        ins->node_id = self_node_id;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	78fa      	ldrb	r2, [r7, #3]
 80068e0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 80068e2:	e005      	b.n	80068f0 <canardSetLocalNodeID+0x48>
        CANARD_ASSERT(false);
 80068e4:	4b07      	ldr	r3, [pc, #28]	; (8006904 <canardSetLocalNodeID+0x5c>)
 80068e6:	4a05      	ldr	r2, [pc, #20]	; (80068fc <canardSetLocalNodeID+0x54>)
 80068e8:	217d      	movs	r1, #125	; 0x7d
 80068ea:	4805      	ldr	r0, [pc, #20]	; (8006900 <canardSetLocalNodeID+0x58>)
 80068ec:	f002 fa82 	bl	8008df4 <__assert_func>
}
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	08009e78 	.word	0x08009e78
 80068fc:	0800a314 	.word	0x0800a314
 8006900:	08009e60 	.word	0x08009e60
 8006904:	08009e8c 	.word	0x08009e8c

08006908 <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	781b      	ldrb	r3, [r3, #0]
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr
	...

08006920 <canardBroadcast>:
                        uint16_t data_type_id,
                        uint8_t* inout_transfer_id,
                        uint8_t priority,
                        const void* payload,
                        uint16_t payload_len)
{
 8006920:	b590      	push	{r4, r7, lr}
 8006922:	b08b      	sub	sp, #44	; 0x2c
 8006924:	af02      	add	r7, sp, #8
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	e9c7 2300 	strd	r2, r3, [r7]
    if (payload == NULL && payload_len > 0)
 800692c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <canardBroadcast+0x20>
 8006932:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <canardBroadcast+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800693a:	f06f 0301 	mvn.w	r3, #1
 800693e:	e07b      	b.n	8006a38 <canardBroadcast+0x118>
    }
    if (priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8006940:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006944:	2b1f      	cmp	r3, #31
 8006946:	d902      	bls.n	800694e <canardBroadcast+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8006948:	f06f 0301 	mvn.w	r3, #1
 800694c:	e074      	b.n	8006a38 <canardBroadcast+0x118>
    }

    uint32_t can_id = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
    uint16_t crc = 0xFFFFU;
 8006952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006956:	837b      	strh	r3, [r7, #26]

    if (canardGetLocalNodeID(ins) == 0)
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7ff ffd5 	bl	8006908 <canardGetLocalNodeID>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d134      	bne.n	80069ce <canardBroadcast+0xae>
    {
        if (payload_len > 7)
 8006964:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006968:	2b07      	cmp	r3, #7
 800696a:	d902      	bls.n	8006972 <canardBroadcast+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 800696c:	f06f 0303 	mvn.w	r3, #3
 8006970:	e062      	b.n	8006a38 <canardBroadcast+0x118>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((data_type_id & DTIDMask) != data_type_id)
 8006972:	4b33      	ldr	r3, [pc, #204]	; (8006a40 <canardBroadcast+0x120>)
 8006974:	881a      	ldrh	r2, [r3, #0]
 8006976:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006978:	4013      	ands	r3, r2
 800697a:	b29b      	uxth	r3, r3
 800697c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800697e:	429a      	cmp	r2, r3
 8006980:	d002      	beq.n	8006988 <canardBroadcast+0x68>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 8006982:	f06f 0301 	mvn.w	r3, #1
 8006986:	e057      	b.n	8006a38 <canardBroadcast+0x118>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, payload, payload_len)) & 0x7FFEU);
 8006988:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800698c:	461a      	mov	r2, r3
 800698e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006990:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006994:	f001 fe43 	bl	800861e <crcAdd>
 8006998:	4603      	mov	r3, r0
 800699a:	461a      	mov	r2, r3
 800699c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80069a0:	4013      	ands	r3, r2
 80069a2:	833b      	strh	r3, [r7, #24]
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 80069a4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80069a8:	061a      	lsls	r2, r3, #24
 80069aa:	8b3b      	ldrh	r3, [r7, #24]
 80069ac:	025b      	lsls	r3, r3, #9
 80069ae:	431a      	orrs	r2, r3
                 ((uint32_t) (data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 80069b0:	4b23      	ldr	r3, [pc, #140]	; (8006a40 <canardBroadcast+0x120>)
 80069b2:	8819      	ldrh	r1, [r3, #0]
 80069b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80069b6:	400b      	ands	r3, r1
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 80069bc:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff ffa1 	bl	8006908 <canardGetLocalNodeID>
 80069c6:	4603      	mov	r3, r0
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 80069c8:	4323      	orrs	r3, r4
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	e021      	b.n	8006a12 <canardBroadcast+0xf2>
    }
    else
    {
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 80069ce:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80069d2:	061a      	lsls	r2, r3, #24
 80069d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80069d6:	021b      	lsls	r3, r3, #8
 80069d8:	ea42 0403 	orr.w	r4, r2, r3
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7ff ff93 	bl	8006908 <canardGetLocalNodeID>
 80069e2:	4603      	mov	r3, r0
 80069e4:	4323      	orrs	r3, r4
 80069e6:	61fb      	str	r3, [r7, #28]

        if (payload_len > 7)
 80069e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069ec:	2b07      	cmp	r3, #7
 80069ee:	d910      	bls.n	8006a12 <canardBroadcast+0xf2>
        {
            crc = crcAddSignature(crc, data_type_signature);
 80069f0:	8b79      	ldrh	r1, [r7, #26]
 80069f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069f6:	4608      	mov	r0, r1
 80069f8:	f001 fde2 	bl	80085c0 <crcAddSignature>
 80069fc:	4603      	mov	r3, r0
 80069fe:	837b      	strh	r3, [r7, #26]
            crc = crcAdd(crc, payload, payload_len);
 8006a00:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006a04:	8b7b      	ldrh	r3, [r7, #26]
 8006a06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 fe08 	bl	800861e <crcAdd>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	837b      	strh	r3, [r7, #26]
        }
    }

    const int16_t result = enqueueTxFrames(ins, can_id, inout_transfer_id, crc, payload, payload_len);
 8006a12:	8b7a      	ldrh	r2, [r7, #26]
 8006a14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a22:	69f9      	ldr	r1, [r7, #28]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 ff59 	bl	80078dc <enqueueTxFrames>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	82fb      	strh	r3, [r7, #22]

    incrementTransferID(inout_transfer_id);
 8006a2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006a30:	f000 ff2e 	bl	8007890 <incrementTransferID>

    return result;
 8006a34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3724      	adds	r7, #36	; 0x24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd90      	pop	{r4, r7, pc}
 8006a40:	0800a32a 	.word	0x0800a32a

08006a44 <canardRequestOrRespond>:
                               uint8_t* inout_transfer_id,
                               uint8_t priority,
                               CanardRequestResponse kind,
                               const void* payload,
                               uint16_t payload_len)
{
 8006a44:	b590      	push	{r4, r7, lr}
 8006a46:	b08b      	sub	sp, #44	; 0x2c
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	e9c7 2300 	strd	r2, r3, [r7]
 8006a50:	460b      	mov	r3, r1
 8006a52:	72fb      	strb	r3, [r7, #11]
    if (payload == NULL && payload_len > 0)
 8006a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <canardRequestOrRespond+0x24>
 8006a5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <canardRequestOrRespond+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8006a62:	f06f 0301 	mvn.w	r3, #1
 8006a66:	e055      	b.n	8006b14 <canardRequestOrRespond+0xd0>
    }
    if (priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8006a68:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006a6c:	2b1f      	cmp	r3, #31
 8006a6e:	d902      	bls.n	8006a76 <canardRequestOrRespond+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8006a70:	f06f 0301 	mvn.w	r3, #1
 8006a74:	e04e      	b.n	8006b14 <canardRequestOrRespond+0xd0>
    }
    if (canardGetLocalNodeID(ins) == 0)
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f7ff ff46 	bl	8006908 <canardGetLocalNodeID>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d102      	bne.n	8006a88 <canardRequestOrRespond+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 8006a82:	f06f 0303 	mvn.w	r3, #3
 8006a86:	e045      	b.n	8006b14 <canardRequestOrRespond+0xd0>
    }

    const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 8006a88:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006a8c:	061a      	lsls	r2, r3, #24
 8006a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006a92:	041b      	lsls	r3, r3, #16
 8006a94:	431a      	orrs	r2, r3
                            ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 8006a96:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006a9a:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 8006a9c:	431a      	orrs	r2, r3
                            ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 8006a9e:	7afb      	ldrb	r3, [r7, #11]
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f7ff ff2e 	bl	8006908 <canardGetLocalNodeID>
 8006aac:	4603      	mov	r3, r0
 8006aae:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 8006ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab4:	61bb      	str	r3, [r7, #24]
    uint16_t crc = 0xFFFFU;
 8006ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006aba:	83fb      	strh	r3, [r7, #30]

    if (payload_len > 7)
 8006abc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ac0:	2b07      	cmp	r3, #7
 8006ac2:	d910      	bls.n	8006ae6 <canardRequestOrRespond+0xa2>
    {
        crc = crcAddSignature(crc, data_type_signature);
 8006ac4:	8bf9      	ldrh	r1, [r7, #30]
 8006ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aca:	4608      	mov	r0, r1
 8006acc:	f001 fd78 	bl	80085c0 <crcAddSignature>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	83fb      	strh	r3, [r7, #30]
        crc = crcAdd(crc, payload, payload_len);
 8006ad4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8006ad8:	8bfb      	ldrh	r3, [r7, #30]
 8006ada:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006adc:	4618      	mov	r0, r3
 8006ade:	f001 fd9e 	bl	800861e <crcAdd>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	83fb      	strh	r3, [r7, #30]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, inout_transfer_id, crc, payload, payload_len);
 8006ae6:	8bfa      	ldrh	r2, [r7, #30]
 8006ae8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006aec:	9301      	str	r3, [sp, #4]
 8006aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	4613      	mov	r3, r2
 8006af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006af6:	69b9      	ldr	r1, [r7, #24]
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 feef 	bl	80078dc <enqueueTxFrames>
 8006afe:	4603      	mov	r3, r0
 8006b00:	82fb      	strh	r3, [r7, #22]

    if (kind == CanardRequest)                      // Response Transfer ID must not be altered
 8006b02:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d102      	bne.n	8006b10 <canardRequestOrRespond+0xcc>
    {
        incrementTransferID(inout_transfer_id);
 8006b0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006b0c:	f000 fec0 	bl	8007890 <incrementTransferID>
    }

    return result;
 8006b10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3724      	adds	r7, #36	; 0x24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd90      	pop	{r4, r7, pc}

08006b1c <canardPeekTxQueue>:

const CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <canardPeekTxQueue+0x14>
    {
        return NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	e002      	b.n	8006b36 <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	3304      	adds	r3, #4
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc80      	pop	{r7}
 8006b3e:	4770      	bx	lr

08006b40 <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	61da      	str	r2, [r3, #28]
    freeBlock(&ins->allocator, item);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	68f9      	ldr	r1, [r7, #12]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 fdd1 	bl	8008704 <freeBlock>
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 8006b6c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006b70:	b09e      	sub	sp, #120	; 0x78
 8006b72:	af02      	add	r7, sp, #8
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 f8c0 	bl	8007d06 <extractTransferType>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8006b8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d007      	beq.n	8006ba4 <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	0a1b      	lsrs	r3, r3, #8
 8006b9a:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8006b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	e000      	b.n	8006ba6 <canardHandleRxFrame+0x3a>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	da0f      	bge.n	8006bd2 <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d102      	bne.n	8006bd8 <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 8006bd2:	f06f 0309 	mvn.w	r3, #9
 8006bd6:	e323      	b.n	8007220 <canardHandleRxFrame+0x6b4>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 8006bd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d00b      	beq.n	8006bf8 <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f7ff fe91 	bl	8006908 <canardGetLocalNodeID>
 8006be6:	4603      	mov	r3, r0
 8006be8:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 8006bea:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d002      	beq.n	8006bf8 <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 8006bf2:	f06f 030a 	mvn.w	r3, #10
 8006bf6:	e313      	b.n	8007220 <canardHandleRxFrame+0x6b4>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	0e1b      	lsrs	r3, r3, #24
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	f003 031f 	and.w	r3, r3, #31
 8006c04:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 f852 	bl	8007cc4 <extractDataType>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 8006c26:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8006c2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c2e:	041b      	lsls	r3, r3, #16
 8006c30:	431a      	orrs	r2, r3
 8006c32:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006c36:	049b      	lsls	r3, r3, #18
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8006c3e:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 8006c40:	4313      	orrs	r3, r2
 8006c42:	64fb      	str	r3, [r7, #76]	; 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	7b1b      	ldrb	r3, [r3, #12]
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	791b      	ldrb	r3, [r3, #4]
 8006c50:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    CanardRxState* rx_state = NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 8006c58:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006c5c:	09db      	lsrs	r3, r3, #7
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d031      	beq.n	8006ccc <canardHandleRxFrame+0x160>
    {
        uint64_t data_type_signature = 0;
 8006c68:	f04f 0300 	mov.w	r3, #0
 8006c6c:	f04f 0400 	mov.w	r4, #0
 8006c70:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	685c      	ldr	r4, [r3, #4]
 8006c78:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 8006c7c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8006c80:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006c84:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	47a0      	blx	r4
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d017      	beq.n	8006cc6 <canardHandleRxFrame+0x15a>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 8006c96:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f001 f858 	bl	8007d4e <traverseRxStates>
 8006c9e:	66f8      	str	r0, [r7, #108]	; 0x6c

            if(rx_state == NULL)
 8006ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d102      	bne.n	8006cac <canardHandleRxFrame+0x140>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8006ca6:	f06f 0302 	mvn.w	r3, #2
 8006caa:	e2b9      	b.n	8007220 <canardHandleRxFrame+0x6b4>
            }

            rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 8006cac:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	4623      	mov	r3, r4
 8006cb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006cb8:	f001 fc82 	bl	80085c0 <crcAddSignature>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc2:	829a      	strh	r2, [r3, #20]
 8006cc4:	e00f      	b.n	8006ce6 <canardHandleRxFrame+0x17a>
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 8006cc6:	f06f 030b 	mvn.w	r3, #11
 8006cca:	e2a9      	b.n	8007220 <canardHandleRxFrame+0x6b4>
        }
    }
    else
    {
        rx_state = findRxState(ins->rx_states, transfer_descriptor);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f001 f86a 	bl	8007dac <findRxState>
 8006cd8:	66f8      	str	r0, [r7, #108]	; 0x6c

        if (rx_state == NULL)
 8006cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d102      	bne.n	8006ce6 <canardHandleRxFrame+0x17a>
        {
            return -CANARD_ERROR_RX_MISSED_START;
 8006ce0:	f06f 030c 	mvn.w	r3, #12
 8006ce4:	e29c      	b.n	8007220 <canardHandleRxFrame+0x6b4>
        }
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above
 8006ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d106      	bne.n	8006cfa <canardHandleRxFrame+0x18e>
 8006cec:	4bad      	ldr	r3, [pc, #692]	; (8006fa4 <canardHandleRxFrame+0x438>)
 8006cee:	4aae      	ldr	r2, [pc, #696]	; (8006fa8 <canardHandleRxFrame+0x43c>)
 8006cf0:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8006cf4:	48ad      	ldr	r0, [pc, #692]	; (8006fac <canardHandleRxFrame+0x440>)
 8006cf6:	f002 f87d 	bl	8008df4 <__assert_func>

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 8006cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfc:	f103 0408 	add.w	r4, r3, #8
 8006d00:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006d04:	4323      	orrs	r3, r4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bf0c      	ite	eq
 8006d0a:	2301      	moveq	r3, #1
 8006d0c:	2300      	movne	r3, #0
 8006d0e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8006d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d14:	e9d3 bc02 	ldrd	fp, ip, [r3, #8]
 8006d18:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4614      	mov	r4, r2
 8006d20:	ebb3 030b 	subs.w	r3, r3, fp
 8006d24:	eb64 040c 	sbc.w	r4, r4, ip
 8006d28:	49a1      	ldr	r1, [pc, #644]	; (8006fb0 <canardHandleRxFrame+0x444>)
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	42a2      	cmp	r2, r4
 8006d30:	bf08      	it	eq
 8006d32:	4299      	cmpeq	r1, r3
 8006d34:	bf34      	ite	cc
 8006d36:	2301      	movcc	r3, #1
 8006d38:	2300      	movcs	r3, #0
 8006d3a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 8006d3e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006d42:	09db      	lsrs	r3, r3, #7
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bf14      	ite	ne
 8006d4e:	2301      	movne	r3, #1
 8006d50:	2300      	moveq	r3, #0
 8006d52:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8006d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d58:	7ddb      	ldrb	r3, [r3, #23]
 8006d5a:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006d66:	f003 031f 	and.w	r3, r3, #31
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f000 fd70 	bl	8007854 <computeTransferIDForwardDistance>
 8006d74:	4603      	mov	r3, r0
    const bool not_previous_tid =
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	bfcc      	ite	gt
 8006d7a:	2301      	movgt	r3, #1
 8006d7c:	2300      	movle	r3, #0
 8006d7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
 8006d82:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <canardHandleRxFrame+0x236>
            (not_initialized) ||
 8006d8a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d107      	bne.n	8006da2 <canardHandleRxFrame+0x236>
            (tid_timed_out) ||
 8006d92:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d005      	beq.n	8006da6 <canardHandleRxFrame+0x23a>
            (first_frame && not_previous_tid);
 8006d9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <canardHandleRxFrame+0x23a>
            (tid_timed_out) ||
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <canardHandleRxFrame+0x23c>
 8006da6:	2300      	movs	r3, #0
    const bool need_restart =
 8006da8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006dac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

    if (need_restart)
 8006db8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d02b      	beq.n	8006e18 <canardHandleRxFrame+0x2ac>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8006dc0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	b2d9      	uxtb	r1, r3
 8006dca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dcc:	7dd3      	ldrb	r3, [r2, #23]
 8006dce:	f361 0386 	bfi	r3, r1, #2, #5
 8006dd2:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 8006dd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dd6:	7dd3      	ldrb	r3, [r2, #23]
 8006dd8:	f36f 13c7 	bfc	r3, #7, #1
 8006ddc:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 8006dde:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f001 f83c 	bl	8007e5e <releaseStatePayload>
        if (!IS_START_OF_TRANSFER(tail_byte))
 8006de6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006dea:	09db      	lsrs	r3, r3, #7
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d110      	bne.n	8006e18 <canardHandleRxFrame+0x2ac>
        {
            rx_state->transfer_id++;
 8006df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df8:	7ddb      	ldrb	r3, [r3, #23]
 8006dfa:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	3301      	adds	r3, #1
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	b2d9      	uxtb	r1, r3
 8006e08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e0a:	7dd3      	ldrb	r3, [r2, #23]
 8006e0c:	f361 0386 	bfi	r3, r1, #2, #5
 8006e10:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 8006e12:	f06f 030c 	mvn.w	r3, #12
 8006e16:	e203      	b.n	8007220 <canardHandleRxFrame+0x6b4>
        }
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 8006e18:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006e1c:	09db      	lsrs	r3, r3, #7
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d042      	beq.n	8006eae <canardHandleRxFrame+0x342>
 8006e28:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006e2c:	099b      	lsrs	r3, r3, #6
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d03a      	beq.n	8006eae <canardHandleRxFrame+0x342>
    {
        rx_state->timestamp_usec = timestamp_usec;
 8006e38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e3a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006e3e:	e9c2 3402 	strd	r3, r4, [r2, #8]
        CanardRxTransfer rx_transfer = {
 8006e42:	f107 0310 	add.w	r3, r7, #16
 8006e46:	2220      	movs	r2, #32
 8006e48:	2100      	movs	r1, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f002 f837 	bl	8008ebe <memset>
 8006e50:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006e54:	e9c7 3404 	strd	r3, r4, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 8006e5c:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	7b1b      	ldrb	r3, [r3, #12]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 8006e68:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e6a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006e6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006e70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e74:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8006e78:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006e7c:	f003 031f 	and.w	r3, r3, #31
 8006e80:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8006e82:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8006e86:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006e8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e8e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            .priority = priority,
            .source_node_id = source_node_id
        };

        ins->on_reception(ins, &rx_transfer);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f107 0210 	add.w	r2, r7, #16
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 8006ea4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006ea6:	f000 fedb 	bl	8007c60 <prepareForNextTransfer>
        return CANARD_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e1b8      	b.n	8007220 <canardHandleRxFrame+0x6b4>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 8006eae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	bf14      	ite	ne
 8006ebe:	2301      	movne	r3, #1
 8006ec0:	2300      	moveq	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec8:	7ddb      	ldrb	r3, [r3, #23]
 8006eca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d002      	beq.n	8006eda <canardHandleRxFrame+0x36e>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 8006ed4:	f06f 030d 	mvn.w	r3, #13
 8006ed8:	e1a2      	b.n	8007220 <canardHandleRxFrame+0x6b4>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 8006eda:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006ede:	f003 031f 	and.w	r3, r3, #31
 8006ee2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ee4:	7dd2      	ldrb	r2, [r2, #23]
 8006ee6:	f3c2 0284 	ubfx	r2, r2, #2, #5
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d002      	beq.n	8006ef6 <canardHandleRxFrame+0x38a>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 8006ef0:	f06f 030e 	mvn.w	r3, #14
 8006ef4:	e194      	b.n	8007220 <canardHandleRxFrame+0x6b4>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 8006ef6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006efa:	09db      	lsrs	r3, r3, #7
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d056      	beq.n	8006fb4 <canardHandleRxFrame+0x448>
 8006f06:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006f0a:	099b      	lsrs	r3, r3, #6
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d14e      	bne.n	8006fb4 <canardHandleRxFrame+0x448>
    {
        if (frame->data_len <= 3)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	7b1b      	ldrb	r3, [r3, #12]
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d802      	bhi.n	8006f24 <canardHandleRxFrame+0x3b8>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 8006f1e:	f06f 030f 	mvn.w	r3, #15
 8006f22:	e17d      	b.n	8007220 <canardHandleRxFrame+0x6b4>
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 8006f24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f26:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006f2a:	e9c2 3402 	strd	r3, r4, [r2, #8]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f103 000c 	add.w	r0, r3, #12
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	3304      	adds	r3, #4
 8006f38:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8006f3e:	3b03      	subs	r3, #3
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006f44:	f000 ffb4 	bl	8007eb0 <bufferBlockPushBytes>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        if (ret < 0)
 8006f4e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	da08      	bge.n	8006f68 <canardHandleRxFrame+0x3fc>
        {
            releaseStatePayload(ins, rx_state);
 8006f56:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 ff80 	bl	8007e5e <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8006f5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f60:	f000 fe7e 	bl	8007c60 <prepareForNextTransfer>
            return CANARD_ERROR_OUT_OF_MEMORY;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e15b      	b.n	8007220 <canardHandleRxFrame+0x6b4>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	791b      	ldrb	r3, [r3, #4]
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	795b      	ldrb	r3, [r3, #5]
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	021b      	lsls	r3, r3, #8
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f7e:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8006f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f82:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8006f88:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	7b1b      	ldrb	r3, [r3, #12]
 8006f8e:	3b03      	subs	r3, #3
 8006f90:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8006f92:	461a      	mov	r2, r3
 8006f94:	f001 fb43 	bl	800861e <crcAdd>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9e:	829a      	strh	r2, [r3, #20]
    {
 8006fa0:	e131      	b.n	8007206 <canardHandleRxFrame+0x69a>
 8006fa2:	bf00      	nop
 8006fa4:	08009e90 	.word	0x08009e90
 8006fa8:	0800a32c 	.word	0x0800a32c
 8006fac:	08009e60 	.word	0x08009e60
 8006fb0:	001e8480 	.word	0x001e8480
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8006fb4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006fb8:	09db      	lsrs	r3, r3, #7
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d133      	bne.n	800702c <canardHandleRxFrame+0x4c0>
 8006fc4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006fc8:	099b      	lsrs	r3, r3, #6
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d12b      	bne.n	800702c <canardHandleRxFrame+0x4c0>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f103 000c 	add.w	r0, r3, #12
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006fe8:	f000 ff62 	bl	8007eb0 <bufferBlockPushBytes>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        if (ret < 0)
 8006ff2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da08      	bge.n	800700c <canardHandleRxFrame+0x4a0>
        {
            releaseStatePayload(ins, rx_state);
 8006ffa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 ff2e 	bl	8007e5e <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8007002:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007004:	f000 fe2c 	bl	8007c60 <prepareForNextTransfer>
            return CANARD_ERROR_OUT_OF_MEMORY;
 8007008:	2303      	movs	r3, #3
 800700a:	e109      	b.n	8007220 <canardHandleRxFrame+0x6b4>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 800700c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800700e:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	1d19      	adds	r1, r3, #4
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	7b1b      	ldrb	r3, [r3, #12]
 8007018:	3b01      	subs	r3, #1
 800701a:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 800701c:	461a      	mov	r2, r3
 800701e:	f001 fafe 	bl	800861e <crcAdd>
 8007022:	4603      	mov	r3, r0
 8007024:	461a      	mov	r2, r3
 8007026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007028:	829a      	strh	r2, [r3, #20]
    {
 800702a:	e0ec      	b.n	8007206 <canardHandleRxFrame+0x69a>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	7b1b      	ldrb	r3, [r3, #12]
 8007030:	3b01      	subs	r3, #1
 8007032:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

        uint8_t tail_offset = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 800703c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703e:	8adb      	ldrh	r3, [r3, #22]
 8007040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007044:	b29b      	uxth	r3, r3
 8007046:	2b05      	cmp	r3, #5
 8007048:	d823      	bhi.n	8007092 <canardHandleRxFrame+0x526>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 800704a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800704c:	8adb      	ldrh	r3, [r3, #22]
 800704e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007052:	b29b      	uxth	r3, r3
 8007054:	667b      	str	r3, [r7, #100]	; 0x64
 8007056:	e012      	b.n	800707e <canardHandleRxFrame+0x512>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 8007058:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	4413      	add	r3, r2
 8007060:	7919      	ldrb	r1, [r3, #4]
 8007062:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007066:	4413      	add	r3, r2
 8007068:	331a      	adds	r3, #26
 800706a:	460a      	mov	r2, r1
 800706c:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 800706e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007070:	3301      	adds	r3, #1
 8007072:	667b      	str	r3, [r7, #100]	; 0x64
 8007074:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007078:	3301      	adds	r3, #1
 800707a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            for (size_t i = rx_state->payload_len;
 800707e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007080:	2b05      	cmp	r3, #5
 8007082:	d855      	bhi.n	8007130 <canardHandleRxFrame+0x5c4>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 8007084:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8007088:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800708c:	429a      	cmp	r2, r3
 800708e:	d3e3      	bcc.n	8007058 <canardHandleRxFrame+0x4ec>
 8007090:	e04e      	b.n	8007130 <canardHandleRxFrame+0x5c4>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = rx_state->buffer_blocks;
 8007092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	663b      	str	r3, [r7, #96]	; 0x60
            if (block != NULL)          // If there's no middle, that's fine, we'll use only head and tail
 8007098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800709a:	2b00      	cmp	r3, #0
 800709c:	d048      	beq.n	8007130 <canardHandleRxFrame+0x5c4>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 800709e:	2306      	movs	r3, #6
 80070a0:	65fb      	str	r3, [r7, #92]	; 0x5c
                while (block->next != NULL)
 80070a2:	e005      	b.n	80070b0 <canardHandleRxFrame+0x544>
                {
                    block = block->next;
 80070a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	663b      	str	r3, [r7, #96]	; 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 80070aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ac:	331c      	adds	r3, #28
 80070ae:	65fb      	str	r3, [r7, #92]	; 0x5c
                while (block->next != NULL)
 80070b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1f5      	bne.n	80070a4 <canardHandleRxFrame+0x538>
                }
                CANARD_ASSERT(block != NULL);
 80070b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d106      	bne.n	80070cc <canardHandleRxFrame+0x560>
 80070be:	4b5b      	ldr	r3, [pc, #364]	; (800722c <canardHandleRxFrame+0x6c0>)
 80070c0:	4a5b      	ldr	r2, [pc, #364]	; (8007230 <canardHandleRxFrame+0x6c4>)
 80070c2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80070c6:	485b      	ldr	r0, [pc, #364]	; (8007234 <canardHandleRxFrame+0x6c8>)
 80070c8:	f001 fe94 	bl	8008df4 <__assert_func>

                const size_t offset_within_block = rx_state->payload_len - offset;
 80070cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ce:	8adb      	ldrh	r3, [r3, #22]
 80070d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	63fb      	str	r3, [r7, #60]	; 0x3c
                CANARD_ASSERT(offset_within_block < CANARD_BUFFER_BLOCK_DATA_SIZE);
 80070de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e0:	2b1b      	cmp	r3, #27
 80070e2:	d906      	bls.n	80070f2 <canardHandleRxFrame+0x586>
 80070e4:	4b54      	ldr	r3, [pc, #336]	; (8007238 <canardHandleRxFrame+0x6cc>)
 80070e6:	4a52      	ldr	r2, [pc, #328]	; (8007230 <canardHandleRxFrame+0x6c4>)
 80070e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80070ec:	4851      	ldr	r0, [pc, #324]	; (8007234 <canardHandleRxFrame+0x6c8>)
 80070ee:	f001 fe81 	bl	8008df4 <__assert_func>

                for (size_t i = offset_within_block;
 80070f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80070f6:	e012      	b.n	800711e <canardHandleRxFrame+0x5b2>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 80070f8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	4413      	add	r3, r2
 8007100:	7919      	ldrb	r1, [r3, #4]
 8007102:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007106:	4413      	add	r3, r2
 8007108:	3304      	adds	r3, #4
 800710a:	460a      	mov	r2, r1
 800710c:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 800710e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007110:	3301      	adds	r3, #1
 8007112:	65bb      	str	r3, [r7, #88]	; 0x58
 8007114:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007118:	3301      	adds	r3, #1
 800711a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                for (size_t i = offset_within_block;
 800711e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007120:	2b1b      	cmp	r3, #27
 8007122:	d805      	bhi.n	8007130 <canardHandleRxFrame+0x5c4>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 8007124:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8007128:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800712c:	429a      	cmp	r2, r3
 800712e:	d3e3      	bcc.n	80070f8 <canardHandleRxFrame+0x58c>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 8007130:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007134:	e9c7 3404 	strd	r3, r4, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 8007138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800713a:	331a      	adds	r3, #26
        CanardRxTransfer rx_transfer = {
 800713c:	61bb      	str	r3, [r7, #24]
            .payload_middle = rx_state->buffer_blocks,
 800713e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007140:	685b      	ldr	r3, [r3, #4]
        CanardRxTransfer rx_transfer = {
 8007142:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 8007144:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8007148:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800714c:	429a      	cmp	r2, r3
 800714e:	d205      	bcs.n	800715c <canardHandleRxFrame+0x5f0>
 8007150:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	4413      	add	r3, r2
 8007158:	3304      	adds	r3, #4
 800715a:	e000      	b.n	800715e <canardHandleRxFrame+0x5f2>
 800715c:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 800715e:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 8007160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007162:	8adb      	ldrh	r3, [r3, #22]
 8007164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007168:	b29b      	uxth	r3, r3
 800716a:	461a      	mov	r2, r3
 800716c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8007170:	b29b      	uxth	r3, r3
 8007172:	4413      	add	r3, r2
 8007174:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 8007176:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007178:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800717c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800717e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007182:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8007186:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800718a:	f003 031f 	and.w	r3, r3, #31
 800718e:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8007190:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007194:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007198:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800719c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80071a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            .priority = priority,
            .source_node_id = source_node_id
        };

        rx_state->buffer_blocks = NULL;     // Block list ownership has been transferred to rx_transfer!
 80071a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a6:	2200      	movs	r2, #0
 80071a8:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 80071aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ac:	8a98      	ldrh	r0, [r3, #20]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	1d19      	adds	r1, r3, #4
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	7b1b      	ldrb	r3, [r3, #12]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	461a      	mov	r2, r3
 80071ba:	f001 fa30 	bl	800861e <crcAdd>
 80071be:	4603      	mov	r3, r0
 80071c0:	461a      	mov	r2, r3
 80071c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c4:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 80071c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c8:	8a9a      	ldrh	r2, [r3, #20]
 80071ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071cc:	8b1b      	ldrh	r3, [r3, #24]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d106      	bne.n	80071e0 <canardHandleRxFrame+0x674>
        {
            ins->on_reception(ins, &rx_transfer);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f107 0210 	add.w	r2, r7, #16
 80071da:	4611      	mov	r1, r2
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 80071e0:	f107 0310 	add.w	r3, r7, #16
 80071e4:	4619      	mov	r1, r3
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 fab6 	bl	8007758 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 80071ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80071ee:	f000 fd37 	bl	8007c60 <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 80071f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f4:	8a9a      	ldrh	r2, [r3, #20]
 80071f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f8:	8b1b      	ldrh	r3, [r3, #24]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d101      	bne.n	8007202 <canardHandleRxFrame+0x696>
        {
            return CANARD_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	e00e      	b.n	8007220 <canardHandleRxFrame+0x6b4>
        }
        else
        {
            return CANARD_ERROR_RX_BAD_CRC;
 8007202:	2311      	movs	r3, #17
 8007204:	e00c      	b.n	8007220 <canardHandleRxFrame+0x6b4>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 8007206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007208:	7ddb      	ldrb	r3, [r3, #23]
 800720a:	b25b      	sxtb	r3, r3
 800720c:	43db      	mvns	r3, r3
 800720e:	b2db      	uxtb	r3, r3
 8007210:	09db      	lsrs	r3, r3, #7
 8007212:	b2d9      	uxtb	r1, r3
 8007214:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007216:	7dd3      	ldrb	r3, [r2, #23]
 8007218:	f361 13c7 	bfi	r3, r1, #7, #1
 800721c:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3770      	adds	r7, #112	; 0x70
 8007224:	46bd      	mov	sp, r7
 8007226:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800722a:	bf00      	nop
 800722c:	08009ea8 	.word	0x08009ea8
 8007230:	0800a32c 	.word	0x0800a32c
 8007234:	08009e60 	.word	0x08009e60
 8007238:	08009ec0 	.word	0x08009ec0

0800723c <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 800723c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007240:	b089      	sub	sp, #36	; 0x24
 8007242:	af00      	add	r7, sp, #0
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	4611      	mov	r1, r2
 800724a:	461a      	mov	r2, r3
 800724c:	460b      	mov	r3, r1
 800724e:	71fb      	strb	r3, [r7, #7]
 8007250:	4613      	mov	r3, r2
 8007252:	71bb      	strb	r3, [r7, #6]
    if (transfer == NULL || out_value == NULL)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <canardDecodeScalar+0x24>
 800725a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800725c:	2b00      	cmp	r3, #0
 800725e:	d102      	bne.n	8007266 <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8007260:	f06f 0301 	mvn.w	r3, #1
 8007264:	e1b1      	b.n	80075ca <canardDecodeScalar+0x38e>
    }

    if (bit_length < 1 || bit_length > 64)
 8007266:	79fb      	ldrb	r3, [r7, #7]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <canardDecodeScalar+0x36>
 800726c:	79fb      	ldrb	r3, [r7, #7]
 800726e:	2b40      	cmp	r3, #64	; 0x40
 8007270:	d902      	bls.n	8007278 <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8007272:	f06f 0301 	mvn.w	r3, #1
 8007276:	e1a8      	b.n	80075ca <canardDecodeScalar+0x38e>
    }

    if (bit_length == 1 && value_is_signed)
 8007278:	79fb      	ldrb	r3, [r7, #7]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d105      	bne.n	800728a <canardDecodeScalar+0x4e>
 800727e:	79bb      	ldrb	r3, [r7, #6]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8007284:	f06f 0301 	mvn.w	r3, #1
 8007288:	e19f      	b.n	80075ca <canardDecodeScalar+0x38e>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 800728a:	f107 0310 	add.w	r3, r7, #16
 800728e:	2208      	movs	r2, #8
 8007290:	2100      	movs	r1, #0
 8007292:	4618      	mov	r0, r3
 8007294:	f001 fe13 	bl	8008ebe <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8007298:	f107 0310 	add.w	r3, r7, #16
 800729c:	79fa      	ldrb	r2, [r7, #7]
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 ff97 	bl	80081d4 <descatterTransferPayload>
 80072a6:	4603      	mov	r3, r0
 80072a8:	83bb      	strh	r3, [r7, #28]
    if (result <= 0)
 80072aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	dc02      	bgt.n	80072b8 <canardDecodeScalar+0x7c>
    {
        return result;
 80072b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80072b6:	e188      	b.n	80075ca <canardDecodeScalar+0x38e>
    }

    CANARD_ASSERT((result > 0) && (result <= 64) && (result <= bit_length));
 80072b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dd08      	ble.n	80072d2 <canardDecodeScalar+0x96>
 80072c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80072c4:	2b40      	cmp	r3, #64	; 0x40
 80072c6:	dc04      	bgt.n	80072d2 <canardDecodeScalar+0x96>
 80072c8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	dd06      	ble.n	80072e0 <canardDecodeScalar+0xa4>
 80072d2:	4bac      	ldr	r3, [pc, #688]	; (8007584 <canardDecodeScalar+0x348>)
 80072d4:	4aac      	ldr	r2, [pc, #688]	; (8007588 <canardDecodeScalar+0x34c>)
 80072d6:	f240 2135 	movw	r1, #565	; 0x235
 80072da:	48ac      	ldr	r0, [pc, #688]	; (800758c <canardDecodeScalar+0x350>)
 80072dc:	f001 fd8a 	bl	8008df4 <__assert_func>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d016      	beq.n	800731a <canardDecodeScalar+0xde>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	08db      	lsrs	r3, r3, #3
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	f107 0220 	add.w	r2, r7, #32
 80072f6:	4413      	add	r3, r2
 80072f8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80072fc:	461a      	mov	r2, r3
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	425b      	negs	r3, r3
 8007302:	f003 0307 	and.w	r3, r3, #7
 8007306:	411a      	asrs	r2, r3
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	08db      	lsrs	r3, r3, #3
 800730c:	b2db      	uxtb	r3, r3
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	f107 0120 	add.w	r1, r7, #32
 8007314:	440b      	add	r3, r1
 8007316:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 800731a:	2300      	movs	r3, #0
 800731c:	77fb      	strb	r3, [r7, #31]
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d102      	bne.n	800732a <canardDecodeScalar+0xee>
 8007324:	2301      	movs	r3, #1
 8007326:	77fb      	strb	r3, [r7, #31]
 8007328:	e01e      	b.n	8007368 <canardDecodeScalar+0x12c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	2b08      	cmp	r3, #8
 800732e:	d802      	bhi.n	8007336 <canardDecodeScalar+0xfa>
 8007330:	2301      	movs	r3, #1
 8007332:	77fb      	strb	r3, [r7, #31]
 8007334:	e018      	b.n	8007368 <canardDecodeScalar+0x12c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	2b10      	cmp	r3, #16
 800733a:	d802      	bhi.n	8007342 <canardDecodeScalar+0x106>
 800733c:	2302      	movs	r3, #2
 800733e:	77fb      	strb	r3, [r7, #31]
 8007340:	e012      	b.n	8007368 <canardDecodeScalar+0x12c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	2b20      	cmp	r3, #32
 8007346:	d802      	bhi.n	800734e <canardDecodeScalar+0x112>
 8007348:	2304      	movs	r3, #4
 800734a:	77fb      	strb	r3, [r7, #31]
 800734c:	e00c      	b.n	8007368 <canardDecodeScalar+0x12c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	2b40      	cmp	r3, #64	; 0x40
 8007352:	d802      	bhi.n	800735a <canardDecodeScalar+0x11e>
 8007354:	2308      	movs	r3, #8
 8007356:	77fb      	strb	r3, [r7, #31]
 8007358:	e006      	b.n	8007368 <canardDecodeScalar+0x12c>
    else
    {
        CANARD_ASSERT(false);
 800735a:	4b8d      	ldr	r3, [pc, #564]	; (8007590 <canardDecodeScalar+0x354>)
 800735c:	4a8a      	ldr	r2, [pc, #552]	; (8007588 <canardDecodeScalar+0x34c>)
 800735e:	f240 214e 	movw	r1, #590	; 0x24e
 8007362:	488a      	ldr	r0, [pc, #552]	; (800758c <canardDecodeScalar+0x350>)
 8007364:	f001 fd46 	bl	8008df4 <__assert_func>
        return -CANARD_ERROR_INTERNAL;
    }

    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));
 8007368:	7ffb      	ldrb	r3, [r7, #31]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <canardDecodeScalar+0x138>
 800736e:	7ffb      	ldrb	r3, [r7, #31]
 8007370:	2b08      	cmp	r3, #8
 8007372:	d906      	bls.n	8007382 <canardDecodeScalar+0x146>
 8007374:	4b87      	ldr	r3, [pc, #540]	; (8007594 <canardDecodeScalar+0x358>)
 8007376:	4a84      	ldr	r2, [pc, #528]	; (8007588 <canardDecodeScalar+0x34c>)
 8007378:	f240 2152 	movw	r1, #594	; 0x252
 800737c:	4883      	ldr	r0, [pc, #524]	; (800758c <canardDecodeScalar+0x350>)
 800737e:	f001 fd39 	bl	8008df4 <__assert_func>

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 8007382:	f001 f8a1 	bl	80084c8 <isBigEndian>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d006      	beq.n	800739a <canardDecodeScalar+0x15e>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 800738c:	7ffa      	ldrb	r2, [r7, #31]
 800738e:	f107 0310 	add.w	r3, r7, #16
 8007392:	4611      	mov	r1, r2
 8007394:	4618      	mov	r0, r3
 8007396:	f001 f8a7 	bl	80084e8 <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 800739a:	79bb      	ldrb	r3, [r7, #6]
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 809a 	beq.w	80074d6 <canardDecodeScalar+0x29a>
 80073a2:	7ffb      	ldrb	r3, [r7, #31]
 80073a4:	00da      	lsls	r2, r3, #3
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	f000 8094 	beq.w	80074d6 <canardDecodeScalar+0x29a>
    {
        if (bit_length <= 8)
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	d816      	bhi.n	80073e2 <canardDecodeScalar+0x1a6>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 80073b4:	7c3b      	ldrb	r3, [r7, #16]
 80073b6:	461a      	mov	r2, r3
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	fa22 f303 	lsr.w	r3, r2, r3
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8086 	beq.w	80074d6 <canardDecodeScalar+0x29a>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 80073ca:	7c3a      	ldrb	r2, [r7, #16]
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	2101      	movs	r1, #1
 80073d0:	fa01 f303 	lsl.w	r3, r1, r3
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	425b      	negs	r3, r3
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	4313      	orrs	r3, r2
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	743b      	strb	r3, [r7, #16]
 80073e0:	e079      	b.n	80074d6 <canardDecodeScalar+0x29a>
            }
        }
        else if (bit_length <= 16)
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	2b10      	cmp	r3, #16
 80073e6:	d815      	bhi.n	8007414 <canardDecodeScalar+0x1d8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 80073e8:	8a3b      	ldrh	r3, [r7, #16]
 80073ea:	461a      	mov	r2, r3
 80073ec:	79fb      	ldrb	r3, [r7, #7]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	fa22 f303 	lsr.w	r3, r2, r3
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d06c      	beq.n	80074d6 <canardDecodeScalar+0x29a>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 80073fc:	8a3a      	ldrh	r2, [r7, #16]
 80073fe:	79fb      	ldrb	r3, [r7, #7]
 8007400:	2101      	movs	r1, #1
 8007402:	fa01 f303 	lsl.w	r3, r1, r3
 8007406:	b29b      	uxth	r3, r3
 8007408:	425b      	negs	r3, r3
 800740a:	b29b      	uxth	r3, r3
 800740c:	4313      	orrs	r3, r2
 800740e:	b29b      	uxth	r3, r3
 8007410:	823b      	strh	r3, [r7, #16]
 8007412:	e060      	b.n	80074d6 <canardDecodeScalar+0x29a>
            }
        }
        else if (bit_length <= 32)
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	2b20      	cmp	r3, #32
 8007418:	d811      	bhi.n	800743e <canardDecodeScalar+0x202>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	79fb      	ldrb	r3, [r7, #7]
 800741e:	3b01      	subs	r3, #1
 8007420:	fa22 f303 	lsr.w	r3, r2, r3
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d054      	beq.n	80074d6 <canardDecodeScalar+0x29a>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	2101      	movs	r1, #1
 8007432:	fa01 f303 	lsl.w	r3, r1, r3
 8007436:	425b      	negs	r3, r3
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	e04b      	b.n	80074d6 <canardDecodeScalar+0x29a>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	2b3f      	cmp	r3, #63	; 0x3f
 8007442:	d841      	bhi.n	80074c8 <canardDecodeScalar+0x28c>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8007444:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007448:	79f9      	ldrb	r1, [r7, #7]
 800744a:	3901      	subs	r1, #1
 800744c:	f1c1 0620 	rsb	r6, r1, #32
 8007450:	f1a1 0020 	sub.w	r0, r1, #32
 8007454:	fa22 f801 	lsr.w	r8, r2, r1
 8007458:	fa03 f606 	lsl.w	r6, r3, r6
 800745c:	ea48 0806 	orr.w	r8, r8, r6
 8007460:	fa23 f000 	lsr.w	r0, r3, r0
 8007464:	ea48 0800 	orr.w	r8, r8, r0
 8007468:	fa23 f901 	lsr.w	r9, r3, r1
 800746c:	f04f 0201 	mov.w	r2, #1
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	ea02 0008 	and.w	r0, r2, r8
 8007478:	ea03 0109 	and.w	r1, r3, r9
 800747c:	ea50 0301 	orrs.w	r3, r0, r1
 8007480:	d029      	beq.n	80074d6 <canardDecodeScalar+0x29a>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8007482:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8007486:	79f9      	ldrb	r1, [r7, #7]
 8007488:	f04f 0201 	mov.w	r2, #1
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	f1a1 0620 	sub.w	r6, r1, #32
 8007494:	f1c1 0020 	rsb	r0, r1, #32
 8007498:	fa03 f501 	lsl.w	r5, r3, r1
 800749c:	fa02 f606 	lsl.w	r6, r2, r6
 80074a0:	4335      	orrs	r5, r6
 80074a2:	fa22 f000 	lsr.w	r0, r2, r0
 80074a6:	4305      	orrs	r5, r0
 80074a8:	fa02 f401 	lsl.w	r4, r2, r1
 80074ac:	4623      	mov	r3, r4
 80074ae:	462c      	mov	r4, r5
 80074b0:	425b      	negs	r3, r3
 80074b2:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 80074b6:	4619      	mov	r1, r3
 80074b8:	4622      	mov	r2, r4
 80074ba:	ea41 0308 	orr.w	r3, r1, r8
 80074be:	ea42 0409 	orr.w	r4, r2, r9
 80074c2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80074c6:	e006      	b.n	80074d6 <canardDecodeScalar+0x29a>
            }
        }
        else
        {
            CANARD_ASSERT(false);
 80074c8:	4b31      	ldr	r3, [pc, #196]	; (8007590 <canardDecodeScalar+0x354>)
 80074ca:	4a2f      	ldr	r2, [pc, #188]	; (8007588 <canardDecodeScalar+0x34c>)
 80074cc:	f44f 7120 	mov.w	r1, #640	; 0x280
 80074d0:	482e      	ldr	r0, [pc, #184]	; (800758c <canardDecodeScalar+0x350>)
 80074d2:	f001 fc8f 	bl	8008df4 <__assert_func>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 80074d6:	79bb      	ldrb	r3, [r7, #6]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d026      	beq.n	800752a <canardDecodeScalar+0x2ee>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	2b08      	cmp	r3, #8
 80074e0:	d804      	bhi.n	80074ec <canardDecodeScalar+0x2b0>
 80074e2:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80074e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e8:	701a      	strb	r2, [r3, #0]
 80074ea:	e055      	b.n	8007598 <canardDecodeScalar+0x35c>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	2b10      	cmp	r3, #16
 80074f0:	d804      	bhi.n	80074fc <canardDecodeScalar+0x2c0>
 80074f2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80074f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f8:	801a      	strh	r2, [r3, #0]
 80074fa:	e04d      	b.n	8007598 <canardDecodeScalar+0x35c>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	2b20      	cmp	r3, #32
 8007500:	d803      	bhi.n	800750a <canardDecodeScalar+0x2ce>
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	e046      	b.n	8007598 <canardDecodeScalar+0x35c>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d805      	bhi.n	800751c <canardDecodeScalar+0x2e0>
 8007510:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007514:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007516:	e9c2 3400 	strd	r3, r4, [r2]
 800751a:	e03d      	b.n	8007598 <canardDecodeScalar+0x35c>
        else
        {
            CANARD_ASSERT(false);
 800751c:	4b1c      	ldr	r3, [pc, #112]	; (8007590 <canardDecodeScalar+0x354>)
 800751e:	4a1a      	ldr	r2, [pc, #104]	; (8007588 <canardDecodeScalar+0x34c>)
 8007520:	f44f 7124 	mov.w	r1, #656	; 0x290
 8007524:	4819      	ldr	r0, [pc, #100]	; (800758c <canardDecodeScalar+0x350>)
 8007526:	f001 fc65 	bl	8008df4 <__assert_func>
            return -CANARD_ERROR_INTERNAL;
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d103      	bne.n	8007538 <canardDecodeScalar+0x2fc>
 8007530:	7c3a      	ldrb	r2, [r7, #16]
 8007532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007534:	701a      	strb	r2, [r3, #0]
 8007536:	e02f      	b.n	8007598 <canardDecodeScalar+0x35c>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	2b08      	cmp	r3, #8
 800753c:	d803      	bhi.n	8007546 <canardDecodeScalar+0x30a>
 800753e:	7c3a      	ldrb	r2, [r7, #16]
 8007540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007542:	701a      	strb	r2, [r3, #0]
 8007544:	e028      	b.n	8007598 <canardDecodeScalar+0x35c>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	2b10      	cmp	r3, #16
 800754a:	d803      	bhi.n	8007554 <canardDecodeScalar+0x318>
 800754c:	8a3a      	ldrh	r2, [r7, #16]
 800754e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007550:	801a      	strh	r2, [r3, #0]
 8007552:	e021      	b.n	8007598 <canardDecodeScalar+0x35c>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8007554:	79fb      	ldrb	r3, [r7, #7]
 8007556:	2b20      	cmp	r3, #32
 8007558:	d803      	bhi.n	8007562 <canardDecodeScalar+0x326>
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800755e:	601a      	str	r2, [r3, #0]
 8007560:	e01a      	b.n	8007598 <canardDecodeScalar+0x35c>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 8007562:	79fb      	ldrb	r3, [r7, #7]
 8007564:	2b40      	cmp	r3, #64	; 0x40
 8007566:	d805      	bhi.n	8007574 <canardDecodeScalar+0x338>
 8007568:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800756c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800756e:	e9c2 3400 	strd	r3, r4, [r2]
 8007572:	e011      	b.n	8007598 <canardDecodeScalar+0x35c>
        else
        {
            CANARD_ASSERT(false);
 8007574:	4b06      	ldr	r3, [pc, #24]	; (8007590 <canardDecodeScalar+0x354>)
 8007576:	4a04      	ldr	r2, [pc, #16]	; (8007588 <canardDecodeScalar+0x34c>)
 8007578:	f240 219d 	movw	r1, #669	; 0x29d
 800757c:	4803      	ldr	r0, [pc, #12]	; (800758c <canardDecodeScalar+0x350>)
 800757e:	f001 fc39 	bl	8008df4 <__assert_func>
 8007582:	bf00      	nop
 8007584:	08009f0c 	.word	0x08009f0c
 8007588:	0800a340 	.word	0x0800a340
 800758c:	08009e60 	.word	0x08009e60
 8007590:	08009e8c 	.word	0x08009e8c
 8007594:	08009f48 	.word	0x08009f48
            return -CANARD_ERROR_INTERNAL;
        }
    }

    CANARD_ASSERT(result <= bit_length);
 8007598:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	429a      	cmp	r2, r3
 80075a0:	dd06      	ble.n	80075b0 <canardDecodeScalar+0x374>
 80075a2:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <canardDecodeScalar+0x398>)
 80075a4:	4a0c      	ldr	r2, [pc, #48]	; (80075d8 <canardDecodeScalar+0x39c>)
 80075a6:	f240 21a2 	movw	r1, #674	; 0x2a2
 80075aa:	480c      	ldr	r0, [pc, #48]	; (80075dc <canardDecodeScalar+0x3a0>)
 80075ac:	f001 fc22 	bl	8008df4 <__assert_func>
    CANARD_ASSERT(result > 0);
 80075b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	dc06      	bgt.n	80075c6 <canardDecodeScalar+0x38a>
 80075b8:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <canardDecodeScalar+0x3a4>)
 80075ba:	4a07      	ldr	r2, [pc, #28]	; (80075d8 <canardDecodeScalar+0x39c>)
 80075bc:	f240 21a3 	movw	r1, #675	; 0x2a3
 80075c0:	4806      	ldr	r0, [pc, #24]	; (80075dc <canardDecodeScalar+0x3a0>)
 80075c2:	f001 fc17 	bl	8008df4 <__assert_func>
    return result;
 80075c6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3724      	adds	r7, #36	; 0x24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075d4:	08009f78 	.word	0x08009f78
 80075d8:	0800a340 	.word	0x0800a340
 80075dc:	08009e60 	.word	0x08009e60
 80075e0:	08009f90 	.word	0x08009f90

080075e4 <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 80075e4:	b590      	push	{r4, r7, lr}
 80075e6:	b08b      	sub	sp, #44	; 0x2c
 80075e8:	af02      	add	r7, sp, #8
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	4613      	mov	r3, r2
 80075f2:	71fb      	strb	r3, [r7, #7]
    /*
     * This function can only fail due to invalid arguments, so it was decided to make it return void,
     * and in the case of bad arguments try the best effort or just trigger an CANARD_ASSERTion failure.
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d106      	bne.n	8007608 <canardEncodeScalar+0x24>
 80075fa:	4b51      	ldr	r3, [pc, #324]	; (8007740 <canardEncodeScalar+0x15c>)
 80075fc:	4a51      	ldr	r2, [pc, #324]	; (8007744 <canardEncodeScalar+0x160>)
 80075fe:	f240 21b1 	movw	r1, #689	; 0x2b1
 8007602:	4851      	ldr	r0, [pc, #324]	; (8007748 <canardEncodeScalar+0x164>)
 8007604:	f001 fbf6 	bl	8008df4 <__assert_func>
    CANARD_ASSERT(value != NULL);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <canardEncodeScalar+0x38>
 800760e:	4b4f      	ldr	r3, [pc, #316]	; (800774c <canardEncodeScalar+0x168>)
 8007610:	4a4c      	ldr	r2, [pc, #304]	; (8007744 <canardEncodeScalar+0x160>)
 8007612:	f240 21b2 	movw	r1, #690	; 0x2b2
 8007616:	484c      	ldr	r0, [pc, #304]	; (8007748 <canardEncodeScalar+0x164>)
 8007618:	f001 fbec 	bl	8008df4 <__assert_func>

    if (bit_length > 64)
 800761c:	79fb      	ldrb	r3, [r7, #7]
 800761e:	2b40      	cmp	r3, #64	; 0x40
 8007620:	d906      	bls.n	8007630 <canardEncodeScalar+0x4c>
    {
        CANARD_ASSERT(false);
 8007622:	4b4b      	ldr	r3, [pc, #300]	; (8007750 <canardEncodeScalar+0x16c>)
 8007624:	4a47      	ldr	r2, [pc, #284]	; (8007744 <canardEncodeScalar+0x160>)
 8007626:	f240 21b6 	movw	r1, #694	; 0x2b6
 800762a:	4847      	ldr	r0, [pc, #284]	; (8007748 <canardEncodeScalar+0x164>)
 800762c:	f001 fbe2 	bl	8008df4 <__assert_func>
        bit_length = 64;
    }

    if (bit_length < 1)
 8007630:	79fb      	ldrb	r3, [r7, #7]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <canardEncodeScalar+0x60>
    {
        CANARD_ASSERT(false);
 8007636:	4b46      	ldr	r3, [pc, #280]	; (8007750 <canardEncodeScalar+0x16c>)
 8007638:	4a42      	ldr	r2, [pc, #264]	; (8007744 <canardEncodeScalar+0x160>)
 800763a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800763e:	4842      	ldr	r0, [pc, #264]	; (8007748 <canardEncodeScalar+0x164>)
 8007640:	f001 fbd8 	bl	8008df4 <__assert_func>
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 8007644:	f107 0310 	add.w	r3, r7, #16
 8007648:	2208      	movs	r2, #8
 800764a:	2100      	movs	r1, #0
 800764c:	4618      	mov	r0, r3
 800764e:	f001 fc36 	bl	8008ebe <memset>

    uint8_t std_byte_length = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d105      	bne.n	8007668 <canardEncodeScalar+0x84>
 800765c:	2301      	movs	r3, #1
 800765e:	77fb      	strb	r3, [r7, #31]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	743b      	strb	r3, [r7, #16]
 8007666:	e02b      	b.n	80076c0 <canardEncodeScalar+0xdc>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8007668:	79fb      	ldrb	r3, [r7, #7]
 800766a:	2b08      	cmp	r3, #8
 800766c:	d805      	bhi.n	800767a <canardEncodeScalar+0x96>
 800766e:	2301      	movs	r3, #1
 8007670:	77fb      	strb	r3, [r7, #31]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	743b      	strb	r3, [r7, #16]
 8007678:	e022      	b.n	80076c0 <canardEncodeScalar+0xdc>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	2b10      	cmp	r3, #16
 800767e:	d805      	bhi.n	800768c <canardEncodeScalar+0xa8>
 8007680:	2302      	movs	r3, #2
 8007682:	77fb      	strb	r3, [r7, #31]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	823b      	strh	r3, [r7, #16]
 800768a:	e019      	b.n	80076c0 <canardEncodeScalar+0xdc>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	2b20      	cmp	r3, #32
 8007690:	d805      	bhi.n	800769e <canardEncodeScalar+0xba>
 8007692:	2304      	movs	r3, #4
 8007694:	77fb      	strb	r3, [r7, #31]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	613b      	str	r3, [r7, #16]
 800769c:	e010      	b.n	80076c0 <canardEncodeScalar+0xdc>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	2b40      	cmp	r3, #64	; 0x40
 80076a2:	d806      	bhi.n	80076b2 <canardEncodeScalar+0xce>
 80076a4:	2308      	movs	r3, #8
 80076a6:	77fb      	strb	r3, [r7, #31]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	cb18      	ldmia	r3, {r3, r4}
 80076ac:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80076b0:	e006      	b.n	80076c0 <canardEncodeScalar+0xdc>
    else
    {
        CANARD_ASSERT(false);
 80076b2:	4b27      	ldr	r3, [pc, #156]	; (8007750 <canardEncodeScalar+0x16c>)
 80076b4:	4a23      	ldr	r2, [pc, #140]	; (8007744 <canardEncodeScalar+0x160>)
 80076b6:	f240 21d9 	movw	r1, #729	; 0x2d9
 80076ba:	4823      	ldr	r0, [pc, #140]	; (8007748 <canardEncodeScalar+0x164>)
 80076bc:	f001 fb9a 	bl	8008df4 <__assert_func>
    }

    CANARD_ASSERT(std_byte_length > 0);
 80076c0:	7ffb      	ldrb	r3, [r7, #31]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <canardEncodeScalar+0xf0>
 80076c6:	4b23      	ldr	r3, [pc, #140]	; (8007754 <canardEncodeScalar+0x170>)
 80076c8:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <canardEncodeScalar+0x160>)
 80076ca:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 80076ce:	481e      	ldr	r0, [pc, #120]	; (8007748 <canardEncodeScalar+0x164>)
 80076d0:	f001 fb90 	bl	8008df4 <__assert_func>

    if (isBigEndian())
 80076d4:	f000 fef8 	bl	80084c8 <isBigEndian>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d006      	beq.n	80076ec <canardEncodeScalar+0x108>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 80076de:	7ffa      	ldrb	r2, [r7, #31]
 80076e0:	f107 0310 	add.w	r3, r7, #16
 80076e4:	4611      	mov	r1, r2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fefe 	bl	80084e8 <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 80076ec:	79fb      	ldrb	r3, [r7, #7]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d016      	beq.n	8007726 <canardEncodeScalar+0x142>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	08db      	lsrs	r3, r3, #3
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	f107 0220 	add.w	r2, r7, #32
 8007702:	4413      	add	r3, r2
 8007704:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8007708:	461a      	mov	r2, r3
 800770a:	79fb      	ldrb	r3, [r7, #7]
 800770c:	425b      	negs	r3, r3
 800770e:	f003 0307 	and.w	r3, r3, #7
 8007712:	409a      	lsls	r2, r3
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	08db      	lsrs	r3, r3, #3
 8007718:	b2db      	uxtb	r3, r3
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	f107 0120 	add.w	r1, r7, #32
 8007720:	440b      	add	r3, r1
 8007722:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 8007726:	79fa      	ldrb	r2, [r7, #7]
 8007728:	f107 0010 	add.w	r0, r7, #16
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2100      	movs	r1, #0
 8007734:	f000 fcca 	bl	80080cc <copyBitArray>
}
 8007738:	bf00      	nop
 800773a:	3724      	adds	r7, #36	; 0x24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd90      	pop	{r4, r7, pc}
 8007740:	08009f9c 	.word	0x08009f9c
 8007744:	0800a354 	.word	0x0800a354
 8007748:	08009e60 	.word	0x08009e60
 800774c:	08009fb8 	.word	0x08009fb8
 8007750:	08009e8c 	.word	0x08009e8c
 8007754:	08009fd0 	.word	0x08009fd0

08007758 <canardReleaseRxTransferPayload>:

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 8007762:	e00f      	b.n	8007784 <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f103 020c 	add.w	r2, r3, #12
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	4619      	mov	r1, r3
 8007778:	4610      	mov	r0, r2
 800777a:	f000 ffc3 	bl	8008704 <freeBlock>
        transfer->payload_middle = temp;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1eb      	bne.n	8007764 <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2200      	movs	r2, #0
 8007790:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2200      	movs	r2, #0
 8007796:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2200      	movs	r2, #0
 800779c:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2200      	movs	r2, #0
 80077a2:	829a      	strh	r2, [r3, #20]
}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <canardConvertNativeFloatToFloat16>:
{
    return ins->allocator.statistics;
}

uint16_t canardConvertNativeFloatToFloat16(float value)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08a      	sub	sp, #40	; 0x28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
    {
        uint32_t u;
        float f;
    };

    const union FP32 f32inf = { 255UL << 23U };
 80077b4:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80077b8:	617b      	str	r3, [r7, #20]
    const union FP32 f16inf = { 31UL << 23U };
 80077ba:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 80077be:	613b      	str	r3, [r7, #16]
    const union FP32 magic = { 15UL << 23U };
 80077c0:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 80077c4:	60fb      	str	r3, [r7, #12]
    const uint32_t sign_mask = 0x80000000UL;
 80077c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077ca:	623b      	str	r3, [r7, #32]
    const uint32_t round_mask = ~0xFFFUL;
 80077cc:	4b20      	ldr	r3, [pc, #128]	; (8007850 <canardConvertNativeFloatToFloat16+0xa4>)
 80077ce:	61fb      	str	r3, [r7, #28]

    union FP32 in;
    in.f = value;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60bb      	str	r3, [r7, #8]
    uint32_t sign = in.u & sign_mask;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	6a3a      	ldr	r2, [r7, #32]
 80077d8:	4013      	ands	r3, r2
 80077da:	61bb      	str	r3, [r7, #24]
    in.u ^= sign;
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	4053      	eors	r3, r2
 80077e2:	60bb      	str	r3, [r7, #8]

    uint16_t out = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (in.u >= f32inf.u)
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d30a      	bcc.n	8007806 <canardConvertNativeFloatToFloat16+0x5a>
    {
        out = (in.u > f32inf.u) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d902      	bls.n	80077fe <canardConvertNativeFloatToFloat16+0x52>
 80077f8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80077fc:	e001      	b.n	8007802 <canardConvertNativeFloatToFloat16+0x56>
 80077fe:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8007802:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007804:	e018      	b.n	8007838 <canardConvertNativeFloatToFloat16+0x8c>
    }
    else
    {
        in.u &= round_mask;
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	4013      	ands	r3, r2
 800780c:	60bb      	str	r3, [r7, #8]
        in.f *= magic.f;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4611      	mov	r1, r2
 8007814:	4618      	mov	r0, r3
 8007816:	f7f8 ffbd 	bl	8000794 <__aeabi_fmul>
 800781a:	4603      	mov	r3, r0
 800781c:	60bb      	str	r3, [r7, #8]
        in.u -= round_mask;
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	60bb      	str	r3, [r7, #8]
        if (in.u > f16inf.u)
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	429a      	cmp	r2, r3
 800782c:	d901      	bls.n	8007832 <canardConvertNativeFloatToFloat16+0x86>
        {
            in.u = f16inf.u;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	60bb      	str	r3, [r7, #8]
        }
        out = (uint16_t)(in.u >> 13U);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	0b5b      	lsrs	r3, r3, #13
 8007836:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    out |= (uint16_t)(sign >> 16U);
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	0c1b      	lsrs	r3, r3, #16
 800783c:	b29a      	uxth	r2, r3
 800783e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007840:	4313      	orrs	r3, r2
 8007842:	84fb      	strh	r3, [r7, #38]	; 0x26

    return out;
 8007844:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8007846:	4618      	mov	r0, r3
 8007848:	3728      	adds	r7, #40	; 0x28
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	fffff000 	.word	0xfffff000

08007854 <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	460a      	mov	r2, r1
 800785e:	71fb      	strb	r3, [r7, #7]
 8007860:	4613      	mov	r3, r2
 8007862:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(b - a);
 8007864:	79bb      	ldrb	r3, [r7, #6]
 8007866:	b29a      	uxth	r2, r3
 8007868:	79fb      	ldrb	r3, [r7, #7]
 800786a:	b29b      	uxth	r3, r3
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	b29b      	uxth	r3, r3
 8007870:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 8007872:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007876:	2b00      	cmp	r3, #0
 8007878:	da03      	bge.n	8007882 <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 800787a:	89fb      	ldrh	r3, [r7, #14]
 800787c:	3320      	adds	r3, #32
 800787e:	b29b      	uxth	r3, r3
 8007880:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 8007882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	bc80      	pop	{r7}
 800788e:	4770      	bx	lr

08007890 <incrementTransferID>:

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <incrementTransferID+0x1c>
 800789e:	4b0c      	ldr	r3, [pc, #48]	; (80078d0 <incrementTransferID+0x40>)
 80078a0:	4a0c      	ldr	r2, [pc, #48]	; (80078d4 <incrementTransferID+0x44>)
 80078a2:	f240 315e 	movw	r1, #862	; 0x35e
 80078a6:	480c      	ldr	r0, [pc, #48]	; (80078d8 <incrementTransferID+0x48>)
 80078a8:	f001 faa4 	bl	8008df4 <__assert_func>

    (*transfer_id)++;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	3301      	adds	r3, #1
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2b1f      	cmp	r3, #31
 80078be:	d902      	bls.n	80078c6 <incrementTransferID+0x36>
    {
        *transfer_id = 0;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
    }
}
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	08009fe4 	.word	0x08009fe4
 80078d4:	0800a368 	.word	0x0800a368
 80078d8:	08009e60 	.word	0x08009e60

080078dc <enqueueTxFrames>:
                                        uint32_t can_id,
                                        uint8_t* transfer_id,
                                        uint16_t crc,
                                        const uint8_t* payload,
                                        uint16_t payload_len)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b088      	sub	sp, #32
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	807b      	strh	r3, [r7, #2]
    CANARD_ASSERT(ins != NULL);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d106      	bne.n	80078fe <enqueueTxFrames+0x22>
 80078f0:	4b6d      	ldr	r3, [pc, #436]	; (8007aa8 <enqueueTxFrames+0x1cc>)
 80078f2:	4a6e      	ldr	r2, [pc, #440]	; (8007aac <enqueueTxFrames+0x1d0>)
 80078f4:	f240 316e 	movw	r1, #878	; 0x36e
 80078f8:	486d      	ldr	r0, [pc, #436]	; (8007ab0 <enqueueTxFrames+0x1d4>)
 80078fa:	f001 fa7b 	bl	8008df4 <__assert_func>
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	429a      	cmp	r2, r3
 8007908:	d006      	beq.n	8007918 <enqueueTxFrames+0x3c>
 800790a:	4b6a      	ldr	r3, [pc, #424]	; (8007ab4 <enqueueTxFrames+0x1d8>)
 800790c:	4a67      	ldr	r2, [pc, #412]	; (8007aac <enqueueTxFrames+0x1d0>)
 800790e:	f240 316f 	movw	r1, #879	; 0x36f
 8007912:	4867      	ldr	r0, [pc, #412]	; (8007ab0 <enqueueTxFrames+0x1d4>)
 8007914:	f001 fa6e 	bl	8008df4 <__assert_func>

    if (transfer_id == NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d102      	bne.n	8007924 <enqueueTxFrames+0x48>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800791e:	f06f 0301 	mvn.w	r3, #1
 8007922:	e0bd      	b.n	8007aa0 <enqueueTxFrames+0x1c4>
    }

    if ((payload_len > 0) && (payload == NULL))
 8007924:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <enqueueTxFrames+0x5a>
 800792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792c:	2b00      	cmp	r3, #0
 800792e:	d102      	bne.n	8007936 <enqueueTxFrames+0x5a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8007930:	f06f 0301 	mvn.w	r3, #1
 8007934:	e0b4      	b.n	8007aa0 <enqueueTxFrames+0x1c4>
    }

    int16_t result = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	83fb      	strh	r3, [r7, #30]

    if (payload_len < CANARD_CAN_FRAME_MAX_DATA_LEN)                        // Single frame transfer
 800793a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800793c:	2b07      	cmp	r3, #7
 800793e:	d835      	bhi.n	80079ac <enqueueTxFrames+0xd0>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	330c      	adds	r3, #12
 8007944:	4618      	mov	r0, r3
 8007946:	f000 f919 	bl	8007b7c <createTxItem>
 800794a:	6138      	str	r0, [r7, #16]
        if (queue_item == NULL)
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d102      	bne.n	8007958 <enqueueTxFrames+0x7c>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8007952:	f06f 0302 	mvn.w	r3, #2
 8007956:	e0a3      	b.n	8007aa0 <enqueueTxFrames+0x1c4>
        }

        memcpy(queue_item->frame.data, payload, payload_len);
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	3308      	adds	r3, #8
 800795c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800795e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007960:	4618      	mov	r0, r3
 8007962:	f001 faa1 	bl	8008ea8 <memcpy>

        queue_item->frame.data_len = (uint8_t)(payload_len + 1);
 8007966:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007968:	b2db      	uxtb	r3, r3
 800796a:	3301      	adds	r3, #1
 800796c:	b2da      	uxtb	r2, r3
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[payload_len] = (uint8_t)(0xC0U | (*transfer_id & 31U));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	f003 031f 	and.w	r3, r3, #31
 800797a:	b2da      	uxtb	r2, r3
 800797c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800797e:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8007982:	b2d1      	uxtb	r1, r2
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	4413      	add	r3, r2
 8007988:	460a      	mov	r2, r1
 800798a:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	605a      	str	r2, [r3, #4]

        pushTxQueue(ins, queue_item);
 8007996:	6939      	ldr	r1, [r7, #16]
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 f88d 	bl	8007ab8 <pushTxQueue>
        result++;
 800799e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	3301      	adds	r3, #1
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	83fb      	strh	r3, [r7, #30]
 80079aa:	e077      	b.n	8007a9c <enqueueTxFrames+0x1c0>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	83bb      	strh	r3, [r7, #28]
        uint8_t toggle = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	76fb      	strb	r3, [r7, #27]
        uint8_t sot_eot = 0x80;
 80079b4:	2380      	movs	r3, #128	; 0x80
 80079b6:	76bb      	strb	r3, [r7, #26]

        CanardTxQueueItem* queue_item = NULL;
 80079b8:	2300      	movs	r3, #0
 80079ba:	617b      	str	r3, [r7, #20]

        while (payload_len - data_index != 0)
 80079bc:	e06a      	b.n	8007a94 <enqueueTxFrames+0x1b8>
        {
            queue_item = createTxItem(&ins->allocator);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	330c      	adds	r3, #12
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 f8da 	bl	8007b7c <createTxItem>
 80079c8:	6178      	str	r0, [r7, #20]
            if (queue_item == NULL)
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d102      	bne.n	80079d6 <enqueueTxFrames+0xfa>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so far
 80079d0:	f06f 0302 	mvn.w	r3, #2
 80079d4:	e064      	b.n	8007aa0 <enqueueTxFrames+0x1c4>
            }

            uint8_t i = 0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	767b      	strb	r3, [r7, #25]
            if (data_index == 0)
 80079da:	8bbb      	ldrh	r3, [r7, #28]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10c      	bne.n	80079fa <enqueueTxFrames+0x11e>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 80079e0:	887b      	ldrh	r3, [r7, #2]
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 80079e8:	887b      	ldrh	r3, [r7, #2]
 80079ea:	0a1b      	lsrs	r3, r3, #8
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	725a      	strb	r2, [r3, #9]
                i = 2;
 80079f4:	2302      	movs	r3, #2
 80079f6:	767b      	strb	r3, [r7, #25]
 80079f8:	e011      	b.n	8007a1e <enqueueTxFrames+0x142>
            }
            else
            {
                i = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	767b      	strb	r3, [r7, #25]
            }

            for (; i < (CANARD_CAN_FRAME_MAX_DATA_LEN - 1) && data_index < payload_len; i++, data_index++)
 80079fe:	e00e      	b.n	8007a1e <enqueueTxFrames+0x142>
            {
                queue_item->frame.data[i] = payload[data_index];
 8007a00:	8bbb      	ldrh	r3, [r7, #28]
 8007a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a04:	441a      	add	r2, r3
 8007a06:	7e7b      	ldrb	r3, [r7, #25]
 8007a08:	7811      	ldrb	r1, [r2, #0]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	460a      	mov	r2, r1
 8007a10:	721a      	strb	r2, [r3, #8]
            for (; i < (CANARD_CAN_FRAME_MAX_DATA_LEN - 1) && data_index < payload_len; i++, data_index++)
 8007a12:	7e7b      	ldrb	r3, [r7, #25]
 8007a14:	3301      	adds	r3, #1
 8007a16:	767b      	strb	r3, [r7, #25]
 8007a18:	8bbb      	ldrh	r3, [r7, #28]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	83bb      	strh	r3, [r7, #28]
 8007a1e:	7e7b      	ldrb	r3, [r7, #25]
 8007a20:	2b06      	cmp	r3, #6
 8007a22:	d803      	bhi.n	8007a2c <enqueueTxFrames+0x150>
 8007a24:	8bba      	ldrh	r2, [r7, #28]
 8007a26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d3e9      	bcc.n	8007a00 <enqueueTxFrames+0x124>
            }
            // tail byte
            sot_eot = (data_index == payload_len) ? (uint8_t)0x40 : sot_eot;
 8007a2c:	8bba      	ldrh	r2, [r7, #28]
 8007a2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d001      	beq.n	8007a38 <enqueueTxFrames+0x15c>
 8007a34:	7ebb      	ldrb	r3, [r7, #26]
 8007a36:	e000      	b.n	8007a3a <enqueueTxFrames+0x15e>
 8007a38:	2340      	movs	r3, #64	; 0x40
 8007a3a:	76bb      	strb	r3, [r7, #26]

            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer_id & 31U));
 8007a3c:	7efb      	ldrb	r3, [r7, #27]
 8007a3e:	015b      	lsls	r3, r3, #5
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	7ebb      	ldrb	r3, [r7, #26]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	b2d9      	uxtb	r1, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	f003 031f 	and.w	r3, r3, #31
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	7e7b      	ldrb	r3, [r7, #25]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	b2d1      	uxtb	r1, r2
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	460a      	mov	r2, r1
 8007a5e:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8007a6a:	7e7b      	ldrb	r3, [r7, #25]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	741a      	strb	r2, [r3, #16]
            pushTxQueue(ins, queue_item);
 8007a74:	6979      	ldr	r1, [r7, #20]
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 f81e 	bl	8007ab8 <pushTxQueue>

            result++;
 8007a7c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	3301      	adds	r3, #1
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	83fb      	strh	r3, [r7, #30]
            toggle ^= 1;
 8007a88:	7efb      	ldrb	r3, [r7, #27]
 8007a8a:	f083 0301 	eor.w	r3, r3, #1
 8007a8e:	76fb      	strb	r3, [r7, #27]
            sot_eot = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	76bb      	strb	r3, [r7, #26]
        while (payload_len - data_index != 0)
 8007a94:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007a96:	8bbb      	ldrh	r3, [r7, #28]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d190      	bne.n	80079be <enqueueTxFrames+0xe2>
        }
    }

    return result;
 8007a9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3720      	adds	r7, #32
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	08009e78 	.word	0x08009e78
 8007aac:	0800a37c 	.word	0x0800a37c
 8007ab0:	08009e60 	.word	0x08009e60
 8007ab4:	0800a000 	.word	0x0800a000

08007ab8 <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d106      	bne.n	8007ad6 <pushTxQueue+0x1e>
 8007ac8:	4b28      	ldr	r3, [pc, #160]	; (8007b6c <pushTxQueue+0xb4>)
 8007aca:	4a29      	ldr	r2, [pc, #164]	; (8007b70 <pushTxQueue+0xb8>)
 8007acc:	f240 31c5 	movw	r1, #965	; 0x3c5
 8007ad0:	4828      	ldr	r0, [pc, #160]	; (8007b74 <pushTxQueue+0xbc>)
 8007ad2:	f001 f98f 	bl	8008df4 <__assert_func>
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	7c1b      	ldrb	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <pushTxQueue+0x34>
 8007ade:	4b26      	ldr	r3, [pc, #152]	; (8007b78 <pushTxQueue+0xc0>)
 8007ae0:	4a23      	ldr	r2, [pc, #140]	; (8007b70 <pushTxQueue+0xb8>)
 8007ae2:	f240 31c6 	movw	r1, #966	; 0x3c6
 8007ae6:	4823      	ldr	r0, [pc, #140]	; (8007b74 <pushTxQueue+0xbc>)
 8007ae8:	f001 f984 	bl	8008df4 <__assert_func>

    if (ins->tx_queue == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d103      	bne.n	8007afc <pushTxQueue+0x44>
    {
        ins->tx_queue = item;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	61da      	str	r2, [r3, #28]
        return;
 8007afa:	e034      	b.n	8007b66 <pushTxQueue+0xae>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	69db      	ldr	r3, [r3, #28]
 8007b00:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 8007b08:	e02a      	b.n	8007b60 <pushTxQueue+0xa8>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	4619      	mov	r1, r3
 8007b14:	4610      	mov	r0, r2
 8007b16:	f000 f848 	bl	8007baa <isPriorityHigher>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d012      	beq.n	8007b46 <pushTxQueue+0x8e>
        {
            if (queue == ins->tx_queue)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d106      	bne.n	8007b38 <pushTxQueue+0x80>
            {
                item->next = queue;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	61da      	str	r2, [r3, #28]
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 8007b36:	e016      	b.n	8007b66 <pushTxQueue+0xae>
                previous->next = item;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	601a      	str	r2, [r3, #0]
                item->next = queue;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	601a      	str	r2, [r3, #0]
            return;
 8007b44:	e00f      	b.n	8007b66 <pushTxQueue+0xae>
        }
        else
        {
            if (queue->next == NULL)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d103      	bne.n	8007b56 <pushTxQueue+0x9e>
            {
                queue->next = item;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	601a      	str	r2, [r3, #0]
                return;
 8007b54:	e007      	b.n	8007b66 <pushTxQueue+0xae>
            }
            else
            {
                previous = queue;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1d1      	bne.n	8007b0a <pushTxQueue+0x52>
            }
        }
    }
}
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	08009e78 	.word	0x08009e78
 8007b70:	0800a38c 	.word	0x0800a38c
 8007b74:	08009e60 	.word	0x08009e60
 8007b78:	0800a024 	.word	0x0800a024

08007b7c <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fd94 	bl	80086b2 <allocateBlock>
 8007b8a:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <createTxItem+0x1a>
    {
        return NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	e005      	b.n	8007ba2 <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 8007b96:	2214      	movs	r2, #20
 8007b98:	2100      	movs	r1, #0
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f001 f98f 	bl	8008ebe <memset>
    return item;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <isPriorityHigher>:

/**
 * Returns true if priority of self is higher than other.
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t self, uint32_t other)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b089      	sub	sp, #36	; 0x24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
    const uint32_t self_clean_id = self & CANARD_CAN_EXT_ID_MASK;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007bba:	61fb      	str	r3, [r7, #28]
    const uint32_t other_clean_id = other & CANARD_CAN_EXT_ID_MASK;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007bc2:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool self_ext = (self & CANARD_CAN_FRAME_EFF) != 0;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	0fdb      	lsrs	r3, r3, #31
 8007bc8:	75fb      	strb	r3, [r7, #23]
    const bool other_ext = (other & CANARD_CAN_FRAME_EFF) != 0;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	0fdb      	lsrs	r3, r3, #31
 8007bce:	75bb      	strb	r3, [r7, #22]
    if (self_ext != other_ext)
 8007bd0:	7dfa      	ldrb	r2, [r7, #23]
 8007bd2:	7dbb      	ldrb	r3, [r7, #22]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d01d      	beq.n	8007c14 <isPriorityHigher+0x6a>
    {
        const uint32_t self_arb11 = self_ext ? (self_clean_id >> 18U) : self_clean_id;
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d002      	beq.n	8007be4 <isPriorityHigher+0x3a>
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	0c9b      	lsrs	r3, r3, #18
 8007be2:	e000      	b.n	8007be6 <isPriorityHigher+0x3c>
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	613b      	str	r3, [r7, #16]
        const uint32_t other_arb11 = other_ext ? (other_clean_id >> 18U) : other_clean_id;
 8007be8:	7dbb      	ldrb	r3, [r7, #22]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d002      	beq.n	8007bf4 <isPriorityHigher+0x4a>
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	0c9b      	lsrs	r3, r3, #18
 8007bf2:	e000      	b.n	8007bf6 <isPriorityHigher+0x4c>
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	60fb      	str	r3, [r7, #12]
        if (self_arb11 != other_arb11)
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d007      	beq.n	8007c10 <isPriorityHigher+0x66>
        {
            return self_arb11 < other_arb11;
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	bf34      	ite	cc
 8007c08:	2301      	movcc	r3, #1
 8007c0a:	2300      	movcs	r3, #0
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	e022      	b.n	8007c56 <isPriorityHigher+0xac>
        }
        else
        {
            return other_ext;
 8007c10:	7dbb      	ldrb	r3, [r7, #22]
 8007c12:	e020      	b.n	8007c56 <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool self_rtr = (self & CANARD_CAN_FRAME_RTR) != 0;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	bf14      	ite	ne
 8007c1e:	2301      	movne	r3, #1
 8007c20:	2300      	moveq	r3, #0
 8007c22:	757b      	strb	r3, [r7, #21]
    const bool other_rtr = (other & CANARD_CAN_FRAME_RTR) != 0;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bf14      	ite	ne
 8007c2e:	2301      	movne	r3, #1
 8007c30:	2300      	moveq	r3, #0
 8007c32:	753b      	strb	r3, [r7, #20]
    if (self_clean_id == other_clean_id && self_rtr != other_rtr)
 8007c34:	69fa      	ldr	r2, [r7, #28]
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d105      	bne.n	8007c48 <isPriorityHigher+0x9e>
 8007c3c:	7d7a      	ldrb	r2, [r7, #21]
 8007c3e:	7d3b      	ldrb	r3, [r7, #20]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d001      	beq.n	8007c48 <isPriorityHigher+0x9e>
    {
        return other_rtr;
 8007c44:	7d3b      	ldrb	r3, [r7, #20]
 8007c46:	e006      	b.n	8007c56 <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return self_clean_id < other_clean_id;
 8007c48:	69fa      	ldr	r2, [r7, #28]
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	bf34      	ite	cc
 8007c50:	2301      	movcc	r3, #1
 8007c52:	2300      	movcs	r3, #0
 8007c54:	b2db      	uxtb	r3, r3
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3724      	adds	r7, #36	; 0x24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	4770      	bx	lr

08007c60 <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == NULL);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d006      	beq.n	8007c7e <prepareForNextTransfer+0x1e>
 8007c70:	4b11      	ldr	r3, [pc, #68]	; (8007cb8 <prepareForNextTransfer+0x58>)
 8007c72:	4a12      	ldr	r2, [pc, #72]	; (8007cbc <prepareForNextTransfer+0x5c>)
 8007c74:	f240 412f 	movw	r1, #1071	; 0x42f
 8007c78:	4811      	ldr	r0, [pc, #68]	; (8007cc0 <prepareForNextTransfer+0x60>)
 8007c7a:	f001 f8bb 	bl	8008df4 <__assert_func>
    state->transfer_id++;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	7ddb      	ldrb	r3, [r3, #23]
 8007c82:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	3301      	adds	r3, #1
 8007c8a:	f003 031f 	and.w	r3, r3, #31
 8007c8e:	b2d9      	uxtb	r1, r3
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	7dd3      	ldrb	r3, [r2, #23]
 8007c94:	f361 0386 	bfi	r3, r1, #2, #5
 8007c98:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	8ad3      	ldrh	r3, [r2, #22]
 8007c9e:	f36f 0309 	bfc	r3, #0, #10
 8007ca2:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	7dd3      	ldrb	r3, [r2, #23]
 8007ca8:	f36f 13c7 	bfc	r3, #7, #1
 8007cac:	75d3      	strb	r3, [r2, #23]
}
 8007cae:	bf00      	nop
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	0800a040 	.word	0x0800a040
 8007cbc:	0800a398 	.word	0x0800a398
 8007cc0:	08009e60 	.word	0x08009e60

08007cc4 <extractDataType>:

/**
 * returns data type from id
 */
CANARD_INTERNAL uint16_t extractDataType(uint32_t id)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f81a 	bl	8007d06 <extractTransferType>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d10e      	bne.n	8007cf6 <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	0a1b      	lsrs	r3, r3, #8
 8007cdc:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d103      	bne.n	8007cf2 <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 8007cea:	89fb      	ldrh	r3, [r7, #14]
 8007cec:	f003 0303 	and.w	r3, r3, #3
 8007cf0:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 8007cf2:	89fb      	ldrh	r3, [r7, #14]
 8007cf4:	e003      	b.n	8007cfe <extractDataType+0x3a>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	0c1b      	lsrs	r3, r3, #16
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	b29b      	uxth	r3, r3
    }
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <extractTransferType>:

/**
 * returns transfer type from id
 */
CANARD_INTERNAL CanardTransferType extractTransferType(uint32_t id)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b085      	sub	sp, #20
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	09db      	lsrs	r3, r3, #7
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	bf14      	ite	ne
 8007d1a:	2301      	movne	r3, #1
 8007d1c:	2300      	moveq	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	f083 0301 	eor.w	r3, r3, #1
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <extractTransferType+0x2a>
    {
        return CanardTransferTypeBroadcast;
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	e009      	b.n	8007d44 <extractTransferType+0x3e>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	0bdb      	lsrs	r3, r3, #15
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <extractTransferType+0x3c>
    {
        return CanardTransferTypeRequest;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e000      	b.n	8007d44 <extractTransferType+0x3e>
    }
    else
    {
        return CanardTransferTypeResponse;
 8007d42:	2300      	movs	r3, #0
    }
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bc80      	pop	{r7}
 8007d4c:	4770      	bx	lr

08007d4e <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d110      	bne.n	8007d86 <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	330c      	adds	r3, #12
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 f854 	bl	8007e18 <createRxState>
 8007d70:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <traverseRxStates+0x2e>
        {
            return NULL;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	e013      	b.n	8007da4 <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	619a      	str	r2, [r3, #24]
        return states;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	e00e      	b.n	8007da4 <traverseRxStates+0x56>
    }

    states = findRxState(states, transfer_descriptor);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 f80f 	bl	8007dac <findRxState>
 8007d8e:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <traverseRxStates+0x4c>
    {
        return states;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	e004      	b.n	8007da4 <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f81e 	bl	8007dde <prependRxState>
 8007da2:	4603      	mov	r3, r0
    }
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardRxState* state, uint32_t transfer_descriptor)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
    while (state != NULL)
 8007db6:	e009      	b.n	8007dcc <findRxState+0x20>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d101      	bne.n	8007dc6 <findRxState+0x1a>
        {
            return state;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	e006      	b.n	8007dd4 <findRxState+0x28>
        }
        state = state->next;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	607b      	str	r3, [r7, #4]
    while (state != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1f2      	bne.n	8007db8 <findRxState+0xc>
    }
    return NULL;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bc80      	pop	{r7}
 8007ddc:	4770      	bx	lr

08007dde <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	330c      	adds	r3, #12
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 f812 	bl	8007e18 <createRxState>
 8007df4:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <prependRxState+0x22>
    {
        return NULL;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	e007      	b.n	8007e10 <prependRxState+0x32>
    }

    state->next = ins->rx_states;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699a      	ldr	r2, [r3, #24]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	619a      	str	r2, [r3, #24]
    return state;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08c      	sub	sp, #48	; 0x30
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 8007e22:	f107 0308 	add.w	r3, r7, #8
 8007e26:	2220      	movs	r2, #32
 8007e28:	2100      	movs	r1, #0
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f001 f847 	bl	8008ebe <memset>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	61bb      	str	r3, [r7, #24]
        .next = NULL,
        .buffer_blocks = NULL,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fc3c 	bl	80086b2 <allocateBlock>
 8007e3a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (state == NULL)
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <createRxState+0x2e>
    {
        return NULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	e007      	b.n	8007e56 <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 8007e46:	f107 0308 	add.w	r3, r7, #8
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e50:	f001 f82a 	bl	8008ea8 <memcpy>

    return state;
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3730      	adds	r7, #48	; 0x30
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 8007e5e:	b590      	push	{r4, r7, lr}
 8007e60:	b085      	sub	sp, #20
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != NULL)
 8007e68:	e00f      	b.n	8007e8a <releaseStatePayload+0x2c>
    {
        CanardBufferBlock* const temp = rxstate->buffer_blocks->next;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, rxstate->buffer_blocks);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f103 020c 	add.w	r2, r3, #12
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4610      	mov	r0, r2
 8007e80:	f000 fc40 	bl	8008704 <freeBlock>
        rxstate->buffer_blocks = temp;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != NULL)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1eb      	bne.n	8007e6a <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	8ad3      	ldrh	r3, [r2, #22]
 8007e96:	f36f 0309 	bfc	r3, #0, #10
 8007e9a:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 8007e9c:	f04f 0300 	mov.w	r3, #0
 8007ea0:	f04f 0400 	mov.w	r4, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd90      	pop	{r4, r7, pc}
	...

08007eb0 <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08a      	sub	sp, #40	; 0x28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	84fb      	strh	r3, [r7, #38]	; 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	8adb      	ldrh	r3, [r3, #22]
 8007ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	2b06      	cmp	r3, #6
 8007ece:	d036      	beq.n	8007f3e <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	8adb      	ldrh	r3, [r3, #22]
 8007ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007edc:	e00e      	b.n	8007efc <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 8007ede:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	441a      	add	r2, r3
 8007ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ee6:	7811      	ldrb	r1, [r2, #0]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	4413      	add	r3, r2
 8007eec:	460a      	mov	r2, r1
 8007eee:	769a      	strb	r2, [r3, #26]
             i++, data_index++)
 8007ef0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007ef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ef8:	3301      	adds	r3, #1
 8007efa:	84fb      	strh	r3, [r7, #38]	; 0x26
        for (uint16_t i = (uint16_t)state->payload_len;
 8007efc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007efe:	2b05      	cmp	r3, #5
 8007f00:	d804      	bhi.n	8007f0c <bufferBlockPushBytes+0x5c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 8007f02:	78fb      	ldrb	r3, [r7, #3]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d3e8      	bcc.n	8007ede <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d313      	bcc.n	8007f3e <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	8adb      	ldrh	r3, [r3, #22]
 8007f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	78fb      	ldrb	r3, [r7, #3]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	4413      	add	r3, r2
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f2e:	b299      	uxth	r1, r3
            state->payload_len =
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	8ad3      	ldrh	r3, [r2, #22]
 8007f34:	f361 0309 	bfi	r3, r1, #0, #10
 8007f38:	82d3      	strh	r3, [r2, #22]
            return 1;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e0a9      	b.n	8008092 <bufferBlockPushBytes+0x1e2>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	8adb      	ldrh	r3, [r3, #22]
 8007f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	1f9a      	subs	r2, r3, #6
 8007f4a:	0893      	lsrs	r3, r2, #2
 8007f4c:	4953      	ldr	r1, [pc, #332]	; (800809c <bufferBlockPushBytes+0x1ec>)
 8007f4e:	fba1 3103 	umull	r3, r1, r1, r3
 8007f52:	460b      	mov	r3, r1
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	1a5b      	subs	r3, r3, r1
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 8007f5c:	847b      	strh	r3, [r7, #34]	; 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == NULL)
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d112      	bne.n	8007f90 <bufferBlockPushBytes+0xe0>
    {
        state->buffer_blocks = createBufferBlock(allocator);
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 f898 	bl	80080a0 <createBufferBlock>
 8007f70:	4602      	mov	r2, r0
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	605a      	str	r2, [r3, #4]

        if (state->buffer_blocks == NULL)
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d102      	bne.n	8007f84 <bufferBlockPushBytes+0xd4>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8007f7e:	f06f 0302 	mvn.w	r3, #2
 8007f82:	e086      	b.n	8008092 <bufferBlockPushBytes+0x1e2>
        }

        block = state->buffer_blocks;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	61fb      	str	r3, [r7, #28]
        index_at_nth_block = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	847b      	strh	r3, [r7, #34]	; 0x22
 8007f8e:	e068      	b.n	8008062 <bufferBlockPushBytes+0x1b2>
    }
    else
    {
        uint16_t nth_block = 1;
 8007f90:	2301      	movs	r3, #1
 8007f92:	837b      	strh	r3, [r7, #26]

        // get to block
        block = state->buffer_blocks;
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 8007f9a:	e005      	b.n	8007fa8 <bufferBlockPushBytes+0xf8>
        {
            nth_block++;
 8007f9c:	8b7b      	ldrh	r3, [r7, #26]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	837b      	strh	r3, [r7, #26]
            block = block->next;
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1f5      	bne.n	8007f9c <bufferBlockPushBytes+0xec>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	8adb      	ldrh	r3, [r3, #22]
 8007fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	461a      	mov	r2, r3
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3b06      	subs	r3, #6
 8007fc2:	089b      	lsrs	r3, r3, #2
 8007fc4:	4a35      	ldr	r2, [pc, #212]	; (800809c <bufferBlockPushBytes+0x1ec>)
 8007fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fca:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 8007fcc:	3301      	adds	r3, #1
 8007fce:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 8007fd0:	8afa      	ldrh	r2, [r7, #22]
 8007fd2:	8b7b      	ldrh	r3, [r7, #26]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d944      	bls.n	8008062 <bufferBlockPushBytes+0x1b2>
 8007fd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d141      	bne.n	8008062 <bufferBlockPushBytes+0x1b2>
        {
            block->next = createBufferBlock(allocator);
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 f85e 	bl	80080a0 <createBufferBlock>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d102      	bne.n	8007ff8 <bufferBlockPushBytes+0x148>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8007ff2:	f06f 0302 	mvn.w	r3, #2
 8007ff6:	e04c      	b.n	8008092 <bufferBlockPushBytes+0x1e2>
            }
            block = block->next;
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 8007ffe:	e030      	b.n	8008062 <bufferBlockPushBytes+0x1b2>
    {
        for (uint16_t i = index_at_nth_block;
 8008000:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008002:	833b      	strh	r3, [r7, #24]
 8008004:	e00e      	b.n	8008024 <bufferBlockPushBytes+0x174>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 8008006:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	441a      	add	r2, r3
 800800c:	8b3b      	ldrh	r3, [r7, #24]
 800800e:	7811      	ldrb	r1, [r2, #0]
 8008010:	69fa      	ldr	r2, [r7, #28]
 8008012:	4413      	add	r3, r2
 8008014:	460a      	mov	r2, r1
 8008016:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 8008018:	8b3b      	ldrh	r3, [r7, #24]
 800801a:	3301      	adds	r3, #1
 800801c:	833b      	strh	r3, [r7, #24]
 800801e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008020:	3301      	adds	r3, #1
 8008022:	84fb      	strh	r3, [r7, #38]	; 0x26
        for (uint16_t i = index_at_nth_block;
 8008024:	8b3b      	ldrh	r3, [r7, #24]
 8008026:	2b1b      	cmp	r3, #27
 8008028:	d804      	bhi.n	8008034 <bufferBlockPushBytes+0x184>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 800802a:	78fb      	ldrb	r3, [r7, #3]
 800802c:	b29b      	uxth	r3, r3
 800802e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008030:	429a      	cmp	r2, r3
 8008032:	d3e8      	bcc.n	8008006 <bufferBlockPushBytes+0x156>
        }

        if (data_index < data_len)
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	b29b      	uxth	r3, r3
 8008038:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800803a:	429a      	cmp	r2, r3
 800803c:	d211      	bcs.n	8008062 <bufferBlockPushBytes+0x1b2>
        {
            block->next = createBufferBlock(allocator);
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 f82e 	bl	80080a0 <createBufferBlock>
 8008044:	4602      	mov	r2, r0
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d102      	bne.n	8008058 <bufferBlockPushBytes+0x1a8>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8008052:	f06f 0302 	mvn.w	r3, #2
 8008056:	e01c      	b.n	8008092 <bufferBlockPushBytes+0x1e2>
            }
            block = block->next;
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	847b      	strh	r3, [r7, #34]	; 0x22
    while (data_index < data_len)
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	b29b      	uxth	r3, r3
 8008066:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008068:	429a      	cmp	r2, r3
 800806a:	d3c9      	bcc.n	8008000 <bufferBlockPushBytes+0x150>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	8adb      	ldrh	r3, [r3, #22]
 8008070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008074:	b29b      	uxth	r3, r3
 8008076:	461a      	mov	r2, r3
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	b29b      	uxth	r3, r3
 800807c:	4413      	add	r3, r2
 800807e:	b29b      	uxth	r3, r3
 8008080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008084:	b299      	uxth	r1, r3
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	8ad3      	ldrh	r3, [r2, #22]
 800808a:	f361 0309 	bfi	r3, r1, #0, #10
 800808e:	82d3      	strh	r3, [r2, #22]

    return 1;
 8008090:	2301      	movs	r3, #1
}
 8008092:	4618      	mov	r0, r3
 8008094:	3728      	adds	r7, #40	; 0x28
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	24924925 	.word	0x24924925

080080a0 <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fb02 	bl	80086b2 <allocateBlock>
 80080ae:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <createBufferBlock+0x1a>
    {
        return NULL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e003      	b.n	80080c2 <createBufferBlock+0x22>
    }
    block->next = NULL;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
    return block;
 80080c0:	68fb      	ldr	r3, [r7, #12]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b088      	sub	sp, #32
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <copyBitArray+0x22>
 80080e0:	4b39      	ldr	r3, [pc, #228]	; (80081c8 <copyBitArray+0xfc>)
 80080e2:	4a3a      	ldr	r2, [pc, #232]	; (80081cc <copyBitArray+0x100>)
 80080e4:	f240 5139 	movw	r1, #1337	; 0x539
 80080e8:	4839      	ldr	r0, [pc, #228]	; (80081d0 <copyBitArray+0x104>)
 80080ea:	f000 fe83 	bl	8008df4 <__assert_func>

    // Normalizing inputs
    src += src_offset / 8U;
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	08db      	lsrs	r3, r3, #3
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	4413      	add	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	08db      	lsrs	r3, r3, #3
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	4413      	add	r3, r2
 8008100:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f003 0307 	and.w	r3, r3, #7
 8008108:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	62bb      	str	r3, [r7, #40]	; 0x28

    const size_t last_bit = src_offset + src_len;
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4413      	add	r3, r2
 8008118:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 800811a:	e04d      	b.n	80081b8 <copyBitArray+0xec>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	f003 0307 	and.w	r3, r3, #7
 8008124:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	b2db      	uxtb	r3, r3
 800812a:	f003 0307 	and.w	r3, r3, #7
 800812e:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8008130:	7eba      	ldrb	r2, [r7, #26]
 8008132:	7efb      	ldrb	r3, [r7, #27]
 8008134:	4293      	cmp	r3, r2
 8008136:	bf38      	it	cc
 8008138:	4613      	movcc	r3, r2
 800813a:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = MIN(last_bit - src_offset, 8U - max_offset);
 800813c:	7e7b      	ldrb	r3, [r7, #25]
 800813e:	f1c3 0208 	rsb	r2, r3, #8
 8008142:	69f9      	ldr	r1, [r7, #28]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	1acb      	subs	r3, r1, r3
 8008148:	4293      	cmp	r3, r2
 800814a:	bf28      	it	cs
 800814c:	4613      	movcs	r3, r2
 800814e:	617b      	str	r3, [r7, #20]

        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8008150:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	fa22 f303 	lsr.w	r3, r2, r3
 800815a:	b2db      	uxtb	r3, r3
 800815c:	461a      	mov	r2, r3
 800815e:	7ebb      	ldrb	r3, [r7, #26]
 8008160:	fa42 f303 	asr.w	r3, r2, r3
 8008164:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	08db      	lsrs	r3, r3, #3
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4413      	add	r3, r2
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	7efb      	ldrb	r3, [r7, #27]
 8008174:	409a      	lsls	r2, r3
 8008176:	7ebb      	ldrb	r3, [r7, #26]
 8008178:	fa22 f303 	lsr.w	r3, r2, r3
 800817c:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	08db      	lsrs	r3, r3, #3
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	4413      	add	r3, r2
 8008186:	781a      	ldrb	r2, [r3, #0]
 8008188:	7cfb      	ldrb	r3, [r7, #19]
 800818a:	43db      	mvns	r3, r3
 800818c:	b2db      	uxtb	r3, r3
 800818e:	4013      	ands	r3, r2
 8008190:	b2d9      	uxtb	r1, r3
 8008192:	7cba      	ldrb	r2, [r7, #18]
 8008194:	7cfb      	ldrb	r3, [r7, #19]
 8008196:	4013      	ands	r3, r2
 8008198:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 800819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819c:	08db      	lsrs	r3, r3, #3
 800819e:	6838      	ldr	r0, [r7, #0]
 80081a0:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 80081a2:	430a      	orrs	r2, r1
 80081a4:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 80081a6:	701a      	strb	r2, [r3, #0]

        src_offset += copy_bits;
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	4413      	add	r3, r2
 80081ae:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 80081b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	4413      	add	r3, r2
 80081b6:	62bb      	str	r3, [r7, #40]	; 0x28
    while (last_bit - src_offset)
 80081b8:	69fa      	ldr	r2, [r7, #28]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d1ad      	bne.n	800811c <copyBitArray+0x50>
    }
}
 80081c0:	bf00      	nop
 80081c2:	3720      	adds	r7, #32
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	0800a064 	.word	0x0800a064
 80081cc:	0800a3b0 	.word	0x0800a3b0
 80081d0:	08009e60 	.word	0x08009e60

080081d4 <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b090      	sub	sp, #64	; 0x40
 80081d8:	af02      	add	r7, sp, #8
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	603b      	str	r3, [r7, #0]
 80081e0:	4613      	mov	r3, r2
 80081e2:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d106      	bne.n	80081f8 <descatterTransferPayload+0x24>
 80081ea:	4bac      	ldr	r3, [pc, #688]	; (800849c <descatterTransferPayload+0x2c8>)
 80081ec:	4aac      	ldr	r2, [pc, #688]	; (80084a0 <descatterTransferPayload+0x2cc>)
 80081ee:	f240 515b 	movw	r1, #1371	; 0x55b
 80081f2:	48ac      	ldr	r0, [pc, #688]	; (80084a4 <descatterTransferPayload+0x2d0>)
 80081f4:	f000 fdfe 	bl	8008df4 <__assert_func>

    if (bit_offset >= transfer->payload_len * 8)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	8a9b      	ldrh	r3, [r3, #20]
 80081fc:	00db      	lsls	r3, r3, #3
 80081fe:	461a      	mov	r2, r3
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	4293      	cmp	r3, r2
 8008204:	d301      	bcc.n	800820a <descatterTransferPayload+0x36>
    {
        return 0;       // Out of range, reading zero bits
 8008206:	2300      	movs	r3, #0
 8008208:	e143      	b.n	8008492 <descatterTransferPayload+0x2be>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 800820a:	79fa      	ldrb	r2, [r7, #7]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	4413      	add	r3, r2
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	8a92      	ldrh	r2, [r2, #20]
 8008214:	00d2      	lsls	r2, r2, #3
 8008216:	4293      	cmp	r3, r2
 8008218:	d908      	bls.n	800822c <descatterTransferPayload+0x58>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	8a9b      	ldrh	r3, [r3, #20]
 800821e:	b2db      	uxtb	r3, r3
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	b2da      	uxtb	r2, r3
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <descatterTransferPayload+0x6c>
 8008232:	4b9d      	ldr	r3, [pc, #628]	; (80084a8 <descatterTransferPayload+0x2d4>)
 8008234:	4a9a      	ldr	r2, [pc, #616]	; (80084a0 <descatterTransferPayload+0x2cc>)
 8008236:	f240 5167 	movw	r1, #1383	; 0x567
 800823a:	489a      	ldr	r0, [pc, #616]	; (80084a4 <descatterTransferPayload+0x2d0>)
 800823c:	f000 fdda 	bl	8008df4 <__assert_func>

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d104      	bne.n	8008252 <descatterTransferPayload+0x7e>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 8113 	beq.w	8008478 <descatterTransferPayload+0x2a4>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t output_bit_offset = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        uint8_t remaining_bit_length = bit_length;
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 8008262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008264:	2b2f      	cmp	r3, #47	; 0x2f
 8008266:	d82d      	bhi.n	80082c4 <descatterTransferPayload+0xf0>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 8008268:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800826c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826e:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 8008272:	429a      	cmp	r2, r3
 8008274:	d305      	bcc.n	8008282 <descatterTransferPayload+0xae>
 8008276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008278:	b2db      	uxtb	r3, r3
 800827a:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 800827e:	b2db      	uxtb	r3, r3
 8008280:	e001      	b.n	8008286 <descatterTransferPayload+0xb2>
 8008282:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6898      	ldr	r0, [r3, #8]
 800828e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008292:	2300      	movs	r3, #0
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800829a:	f7ff ff17 	bl	80080cc <copyBitArray>

            input_bit_offset += amount;
 800829e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082a4:	4413      	add	r3, r2
 80082a6:	637b      	str	r3, [r7, #52]	; 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 80082a8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80082ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082b0:	4413      	add	r3, r2
 80082b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80082b6:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80082ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }

        // Reading middle
        uint32_t remaining_bits = transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	8a9b      	ldrh	r3, [r3, #20]
 80082c8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80082cc:	3b06      	subs	r3, #6
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 80082d2:	2330      	movs	r3, #48	; 0x30
 80082d4:	62bb      	str	r3, [r7, #40]	; 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	627b      	str	r3, [r7, #36]	; 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 80082dc:	e064      	b.n	80083a8 <descatterTransferPayload+0x1d4>
        {
            CANARD_ASSERT(remaining_bits > 0);
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d106      	bne.n	80082f2 <descatterTransferPayload+0x11e>
 80082e4:	4b71      	ldr	r3, [pc, #452]	; (80084ac <descatterTransferPayload+0x2d8>)
 80082e6:	4a6e      	ldr	r2, [pc, #440]	; (80084a0 <descatterTransferPayload+0x2cc>)
 80082e8:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 80082ec:	486d      	ldr	r0, [pc, #436]	; (80084a4 <descatterTransferPayload+0x2d0>)
 80082ee:	f000 fd81 	bl	8008df4 <__assert_func>
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	2be0      	cmp	r3, #224	; 0xe0
 80082f6:	bf28      	it	cs
 80082f8:	23e0      	movcs	r3, #224	; 0xe0
 80082fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082fc:	4413      	add	r3, r2
 80082fe:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 8008300:	69fa      	ldr	r2, [r7, #28]
 8008302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008304:	429a      	cmp	r2, r3
 8008306:	d939      	bls.n	800837c <descatterTransferPayload+0x1a8>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8008308:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800830c:	69f9      	ldr	r1, [r7, #28]
 800830e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008310:	1acb      	subs	r3, r1, r3
 8008312:	429a      	cmp	r2, r3
 8008314:	d306      	bcc.n	8008324 <descatterTransferPayload+0x150>
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	b2da      	uxtb	r2, r3
 800831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831c:	b2db      	uxtb	r3, r3
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	b2db      	uxtb	r3, r3
 8008322:	e001      	b.n	8008328 <descatterTransferPayload+0x154>
 8008324:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008328:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
 800832a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	429a      	cmp	r2, r3
 8008330:	d206      	bcs.n	8008340 <descatterTransferPayload+0x16c>
 8008332:	4b5f      	ldr	r3, [pc, #380]	; (80084b0 <descatterTransferPayload+0x2dc>)
 8008334:	4a5a      	ldr	r2, [pc, #360]	; (80084a0 <descatterTransferPayload+0x2cc>)
 8008336:	f240 5191 	movw	r1, #1425	; 0x591
 800833a:	485a      	ldr	r0, [pc, #360]	; (80084a4 <descatterTransferPayload+0x2d0>)
 800833c:	f000 fd5a 	bl	8008df4 <__assert_func>
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8008340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	1d18      	adds	r0, r3, #4
 800834c:	7efa      	ldrb	r2, [r7, #27]
 800834e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	6979      	ldr	r1, [r7, #20]
 8008358:	f7ff feb8 	bl	80080cc <copyBitArray>

                input_bit_offset += amount;
 800835c:	7efb      	ldrb	r3, [r7, #27]
 800835e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008360:	4413      	add	r3, r2
 8008362:	637b      	str	r3, [r7, #52]	; 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8008364:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008368:	7efb      	ldrb	r3, [r7, #27]
 800836a:	4413      	add	r3, r2
 800836c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8008370:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8008374:	7efb      	ldrb	r3, [r7, #27]
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
 800837c:	69fa      	ldr	r2, [r7, #28]
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	429a      	cmp	r2, r3
 8008382:	d806      	bhi.n	8008392 <descatterTransferPayload+0x1be>
 8008384:	4b4b      	ldr	r3, [pc, #300]	; (80084b4 <descatterTransferPayload+0x2e0>)
 8008386:	4a46      	ldr	r2, [pc, #280]	; (80084a0 <descatterTransferPayload+0x2cc>)
 8008388:	f240 519b 	movw	r1, #1435	; 0x59b
 800838c:	4845      	ldr	r0, [pc, #276]	; (80084a4 <descatterTransferPayload+0x2d0>)
 800838e:	f000 fd31 	bl	8008df4 <__assert_func>
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8008392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800839a:	4413      	add	r3, r2
 800839c:	62fb      	str	r3, [r7, #44]	; 0x2c
            block_bit_offset = block_end_bit_offset;
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	62bb      	str	r3, [r7, #40]	; 0x28
            block = block->next;
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	627b      	str	r3, [r7, #36]	; 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <descatterTransferPayload+0x1e2>
 80083ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d193      	bne.n	80082de <descatterTransferPayload+0x10a>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);
 80083b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80083ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083bc:	429a      	cmp	r2, r3
 80083be:	d206      	bcs.n	80083ce <descatterTransferPayload+0x1fa>
 80083c0:	4b3d      	ldr	r3, [pc, #244]	; (80084b8 <descatterTransferPayload+0x2e4>)
 80083c2:	4a37      	ldr	r2, [pc, #220]	; (80084a0 <descatterTransferPayload+0x2cc>)
 80083c4:	f240 51a1 	movw	r1, #1441	; 0x5a1
 80083c8:	4836      	ldr	r0, [pc, #216]	; (80084a4 <descatterTransferPayload+0x2d0>)
 80083ca:	f000 fd13 	bl	8008df4 <__assert_func>

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d02c      	beq.n	8008430 <descatterTransferPayload+0x25c>
 80083d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d028      	beq.n	8008430 <descatterTransferPayload+0x25c>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
 80083de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d206      	bcs.n	80083f4 <descatterTransferPayload+0x220>
 80083e6:	4b32      	ldr	r3, [pc, #200]	; (80084b0 <descatterTransferPayload+0x2dc>)
 80083e8:	4a2d      	ldr	r2, [pc, #180]	; (80084a0 <descatterTransferPayload+0x2cc>)
 80083ea:	f240 51a6 	movw	r1, #1446	; 0x5a6
 80083ee:	482d      	ldr	r0, [pc, #180]	; (80084a4 <descatterTransferPayload+0x2d0>)
 80083f0:	f000 fd00 	bl	8008df4 <__assert_func>
            const uint32_t offset = input_bit_offset - block_bit_offset;
 80083f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6918      	ldr	r0, [r3, #16]
 8008400:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8008404:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	6939      	ldr	r1, [r7, #16]
 800840e:	f7ff fe5d 	bl	80080cc <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 8008412:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008418:	4413      	add	r3, r2
 800841a:	637b      	str	r3, [r7, #52]	; 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 800841c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008420:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008424:	4413      	add	r3, r2
 8008426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            remaining_bit_length = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }

        CANARD_ASSERT(input_bit_offset <= transfer->payload_len * 8);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8a9b      	ldrh	r3, [r3, #20]
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	461a      	mov	r2, r3
 8008438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843a:	4293      	cmp	r3, r2
 800843c:	d906      	bls.n	800844c <descatterTransferPayload+0x278>
 800843e:	4b1f      	ldr	r3, [pc, #124]	; (80084bc <descatterTransferPayload+0x2e8>)
 8008440:	4a17      	ldr	r2, [pc, #92]	; (80084a0 <descatterTransferPayload+0x2cc>)
 8008442:	f240 51b1 	movw	r1, #1457	; 0x5b1
 8008446:	4817      	ldr	r0, [pc, #92]	; (80084a4 <descatterTransferPayload+0x2d0>)
 8008448:	f000 fcd4 	bl	8008df4 <__assert_func>
        CANARD_ASSERT(output_bit_offset <= 64);
 800844c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008450:	2b40      	cmp	r3, #64	; 0x40
 8008452:	d906      	bls.n	8008462 <descatterTransferPayload+0x28e>
 8008454:	4b1a      	ldr	r3, [pc, #104]	; (80084c0 <descatterTransferPayload+0x2ec>)
 8008456:	4a12      	ldr	r2, [pc, #72]	; (80084a0 <descatterTransferPayload+0x2cc>)
 8008458:	f240 51b2 	movw	r1, #1458	; 0x5b2
 800845c:	4811      	ldr	r0, [pc, #68]	; (80084a4 <descatterTransferPayload+0x2d0>)
 800845e:	f000 fcc9 	bl	8008df4 <__assert_func>
        CANARD_ASSERT(remaining_bit_length == 0);
 8008462:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008466:	2b00      	cmp	r3, #0
 8008468:	d010      	beq.n	800848c <descatterTransferPayload+0x2b8>
 800846a:	4b16      	ldr	r3, [pc, #88]	; (80084c4 <descatterTransferPayload+0x2f0>)
 800846c:	4a0c      	ldr	r2, [pc, #48]	; (80084a0 <descatterTransferPayload+0x2cc>)
 800846e:	f240 51b3 	movw	r1, #1459	; 0x5b3
 8008472:	480c      	ldr	r0, [pc, #48]	; (80084a4 <descatterTransferPayload+0x2d0>)
 8008474:	f000 fcbe 	bl	8008df4 <__assert_func>
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6898      	ldr	r0, [r3, #8]
 800847c:	79fa      	ldrb	r2, [r7, #7]
 800847e:	2300      	movs	r3, #0
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68b9      	ldr	r1, [r7, #8]
 8008486:	f7ff fe21 	bl	80080cc <copyBitArray>
 800848a:	e000      	b.n	800848e <descatterTransferPayload+0x2ba>
    {
 800848c:	bf00      	nop
    }

    return bit_length;
 800848e:	79fb      	ldrb	r3, [r7, #7]
 8008490:	b21b      	sxth	r3, r3
}
 8008492:	4618      	mov	r0, r3
 8008494:	3738      	adds	r7, #56	; 0x38
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	0800a074 	.word	0x0800a074
 80084a0:	0800a3c0 	.word	0x0800a3c0
 80084a4:	08009e60 	.word	0x08009e60
 80084a8:	0800a084 	.word	0x0800a084
 80084ac:	0800a094 	.word	0x0800a094
 80084b0:	0800a0a8 	.word	0x0800a0a8
 80084b4:	0800a0d0 	.word	0x0800a0d0
 80084b8:	0800a0f8 	.word	0x0800a0f8
 80084bc:	0800a120 	.word	0x0800a120
 80084c0:	0800a150 	.word	0x0800a150
 80084c4:	0800a168 	.word	0x0800a168

080084c8 <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
    union
    {
        uint16_t a;
        uint8_t b[2];
    } u;
    u.a = 1;
 80084ce:	2301      	movs	r3, #1
 80084d0:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 80084d2:	797b      	ldrb	r3, [r7, #5]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	bf0c      	ite	eq
 80084d8:	2301      	moveq	r3, #1
 80084da:	2300      	movne	r3, #0
 80084dc:	b2db      	uxtb	r3, r3
#endif
}
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bc80      	pop	{r7}
 80084e6:	4770      	bx	lr

080084e8 <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, size_t size)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d106      	bne.n	8008506 <swapByteOrder+0x1e>
 80084f8:	4b17      	ldr	r3, [pc, #92]	; (8008558 <swapByteOrder+0x70>)
 80084fa:	4a18      	ldr	r2, [pc, #96]	; (800855c <swapByteOrder+0x74>)
 80084fc:	f240 51ce 	movw	r1, #1486	; 0x5ce
 8008500:	4817      	ldr	r0, [pc, #92]	; (8008560 <swapByteOrder+0x78>)
 8008502:	f000 fc77 	bl	8008df4 <__assert_func>

    uint8_t* const bytes = (uint8_t*) data;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 800850a:	2300      	movs	r3, #0
 800850c:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	3b01      	subs	r3, #1
 8008512:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 8008514:	e017      	b.n	8008546 <swapByteOrder+0x5e>
    {
        const uint8_t x = bytes[fwd];
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	4413      	add	r3, r2
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	441a      	add	r2, r3
 8008526:	68f9      	ldr	r1, [r7, #12]
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	440b      	add	r3, r1
 800852c:	7812      	ldrb	r2, [r2, #0]
 800852e:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	4413      	add	r3, r2
 8008536:	7afa      	ldrb	r2, [r7, #11]
 8008538:	701a      	strb	r2, [r3, #0]
        fwd++;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	3301      	adds	r3, #1
 800853e:	617b      	str	r3, [r7, #20]
        rev--;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	3b01      	subs	r3, #1
 8008544:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	429a      	cmp	r2, r3
 800854c:	d3e3      	bcc.n	8008516 <swapByteOrder+0x2e>
    }
}
 800854e:	bf00      	nop
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	0800a184 	.word	0x0800a184
 800855c:	0800a3dc 	.word	0x0800a3dc
 8008560:	08009e60 	.word	0x08009e60

08008564 <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	460a      	mov	r2, r1
 800856e:	80fb      	strh	r3, [r7, #6]
 8008570:	4613      	mov	r3, r2
 8008572:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 8008574:	797b      	ldrb	r3, [r7, #5]
 8008576:	b29b      	uxth	r3, r3
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	b29a      	uxth	r2, r3
 800857c:	88fb      	ldrh	r3, [r7, #6]
 800857e:	4053      	eors	r3, r2
 8008580:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8008582:	2300      	movs	r3, #0
 8008584:	73fb      	strb	r3, [r7, #15]
 8008586:	e012      	b.n	80085ae <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 8008588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800858c:	2b00      	cmp	r3, #0
 800858e:	da08      	bge.n	80085a2 <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8008590:	88fb      	ldrh	r3, [r7, #6]
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	b29b      	uxth	r3, r3
 8008596:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800859a:	f083 0301 	eor.w	r3, r3, #1
 800859e:	80fb      	strh	r3, [r7, #6]
 80085a0:	e002      	b.n	80085a8 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 80085a2:	88fb      	ldrh	r3, [r7, #6]
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	3301      	adds	r3, #1
 80085ac:	73fb      	strb	r3, [r7, #15]
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
 80085b0:	2b07      	cmp	r3, #7
 80085b2:	d9e9      	bls.n	8008588 <crcAddByte+0x24>
        }
    }
    return crc_val;
 80085b4:	88fb      	ldrh	r3, [r7, #6]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bc80      	pop	{r7}
 80085be:	4770      	bx	lr

080085c0 <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 80085c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4601      	mov	r1, r0
 80085c8:	e9c7 2300 	strd	r2, r3, [r7]
 80085cc:	460b      	mov	r3, r1
 80085ce:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80085d0:	2300      	movs	r3, #0
 80085d2:	82fb      	strh	r3, [r7, #22]
 80085d4:	e01b      	b.n	800860e <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 80085d6:	8af9      	ldrh	r1, [r7, #22]
 80085d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085dc:	f1c1 0620 	rsb	r6, r1, #32
 80085e0:	f1a1 0020 	sub.w	r0, r1, #32
 80085e4:	fa22 f401 	lsr.w	r4, r2, r1
 80085e8:	fa03 f606 	lsl.w	r6, r3, r6
 80085ec:	4334      	orrs	r4, r6
 80085ee:	fa23 f000 	lsr.w	r0, r3, r0
 80085f2:	4304      	orrs	r4, r0
 80085f4:	fa23 f501 	lsr.w	r5, r3, r1
 80085f8:	b2e2      	uxtb	r2, r4
 80085fa:	89fb      	ldrh	r3, [r7, #14]
 80085fc:	4611      	mov	r1, r2
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff ffb0 	bl	8008564 <crcAddByte>
 8008604:	4603      	mov	r3, r0
 8008606:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8008608:	8afb      	ldrh	r3, [r7, #22]
 800860a:	3308      	adds	r3, #8
 800860c:	82fb      	strh	r3, [r7, #22]
 800860e:	8afb      	ldrh	r3, [r7, #22]
 8008610:	2b3f      	cmp	r3, #63	; 0x3f
 8008612:	d9e0      	bls.n	80085d6 <crcAddSignature+0x16>
    }
    return crc_val;
 8008614:	89fb      	ldrh	r3, [r7, #14]
}
 8008616:	4618      	mov	r0, r3
 8008618:	371c      	adds	r7, #28
 800861a:	46bd      	mov	sp, r7
 800861c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800861e <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	4603      	mov	r3, r0
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
 800862a:	81fb      	strh	r3, [r7, #14]
    while (len--)
 800862c:	e00a      	b.n	8008644 <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	60ba      	str	r2, [r7, #8]
 8008634:	781a      	ldrb	r2, [r3, #0]
 8008636:	89fb      	ldrh	r3, [r7, #14]
 8008638:	4611      	mov	r1, r2
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff ff92 	bl	8008564 <crcAddByte>
 8008640:	4603      	mov	r3, r0
 8008642:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	1e5a      	subs	r2, r3, #1
 8008648:	607a      	str	r2, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1ef      	bne.n	800862e <crcAdd+0x10>
    }
    return crc_val;
 800864e:	89fb      	ldrh	r3, [r7, #14]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       CanardPoolAllocatorBlock* buf,
                                       uint16_t buf_len)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	4613      	mov	r3, r2
 8008664:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	617b      	str	r3, [r7, #20]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	613b      	str	r3, [r7, #16]
    while (current_index < buf_len)
 800866e:	e00b      	b.n	8008688 <initPoolAllocator+0x30>
    {
        *current_block = &buf[current_index];
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	015b      	lsls	r3, r3, #5
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	441a      	add	r2, r3
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	613b      	str	r3, [r7, #16]
        current_index++;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	3301      	adds	r3, #1
 8008686:	617b      	str	r3, [r7, #20]
    while (current_index < buf_len)
 8008688:	88fb      	ldrh	r3, [r7, #6]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	429a      	cmp	r2, r3
 800868e:	d3ef      	bcc.n	8008670 <initPoolAllocator+0x18>
    }
    *current_block = NULL;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	88fa      	ldrh	r2, [r7, #6]
 800869a:	809a      	strh	r2, [r3, #4]
    allocator->statistics.current_usage_blocks = 0;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	80da      	strh	r2, [r3, #6]
    allocator->statistics.peak_usage_blocks = 0;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	811a      	strh	r2, [r3, #8]
}
 80086a8:	bf00      	nop
 80086aa:	371c      	adds	r7, #28
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bc80      	pop	{r7}
 80086b0:	4770      	bx	lr

080086b2 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b085      	sub	sp, #20
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <allocateBlock+0x14>
    {
        return NULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	e018      	b.n	80086f8 <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	601a      	str	r2, [r3, #0]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	88db      	ldrh	r3, [r3, #6]
 80086da:	3301      	adds	r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	80da      	strh	r2, [r3, #6]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	891a      	ldrh	r2, [r3, #8]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	88db      	ldrh	r3, [r3, #6]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d203      	bcs.n	80086f6 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	88da      	ldrh	r2, [r3, #6]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	811a      	strh	r2, [r3, #8]
    }

    return result;
 80086f6:	68fb      	ldr	r3, [r7, #12]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bc80      	pop	{r7}
 8008700:	4770      	bx	lr
	...

08008704 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	601a      	str	r2, [r3, #0]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	88db      	ldrh	r3, [r3, #6]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d106      	bne.n	8008736 <freeBlock+0x32>
 8008728:	4b08      	ldr	r3, [pc, #32]	; (800874c <freeBlock+0x48>)
 800872a:	4a09      	ldr	r2, [pc, #36]	; (8008750 <freeBlock+0x4c>)
 800872c:	f44f 61c7 	mov.w	r1, #1592	; 0x638
 8008730:	4808      	ldr	r0, [pc, #32]	; (8008754 <freeBlock+0x50>)
 8008732:	f000 fb5f 	bl	8008df4 <__assert_func>
    allocator->statistics.current_usage_blocks--;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	88db      	ldrh	r3, [r3, #6]
 800873a:	3b01      	subs	r3, #1
 800873c:	b29a      	uxth	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	80da      	strh	r2, [r3, #6]
}
 8008742:	bf00      	nop
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	0800a198 	.word	0x0800a198
 8008750:	0800a3ec 	.word	0x0800a3ec
 8008754:	08009e60 	.word	0x08009e60

08008758 <isFramePriorityHigher>:

static bool g_abort_tx_on_error = false;


static bool isFramePriorityHigher(uint32_t a, uint32_t b)
{
 8008758:	b480      	push	{r7}
 800875a:	b089      	sub	sp, #36	; 0x24
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
    const uint32_t clean_a = a & CANARD_CAN_EXT_ID_MASK;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008768:	61fb      	str	r3, [r7, #28]
    const uint32_t clean_b = b & CANARD_CAN_EXT_ID_MASK;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008770:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext_a = (a & CANARD_CAN_FRAME_EFF) != 0;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	0fdb      	lsrs	r3, r3, #31
 8008776:	75fb      	strb	r3, [r7, #23]
    const bool ext_b = (b & CANARD_CAN_FRAME_EFF) != 0;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	0fdb      	lsrs	r3, r3, #31
 800877c:	75bb      	strb	r3, [r7, #22]
    if (ext_a != ext_b)
 800877e:	7dfa      	ldrb	r2, [r7, #23]
 8008780:	7dbb      	ldrb	r3, [r7, #22]
 8008782:	429a      	cmp	r2, r3
 8008784:	d01d      	beq.n	80087c2 <isFramePriorityHigher+0x6a>
    {
        const uint32_t arb11_a = ext_a ? (clean_a >> 18U) : clean_a;
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <isFramePriorityHigher+0x3a>
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	0c9b      	lsrs	r3, r3, #18
 8008790:	e000      	b.n	8008794 <isFramePriorityHigher+0x3c>
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	613b      	str	r3, [r7, #16]
        const uint32_t arb11_b = ext_b ? (clean_b >> 18U) : clean_b;
 8008796:	7dbb      	ldrb	r3, [r7, #22]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <isFramePriorityHigher+0x4a>
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	0c9b      	lsrs	r3, r3, #18
 80087a0:	e000      	b.n	80087a4 <isFramePriorityHigher+0x4c>
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	60fb      	str	r3, [r7, #12]
        if (arb11_a != arb11_b)
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d007      	beq.n	80087be <isFramePriorityHigher+0x66>
        {
            return arb11_a < arb11_b;
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	bf34      	ite	cc
 80087b6:	2301      	movcc	r3, #1
 80087b8:	2300      	movcs	r3, #0
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	e022      	b.n	8008804 <isFramePriorityHigher+0xac>
        }
        else
        {
            return ext_b;
 80087be:	7dbb      	ldrb	r3, [r7, #22]
 80087c0:	e020      	b.n	8008804 <isFramePriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr_a = (a & CANARD_CAN_FRAME_RTR) != 0;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	bf14      	ite	ne
 80087cc:	2301      	movne	r3, #1
 80087ce:	2300      	moveq	r3, #0
 80087d0:	757b      	strb	r3, [r7, #21]
    const bool rtr_b = (b & CANARD_CAN_FRAME_RTR) != 0;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	bf14      	ite	ne
 80087dc:	2301      	movne	r3, #1
 80087de:	2300      	moveq	r3, #0
 80087e0:	753b      	strb	r3, [r7, #20]
    if ((clean_a == clean_b) && (rtr_a != rtr_b))
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d105      	bne.n	80087f6 <isFramePriorityHigher+0x9e>
 80087ea:	7d7a      	ldrb	r2, [r7, #21]
 80087ec:	7d3b      	ldrb	r3, [r7, #20]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d001      	beq.n	80087f6 <isFramePriorityHigher+0x9e>
    {
        return rtr_b;
 80087f2:	7d3b      	ldrb	r3, [r7, #20]
 80087f4:	e006      	b.n	8008804 <isFramePriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_a < clean_b;
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	bf34      	ite	cc
 80087fe:	2301      	movcc	r3, #1
 8008800:	2300      	movcs	r3, #0
 8008802:	b2db      	uxtb	r3, r3
}
 8008804:	4618      	mov	r0, r3
 8008806:	3724      	adds	r7, #36	; 0x24
 8008808:	46bd      	mov	sp, r7
 800880a:	bc80      	pop	{r7}
 800880c:	4770      	bx	lr

0800880e <convertFrameIDCanardToRegister>:

/// Converts libcanard ID value into the bxCAN TX ID register format.
static uint32_t convertFrameIDCanardToRegister(const uint32_t id)
{
 800880e:	b480      	push	{r7}
 8008810:	b085      	sub	sp, #20
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
    uint32_t out = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]

    if (id & CANARD_CAN_FRAME_EFF)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	da05      	bge.n	800882c <convertFrameIDCanardToRegister+0x1e>
    {
        out = ((id & CANARD_CAN_EXT_ID_MASK) << 3U) | CANARD_STM32_CAN_TIR_IDE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	00db      	lsls	r3, r3, #3
 8008824:	f043 0304 	orr.w	r3, r3, #4
 8008828:	60fb      	str	r3, [r7, #12]
 800882a:	e002      	b.n	8008832 <convertFrameIDCanardToRegister+0x24>
    }
    else
    {
        out = ((id & CANARD_CAN_STD_ID_MASK) << 21U);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	055b      	lsls	r3, r3, #21
 8008830:	60fb      	str	r3, [r7, #12]
    }

    if (id & CANARD_CAN_FRAME_RTR)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <convertFrameIDCanardToRegister+0x36>
    {
        out |= CANARD_STM32_CAN_TIR_RTR;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f043 0302 	orr.w	r3, r3, #2
 8008842:	60fb      	str	r3, [r7, #12]
    }

    return out;
 8008844:	68fb      	ldr	r3, [r7, #12]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	bc80      	pop	{r7}
 800884e:	4770      	bx	lr

08008850 <convertFrameIDRegisterToCanard>:

/// Converts bxCAN TX/RX (sic! both RX/TX are supported) ID register value into the libcanard ID format.
static uint32_t convertFrameIDRegisterToCanard(const uint32_t id)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
#if (CANARD_STM32_CAN_TIR_RTR != CANARD_STM32_CAN_RIR_RTR) ||\
    (CANARD_STM32_CAN_TIR_IDE != CANARD_STM32_CAN_RIR_IDE)
# error "RIR bits do not match TIR bits, TIR --> libcanard conversion is not possible"
#endif

    uint32_t out = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	60fb      	str	r3, [r7, #12]

    if ((id & CANARD_STM32_CAN_RIR_IDE) == 0)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f003 0304 	and.w	r3, r3, #4
 8008862:	2b00      	cmp	r3, #0
 8008864:	d103      	bne.n	800886e <convertFrameIDRegisterToCanard+0x1e>
    {
        out = (CANARD_CAN_STD_ID_MASK & (id >> 21U));
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	0d5b      	lsrs	r3, r3, #21
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	e004      	b.n	8008878 <convertFrameIDRegisterToCanard+0x28>
    }
    else
    {
        out = (CANARD_CAN_EXT_ID_MASK & (id >> 3U)) | CANARD_CAN_FRAME_EFF;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	08db      	lsrs	r3, r3, #3
 8008872:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008876:	60fb      	str	r3, [r7, #12]
    }

    if ((id & CANARD_STM32_CAN_RIR_RTR) != 0)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <convertFrameIDRegisterToCanard+0x3a>
    {
        out |= CANARD_CAN_FRAME_RTR;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008888:	60fb      	str	r3, [r7, #12]
    }

    return out;
 800888a:	68fb      	ldr	r3, [r7, #12]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	bc80      	pop	{r7}
 8008894:	4770      	bx	lr
	...

08008898 <waitMSRINAKBitStateChange>:


static bool waitMSRINAKBitStateChange(volatile const CanardSTM32CANType* const bxcan, const bool target_state)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
     *  3 bit - inter frame space
     * This adds up to 11; therefore, it is not really necessary to wait longer than a few frame TX intervals.
     */
    static const uint16_t TimeoutMilliseconds = 1000;

    for (uint16_t wait_ack = 0; wait_ack < TimeoutMilliseconds; wait_ack++)
 80088a4:	2300      	movs	r3, #0
 80088a6:	81fb      	strh	r3, [r7, #14]
 80088a8:	e011      	b.n	80088ce <waitMSRINAKBitStateChange+0x36>
    {
        const bool state = (bxcan->MSR & CANARD_STM32_CAN_MSR_INAK) != 0;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bf14      	ite	ne
 80088b6:	2301      	movne	r3, #1
 80088b8:	2300      	moveq	r3, #0
 80088ba:	737b      	strb	r3, [r7, #13]
        if (state == target_state)
 80088bc:	7b7a      	ldrb	r2, [r7, #13]
 80088be:	78fb      	ldrb	r3, [r7, #3]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d101      	bne.n	80088c8 <waitMSRINAKBitStateChange+0x30>
        {
            return true;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e008      	b.n	80088da <waitMSRINAKBitStateChange+0x42>
    for (uint16_t wait_ack = 0; wait_ack < TimeoutMilliseconds; wait_ack++)
 80088c8:	89fb      	ldrh	r3, [r7, #14]
 80088ca:	3301      	adds	r3, #1
 80088cc:	81fb      	strh	r3, [r7, #14]
 80088ce:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <waitMSRINAKBitStateChange+0x4c>)
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	89fa      	ldrh	r2, [r7, #14]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d3e8      	bcc.n	80088aa <waitMSRINAKBitStateChange+0x12>
        //usleep(1000);           // TODO: This function may be missing on some platforms


    }

    return false;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	bc80      	pop	{r7}
 80088e2:	4770      	bx	lr
 80088e4:	0800a3f6 	.word	0x0800a3f6

080088e8 <processErrorStatus>:


static void processErrorStatus(void)
{
 80088e8:	b490      	push	{r4, r7}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
    /*
     * Aborting TX transmissions if abort on error was requested
     * Updating error counter
     */
    const uint8_t lec = (uint8_t)((BXCAN->ESR & CANARD_STM32_CAN_ESR_LEC_MASK) >> CANARD_STM32_CAN_ESR_LEC_SHIFT);
 80088ee:	4b14      	ldr	r3, [pc, #80]	; (8008940 <processErrorStatus+0x58>)
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	091b      	lsrs	r3, r3, #4
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	71fb      	strb	r3, [r7, #7]

    if (lec != 0)
 80088fc:	79fb      	ldrb	r3, [r7, #7]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d018      	beq.n	8008934 <processErrorStatus+0x4c>
    {
        BXCAN->ESR = 0;                 // This action does only affect the LEC bits, other bits are read only!
 8008902:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <processErrorStatus+0x58>)
 8008904:	2200      	movs	r2, #0
 8008906:	619a      	str	r2, [r3, #24]
        g_stats.error_count++;
 8008908:	4b0e      	ldr	r3, [pc, #56]	; (8008944 <processErrorStatus+0x5c>)
 800890a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800890e:	1c4b      	adds	r3, r1, #1
 8008910:	f142 0400 	adc.w	r4, r2, #0
 8008914:	4a0b      	ldr	r2, [pc, #44]	; (8008944 <processErrorStatus+0x5c>)
 8008916:	e9c2 3402 	strd	r3, r4, [r2, #8]

        // Abort pending transmissions if auto abort on error is enabled, or if we're in bus off mode
        if (g_abort_tx_on_error || (BXCAN->ESR & CANARD_STM32_CAN_ESR_BOFF))
 800891a:	4b0b      	ldr	r3, [pc, #44]	; (8008948 <processErrorStatus+0x60>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d105      	bne.n	800892e <processErrorStatus+0x46>
 8008922:	4b07      	ldr	r3, [pc, #28]	; (8008940 <processErrorStatus+0x58>)
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <processErrorStatus+0x4c>
        {
            BXCAN->TSR = CANARD_STM32_CAN_TSR_ABRQ0 | CANARD_STM32_CAN_TSR_ABRQ1 | CANARD_STM32_CAN_TSR_ABRQ2;
 800892e:	4b04      	ldr	r3, [pc, #16]	; (8008940 <processErrorStatus+0x58>)
 8008930:	4a06      	ldr	r2, [pc, #24]	; (800894c <processErrorStatus+0x64>)
 8008932:	609a      	str	r2, [r3, #8]
        }
    }
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bc90      	pop	{r4, r7}
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	40006400 	.word	0x40006400
 8008944:	20001e58 	.word	0x20001e58
 8008948:	20001e68 	.word	0x20001e68
 800894c:	00808080 	.word	0x00808080

08008950 <canardSTM32Init>:


int16_t canardSTM32Init(const CanardSTM32CANTimings* const timings,
                        const CanardSTM32IfaceMode iface_mode)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	70fb      	strb	r3, [r7, #3]
    /*
     * Paranoia time.
     */
    if ((iface_mode != CanardSTM32IfaceModeNormal) &&
 800895c:	78fb      	ldrb	r3, [r7, #3]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d008      	beq.n	8008974 <canardSTM32Init+0x24>
 8008962:	78fb      	ldrb	r3, [r7, #3]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d005      	beq.n	8008974 <canardSTM32Init+0x24>
        (iface_mode != CanardSTM32IfaceModeSilent) &&
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d002      	beq.n	8008974 <canardSTM32Init+0x24>
        (iface_mode != CanardSTM32IfaceModeAutomaticTxAbortOnError))
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800896e:	f06f 0301 	mvn.w	r3, #1
 8008972:	e0dd      	b.n	8008b30 <canardSTM32Init+0x1e0>
    }

    if ((timings == NULL) ||
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d020      	beq.n	80089bc <canardSTM32Init+0x6c>
        (timings->bit_rate_prescaler < 1) || (timings->bit_rate_prescaler > 1024) ||
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	881b      	ldrh	r3, [r3, #0]
    if ((timings == NULL) ||
 800897e:	2b00      	cmp	r3, #0
 8008980:	d01c      	beq.n	80089bc <canardSTM32Init+0x6c>
        (timings->bit_rate_prescaler < 1) || (timings->bit_rate_prescaler > 1024) ||
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800898a:	d817      	bhi.n	80089bc <canardSTM32Init+0x6c>
        (timings->max_resynchronization_jump_width < 1) || (timings->max_resynchronization_jump_width > 4) ||
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	791b      	ldrb	r3, [r3, #4]
        (timings->bit_rate_prescaler < 1) || (timings->bit_rate_prescaler > 1024) ||
 8008990:	2b00      	cmp	r3, #0
 8008992:	d013      	beq.n	80089bc <canardSTM32Init+0x6c>
        (timings->max_resynchronization_jump_width < 1) || (timings->max_resynchronization_jump_width > 4) ||
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	791b      	ldrb	r3, [r3, #4]
 8008998:	2b04      	cmp	r3, #4
 800899a:	d80f      	bhi.n	80089bc <canardSTM32Init+0x6c>
        (timings->bit_segment_1 < 1) || (timings->bit_segment_1 > 16) ||
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	789b      	ldrb	r3, [r3, #2]
        (timings->max_resynchronization_jump_width < 1) || (timings->max_resynchronization_jump_width > 4) ||
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <canardSTM32Init+0x6c>
        (timings->bit_segment_1 < 1) || (timings->bit_segment_1 > 16) ||
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	789b      	ldrb	r3, [r3, #2]
 80089a8:	2b10      	cmp	r3, #16
 80089aa:	d807      	bhi.n	80089bc <canardSTM32Init+0x6c>
        (timings->bit_segment_2 < 1) || (timings->bit_segment_2 > 8))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	78db      	ldrb	r3, [r3, #3]
        (timings->bit_segment_1 < 1) || (timings->bit_segment_1 > 16) ||
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <canardSTM32Init+0x6c>
        (timings->bit_segment_2 < 1) || (timings->bit_segment_2 > 8))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	78db      	ldrb	r3, [r3, #3]
 80089b8:	2b08      	cmp	r3, #8
 80089ba:	d902      	bls.n	80089c2 <canardSTM32Init+0x72>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80089bc:	f06f 0301 	mvn.w	r3, #1
 80089c0:	e0b6      	b.n	8008b30 <canardSTM32Init+0x1e0>
    }

    /*
     * Initial setup
     */
    memset(&g_stats, 0, sizeof(g_stats));
 80089c2:	2210      	movs	r2, #16
 80089c4:	2100      	movs	r1, #0
 80089c6:	485c      	ldr	r0, [pc, #368]	; (8008b38 <canardSTM32Init+0x1e8>)
 80089c8:	f000 fa79 	bl	8008ebe <memset>

    g_abort_tx_on_error = (iface_mode == CanardSTM32IfaceModeAutomaticTxAbortOnError);
 80089cc:	78fb      	ldrb	r3, [r7, #3]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	bf0c      	ite	eq
 80089d2:	2301      	moveq	r3, #1
 80089d4:	2300      	movne	r3, #0
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	4b58      	ldr	r3, [pc, #352]	; (8008b3c <canardSTM32Init+0x1ec>)
 80089da:	701a      	strb	r2, [r3, #0]
        return -CANARD_STM32_ERROR_MSR_INAK_NOT_SET;
    }
    // CAN1 will be left in the initialization mode forever, in this mode it does not affect the bus at all.
#endif

    BXCAN->IER = 0;                                             // We need no interrupts
 80089dc:	4b58      	ldr	r3, [pc, #352]	; (8008b40 <canardSTM32Init+0x1f0>)
 80089de:	2200      	movs	r2, #0
 80089e0:	615a      	str	r2, [r3, #20]
    BXCAN->MCR &= ~CANARD_STM32_CAN_MCR_SLEEP;                  // Exit sleep mode
 80089e2:	4b57      	ldr	r3, [pc, #348]	; (8008b40 <canardSTM32Init+0x1f0>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a56      	ldr	r2, [pc, #344]	; (8008b40 <canardSTM32Init+0x1f0>)
 80089e8:	f023 0302 	bic.w	r3, r3, #2
 80089ec:	6013      	str	r3, [r2, #0]
    BXCAN->MCR |= CANARD_STM32_CAN_MCR_INRQ;                    // Request init
 80089ee:	4b54      	ldr	r3, [pc, #336]	; (8008b40 <canardSTM32Init+0x1f0>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a53      	ldr	r2, [pc, #332]	; (8008b40 <canardSTM32Init+0x1f0>)
 80089f4:	f043 0301 	orr.w	r3, r3, #1
 80089f8:	6013      	str	r3, [r2, #0]

    if (!waitMSRINAKBitStateChange(BXCAN, true))                // Wait for synchronization
 80089fa:	2101      	movs	r1, #1
 80089fc:	4850      	ldr	r0, [pc, #320]	; (8008b40 <canardSTM32Init+0x1f0>)
 80089fe:	f7ff ff4b 	bl	8008898 <waitMSRINAKBitStateChange>
 8008a02:	4603      	mov	r3, r0
 8008a04:	f083 0301 	eor.w	r3, r3, #1
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d006      	beq.n	8008a1c <canardSTM32Init+0xcc>
    {
        BXCAN->MCR = CANARD_STM32_CAN_MCR_RESET;
 8008a0e:	4b4c      	ldr	r3, [pc, #304]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008a10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008a14:	601a      	str	r2, [r3, #0]
        return -CANARD_STM32_ERROR_MSR_INAK_NOT_SET;
 8008a16:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8008a1a:	e089      	b.n	8008b30 <canardSTM32Init+0x1e0>
    }

    /*
     * Hardware initialization (the hardware has already confirmed initialization mode, see above)
     */
    BXCAN->MCR = CANARD_STM32_CAN_MCR_ABOM | CANARD_STM32_CAN_MCR_AWUM | CANARD_STM32_CAN_MCR_INRQ;  // RM page 648
 8008a1c:	4b48      	ldr	r3, [pc, #288]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008a1e:	2261      	movs	r2, #97	; 0x61
 8008a20:	601a      	str	r2, [r3, #0]

    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	791b      	ldrb	r3, [r3, #4]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	061b      	lsls	r3, r3, #24
 8008a2a:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
                 (((timings->bit_segment_1 - 1U)                    &   15U) << 16U) |
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	789b      	ldrb	r3, [r3, #2]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	041b      	lsls	r3, r3, #16
 8008a36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 8008a3a:	431a      	orrs	r2, r3
                 (((timings->bit_segment_2 - 1U)                    &    7U) << 20U) |
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	78db      	ldrb	r3, [r3, #3]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	051b      	lsls	r3, r3, #20
 8008a44:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
                 (((timings->bit_segment_1 - 1U)                    &   15U) << 16U) |
 8008a48:	431a      	orrs	r2, r3
                 ((timings->bit_rate_prescaler - 1U)                & 1023U) |
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
                 (((timings->bit_segment_2 - 1U)                    &    7U) << 20U) |
 8008a54:	4313      	orrs	r3, r2
                 ((iface_mode == CanardSTM32IfaceModeSilent) ? CANARD_STM32_CAN_BTR_SILM : 0);
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	2a01      	cmp	r2, #1
 8008a5a:	d102      	bne.n	8008a62 <canardSTM32Init+0x112>
 8008a5c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a60:	e000      	b.n	8008a64 <canardSTM32Init+0x114>
 8008a62:	2200      	movs	r2, #0
    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 8008a64:	4936      	ldr	r1, [pc, #216]	; (8008b40 <canardSTM32Init+0x1f0>)
                 ((timings->bit_rate_prescaler - 1U)                & 1023U) |
 8008a66:	4313      	orrs	r3, r2
    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 8008a68:	61cb      	str	r3, [r1, #28]

    CANARD_ASSERT(0 == BXCAN->IER);             // Making sure the iterrupts are indeed disabled
 8008a6a:	4b35      	ldr	r3, [pc, #212]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <canardSTM32Init+0x12e>
 8008a72:	4b34      	ldr	r3, [pc, #208]	; (8008b44 <canardSTM32Init+0x1f4>)
 8008a74:	4a34      	ldr	r2, [pc, #208]	; (8008b48 <canardSTM32Init+0x1f8>)
 8008a76:	21ea      	movs	r1, #234	; 0xea
 8008a78:	4834      	ldr	r0, [pc, #208]	; (8008b4c <canardSTM32Init+0x1fc>)
 8008a7a:	f000 f9bb 	bl	8008df4 <__assert_func>

    BXCAN->MCR &= ~CANARD_STM32_CAN_MCR_INRQ;   // Leave init mode
 8008a7e:	4b30      	ldr	r3, [pc, #192]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a2f      	ldr	r2, [pc, #188]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008a84:	f023 0301 	bic.w	r3, r3, #1
 8008a88:	6013      	str	r3, [r2, #0]

    if (!waitMSRINAKBitStateChange(BXCAN, false))
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	482c      	ldr	r0, [pc, #176]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008a8e:	f7ff ff03 	bl	8008898 <waitMSRINAKBitStateChange>
 8008a92:	4603      	mov	r3, r0
 8008a94:	f083 0301 	eor.w	r3, r3, #1
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d005      	beq.n	8008aaa <canardSTM32Init+0x15a>
    {
        BXCAN->MCR = CANARD_STM32_CAN_MCR_RESET;
 8008a9e:	4b28      	ldr	r3, [pc, #160]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008aa0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008aa4:	601a      	str	r2, [r3, #0]
        return -CANARD_STM32_ERROR_MSR_INAK_NOT_CLEARED;
 8008aa6:	4b2a      	ldr	r3, [pc, #168]	; (8008b50 <canardSTM32Init+0x200>)
 8008aa8:	e042      	b.n	8008b30 <canardSTM32Init+0x1e0>
     * CAN2 filters are offset by 14.
     * We use 14 filters at most always which simplifies the code and ensures compatibility with all
     * MCU within the STM32 family.
     */
    {
        uint32_t fmr = CANARD_STM32_CAN1->FMR & 0xFFFFC0F1U;
 8008aaa:	4b25      	ldr	r3, [pc, #148]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008aac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ab0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008ab4:	f023 030e 	bic.w	r3, r3, #14
 8008ab8:	60fb      	str	r3, [r7, #12]
        fmr |= CANARD_STM32_NUM_ACCEPTANCE_FILTERS << 8U;                // CAN2 start bank = 14 (if CAN2 is present)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8008ac0:	60fb      	str	r3, [r7, #12]
        CANARD_STM32_CAN1->FMR = fmr | CANARD_STM32_CAN_FMR_FINIT;
 8008ac2:	4a1f      	ldr	r2, [pc, #124]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f043 0301 	orr.w	r3, r3, #1
 8008aca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    CANARD_ASSERT(((CANARD_STM32_CAN1->FMR >> 8U) & 0x3FU) == CANARD_STM32_NUM_ACCEPTANCE_FILTERS);
 8008ace:	4b1c      	ldr	r3, [pc, #112]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008ad0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ad4:	0a1b      	lsrs	r3, r3, #8
 8008ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ada:	2b0e      	cmp	r3, #14
 8008adc:	d006      	beq.n	8008aec <canardSTM32Init+0x19c>
 8008ade:	4b1d      	ldr	r3, [pc, #116]	; (8008b54 <canardSTM32Init+0x204>)
 8008ae0:	4a19      	ldr	r2, [pc, #100]	; (8008b48 <canardSTM32Init+0x1f8>)
 8008ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008ae6:	4819      	ldr	r0, [pc, #100]	; (8008b4c <canardSTM32Init+0x1fc>)
 8008ae8:	f000 f984 	bl	8008df4 <__assert_func>

    CANARD_STM32_CAN1->FM1R = 0;                                        // Indentifier Mask mode
 8008aec:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    CANARD_STM32_CAN1->FS1R = 0x0FFFFFFF;                               // All 32-bit
 8008af4:	4b12      	ldr	r3, [pc, #72]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008af6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8008afa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    // Filters are alternating between FIFO0 and FIFO1 in order to equalize the load.
    // This will cause occasional priority inversion and frame reordering on reception,
    // but that is acceptable for UAVCAN, and a majority of other protocols will tolerate
    // this too, since there will be no reordering within the same CAN ID.
    CANARD_STM32_CAN1->FFA1R = 0x0AAAAAAA;
 8008afe:	4b10      	ldr	r3, [pc, #64]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008b00:	4a15      	ldr	r2, [pc, #84]	; (8008b58 <canardSTM32Init+0x208>)
 8008b02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#if CANARD_STM32_USE_CAN2
    CANARD_STM32_CAN1->FilterRegister[CANARD_STM32_NUM_ACCEPTANCE_FILTERS].FR1 = 0;
    CANARD_STM32_CAN1->FilterRegister[CANARD_STM32_NUM_ACCEPTANCE_FILTERS].FR2 = 0;
    CANARD_STM32_CAN1->FA1R = (1 << CANARD_STM32_NUM_ACCEPTANCE_FILTERS);  // One filter enabled
#else
    CANARD_STM32_CAN1->FilterRegister[0].FR1 = 0;
 8008b06:	4b0e      	ldr	r3, [pc, #56]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    CANARD_STM32_CAN1->FilterRegister[0].FR2 = 0;
 8008b0e:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
    CANARD_STM32_CAN1->FA1R = 1;                                        // One filter enabled
 8008b16:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
#endif

    CANARD_STM32_CAN1->FMR &= ~CANARD_STM32_CAN_FMR_FINIT;              // Leave initialization mode
 8008b1e:	4b08      	ldr	r3, [pc, #32]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008b20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b24:	4a06      	ldr	r2, [pc, #24]	; (8008b40 <canardSTM32Init+0x1f0>)
 8008b26:	f023 0301 	bic.w	r3, r3, #1
 8008b2a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    return 0;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	20001e58 	.word	0x20001e58
 8008b3c:	20001e68 	.word	0x20001e68
 8008b40:	40006400 	.word	0x40006400
 8008b44:	0800a1c8 	.word	0x0800a1c8
 8008b48:	0800a3f8 	.word	0x0800a3f8
 8008b4c:	0800a200 	.word	0x0800a200
 8008b50:	fffffc16 	.word	0xfffffc16
 8008b54:	0800a22c 	.word	0x0800a22c
 8008b58:	0aaaaaaa 	.word	0x0aaaaaaa

08008b5c <canardSTM32Transmit>:


int16_t canardSTM32Transmit(const CanardCANFrame* const frame)
{
 8008b5c:	b590      	push	{r4, r7, lr}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
    if (frame == NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d102      	bne.n	8008b70 <canardSTM32Transmit+0x14>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8008b6a:	f06f 0301 	mvn.w	r3, #1
 8008b6e:	e0ab      	b.n	8008cc8 <canardSTM32Transmit+0x16c>
    }

    if (frame->id & CANARD_CAN_FRAME_ERR)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <canardSTM32Transmit+0x24>
    {
        return -CANARD_STM32_ERROR_UNSUPPORTED_FRAME_FORMAT;
 8008b7c:	4b54      	ldr	r3, [pc, #336]	; (8008cd0 <canardSTM32Transmit+0x174>)
 8008b7e:	e0a3      	b.n	8008cc8 <canardSTM32Transmit+0x16c>
    }

    /*
     * Handling error status might free up some slots through aborts
     */
    processErrorStatus();
 8008b80:	f7ff feb2 	bl	80088e8 <processErrorStatus>

    /*
     * Seeking an empty slot, checking if priority inversion would occur if we enqueued now.
     * We can always enqueue safely if all TX mailboxes are free and no transmissions are pending.
     */
    uint8_t tx_mailbox = 0xFF;
 8008b84:	23ff      	movs	r3, #255	; 0xff
 8008b86:	75fb      	strb	r3, [r7, #23]

    static const uint32_t AllTME = CANARD_STM32_CAN_TSR_TME0 | CANARD_STM32_CAN_TSR_TME1 | CANARD_STM32_CAN_TSR_TME2;

    if ((BXCAN->TSR & AllTME) != AllTME)                // At least one TX mailbox is used, detailed check is needed
 8008b88:	4b52      	ldr	r3, [pc, #328]	; (8008cd4 <canardSTM32Transmit+0x178>)
 8008b8a:	689a      	ldr	r2, [r3, #8]
 8008b8c:	4b52      	ldr	r3, [pc, #328]	; (8008cd8 <canardSTM32Transmit+0x17c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	401a      	ands	r2, r3
 8008b92:	4b51      	ldr	r3, [pc, #324]	; (8008cd8 <canardSTM32Transmit+0x17c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d053      	beq.n	8008c42 <canardSTM32Transmit+0xe6>
    {
        const bool tme[3] =
        {
            (BXCAN->TSR & CANARD_STM32_CAN_TSR_TME0) != 0,
 8008b9a:	4b4e      	ldr	r3, [pc, #312]	; (8008cd4 <canardSTM32Transmit+0x178>)
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	bf14      	ite	ne
 8008ba6:	2301      	movne	r3, #1
 8008ba8:	2300      	moveq	r3, #0
 8008baa:	b2db      	uxtb	r3, r3
        const bool tme[3] =
 8008bac:	733b      	strb	r3, [r7, #12]
            (BXCAN->TSR & CANARD_STM32_CAN_TSR_TME1) != 0,
 8008bae:	4b49      	ldr	r3, [pc, #292]	; (8008cd4 <canardSTM32Transmit+0x178>)
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	bf14      	ite	ne
 8008bba:	2301      	movne	r3, #1
 8008bbc:	2300      	moveq	r3, #0
 8008bbe:	b2db      	uxtb	r3, r3
        const bool tme[3] =
 8008bc0:	737b      	strb	r3, [r7, #13]
            (BXCAN->TSR & CANARD_STM32_CAN_TSR_TME2) != 0
 8008bc2:	4b44      	ldr	r3, [pc, #272]	; (8008cd4 <canardSTM32Transmit+0x178>)
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	bf14      	ite	ne
 8008bce:	2301      	movne	r3, #1
 8008bd0:	2300      	moveq	r3, #0
 8008bd2:	b2db      	uxtb	r3, r3
        const bool tme[3] =
 8008bd4:	73bb      	strb	r3, [r7, #14]
        };

        for (uint8_t i = 0; i < 3; i++)
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	75bb      	strb	r3, [r7, #22]
 8008bda:	e025      	b.n	8008c28 <canardSTM32Transmit+0xcc>
        {
            if (tme[i])                                 // This TX mailbox is free, we can use it
 8008bdc:	7dbb      	ldrb	r3, [r7, #22]
 8008bde:	f107 0218 	add.w	r2, r7, #24
 8008be2:	4413      	add	r3, r2
 8008be4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <canardSTM32Transmit+0x96>
            {
                tx_mailbox = i;
 8008bec:	7dbb      	ldrb	r3, [r7, #22]
 8008bee:	75fb      	strb	r3, [r7, #23]
 8008bf0:	e017      	b.n	8008c22 <canardSTM32Transmit+0xc6>
            }
            else                                        // This TX mailbox is pending, check for priority inversion
            {
                if (!isFramePriorityHigher(frame->id, convertFrameIDRegisterToCanard(BXCAN->TxMailbox[i].TIR)))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681c      	ldr	r4, [r3, #0]
 8008bf6:	4a37      	ldr	r2, [pc, #220]	; (8008cd4 <canardSTM32Transmit+0x178>)
 8008bf8:	7dbb      	ldrb	r3, [r7, #22]
 8008bfa:	3318      	adds	r3, #24
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	4413      	add	r3, r2
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff fe24 	bl	8008850 <convertFrameIDRegisterToCanard>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f7ff fda3 	bl	8008758 <isFramePriorityHigher>
 8008c12:	4603      	mov	r3, r0
 8008c14:	f083 0301 	eor.w	r3, r3, #1
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <canardSTM32Transmit+0xc6>
                {
                    // There's a mailbox whose priority is higher or equal the priority of the new frame.
                    return 0;                           // Priority inversion would occur! Reject transmission.
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e052      	b.n	8008cc8 <canardSTM32Transmit+0x16c>
        for (uint8_t i = 0; i < 3; i++)
 8008c22:	7dbb      	ldrb	r3, [r7, #22]
 8008c24:	3301      	adds	r3, #1
 8008c26:	75bb      	strb	r3, [r7, #22]
 8008c28:	7dbb      	ldrb	r3, [r7, #22]
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d9d6      	bls.n	8008bdc <canardSTM32Transmit+0x80>
                }
            }
        }

        if (tx_mailbox == 0xFF)
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	2bff      	cmp	r3, #255	; 0xff
 8008c32:	d108      	bne.n	8008c46 <canardSTM32Transmit+0xea>
             * This situation is even less likely to cause any noticeable disruptions on the CAN bus. Despite that,
             * it is better to warn the developer about that during debugging, so we fire an assertion failure here.
             * It is perfectly safe to remove it.
             */
#if CANARD_STM32_DEBUG_INNER_PRIORITY_INVERSION
            CANARD_ASSERT(!"CAN PRIO INV");
 8008c34:	4b29      	ldr	r3, [pc, #164]	; (8008cdc <canardSTM32Transmit+0x180>)
 8008c36:	4a2a      	ldr	r2, [pc, #168]	; (8008ce0 <canardSTM32Transmit+0x184>)
 8008c38:	f240 115f 	movw	r1, #351	; 0x15f
 8008c3c:	4829      	ldr	r0, [pc, #164]	; (8008ce4 <canardSTM32Transmit+0x188>)
 8008c3e:	f000 f8d9 	bl	8008df4 <__assert_func>
            return 0;
        }
    }
    else                                                // All TX mailboxes are free, use first
    {
        tx_mailbox = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	75fb      	strb	r3, [r7, #23]
    }

    CANARD_ASSERT(tx_mailbox < 3);                      // Index check - the value must be correct here
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d906      	bls.n	8008c5a <canardSTM32Transmit+0xfe>
 8008c4c:	4b26      	ldr	r3, [pc, #152]	; (8008ce8 <canardSTM32Transmit+0x18c>)
 8008c4e:	4a24      	ldr	r2, [pc, #144]	; (8008ce0 <canardSTM32Transmit+0x184>)
 8008c50:	f240 1169 	movw	r1, #361	; 0x169
 8008c54:	4823      	ldr	r0, [pc, #140]	; (8008ce4 <canardSTM32Transmit+0x188>)
 8008c56:	f000 f8cd 	bl	8008df4 <__assert_func>

    /*
     * By this time we've proved that a priority inversion would not occur, and we've also found a free TX mailbox.
     * Therefore it is safe to enqueue the frame now.
     */
    volatile CanardSTM32TxMailboxType* const mb = &BXCAN->TxMailbox[tx_mailbox];
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
 8008c5c:	011b      	lsls	r3, r3, #4
 8008c5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c62:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8008c66:	613b      	str	r3, [r7, #16]

    mb->TDTR = frame->data_len;                         // DLC equals data length except in CAN FD
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	7b1b      	ldrb	r3, [r3, #12]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	605a      	str	r2, [r3, #4]

    mb->TDHR = (((uint32_t)frame->data[7]) << 24U) |
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	7adb      	ldrb	r3, [r3, #11]
 8008c76:	061a      	lsls	r2, r3, #24
               (((uint32_t)frame->data[6]) << 16U) |
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	7a9b      	ldrb	r3, [r3, #10]
 8008c7c:	041b      	lsls	r3, r3, #16
    mb->TDHR = (((uint32_t)frame->data[7]) << 24U) |
 8008c7e:	431a      	orrs	r2, r3
               (((uint32_t)frame->data[5]) <<  8U) |
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	7a5b      	ldrb	r3, [r3, #9]
 8008c84:	021b      	lsls	r3, r3, #8
               (((uint32_t)frame->data[6]) << 16U) |
 8008c86:	4313      	orrs	r3, r2
               (((uint32_t)frame->data[4]) <<  0U);
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	7a12      	ldrb	r2, [r2, #8]
               (((uint32_t)frame->data[5]) <<  8U) |
 8008c8c:	431a      	orrs	r2, r3
    mb->TDHR = (((uint32_t)frame->data[7]) << 24U) |
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	60da      	str	r2, [r3, #12]
    mb->TDLR = (((uint32_t)frame->data[3]) << 24U) |
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	79db      	ldrb	r3, [r3, #7]
 8008c96:	061a      	lsls	r2, r3, #24
               (((uint32_t)frame->data[2]) << 16U) |
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	799b      	ldrb	r3, [r3, #6]
 8008c9c:	041b      	lsls	r3, r3, #16
    mb->TDLR = (((uint32_t)frame->data[3]) << 24U) |
 8008c9e:	431a      	orrs	r2, r3
               (((uint32_t)frame->data[1]) <<  8U) |
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	795b      	ldrb	r3, [r3, #5]
 8008ca4:	021b      	lsls	r3, r3, #8
               (((uint32_t)frame->data[2]) << 16U) |
 8008ca6:	4313      	orrs	r3, r2
               (((uint32_t)frame->data[0]) <<  0U);
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	7912      	ldrb	r2, [r2, #4]
               (((uint32_t)frame->data[1]) <<  8U) |
 8008cac:	431a      	orrs	r2, r3
    mb->TDLR = (((uint32_t)frame->data[3]) << 24U) |
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	609a      	str	r2, [r3, #8]

    mb->TIR = convertFrameIDCanardToRegister(frame->id) | CANARD_STM32_CAN_TIR_TXRQ;    // Go.
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff fda9 	bl	800880e <convertFrameIDCanardToRegister>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f043 0201 	orr.w	r2, r3, #1
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	601a      	str	r2, [r3, #0]

    /*
     * The frame is now enqueued and pending transmission.
     */
    return 1;
 8008cc6:	2301      	movs	r3, #1
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	371c      	adds	r7, #28
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd90      	pop	{r4, r7, pc}
 8008cd0:	fffffc15 	.word	0xfffffc15
 8008cd4:	40006400 	.word	0x40006400
 8008cd8:	0800a408 	.word	0x0800a408
 8008cdc:	0800a278 	.word	0x0800a278
 8008ce0:	0800a40c 	.word	0x0800a40c
 8008ce4:	0800a200 	.word	0x0800a200
 8008ce8:	0800a288 	.word	0x0800a288

08008cec <canardSTM32Receive>:


int16_t canardSTM32Receive(CanardCANFrame* const out_frame)
{
 8008cec:	b590      	push	{r4, r7, lr}
 8008cee:	b087      	sub	sp, #28
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
    if (out_frame == NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d102      	bne.n	8008d00 <canardSTM32Receive+0x14>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8008cfa:	f06f 0301 	mvn.w	r3, #1
 8008cfe:	e06f      	b.n	8008de0 <canardSTM32Receive+0xf4>
    };

    /*
     * This function must be polled periodically, so we use this opportunity to do it.
     */
    processErrorStatus();
 8008d00:	f7ff fdf2 	bl	80088e8 <processErrorStatus>

    /*
     * Reading the TX FIFO
     */
    for (uint_fast8_t i = 0; i < 2; i++)
 8008d04:	2300      	movs	r3, #0
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	e066      	b.n	8008dd8 <canardSTM32Receive+0xec>
    {
        volatile CanardSTM32RxMailboxType* const mb = &BXCAN->RxMailbox[i];
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	011a      	lsls	r2, r3, #4
 8008d0e:	4b36      	ldr	r3, [pc, #216]	; (8008de8 <canardSTM32Receive+0xfc>)
 8008d10:	4413      	add	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]

        if (((*RFxR[i]) & CANARD_STM32_CAN_RFR_FMP_MASK) != 0)
 8008d14:	4a35      	ldr	r2, [pc, #212]	; (8008dec <canardSTM32Receive+0x100>)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0303 	and.w	r3, r3, #3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d055      	beq.n	8008dd2 <canardSTM32Receive+0xe6>
        {
            if (*RFxR[i] & CANARD_STM32_CAN_RFR_FOVR)
 8008d26:	4a31      	ldr	r2, [pc, #196]	; (8008dec <canardSTM32Receive+0x100>)
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0310 	and.w	r3, r3, #16
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d008      	beq.n	8008d4a <canardSTM32Receive+0x5e>
            {
                g_stats.rx_overflow_count++;
 8008d38:	4b2d      	ldr	r3, [pc, #180]	; (8008df0 <canardSTM32Receive+0x104>)
 8008d3a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8008d3e:	1c4b      	adds	r3, r1, #1
 8008d40:	f142 0400 	adc.w	r4, r2, #0
 8008d44:	4a2a      	ldr	r2, [pc, #168]	; (8008df0 <canardSTM32Receive+0x104>)
 8008d46:	e9c2 3400 	strd	r3, r4, [r2]
            }

            out_frame->id = convertFrameIDRegisterToCanard(mb->RIR);
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff fd7e 	bl	8008850 <convertFrameIDRegisterToCanard>
 8008d54:	4602      	mov	r2, r0
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	601a      	str	r2, [r3, #0]

            out_frame->data_len = (uint8_t)(mb->RDTR & CANARD_STM32_CAN_RDTR_DLC_MASK);
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	f003 030f 	and.w	r3, r3, #15
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	731a      	strb	r2, [r3, #12]

            // Caching to regular (non volatile) memory for faster reads
            const uint32_t rdlr = mb->RDLR;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	60fb      	str	r3, [r7, #12]
            const uint32_t rdhr = mb->RDHR;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	60bb      	str	r3, [r7, #8]

            out_frame->data[0] = (uint8_t)(0xFFU & (rdlr >>  0U));
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	711a      	strb	r2, [r3, #4]
            out_frame->data[1] = (uint8_t)(0xFFU & (rdlr >>  8U));
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	0a1b      	lsrs	r3, r3, #8
 8008d82:	b2da      	uxtb	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	715a      	strb	r2, [r3, #5]
            out_frame->data[2] = (uint8_t)(0xFFU & (rdlr >> 16U));
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	0c1b      	lsrs	r3, r3, #16
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	719a      	strb	r2, [r3, #6]
            out_frame->data[3] = (uint8_t)(0xFFU & (rdlr >> 24U));
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	0e1b      	lsrs	r3, r3, #24
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	71da      	strb	r2, [r3, #7]
            out_frame->data[4] = (uint8_t)(0xFFU & (rdhr >>  0U));
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	721a      	strb	r2, [r3, #8]
            out_frame->data[5] = (uint8_t)(0xFFU & (rdhr >>  8U));
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	0a1b      	lsrs	r3, r3, #8
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	725a      	strb	r2, [r3, #9]
            out_frame->data[6] = (uint8_t)(0xFFU & (rdhr >> 16U));
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	0c1b      	lsrs	r3, r3, #16
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	729a      	strb	r2, [r3, #10]
            out_frame->data[7] = (uint8_t)(0xFFU & (rdhr >> 24U));
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	0e1b      	lsrs	r3, r3, #24
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	72da      	strb	r2, [r3, #11]

            // Release FIFO entry we just read
            *RFxR[i] = CANARD_STM32_CAN_RFR_RFOM | CANARD_STM32_CAN_RFR_FOVR | CANARD_STM32_CAN_RFR_FULL;
 8008dc2:	4a0a      	ldr	r2, [pc, #40]	; (8008dec <canardSTM32Receive+0x100>)
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dca:	2238      	movs	r2, #56	; 0x38
 8008dcc:	601a      	str	r2, [r3, #0]

            // Reading successful
            return 1;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e006      	b.n	8008de0 <canardSTM32Receive+0xf4>
    for (uint_fast8_t i = 0; i < 2; i++)
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	617b      	str	r3, [r7, #20]
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d995      	bls.n	8008d0a <canardSTM32Receive+0x1e>
        }
    }

    // No frames to read
    return 0;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	371c      	adds	r7, #28
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd90      	pop	{r4, r7, pc}
 8008de8:	400065b0 	.word	0x400065b0
 8008dec:	0800a420 	.word	0x0800a420
 8008df0:	20001e58 	.word	0x20001e58

08008df4 <__assert_func>:
 8008df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008df6:	461c      	mov	r4, r3
 8008df8:	4b09      	ldr	r3, [pc, #36]	; (8008e20 <__assert_func+0x2c>)
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68d8      	ldr	r0, [r3, #12]
 8008e00:	b152      	cbz	r2, 8008e18 <__assert_func+0x24>
 8008e02:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <__assert_func+0x30>)
 8008e04:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008e08:	9100      	str	r1, [sp, #0]
 8008e0a:	462b      	mov	r3, r5
 8008e0c:	4622      	mov	r2, r4
 8008e0e:	4906      	ldr	r1, [pc, #24]	; (8008e28 <__assert_func+0x34>)
 8008e10:	f000 f814 	bl	8008e3c <fiprintf>
 8008e14:	f000 fbf2 	bl	80095fc <abort>
 8008e18:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <__assert_func+0x38>)
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	e7f2      	b.n	8008e04 <__assert_func+0x10>
 8008e1e:	bf00      	nop
 8008e20:	20000088 	.word	0x20000088
 8008e24:	0800a428 	.word	0x0800a428
 8008e28:	0800a435 	.word	0x0800a435
 8008e2c:	0800a463 	.word	0x0800a463

08008e30 <__errno>:
 8008e30:	4b01      	ldr	r3, [pc, #4]	; (8008e38 <__errno+0x8>)
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	20000088 	.word	0x20000088

08008e3c <fiprintf>:
 8008e3c:	b40e      	push	{r1, r2, r3}
 8008e3e:	b503      	push	{r0, r1, lr}
 8008e40:	4601      	mov	r1, r0
 8008e42:	ab03      	add	r3, sp, #12
 8008e44:	4805      	ldr	r0, [pc, #20]	; (8008e5c <fiprintf+0x20>)
 8008e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4a:	6800      	ldr	r0, [r0, #0]
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	f000 f865 	bl	8008f1c <_vfiprintf_r>
 8008e52:	b002      	add	sp, #8
 8008e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e58:	b003      	add	sp, #12
 8008e5a:	4770      	bx	lr
 8008e5c:	20000088 	.word	0x20000088

08008e60 <__libc_init_array>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	2500      	movs	r5, #0
 8008e64:	4e0c      	ldr	r6, [pc, #48]	; (8008e98 <__libc_init_array+0x38>)
 8008e66:	4c0d      	ldr	r4, [pc, #52]	; (8008e9c <__libc_init_array+0x3c>)
 8008e68:	1ba4      	subs	r4, r4, r6
 8008e6a:	10a4      	asrs	r4, r4, #2
 8008e6c:	42a5      	cmp	r5, r4
 8008e6e:	d109      	bne.n	8008e84 <__libc_init_array+0x24>
 8008e70:	f000 ff60 	bl	8009d34 <_init>
 8008e74:	2500      	movs	r5, #0
 8008e76:	4e0a      	ldr	r6, [pc, #40]	; (8008ea0 <__libc_init_array+0x40>)
 8008e78:	4c0a      	ldr	r4, [pc, #40]	; (8008ea4 <__libc_init_array+0x44>)
 8008e7a:	1ba4      	subs	r4, r4, r6
 8008e7c:	10a4      	asrs	r4, r4, #2
 8008e7e:	42a5      	cmp	r5, r4
 8008e80:	d105      	bne.n	8008e8e <__libc_init_array+0x2e>
 8008e82:	bd70      	pop	{r4, r5, r6, pc}
 8008e84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e88:	4798      	blx	r3
 8008e8a:	3501      	adds	r5, #1
 8008e8c:	e7ee      	b.n	8008e6c <__libc_init_array+0xc>
 8008e8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e92:	4798      	blx	r3
 8008e94:	3501      	adds	r5, #1
 8008e96:	e7f2      	b.n	8008e7e <__libc_init_array+0x1e>
 8008e98:	0800a4fc 	.word	0x0800a4fc
 8008e9c:	0800a4fc 	.word	0x0800a4fc
 8008ea0:	0800a4fc 	.word	0x0800a4fc
 8008ea4:	0800a500 	.word	0x0800a500

08008ea8 <memcpy>:
 8008ea8:	b510      	push	{r4, lr}
 8008eaa:	1e43      	subs	r3, r0, #1
 8008eac:	440a      	add	r2, r1
 8008eae:	4291      	cmp	r1, r2
 8008eb0:	d100      	bne.n	8008eb4 <memcpy+0xc>
 8008eb2:	bd10      	pop	{r4, pc}
 8008eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ebc:	e7f7      	b.n	8008eae <memcpy+0x6>

08008ebe <memset>:
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	4402      	add	r2, r0
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d100      	bne.n	8008ec8 <memset+0xa>
 8008ec6:	4770      	bx	lr
 8008ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8008ecc:	e7f9      	b.n	8008ec2 <memset+0x4>

08008ece <__sfputc_r>:
 8008ece:	6893      	ldr	r3, [r2, #8]
 8008ed0:	b410      	push	{r4}
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	6093      	str	r3, [r2, #8]
 8008ed8:	da07      	bge.n	8008eea <__sfputc_r+0x1c>
 8008eda:	6994      	ldr	r4, [r2, #24]
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	db01      	blt.n	8008ee4 <__sfputc_r+0x16>
 8008ee0:	290a      	cmp	r1, #10
 8008ee2:	d102      	bne.n	8008eea <__sfputc_r+0x1c>
 8008ee4:	bc10      	pop	{r4}
 8008ee6:	f000 bac9 	b.w	800947c <__swbuf_r>
 8008eea:	6813      	ldr	r3, [r2, #0]
 8008eec:	1c58      	adds	r0, r3, #1
 8008eee:	6010      	str	r0, [r2, #0]
 8008ef0:	7019      	strb	r1, [r3, #0]
 8008ef2:	4608      	mov	r0, r1
 8008ef4:	bc10      	pop	{r4}
 8008ef6:	4770      	bx	lr

08008ef8 <__sfputs_r>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	4606      	mov	r6, r0
 8008efc:	460f      	mov	r7, r1
 8008efe:	4614      	mov	r4, r2
 8008f00:	18d5      	adds	r5, r2, r3
 8008f02:	42ac      	cmp	r4, r5
 8008f04:	d101      	bne.n	8008f0a <__sfputs_r+0x12>
 8008f06:	2000      	movs	r0, #0
 8008f08:	e007      	b.n	8008f1a <__sfputs_r+0x22>
 8008f0a:	463a      	mov	r2, r7
 8008f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f10:	4630      	mov	r0, r6
 8008f12:	f7ff ffdc 	bl	8008ece <__sfputc_r>
 8008f16:	1c43      	adds	r3, r0, #1
 8008f18:	d1f3      	bne.n	8008f02 <__sfputs_r+0xa>
 8008f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f1c <_vfiprintf_r>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	460c      	mov	r4, r1
 8008f22:	b09d      	sub	sp, #116	; 0x74
 8008f24:	4617      	mov	r7, r2
 8008f26:	461d      	mov	r5, r3
 8008f28:	4606      	mov	r6, r0
 8008f2a:	b118      	cbz	r0, 8008f34 <_vfiprintf_r+0x18>
 8008f2c:	6983      	ldr	r3, [r0, #24]
 8008f2e:	b90b      	cbnz	r3, 8008f34 <_vfiprintf_r+0x18>
 8008f30:	f000 fc5c 	bl	80097ec <__sinit>
 8008f34:	4b7c      	ldr	r3, [pc, #496]	; (8009128 <_vfiprintf_r+0x20c>)
 8008f36:	429c      	cmp	r4, r3
 8008f38:	d158      	bne.n	8008fec <_vfiprintf_r+0xd0>
 8008f3a:	6874      	ldr	r4, [r6, #4]
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	0718      	lsls	r0, r3, #28
 8008f40:	d55e      	bpl.n	8009000 <_vfiprintf_r+0xe4>
 8008f42:	6923      	ldr	r3, [r4, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d05b      	beq.n	8009000 <_vfiprintf_r+0xe4>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f4c:	2320      	movs	r3, #32
 8008f4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f52:	2330      	movs	r3, #48	; 0x30
 8008f54:	f04f 0b01 	mov.w	fp, #1
 8008f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f5c:	9503      	str	r5, [sp, #12]
 8008f5e:	46b8      	mov	r8, r7
 8008f60:	4645      	mov	r5, r8
 8008f62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f66:	b10b      	cbz	r3, 8008f6c <_vfiprintf_r+0x50>
 8008f68:	2b25      	cmp	r3, #37	; 0x25
 8008f6a:	d154      	bne.n	8009016 <_vfiprintf_r+0xfa>
 8008f6c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008f70:	d00b      	beq.n	8008f8a <_vfiprintf_r+0x6e>
 8008f72:	4653      	mov	r3, sl
 8008f74:	463a      	mov	r2, r7
 8008f76:	4621      	mov	r1, r4
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f7ff ffbd 	bl	8008ef8 <__sfputs_r>
 8008f7e:	3001      	adds	r0, #1
 8008f80:	f000 80c2 	beq.w	8009108 <_vfiprintf_r+0x1ec>
 8008f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f86:	4453      	add	r3, sl
 8008f88:	9309      	str	r3, [sp, #36]	; 0x24
 8008f8a:	f898 3000 	ldrb.w	r3, [r8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 80ba 	beq.w	8009108 <_vfiprintf_r+0x1ec>
 8008f94:	2300      	movs	r3, #0
 8008f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f9e:	9304      	str	r3, [sp, #16]
 8008fa0:	9307      	str	r3, [sp, #28]
 8008fa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fa6:	931a      	str	r3, [sp, #104]	; 0x68
 8008fa8:	46a8      	mov	r8, r5
 8008faa:	2205      	movs	r2, #5
 8008fac:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008fb0:	485e      	ldr	r0, [pc, #376]	; (800912c <_vfiprintf_r+0x210>)
 8008fb2:	f000 fd09 	bl	80099c8 <memchr>
 8008fb6:	9b04      	ldr	r3, [sp, #16]
 8008fb8:	bb78      	cbnz	r0, 800901a <_vfiprintf_r+0xfe>
 8008fba:	06d9      	lsls	r1, r3, #27
 8008fbc:	bf44      	itt	mi
 8008fbe:	2220      	movmi	r2, #32
 8008fc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fc4:	071a      	lsls	r2, r3, #28
 8008fc6:	bf44      	itt	mi
 8008fc8:	222b      	movmi	r2, #43	; 0x2b
 8008fca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fce:	782a      	ldrb	r2, [r5, #0]
 8008fd0:	2a2a      	cmp	r2, #42	; 0x2a
 8008fd2:	d02a      	beq.n	800902a <_vfiprintf_r+0x10e>
 8008fd4:	46a8      	mov	r8, r5
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	250a      	movs	r5, #10
 8008fda:	9a07      	ldr	r2, [sp, #28]
 8008fdc:	4641      	mov	r1, r8
 8008fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fe2:	3b30      	subs	r3, #48	; 0x30
 8008fe4:	2b09      	cmp	r3, #9
 8008fe6:	d969      	bls.n	80090bc <_vfiprintf_r+0x1a0>
 8008fe8:	b360      	cbz	r0, 8009044 <_vfiprintf_r+0x128>
 8008fea:	e024      	b.n	8009036 <_vfiprintf_r+0x11a>
 8008fec:	4b50      	ldr	r3, [pc, #320]	; (8009130 <_vfiprintf_r+0x214>)
 8008fee:	429c      	cmp	r4, r3
 8008ff0:	d101      	bne.n	8008ff6 <_vfiprintf_r+0xda>
 8008ff2:	68b4      	ldr	r4, [r6, #8]
 8008ff4:	e7a2      	b.n	8008f3c <_vfiprintf_r+0x20>
 8008ff6:	4b4f      	ldr	r3, [pc, #316]	; (8009134 <_vfiprintf_r+0x218>)
 8008ff8:	429c      	cmp	r4, r3
 8008ffa:	bf08      	it	eq
 8008ffc:	68f4      	ldreq	r4, [r6, #12]
 8008ffe:	e79d      	b.n	8008f3c <_vfiprintf_r+0x20>
 8009000:	4621      	mov	r1, r4
 8009002:	4630      	mov	r0, r6
 8009004:	f000 fa8c 	bl	8009520 <__swsetup_r>
 8009008:	2800      	cmp	r0, #0
 800900a:	d09d      	beq.n	8008f48 <_vfiprintf_r+0x2c>
 800900c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009010:	b01d      	add	sp, #116	; 0x74
 8009012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009016:	46a8      	mov	r8, r5
 8009018:	e7a2      	b.n	8008f60 <_vfiprintf_r+0x44>
 800901a:	4a44      	ldr	r2, [pc, #272]	; (800912c <_vfiprintf_r+0x210>)
 800901c:	4645      	mov	r5, r8
 800901e:	1a80      	subs	r0, r0, r2
 8009020:	fa0b f000 	lsl.w	r0, fp, r0
 8009024:	4318      	orrs	r0, r3
 8009026:	9004      	str	r0, [sp, #16]
 8009028:	e7be      	b.n	8008fa8 <_vfiprintf_r+0x8c>
 800902a:	9a03      	ldr	r2, [sp, #12]
 800902c:	1d11      	adds	r1, r2, #4
 800902e:	6812      	ldr	r2, [r2, #0]
 8009030:	9103      	str	r1, [sp, #12]
 8009032:	2a00      	cmp	r2, #0
 8009034:	db01      	blt.n	800903a <_vfiprintf_r+0x11e>
 8009036:	9207      	str	r2, [sp, #28]
 8009038:	e004      	b.n	8009044 <_vfiprintf_r+0x128>
 800903a:	4252      	negs	r2, r2
 800903c:	f043 0302 	orr.w	r3, r3, #2
 8009040:	9207      	str	r2, [sp, #28]
 8009042:	9304      	str	r3, [sp, #16]
 8009044:	f898 3000 	ldrb.w	r3, [r8]
 8009048:	2b2e      	cmp	r3, #46	; 0x2e
 800904a:	d10e      	bne.n	800906a <_vfiprintf_r+0x14e>
 800904c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009050:	2b2a      	cmp	r3, #42	; 0x2a
 8009052:	d138      	bne.n	80090c6 <_vfiprintf_r+0x1aa>
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	f108 0802 	add.w	r8, r8, #2
 800905a:	1d1a      	adds	r2, r3, #4
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	9203      	str	r2, [sp, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	bfb8      	it	lt
 8009064:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009068:	9305      	str	r3, [sp, #20]
 800906a:	4d33      	ldr	r5, [pc, #204]	; (8009138 <_vfiprintf_r+0x21c>)
 800906c:	2203      	movs	r2, #3
 800906e:	f898 1000 	ldrb.w	r1, [r8]
 8009072:	4628      	mov	r0, r5
 8009074:	f000 fca8 	bl	80099c8 <memchr>
 8009078:	b140      	cbz	r0, 800908c <_vfiprintf_r+0x170>
 800907a:	2340      	movs	r3, #64	; 0x40
 800907c:	1b40      	subs	r0, r0, r5
 800907e:	fa03 f000 	lsl.w	r0, r3, r0
 8009082:	9b04      	ldr	r3, [sp, #16]
 8009084:	f108 0801 	add.w	r8, r8, #1
 8009088:	4303      	orrs	r3, r0
 800908a:	9304      	str	r3, [sp, #16]
 800908c:	f898 1000 	ldrb.w	r1, [r8]
 8009090:	2206      	movs	r2, #6
 8009092:	482a      	ldr	r0, [pc, #168]	; (800913c <_vfiprintf_r+0x220>)
 8009094:	f108 0701 	add.w	r7, r8, #1
 8009098:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800909c:	f000 fc94 	bl	80099c8 <memchr>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d037      	beq.n	8009114 <_vfiprintf_r+0x1f8>
 80090a4:	4b26      	ldr	r3, [pc, #152]	; (8009140 <_vfiprintf_r+0x224>)
 80090a6:	bb1b      	cbnz	r3, 80090f0 <_vfiprintf_r+0x1d4>
 80090a8:	9b03      	ldr	r3, [sp, #12]
 80090aa:	3307      	adds	r3, #7
 80090ac:	f023 0307 	bic.w	r3, r3, #7
 80090b0:	3308      	adds	r3, #8
 80090b2:	9303      	str	r3, [sp, #12]
 80090b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b6:	444b      	add	r3, r9
 80090b8:	9309      	str	r3, [sp, #36]	; 0x24
 80090ba:	e750      	b.n	8008f5e <_vfiprintf_r+0x42>
 80090bc:	fb05 3202 	mla	r2, r5, r2, r3
 80090c0:	2001      	movs	r0, #1
 80090c2:	4688      	mov	r8, r1
 80090c4:	e78a      	b.n	8008fdc <_vfiprintf_r+0xc0>
 80090c6:	2300      	movs	r3, #0
 80090c8:	250a      	movs	r5, #10
 80090ca:	4619      	mov	r1, r3
 80090cc:	f108 0801 	add.w	r8, r8, #1
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	4640      	mov	r0, r8
 80090d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090d8:	3a30      	subs	r2, #48	; 0x30
 80090da:	2a09      	cmp	r2, #9
 80090dc:	d903      	bls.n	80090e6 <_vfiprintf_r+0x1ca>
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0c3      	beq.n	800906a <_vfiprintf_r+0x14e>
 80090e2:	9105      	str	r1, [sp, #20]
 80090e4:	e7c1      	b.n	800906a <_vfiprintf_r+0x14e>
 80090e6:	fb05 2101 	mla	r1, r5, r1, r2
 80090ea:	2301      	movs	r3, #1
 80090ec:	4680      	mov	r8, r0
 80090ee:	e7f0      	b.n	80090d2 <_vfiprintf_r+0x1b6>
 80090f0:	ab03      	add	r3, sp, #12
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	4622      	mov	r2, r4
 80090f6:	4b13      	ldr	r3, [pc, #76]	; (8009144 <_vfiprintf_r+0x228>)
 80090f8:	a904      	add	r1, sp, #16
 80090fa:	4630      	mov	r0, r6
 80090fc:	f3af 8000 	nop.w
 8009100:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009104:	4681      	mov	r9, r0
 8009106:	d1d5      	bne.n	80090b4 <_vfiprintf_r+0x198>
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	065b      	lsls	r3, r3, #25
 800910c:	f53f af7e 	bmi.w	800900c <_vfiprintf_r+0xf0>
 8009110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009112:	e77d      	b.n	8009010 <_vfiprintf_r+0xf4>
 8009114:	ab03      	add	r3, sp, #12
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	4622      	mov	r2, r4
 800911a:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <_vfiprintf_r+0x228>)
 800911c:	a904      	add	r1, sp, #16
 800911e:	4630      	mov	r0, r6
 8009120:	f000 f888 	bl	8009234 <_printf_i>
 8009124:	e7ec      	b.n	8009100 <_vfiprintf_r+0x1e4>
 8009126:	bf00      	nop
 8009128:	0800a4bc 	.word	0x0800a4bc
 800912c:	0800a468 	.word	0x0800a468
 8009130:	0800a4dc 	.word	0x0800a4dc
 8009134:	0800a49c 	.word	0x0800a49c
 8009138:	0800a46e 	.word	0x0800a46e
 800913c:	0800a472 	.word	0x0800a472
 8009140:	00000000 	.word	0x00000000
 8009144:	08008ef9 	.word	0x08008ef9

08009148 <_printf_common>:
 8009148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800914c:	4691      	mov	r9, r2
 800914e:	461f      	mov	r7, r3
 8009150:	688a      	ldr	r2, [r1, #8]
 8009152:	690b      	ldr	r3, [r1, #16]
 8009154:	4606      	mov	r6, r0
 8009156:	4293      	cmp	r3, r2
 8009158:	bfb8      	it	lt
 800915a:	4613      	movlt	r3, r2
 800915c:	f8c9 3000 	str.w	r3, [r9]
 8009160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009164:	460c      	mov	r4, r1
 8009166:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800916a:	b112      	cbz	r2, 8009172 <_printf_common+0x2a>
 800916c:	3301      	adds	r3, #1
 800916e:	f8c9 3000 	str.w	r3, [r9]
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	0699      	lsls	r1, r3, #26
 8009176:	bf42      	ittt	mi
 8009178:	f8d9 3000 	ldrmi.w	r3, [r9]
 800917c:	3302      	addmi	r3, #2
 800917e:	f8c9 3000 	strmi.w	r3, [r9]
 8009182:	6825      	ldr	r5, [r4, #0]
 8009184:	f015 0506 	ands.w	r5, r5, #6
 8009188:	d107      	bne.n	800919a <_printf_common+0x52>
 800918a:	f104 0a19 	add.w	sl, r4, #25
 800918e:	68e3      	ldr	r3, [r4, #12]
 8009190:	f8d9 2000 	ldr.w	r2, [r9]
 8009194:	1a9b      	subs	r3, r3, r2
 8009196:	42ab      	cmp	r3, r5
 8009198:	dc29      	bgt.n	80091ee <_printf_common+0xa6>
 800919a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800919e:	6822      	ldr	r2, [r4, #0]
 80091a0:	3300      	adds	r3, #0
 80091a2:	bf18      	it	ne
 80091a4:	2301      	movne	r3, #1
 80091a6:	0692      	lsls	r2, r2, #26
 80091a8:	d42e      	bmi.n	8009208 <_printf_common+0xc0>
 80091aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091ae:	4639      	mov	r1, r7
 80091b0:	4630      	mov	r0, r6
 80091b2:	47c0      	blx	r8
 80091b4:	3001      	adds	r0, #1
 80091b6:	d021      	beq.n	80091fc <_printf_common+0xb4>
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	68e5      	ldr	r5, [r4, #12]
 80091bc:	f003 0306 	and.w	r3, r3, #6
 80091c0:	2b04      	cmp	r3, #4
 80091c2:	bf18      	it	ne
 80091c4:	2500      	movne	r5, #0
 80091c6:	f8d9 2000 	ldr.w	r2, [r9]
 80091ca:	f04f 0900 	mov.w	r9, #0
 80091ce:	bf08      	it	eq
 80091d0:	1aad      	subeq	r5, r5, r2
 80091d2:	68a3      	ldr	r3, [r4, #8]
 80091d4:	6922      	ldr	r2, [r4, #16]
 80091d6:	bf08      	it	eq
 80091d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091dc:	4293      	cmp	r3, r2
 80091de:	bfc4      	itt	gt
 80091e0:	1a9b      	subgt	r3, r3, r2
 80091e2:	18ed      	addgt	r5, r5, r3
 80091e4:	341a      	adds	r4, #26
 80091e6:	454d      	cmp	r5, r9
 80091e8:	d11a      	bne.n	8009220 <_printf_common+0xd8>
 80091ea:	2000      	movs	r0, #0
 80091ec:	e008      	b.n	8009200 <_printf_common+0xb8>
 80091ee:	2301      	movs	r3, #1
 80091f0:	4652      	mov	r2, sl
 80091f2:	4639      	mov	r1, r7
 80091f4:	4630      	mov	r0, r6
 80091f6:	47c0      	blx	r8
 80091f8:	3001      	adds	r0, #1
 80091fa:	d103      	bne.n	8009204 <_printf_common+0xbc>
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009204:	3501      	adds	r5, #1
 8009206:	e7c2      	b.n	800918e <_printf_common+0x46>
 8009208:	2030      	movs	r0, #48	; 0x30
 800920a:	18e1      	adds	r1, r4, r3
 800920c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009210:	1c5a      	adds	r2, r3, #1
 8009212:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009216:	4422      	add	r2, r4
 8009218:	3302      	adds	r3, #2
 800921a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800921e:	e7c4      	b.n	80091aa <_printf_common+0x62>
 8009220:	2301      	movs	r3, #1
 8009222:	4622      	mov	r2, r4
 8009224:	4639      	mov	r1, r7
 8009226:	4630      	mov	r0, r6
 8009228:	47c0      	blx	r8
 800922a:	3001      	adds	r0, #1
 800922c:	d0e6      	beq.n	80091fc <_printf_common+0xb4>
 800922e:	f109 0901 	add.w	r9, r9, #1
 8009232:	e7d8      	b.n	80091e6 <_printf_common+0x9e>

08009234 <_printf_i>:
 8009234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009238:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800923c:	460c      	mov	r4, r1
 800923e:	7e09      	ldrb	r1, [r1, #24]
 8009240:	b085      	sub	sp, #20
 8009242:	296e      	cmp	r1, #110	; 0x6e
 8009244:	4617      	mov	r7, r2
 8009246:	4606      	mov	r6, r0
 8009248:	4698      	mov	r8, r3
 800924a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800924c:	f000 80b3 	beq.w	80093b6 <_printf_i+0x182>
 8009250:	d822      	bhi.n	8009298 <_printf_i+0x64>
 8009252:	2963      	cmp	r1, #99	; 0x63
 8009254:	d036      	beq.n	80092c4 <_printf_i+0x90>
 8009256:	d80a      	bhi.n	800926e <_printf_i+0x3a>
 8009258:	2900      	cmp	r1, #0
 800925a:	f000 80b9 	beq.w	80093d0 <_printf_i+0x19c>
 800925e:	2958      	cmp	r1, #88	; 0x58
 8009260:	f000 8083 	beq.w	800936a <_printf_i+0x136>
 8009264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009268:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800926c:	e032      	b.n	80092d4 <_printf_i+0xa0>
 800926e:	2964      	cmp	r1, #100	; 0x64
 8009270:	d001      	beq.n	8009276 <_printf_i+0x42>
 8009272:	2969      	cmp	r1, #105	; 0x69
 8009274:	d1f6      	bne.n	8009264 <_printf_i+0x30>
 8009276:	6820      	ldr	r0, [r4, #0]
 8009278:	6813      	ldr	r3, [r2, #0]
 800927a:	0605      	lsls	r5, r0, #24
 800927c:	f103 0104 	add.w	r1, r3, #4
 8009280:	d52a      	bpl.n	80092d8 <_printf_i+0xa4>
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6011      	str	r1, [r2, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	da03      	bge.n	8009292 <_printf_i+0x5e>
 800928a:	222d      	movs	r2, #45	; 0x2d
 800928c:	425b      	negs	r3, r3
 800928e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009292:	486f      	ldr	r0, [pc, #444]	; (8009450 <_printf_i+0x21c>)
 8009294:	220a      	movs	r2, #10
 8009296:	e039      	b.n	800930c <_printf_i+0xd8>
 8009298:	2973      	cmp	r1, #115	; 0x73
 800929a:	f000 809d 	beq.w	80093d8 <_printf_i+0x1a4>
 800929e:	d808      	bhi.n	80092b2 <_printf_i+0x7e>
 80092a0:	296f      	cmp	r1, #111	; 0x6f
 80092a2:	d020      	beq.n	80092e6 <_printf_i+0xb2>
 80092a4:	2970      	cmp	r1, #112	; 0x70
 80092a6:	d1dd      	bne.n	8009264 <_printf_i+0x30>
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	f043 0320 	orr.w	r3, r3, #32
 80092ae:	6023      	str	r3, [r4, #0]
 80092b0:	e003      	b.n	80092ba <_printf_i+0x86>
 80092b2:	2975      	cmp	r1, #117	; 0x75
 80092b4:	d017      	beq.n	80092e6 <_printf_i+0xb2>
 80092b6:	2978      	cmp	r1, #120	; 0x78
 80092b8:	d1d4      	bne.n	8009264 <_printf_i+0x30>
 80092ba:	2378      	movs	r3, #120	; 0x78
 80092bc:	4865      	ldr	r0, [pc, #404]	; (8009454 <_printf_i+0x220>)
 80092be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092c2:	e055      	b.n	8009370 <_printf_i+0x13c>
 80092c4:	6813      	ldr	r3, [r2, #0]
 80092c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092ca:	1d19      	adds	r1, r3, #4
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6011      	str	r1, [r2, #0]
 80092d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092d4:	2301      	movs	r3, #1
 80092d6:	e08c      	b.n	80093f2 <_printf_i+0x1be>
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092de:	6011      	str	r1, [r2, #0]
 80092e0:	bf18      	it	ne
 80092e2:	b21b      	sxthne	r3, r3
 80092e4:	e7cf      	b.n	8009286 <_printf_i+0x52>
 80092e6:	6813      	ldr	r3, [r2, #0]
 80092e8:	6825      	ldr	r5, [r4, #0]
 80092ea:	1d18      	adds	r0, r3, #4
 80092ec:	6010      	str	r0, [r2, #0]
 80092ee:	0628      	lsls	r0, r5, #24
 80092f0:	d501      	bpl.n	80092f6 <_printf_i+0xc2>
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	e002      	b.n	80092fc <_printf_i+0xc8>
 80092f6:	0668      	lsls	r0, r5, #25
 80092f8:	d5fb      	bpl.n	80092f2 <_printf_i+0xbe>
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	296f      	cmp	r1, #111	; 0x6f
 80092fe:	bf14      	ite	ne
 8009300:	220a      	movne	r2, #10
 8009302:	2208      	moveq	r2, #8
 8009304:	4852      	ldr	r0, [pc, #328]	; (8009450 <_printf_i+0x21c>)
 8009306:	2100      	movs	r1, #0
 8009308:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800930c:	6865      	ldr	r5, [r4, #4]
 800930e:	2d00      	cmp	r5, #0
 8009310:	60a5      	str	r5, [r4, #8]
 8009312:	f2c0 8095 	blt.w	8009440 <_printf_i+0x20c>
 8009316:	6821      	ldr	r1, [r4, #0]
 8009318:	f021 0104 	bic.w	r1, r1, #4
 800931c:	6021      	str	r1, [r4, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d13d      	bne.n	800939e <_printf_i+0x16a>
 8009322:	2d00      	cmp	r5, #0
 8009324:	f040 808e 	bne.w	8009444 <_printf_i+0x210>
 8009328:	4665      	mov	r5, ip
 800932a:	2a08      	cmp	r2, #8
 800932c:	d10b      	bne.n	8009346 <_printf_i+0x112>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	07db      	lsls	r3, r3, #31
 8009332:	d508      	bpl.n	8009346 <_printf_i+0x112>
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	6862      	ldr	r2, [r4, #4]
 8009338:	429a      	cmp	r2, r3
 800933a:	bfde      	ittt	le
 800933c:	2330      	movle	r3, #48	; 0x30
 800933e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009342:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009346:	ebac 0305 	sub.w	r3, ip, r5
 800934a:	6123      	str	r3, [r4, #16]
 800934c:	f8cd 8000 	str.w	r8, [sp]
 8009350:	463b      	mov	r3, r7
 8009352:	aa03      	add	r2, sp, #12
 8009354:	4621      	mov	r1, r4
 8009356:	4630      	mov	r0, r6
 8009358:	f7ff fef6 	bl	8009148 <_printf_common>
 800935c:	3001      	adds	r0, #1
 800935e:	d14d      	bne.n	80093fc <_printf_i+0x1c8>
 8009360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009364:	b005      	add	sp, #20
 8009366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800936a:	4839      	ldr	r0, [pc, #228]	; (8009450 <_printf_i+0x21c>)
 800936c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009370:	6813      	ldr	r3, [r2, #0]
 8009372:	6821      	ldr	r1, [r4, #0]
 8009374:	1d1d      	adds	r5, r3, #4
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6015      	str	r5, [r2, #0]
 800937a:	060a      	lsls	r2, r1, #24
 800937c:	d50b      	bpl.n	8009396 <_printf_i+0x162>
 800937e:	07ca      	lsls	r2, r1, #31
 8009380:	bf44      	itt	mi
 8009382:	f041 0120 	orrmi.w	r1, r1, #32
 8009386:	6021      	strmi	r1, [r4, #0]
 8009388:	b91b      	cbnz	r3, 8009392 <_printf_i+0x15e>
 800938a:	6822      	ldr	r2, [r4, #0]
 800938c:	f022 0220 	bic.w	r2, r2, #32
 8009390:	6022      	str	r2, [r4, #0]
 8009392:	2210      	movs	r2, #16
 8009394:	e7b7      	b.n	8009306 <_printf_i+0xd2>
 8009396:	064d      	lsls	r5, r1, #25
 8009398:	bf48      	it	mi
 800939a:	b29b      	uxthmi	r3, r3
 800939c:	e7ef      	b.n	800937e <_printf_i+0x14a>
 800939e:	4665      	mov	r5, ip
 80093a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80093a4:	fb02 3311 	mls	r3, r2, r1, r3
 80093a8:	5cc3      	ldrb	r3, [r0, r3]
 80093aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80093ae:	460b      	mov	r3, r1
 80093b0:	2900      	cmp	r1, #0
 80093b2:	d1f5      	bne.n	80093a0 <_printf_i+0x16c>
 80093b4:	e7b9      	b.n	800932a <_printf_i+0xf6>
 80093b6:	6813      	ldr	r3, [r2, #0]
 80093b8:	6825      	ldr	r5, [r4, #0]
 80093ba:	1d18      	adds	r0, r3, #4
 80093bc:	6961      	ldr	r1, [r4, #20]
 80093be:	6010      	str	r0, [r2, #0]
 80093c0:	0628      	lsls	r0, r5, #24
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	d501      	bpl.n	80093ca <_printf_i+0x196>
 80093c6:	6019      	str	r1, [r3, #0]
 80093c8:	e002      	b.n	80093d0 <_printf_i+0x19c>
 80093ca:	066a      	lsls	r2, r5, #25
 80093cc:	d5fb      	bpl.n	80093c6 <_printf_i+0x192>
 80093ce:	8019      	strh	r1, [r3, #0]
 80093d0:	2300      	movs	r3, #0
 80093d2:	4665      	mov	r5, ip
 80093d4:	6123      	str	r3, [r4, #16]
 80093d6:	e7b9      	b.n	800934c <_printf_i+0x118>
 80093d8:	6813      	ldr	r3, [r2, #0]
 80093da:	1d19      	adds	r1, r3, #4
 80093dc:	6011      	str	r1, [r2, #0]
 80093de:	681d      	ldr	r5, [r3, #0]
 80093e0:	6862      	ldr	r2, [r4, #4]
 80093e2:	2100      	movs	r1, #0
 80093e4:	4628      	mov	r0, r5
 80093e6:	f000 faef 	bl	80099c8 <memchr>
 80093ea:	b108      	cbz	r0, 80093f0 <_printf_i+0x1bc>
 80093ec:	1b40      	subs	r0, r0, r5
 80093ee:	6060      	str	r0, [r4, #4]
 80093f0:	6863      	ldr	r3, [r4, #4]
 80093f2:	6123      	str	r3, [r4, #16]
 80093f4:	2300      	movs	r3, #0
 80093f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093fa:	e7a7      	b.n	800934c <_printf_i+0x118>
 80093fc:	6923      	ldr	r3, [r4, #16]
 80093fe:	462a      	mov	r2, r5
 8009400:	4639      	mov	r1, r7
 8009402:	4630      	mov	r0, r6
 8009404:	47c0      	blx	r8
 8009406:	3001      	adds	r0, #1
 8009408:	d0aa      	beq.n	8009360 <_printf_i+0x12c>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	079b      	lsls	r3, r3, #30
 800940e:	d413      	bmi.n	8009438 <_printf_i+0x204>
 8009410:	68e0      	ldr	r0, [r4, #12]
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	4298      	cmp	r0, r3
 8009416:	bfb8      	it	lt
 8009418:	4618      	movlt	r0, r3
 800941a:	e7a3      	b.n	8009364 <_printf_i+0x130>
 800941c:	2301      	movs	r3, #1
 800941e:	464a      	mov	r2, r9
 8009420:	4639      	mov	r1, r7
 8009422:	4630      	mov	r0, r6
 8009424:	47c0      	blx	r8
 8009426:	3001      	adds	r0, #1
 8009428:	d09a      	beq.n	8009360 <_printf_i+0x12c>
 800942a:	3501      	adds	r5, #1
 800942c:	68e3      	ldr	r3, [r4, #12]
 800942e:	9a03      	ldr	r2, [sp, #12]
 8009430:	1a9b      	subs	r3, r3, r2
 8009432:	42ab      	cmp	r3, r5
 8009434:	dcf2      	bgt.n	800941c <_printf_i+0x1e8>
 8009436:	e7eb      	b.n	8009410 <_printf_i+0x1dc>
 8009438:	2500      	movs	r5, #0
 800943a:	f104 0919 	add.w	r9, r4, #25
 800943e:	e7f5      	b.n	800942c <_printf_i+0x1f8>
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1ac      	bne.n	800939e <_printf_i+0x16a>
 8009444:	7803      	ldrb	r3, [r0, #0]
 8009446:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800944a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800944e:	e76c      	b.n	800932a <_printf_i+0xf6>
 8009450:	0800a479 	.word	0x0800a479
 8009454:	0800a48a 	.word	0x0800a48a

08009458 <strncmp>:
 8009458:	b510      	push	{r4, lr}
 800945a:	b16a      	cbz	r2, 8009478 <strncmp+0x20>
 800945c:	3901      	subs	r1, #1
 800945e:	1884      	adds	r4, r0, r2
 8009460:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009464:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009468:	4293      	cmp	r3, r2
 800946a:	d103      	bne.n	8009474 <strncmp+0x1c>
 800946c:	42a0      	cmp	r0, r4
 800946e:	d001      	beq.n	8009474 <strncmp+0x1c>
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1f5      	bne.n	8009460 <strncmp+0x8>
 8009474:	1a98      	subs	r0, r3, r2
 8009476:	bd10      	pop	{r4, pc}
 8009478:	4610      	mov	r0, r2
 800947a:	e7fc      	b.n	8009476 <strncmp+0x1e>

0800947c <__swbuf_r>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	460e      	mov	r6, r1
 8009480:	4614      	mov	r4, r2
 8009482:	4605      	mov	r5, r0
 8009484:	b118      	cbz	r0, 800948e <__swbuf_r+0x12>
 8009486:	6983      	ldr	r3, [r0, #24]
 8009488:	b90b      	cbnz	r3, 800948e <__swbuf_r+0x12>
 800948a:	f000 f9af 	bl	80097ec <__sinit>
 800948e:	4b21      	ldr	r3, [pc, #132]	; (8009514 <__swbuf_r+0x98>)
 8009490:	429c      	cmp	r4, r3
 8009492:	d12a      	bne.n	80094ea <__swbuf_r+0x6e>
 8009494:	686c      	ldr	r4, [r5, #4]
 8009496:	69a3      	ldr	r3, [r4, #24]
 8009498:	60a3      	str	r3, [r4, #8]
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	071a      	lsls	r2, r3, #28
 800949e:	d52e      	bpl.n	80094fe <__swbuf_r+0x82>
 80094a0:	6923      	ldr	r3, [r4, #16]
 80094a2:	b363      	cbz	r3, 80094fe <__swbuf_r+0x82>
 80094a4:	6923      	ldr	r3, [r4, #16]
 80094a6:	6820      	ldr	r0, [r4, #0]
 80094a8:	b2f6      	uxtb	r6, r6
 80094aa:	1ac0      	subs	r0, r0, r3
 80094ac:	6963      	ldr	r3, [r4, #20]
 80094ae:	4637      	mov	r7, r6
 80094b0:	4283      	cmp	r3, r0
 80094b2:	dc04      	bgt.n	80094be <__swbuf_r+0x42>
 80094b4:	4621      	mov	r1, r4
 80094b6:	4628      	mov	r0, r5
 80094b8:	f000 f92e 	bl	8009718 <_fflush_r>
 80094bc:	bb28      	cbnz	r0, 800950a <__swbuf_r+0x8e>
 80094be:	68a3      	ldr	r3, [r4, #8]
 80094c0:	3001      	adds	r0, #1
 80094c2:	3b01      	subs	r3, #1
 80094c4:	60a3      	str	r3, [r4, #8]
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	1c5a      	adds	r2, r3, #1
 80094ca:	6022      	str	r2, [r4, #0]
 80094cc:	701e      	strb	r6, [r3, #0]
 80094ce:	6963      	ldr	r3, [r4, #20]
 80094d0:	4283      	cmp	r3, r0
 80094d2:	d004      	beq.n	80094de <__swbuf_r+0x62>
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	07db      	lsls	r3, r3, #31
 80094d8:	d519      	bpl.n	800950e <__swbuf_r+0x92>
 80094da:	2e0a      	cmp	r6, #10
 80094dc:	d117      	bne.n	800950e <__swbuf_r+0x92>
 80094de:	4621      	mov	r1, r4
 80094e0:	4628      	mov	r0, r5
 80094e2:	f000 f919 	bl	8009718 <_fflush_r>
 80094e6:	b190      	cbz	r0, 800950e <__swbuf_r+0x92>
 80094e8:	e00f      	b.n	800950a <__swbuf_r+0x8e>
 80094ea:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <__swbuf_r+0x9c>)
 80094ec:	429c      	cmp	r4, r3
 80094ee:	d101      	bne.n	80094f4 <__swbuf_r+0x78>
 80094f0:	68ac      	ldr	r4, [r5, #8]
 80094f2:	e7d0      	b.n	8009496 <__swbuf_r+0x1a>
 80094f4:	4b09      	ldr	r3, [pc, #36]	; (800951c <__swbuf_r+0xa0>)
 80094f6:	429c      	cmp	r4, r3
 80094f8:	bf08      	it	eq
 80094fa:	68ec      	ldreq	r4, [r5, #12]
 80094fc:	e7cb      	b.n	8009496 <__swbuf_r+0x1a>
 80094fe:	4621      	mov	r1, r4
 8009500:	4628      	mov	r0, r5
 8009502:	f000 f80d 	bl	8009520 <__swsetup_r>
 8009506:	2800      	cmp	r0, #0
 8009508:	d0cc      	beq.n	80094a4 <__swbuf_r+0x28>
 800950a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800950e:	4638      	mov	r0, r7
 8009510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009512:	bf00      	nop
 8009514:	0800a4bc 	.word	0x0800a4bc
 8009518:	0800a4dc 	.word	0x0800a4dc
 800951c:	0800a49c 	.word	0x0800a49c

08009520 <__swsetup_r>:
 8009520:	4b32      	ldr	r3, [pc, #200]	; (80095ec <__swsetup_r+0xcc>)
 8009522:	b570      	push	{r4, r5, r6, lr}
 8009524:	681d      	ldr	r5, [r3, #0]
 8009526:	4606      	mov	r6, r0
 8009528:	460c      	mov	r4, r1
 800952a:	b125      	cbz	r5, 8009536 <__swsetup_r+0x16>
 800952c:	69ab      	ldr	r3, [r5, #24]
 800952e:	b913      	cbnz	r3, 8009536 <__swsetup_r+0x16>
 8009530:	4628      	mov	r0, r5
 8009532:	f000 f95b 	bl	80097ec <__sinit>
 8009536:	4b2e      	ldr	r3, [pc, #184]	; (80095f0 <__swsetup_r+0xd0>)
 8009538:	429c      	cmp	r4, r3
 800953a:	d10f      	bne.n	800955c <__swsetup_r+0x3c>
 800953c:	686c      	ldr	r4, [r5, #4]
 800953e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009542:	b29a      	uxth	r2, r3
 8009544:	0715      	lsls	r5, r2, #28
 8009546:	d42c      	bmi.n	80095a2 <__swsetup_r+0x82>
 8009548:	06d0      	lsls	r0, r2, #27
 800954a:	d411      	bmi.n	8009570 <__swsetup_r+0x50>
 800954c:	2209      	movs	r2, #9
 800954e:	6032      	str	r2, [r6, #0]
 8009550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009554:	81a3      	strh	r3, [r4, #12]
 8009556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800955a:	e03e      	b.n	80095da <__swsetup_r+0xba>
 800955c:	4b25      	ldr	r3, [pc, #148]	; (80095f4 <__swsetup_r+0xd4>)
 800955e:	429c      	cmp	r4, r3
 8009560:	d101      	bne.n	8009566 <__swsetup_r+0x46>
 8009562:	68ac      	ldr	r4, [r5, #8]
 8009564:	e7eb      	b.n	800953e <__swsetup_r+0x1e>
 8009566:	4b24      	ldr	r3, [pc, #144]	; (80095f8 <__swsetup_r+0xd8>)
 8009568:	429c      	cmp	r4, r3
 800956a:	bf08      	it	eq
 800956c:	68ec      	ldreq	r4, [r5, #12]
 800956e:	e7e6      	b.n	800953e <__swsetup_r+0x1e>
 8009570:	0751      	lsls	r1, r2, #29
 8009572:	d512      	bpl.n	800959a <__swsetup_r+0x7a>
 8009574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009576:	b141      	cbz	r1, 800958a <__swsetup_r+0x6a>
 8009578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800957c:	4299      	cmp	r1, r3
 800957e:	d002      	beq.n	8009586 <__swsetup_r+0x66>
 8009580:	4630      	mov	r0, r6
 8009582:	f000 fa2f 	bl	80099e4 <_free_r>
 8009586:	2300      	movs	r3, #0
 8009588:	6363      	str	r3, [r4, #52]	; 0x34
 800958a:	89a3      	ldrh	r3, [r4, #12]
 800958c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009590:	81a3      	strh	r3, [r4, #12]
 8009592:	2300      	movs	r3, #0
 8009594:	6063      	str	r3, [r4, #4]
 8009596:	6923      	ldr	r3, [r4, #16]
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	89a3      	ldrh	r3, [r4, #12]
 800959c:	f043 0308 	orr.w	r3, r3, #8
 80095a0:	81a3      	strh	r3, [r4, #12]
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	b94b      	cbnz	r3, 80095ba <__swsetup_r+0x9a>
 80095a6:	89a3      	ldrh	r3, [r4, #12]
 80095a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095b0:	d003      	beq.n	80095ba <__swsetup_r+0x9a>
 80095b2:	4621      	mov	r1, r4
 80095b4:	4630      	mov	r0, r6
 80095b6:	f000 f9c7 	bl	8009948 <__smakebuf_r>
 80095ba:	89a2      	ldrh	r2, [r4, #12]
 80095bc:	f012 0301 	ands.w	r3, r2, #1
 80095c0:	d00c      	beq.n	80095dc <__swsetup_r+0xbc>
 80095c2:	2300      	movs	r3, #0
 80095c4:	60a3      	str	r3, [r4, #8]
 80095c6:	6963      	ldr	r3, [r4, #20]
 80095c8:	425b      	negs	r3, r3
 80095ca:	61a3      	str	r3, [r4, #24]
 80095cc:	6923      	ldr	r3, [r4, #16]
 80095ce:	b953      	cbnz	r3, 80095e6 <__swsetup_r+0xc6>
 80095d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80095d8:	d1ba      	bne.n	8009550 <__swsetup_r+0x30>
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	0792      	lsls	r2, r2, #30
 80095de:	bf58      	it	pl
 80095e0:	6963      	ldrpl	r3, [r4, #20]
 80095e2:	60a3      	str	r3, [r4, #8]
 80095e4:	e7f2      	b.n	80095cc <__swsetup_r+0xac>
 80095e6:	2000      	movs	r0, #0
 80095e8:	e7f7      	b.n	80095da <__swsetup_r+0xba>
 80095ea:	bf00      	nop
 80095ec:	20000088 	.word	0x20000088
 80095f0:	0800a4bc 	.word	0x0800a4bc
 80095f4:	0800a4dc 	.word	0x0800a4dc
 80095f8:	0800a49c 	.word	0x0800a49c

080095fc <abort>:
 80095fc:	b508      	push	{r3, lr}
 80095fe:	2006      	movs	r0, #6
 8009600:	f000 face 	bl	8009ba0 <raise>
 8009604:	2001      	movs	r0, #1
 8009606:	f7fc fa6c 	bl	8005ae2 <_exit>
	...

0800960c <__sflush_r>:
 800960c:	898a      	ldrh	r2, [r1, #12]
 800960e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009612:	4605      	mov	r5, r0
 8009614:	0710      	lsls	r0, r2, #28
 8009616:	460c      	mov	r4, r1
 8009618:	d458      	bmi.n	80096cc <__sflush_r+0xc0>
 800961a:	684b      	ldr	r3, [r1, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	dc05      	bgt.n	800962c <__sflush_r+0x20>
 8009620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009622:	2b00      	cmp	r3, #0
 8009624:	dc02      	bgt.n	800962c <__sflush_r+0x20>
 8009626:	2000      	movs	r0, #0
 8009628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800962c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800962e:	2e00      	cmp	r6, #0
 8009630:	d0f9      	beq.n	8009626 <__sflush_r+0x1a>
 8009632:	2300      	movs	r3, #0
 8009634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009638:	682f      	ldr	r7, [r5, #0]
 800963a:	6a21      	ldr	r1, [r4, #32]
 800963c:	602b      	str	r3, [r5, #0]
 800963e:	d032      	beq.n	80096a6 <__sflush_r+0x9a>
 8009640:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009642:	89a3      	ldrh	r3, [r4, #12]
 8009644:	075a      	lsls	r2, r3, #29
 8009646:	d505      	bpl.n	8009654 <__sflush_r+0x48>
 8009648:	6863      	ldr	r3, [r4, #4]
 800964a:	1ac0      	subs	r0, r0, r3
 800964c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800964e:	b10b      	cbz	r3, 8009654 <__sflush_r+0x48>
 8009650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009652:	1ac0      	subs	r0, r0, r3
 8009654:	2300      	movs	r3, #0
 8009656:	4602      	mov	r2, r0
 8009658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800965a:	6a21      	ldr	r1, [r4, #32]
 800965c:	4628      	mov	r0, r5
 800965e:	47b0      	blx	r6
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	d106      	bne.n	8009674 <__sflush_r+0x68>
 8009666:	6829      	ldr	r1, [r5, #0]
 8009668:	291d      	cmp	r1, #29
 800966a:	d848      	bhi.n	80096fe <__sflush_r+0xf2>
 800966c:	4a29      	ldr	r2, [pc, #164]	; (8009714 <__sflush_r+0x108>)
 800966e:	40ca      	lsrs	r2, r1
 8009670:	07d6      	lsls	r6, r2, #31
 8009672:	d544      	bpl.n	80096fe <__sflush_r+0xf2>
 8009674:	2200      	movs	r2, #0
 8009676:	6062      	str	r2, [r4, #4]
 8009678:	6922      	ldr	r2, [r4, #16]
 800967a:	04d9      	lsls	r1, r3, #19
 800967c:	6022      	str	r2, [r4, #0]
 800967e:	d504      	bpl.n	800968a <__sflush_r+0x7e>
 8009680:	1c42      	adds	r2, r0, #1
 8009682:	d101      	bne.n	8009688 <__sflush_r+0x7c>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b903      	cbnz	r3, 800968a <__sflush_r+0x7e>
 8009688:	6560      	str	r0, [r4, #84]	; 0x54
 800968a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800968c:	602f      	str	r7, [r5, #0]
 800968e:	2900      	cmp	r1, #0
 8009690:	d0c9      	beq.n	8009626 <__sflush_r+0x1a>
 8009692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009696:	4299      	cmp	r1, r3
 8009698:	d002      	beq.n	80096a0 <__sflush_r+0x94>
 800969a:	4628      	mov	r0, r5
 800969c:	f000 f9a2 	bl	80099e4 <_free_r>
 80096a0:	2000      	movs	r0, #0
 80096a2:	6360      	str	r0, [r4, #52]	; 0x34
 80096a4:	e7c0      	b.n	8009628 <__sflush_r+0x1c>
 80096a6:	2301      	movs	r3, #1
 80096a8:	4628      	mov	r0, r5
 80096aa:	47b0      	blx	r6
 80096ac:	1c41      	adds	r1, r0, #1
 80096ae:	d1c8      	bne.n	8009642 <__sflush_r+0x36>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0c5      	beq.n	8009642 <__sflush_r+0x36>
 80096b6:	2b1d      	cmp	r3, #29
 80096b8:	d001      	beq.n	80096be <__sflush_r+0xb2>
 80096ba:	2b16      	cmp	r3, #22
 80096bc:	d101      	bne.n	80096c2 <__sflush_r+0xb6>
 80096be:	602f      	str	r7, [r5, #0]
 80096c0:	e7b1      	b.n	8009626 <__sflush_r+0x1a>
 80096c2:	89a3      	ldrh	r3, [r4, #12]
 80096c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c8:	81a3      	strh	r3, [r4, #12]
 80096ca:	e7ad      	b.n	8009628 <__sflush_r+0x1c>
 80096cc:	690f      	ldr	r7, [r1, #16]
 80096ce:	2f00      	cmp	r7, #0
 80096d0:	d0a9      	beq.n	8009626 <__sflush_r+0x1a>
 80096d2:	0793      	lsls	r3, r2, #30
 80096d4:	bf18      	it	ne
 80096d6:	2300      	movne	r3, #0
 80096d8:	680e      	ldr	r6, [r1, #0]
 80096da:	bf08      	it	eq
 80096dc:	694b      	ldreq	r3, [r1, #20]
 80096de:	eba6 0807 	sub.w	r8, r6, r7
 80096e2:	600f      	str	r7, [r1, #0]
 80096e4:	608b      	str	r3, [r1, #8]
 80096e6:	f1b8 0f00 	cmp.w	r8, #0
 80096ea:	dd9c      	ble.n	8009626 <__sflush_r+0x1a>
 80096ec:	4643      	mov	r3, r8
 80096ee:	463a      	mov	r2, r7
 80096f0:	6a21      	ldr	r1, [r4, #32]
 80096f2:	4628      	mov	r0, r5
 80096f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096f6:	47b0      	blx	r6
 80096f8:	2800      	cmp	r0, #0
 80096fa:	dc06      	bgt.n	800970a <__sflush_r+0xfe>
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009708:	e78e      	b.n	8009628 <__sflush_r+0x1c>
 800970a:	4407      	add	r7, r0
 800970c:	eba8 0800 	sub.w	r8, r8, r0
 8009710:	e7e9      	b.n	80096e6 <__sflush_r+0xda>
 8009712:	bf00      	nop
 8009714:	20400001 	.word	0x20400001

08009718 <_fflush_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	690b      	ldr	r3, [r1, #16]
 800971c:	4605      	mov	r5, r0
 800971e:	460c      	mov	r4, r1
 8009720:	b1db      	cbz	r3, 800975a <_fflush_r+0x42>
 8009722:	b118      	cbz	r0, 800972c <_fflush_r+0x14>
 8009724:	6983      	ldr	r3, [r0, #24]
 8009726:	b90b      	cbnz	r3, 800972c <_fflush_r+0x14>
 8009728:	f000 f860 	bl	80097ec <__sinit>
 800972c:	4b0c      	ldr	r3, [pc, #48]	; (8009760 <_fflush_r+0x48>)
 800972e:	429c      	cmp	r4, r3
 8009730:	d109      	bne.n	8009746 <_fflush_r+0x2e>
 8009732:	686c      	ldr	r4, [r5, #4]
 8009734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009738:	b17b      	cbz	r3, 800975a <_fflush_r+0x42>
 800973a:	4621      	mov	r1, r4
 800973c:	4628      	mov	r0, r5
 800973e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009742:	f7ff bf63 	b.w	800960c <__sflush_r>
 8009746:	4b07      	ldr	r3, [pc, #28]	; (8009764 <_fflush_r+0x4c>)
 8009748:	429c      	cmp	r4, r3
 800974a:	d101      	bne.n	8009750 <_fflush_r+0x38>
 800974c:	68ac      	ldr	r4, [r5, #8]
 800974e:	e7f1      	b.n	8009734 <_fflush_r+0x1c>
 8009750:	4b05      	ldr	r3, [pc, #20]	; (8009768 <_fflush_r+0x50>)
 8009752:	429c      	cmp	r4, r3
 8009754:	bf08      	it	eq
 8009756:	68ec      	ldreq	r4, [r5, #12]
 8009758:	e7ec      	b.n	8009734 <_fflush_r+0x1c>
 800975a:	2000      	movs	r0, #0
 800975c:	bd38      	pop	{r3, r4, r5, pc}
 800975e:	bf00      	nop
 8009760:	0800a4bc 	.word	0x0800a4bc
 8009764:	0800a4dc 	.word	0x0800a4dc
 8009768:	0800a49c 	.word	0x0800a49c

0800976c <std>:
 800976c:	2300      	movs	r3, #0
 800976e:	b510      	push	{r4, lr}
 8009770:	4604      	mov	r4, r0
 8009772:	e9c0 3300 	strd	r3, r3, [r0]
 8009776:	6083      	str	r3, [r0, #8]
 8009778:	8181      	strh	r1, [r0, #12]
 800977a:	6643      	str	r3, [r0, #100]	; 0x64
 800977c:	81c2      	strh	r2, [r0, #14]
 800977e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009782:	6183      	str	r3, [r0, #24]
 8009784:	4619      	mov	r1, r3
 8009786:	2208      	movs	r2, #8
 8009788:	305c      	adds	r0, #92	; 0x5c
 800978a:	f7ff fb98 	bl	8008ebe <memset>
 800978e:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <std+0x38>)
 8009790:	6224      	str	r4, [r4, #32]
 8009792:	6263      	str	r3, [r4, #36]	; 0x24
 8009794:	4b04      	ldr	r3, [pc, #16]	; (80097a8 <std+0x3c>)
 8009796:	62a3      	str	r3, [r4, #40]	; 0x28
 8009798:	4b04      	ldr	r3, [pc, #16]	; (80097ac <std+0x40>)
 800979a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800979c:	4b04      	ldr	r3, [pc, #16]	; (80097b0 <std+0x44>)
 800979e:	6323      	str	r3, [r4, #48]	; 0x30
 80097a0:	bd10      	pop	{r4, pc}
 80097a2:	bf00      	nop
 80097a4:	08009bd9 	.word	0x08009bd9
 80097a8:	08009bfb 	.word	0x08009bfb
 80097ac:	08009c33 	.word	0x08009c33
 80097b0:	08009c57 	.word	0x08009c57

080097b4 <_cleanup_r>:
 80097b4:	4901      	ldr	r1, [pc, #4]	; (80097bc <_cleanup_r+0x8>)
 80097b6:	f000 b885 	b.w	80098c4 <_fwalk_reent>
 80097ba:	bf00      	nop
 80097bc:	08009719 	.word	0x08009719

080097c0 <__sfmoreglue>:
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	2568      	movs	r5, #104	; 0x68
 80097c4:	1e4a      	subs	r2, r1, #1
 80097c6:	4355      	muls	r5, r2
 80097c8:	460e      	mov	r6, r1
 80097ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097ce:	f000 f955 	bl	8009a7c <_malloc_r>
 80097d2:	4604      	mov	r4, r0
 80097d4:	b140      	cbz	r0, 80097e8 <__sfmoreglue+0x28>
 80097d6:	2100      	movs	r1, #0
 80097d8:	e9c0 1600 	strd	r1, r6, [r0]
 80097dc:	300c      	adds	r0, #12
 80097de:	60a0      	str	r0, [r4, #8]
 80097e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097e4:	f7ff fb6b 	bl	8008ebe <memset>
 80097e8:	4620      	mov	r0, r4
 80097ea:	bd70      	pop	{r4, r5, r6, pc}

080097ec <__sinit>:
 80097ec:	6983      	ldr	r3, [r0, #24]
 80097ee:	b510      	push	{r4, lr}
 80097f0:	4604      	mov	r4, r0
 80097f2:	bb33      	cbnz	r3, 8009842 <__sinit+0x56>
 80097f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80097f8:	6503      	str	r3, [r0, #80]	; 0x50
 80097fa:	4b12      	ldr	r3, [pc, #72]	; (8009844 <__sinit+0x58>)
 80097fc:	4a12      	ldr	r2, [pc, #72]	; (8009848 <__sinit+0x5c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6282      	str	r2, [r0, #40]	; 0x28
 8009802:	4298      	cmp	r0, r3
 8009804:	bf04      	itt	eq
 8009806:	2301      	moveq	r3, #1
 8009808:	6183      	streq	r3, [r0, #24]
 800980a:	f000 f81f 	bl	800984c <__sfp>
 800980e:	6060      	str	r0, [r4, #4]
 8009810:	4620      	mov	r0, r4
 8009812:	f000 f81b 	bl	800984c <__sfp>
 8009816:	60a0      	str	r0, [r4, #8]
 8009818:	4620      	mov	r0, r4
 800981a:	f000 f817 	bl	800984c <__sfp>
 800981e:	2200      	movs	r2, #0
 8009820:	60e0      	str	r0, [r4, #12]
 8009822:	2104      	movs	r1, #4
 8009824:	6860      	ldr	r0, [r4, #4]
 8009826:	f7ff ffa1 	bl	800976c <std>
 800982a:	2201      	movs	r2, #1
 800982c:	2109      	movs	r1, #9
 800982e:	68a0      	ldr	r0, [r4, #8]
 8009830:	f7ff ff9c 	bl	800976c <std>
 8009834:	2202      	movs	r2, #2
 8009836:	2112      	movs	r1, #18
 8009838:	68e0      	ldr	r0, [r4, #12]
 800983a:	f7ff ff97 	bl	800976c <std>
 800983e:	2301      	movs	r3, #1
 8009840:	61a3      	str	r3, [r4, #24]
 8009842:	bd10      	pop	{r4, pc}
 8009844:	0800a464 	.word	0x0800a464
 8009848:	080097b5 	.word	0x080097b5

0800984c <__sfp>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	4b1b      	ldr	r3, [pc, #108]	; (80098bc <__sfp+0x70>)
 8009850:	4607      	mov	r7, r0
 8009852:	681e      	ldr	r6, [r3, #0]
 8009854:	69b3      	ldr	r3, [r6, #24]
 8009856:	b913      	cbnz	r3, 800985e <__sfp+0x12>
 8009858:	4630      	mov	r0, r6
 800985a:	f7ff ffc7 	bl	80097ec <__sinit>
 800985e:	3648      	adds	r6, #72	; 0x48
 8009860:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009864:	3b01      	subs	r3, #1
 8009866:	d503      	bpl.n	8009870 <__sfp+0x24>
 8009868:	6833      	ldr	r3, [r6, #0]
 800986a:	b133      	cbz	r3, 800987a <__sfp+0x2e>
 800986c:	6836      	ldr	r6, [r6, #0]
 800986e:	e7f7      	b.n	8009860 <__sfp+0x14>
 8009870:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009874:	b16d      	cbz	r5, 8009892 <__sfp+0x46>
 8009876:	3468      	adds	r4, #104	; 0x68
 8009878:	e7f4      	b.n	8009864 <__sfp+0x18>
 800987a:	2104      	movs	r1, #4
 800987c:	4638      	mov	r0, r7
 800987e:	f7ff ff9f 	bl	80097c0 <__sfmoreglue>
 8009882:	6030      	str	r0, [r6, #0]
 8009884:	2800      	cmp	r0, #0
 8009886:	d1f1      	bne.n	800986c <__sfp+0x20>
 8009888:	230c      	movs	r3, #12
 800988a:	4604      	mov	r4, r0
 800988c:	603b      	str	r3, [r7, #0]
 800988e:	4620      	mov	r0, r4
 8009890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009892:	4b0b      	ldr	r3, [pc, #44]	; (80098c0 <__sfp+0x74>)
 8009894:	6665      	str	r5, [r4, #100]	; 0x64
 8009896:	e9c4 5500 	strd	r5, r5, [r4]
 800989a:	60a5      	str	r5, [r4, #8]
 800989c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80098a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80098a4:	2208      	movs	r2, #8
 80098a6:	4629      	mov	r1, r5
 80098a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098ac:	f7ff fb07 	bl	8008ebe <memset>
 80098b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098b8:	e7e9      	b.n	800988e <__sfp+0x42>
 80098ba:	bf00      	nop
 80098bc:	0800a464 	.word	0x0800a464
 80098c0:	ffff0001 	.word	0xffff0001

080098c4 <_fwalk_reent>:
 80098c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c8:	4680      	mov	r8, r0
 80098ca:	4689      	mov	r9, r1
 80098cc:	2600      	movs	r6, #0
 80098ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098d2:	b914      	cbnz	r4, 80098da <_fwalk_reent+0x16>
 80098d4:	4630      	mov	r0, r6
 80098d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80098de:	3f01      	subs	r7, #1
 80098e0:	d501      	bpl.n	80098e6 <_fwalk_reent+0x22>
 80098e2:	6824      	ldr	r4, [r4, #0]
 80098e4:	e7f5      	b.n	80098d2 <_fwalk_reent+0xe>
 80098e6:	89ab      	ldrh	r3, [r5, #12]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d907      	bls.n	80098fc <_fwalk_reent+0x38>
 80098ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098f0:	3301      	adds	r3, #1
 80098f2:	d003      	beq.n	80098fc <_fwalk_reent+0x38>
 80098f4:	4629      	mov	r1, r5
 80098f6:	4640      	mov	r0, r8
 80098f8:	47c8      	blx	r9
 80098fa:	4306      	orrs	r6, r0
 80098fc:	3568      	adds	r5, #104	; 0x68
 80098fe:	e7ee      	b.n	80098de <_fwalk_reent+0x1a>

08009900 <__swhatbuf_r>:
 8009900:	b570      	push	{r4, r5, r6, lr}
 8009902:	460e      	mov	r6, r1
 8009904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009908:	b096      	sub	sp, #88	; 0x58
 800990a:	2900      	cmp	r1, #0
 800990c:	4614      	mov	r4, r2
 800990e:	461d      	mov	r5, r3
 8009910:	da07      	bge.n	8009922 <__swhatbuf_r+0x22>
 8009912:	2300      	movs	r3, #0
 8009914:	602b      	str	r3, [r5, #0]
 8009916:	89b3      	ldrh	r3, [r6, #12]
 8009918:	061a      	lsls	r2, r3, #24
 800991a:	d410      	bmi.n	800993e <__swhatbuf_r+0x3e>
 800991c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009920:	e00e      	b.n	8009940 <__swhatbuf_r+0x40>
 8009922:	466a      	mov	r2, sp
 8009924:	f000 f9be 	bl	8009ca4 <_fstat_r>
 8009928:	2800      	cmp	r0, #0
 800992a:	dbf2      	blt.n	8009912 <__swhatbuf_r+0x12>
 800992c:	9a01      	ldr	r2, [sp, #4]
 800992e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009932:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009936:	425a      	negs	r2, r3
 8009938:	415a      	adcs	r2, r3
 800993a:	602a      	str	r2, [r5, #0]
 800993c:	e7ee      	b.n	800991c <__swhatbuf_r+0x1c>
 800993e:	2340      	movs	r3, #64	; 0x40
 8009940:	2000      	movs	r0, #0
 8009942:	6023      	str	r3, [r4, #0]
 8009944:	b016      	add	sp, #88	; 0x58
 8009946:	bd70      	pop	{r4, r5, r6, pc}

08009948 <__smakebuf_r>:
 8009948:	898b      	ldrh	r3, [r1, #12]
 800994a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800994c:	079d      	lsls	r5, r3, #30
 800994e:	4606      	mov	r6, r0
 8009950:	460c      	mov	r4, r1
 8009952:	d507      	bpl.n	8009964 <__smakebuf_r+0x1c>
 8009954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	6123      	str	r3, [r4, #16]
 800995c:	2301      	movs	r3, #1
 800995e:	6163      	str	r3, [r4, #20]
 8009960:	b002      	add	sp, #8
 8009962:	bd70      	pop	{r4, r5, r6, pc}
 8009964:	ab01      	add	r3, sp, #4
 8009966:	466a      	mov	r2, sp
 8009968:	f7ff ffca 	bl	8009900 <__swhatbuf_r>
 800996c:	9900      	ldr	r1, [sp, #0]
 800996e:	4605      	mov	r5, r0
 8009970:	4630      	mov	r0, r6
 8009972:	f000 f883 	bl	8009a7c <_malloc_r>
 8009976:	b948      	cbnz	r0, 800998c <__smakebuf_r+0x44>
 8009978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800997c:	059a      	lsls	r2, r3, #22
 800997e:	d4ef      	bmi.n	8009960 <__smakebuf_r+0x18>
 8009980:	f023 0303 	bic.w	r3, r3, #3
 8009984:	f043 0302 	orr.w	r3, r3, #2
 8009988:	81a3      	strh	r3, [r4, #12]
 800998a:	e7e3      	b.n	8009954 <__smakebuf_r+0xc>
 800998c:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <__smakebuf_r+0x7c>)
 800998e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	6020      	str	r0, [r4, #0]
 8009994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	9b00      	ldr	r3, [sp, #0]
 800999c:	6120      	str	r0, [r4, #16]
 800999e:	6163      	str	r3, [r4, #20]
 80099a0:	9b01      	ldr	r3, [sp, #4]
 80099a2:	b15b      	cbz	r3, 80099bc <__smakebuf_r+0x74>
 80099a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a8:	4630      	mov	r0, r6
 80099aa:	f000 f98d 	bl	8009cc8 <_isatty_r>
 80099ae:	b128      	cbz	r0, 80099bc <__smakebuf_r+0x74>
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	f023 0303 	bic.w	r3, r3, #3
 80099b6:	f043 0301 	orr.w	r3, r3, #1
 80099ba:	81a3      	strh	r3, [r4, #12]
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	431d      	orrs	r5, r3
 80099c0:	81a5      	strh	r5, [r4, #12]
 80099c2:	e7cd      	b.n	8009960 <__smakebuf_r+0x18>
 80099c4:	080097b5 	.word	0x080097b5

080099c8 <memchr>:
 80099c8:	b510      	push	{r4, lr}
 80099ca:	b2c9      	uxtb	r1, r1
 80099cc:	4402      	add	r2, r0
 80099ce:	4290      	cmp	r0, r2
 80099d0:	4603      	mov	r3, r0
 80099d2:	d101      	bne.n	80099d8 <memchr+0x10>
 80099d4:	2300      	movs	r3, #0
 80099d6:	e003      	b.n	80099e0 <memchr+0x18>
 80099d8:	781c      	ldrb	r4, [r3, #0]
 80099da:	3001      	adds	r0, #1
 80099dc:	428c      	cmp	r4, r1
 80099de:	d1f6      	bne.n	80099ce <memchr+0x6>
 80099e0:	4618      	mov	r0, r3
 80099e2:	bd10      	pop	{r4, pc}

080099e4 <_free_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4605      	mov	r5, r0
 80099e8:	2900      	cmp	r1, #0
 80099ea:	d043      	beq.n	8009a74 <_free_r+0x90>
 80099ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f0:	1f0c      	subs	r4, r1, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	bfb8      	it	lt
 80099f6:	18e4      	addlt	r4, r4, r3
 80099f8:	f000 f988 	bl	8009d0c <__malloc_lock>
 80099fc:	4a1e      	ldr	r2, [pc, #120]	; (8009a78 <_free_r+0x94>)
 80099fe:	6813      	ldr	r3, [r2, #0]
 8009a00:	4610      	mov	r0, r2
 8009a02:	b933      	cbnz	r3, 8009a12 <_free_r+0x2e>
 8009a04:	6063      	str	r3, [r4, #4]
 8009a06:	6014      	str	r4, [r2, #0]
 8009a08:	4628      	mov	r0, r5
 8009a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a0e:	f000 b97e 	b.w	8009d0e <__malloc_unlock>
 8009a12:	42a3      	cmp	r3, r4
 8009a14:	d90b      	bls.n	8009a2e <_free_r+0x4a>
 8009a16:	6821      	ldr	r1, [r4, #0]
 8009a18:	1862      	adds	r2, r4, r1
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	bf01      	itttt	eq
 8009a1e:	681a      	ldreq	r2, [r3, #0]
 8009a20:	685b      	ldreq	r3, [r3, #4]
 8009a22:	1852      	addeq	r2, r2, r1
 8009a24:	6022      	streq	r2, [r4, #0]
 8009a26:	6063      	str	r3, [r4, #4]
 8009a28:	6004      	str	r4, [r0, #0]
 8009a2a:	e7ed      	b.n	8009a08 <_free_r+0x24>
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	b10a      	cbz	r2, 8009a36 <_free_r+0x52>
 8009a32:	42a2      	cmp	r2, r4
 8009a34:	d9fa      	bls.n	8009a2c <_free_r+0x48>
 8009a36:	6819      	ldr	r1, [r3, #0]
 8009a38:	1858      	adds	r0, r3, r1
 8009a3a:	42a0      	cmp	r0, r4
 8009a3c:	d10b      	bne.n	8009a56 <_free_r+0x72>
 8009a3e:	6820      	ldr	r0, [r4, #0]
 8009a40:	4401      	add	r1, r0
 8009a42:	1858      	adds	r0, r3, r1
 8009a44:	4282      	cmp	r2, r0
 8009a46:	6019      	str	r1, [r3, #0]
 8009a48:	d1de      	bne.n	8009a08 <_free_r+0x24>
 8009a4a:	6810      	ldr	r0, [r2, #0]
 8009a4c:	6852      	ldr	r2, [r2, #4]
 8009a4e:	4401      	add	r1, r0
 8009a50:	6019      	str	r1, [r3, #0]
 8009a52:	605a      	str	r2, [r3, #4]
 8009a54:	e7d8      	b.n	8009a08 <_free_r+0x24>
 8009a56:	d902      	bls.n	8009a5e <_free_r+0x7a>
 8009a58:	230c      	movs	r3, #12
 8009a5a:	602b      	str	r3, [r5, #0]
 8009a5c:	e7d4      	b.n	8009a08 <_free_r+0x24>
 8009a5e:	6820      	ldr	r0, [r4, #0]
 8009a60:	1821      	adds	r1, r4, r0
 8009a62:	428a      	cmp	r2, r1
 8009a64:	bf01      	itttt	eq
 8009a66:	6811      	ldreq	r1, [r2, #0]
 8009a68:	6852      	ldreq	r2, [r2, #4]
 8009a6a:	1809      	addeq	r1, r1, r0
 8009a6c:	6021      	streq	r1, [r4, #0]
 8009a6e:	6062      	str	r2, [r4, #4]
 8009a70:	605c      	str	r4, [r3, #4]
 8009a72:	e7c9      	b.n	8009a08 <_free_r+0x24>
 8009a74:	bd38      	pop	{r3, r4, r5, pc}
 8009a76:	bf00      	nop
 8009a78:	20001e6c 	.word	0x20001e6c

08009a7c <_malloc_r>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	1ccd      	adds	r5, r1, #3
 8009a80:	f025 0503 	bic.w	r5, r5, #3
 8009a84:	3508      	adds	r5, #8
 8009a86:	2d0c      	cmp	r5, #12
 8009a88:	bf38      	it	cc
 8009a8a:	250c      	movcc	r5, #12
 8009a8c:	2d00      	cmp	r5, #0
 8009a8e:	4606      	mov	r6, r0
 8009a90:	db01      	blt.n	8009a96 <_malloc_r+0x1a>
 8009a92:	42a9      	cmp	r1, r5
 8009a94:	d903      	bls.n	8009a9e <_malloc_r+0x22>
 8009a96:	230c      	movs	r3, #12
 8009a98:	6033      	str	r3, [r6, #0]
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
 8009a9e:	f000 f935 	bl	8009d0c <__malloc_lock>
 8009aa2:	4a21      	ldr	r2, [pc, #132]	; (8009b28 <_malloc_r+0xac>)
 8009aa4:	6814      	ldr	r4, [r2, #0]
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	b991      	cbnz	r1, 8009ad0 <_malloc_r+0x54>
 8009aaa:	4c20      	ldr	r4, [pc, #128]	; (8009b2c <_malloc_r+0xb0>)
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	b91b      	cbnz	r3, 8009ab8 <_malloc_r+0x3c>
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f000 f83d 	bl	8009b30 <_sbrk_r>
 8009ab6:	6020      	str	r0, [r4, #0]
 8009ab8:	4629      	mov	r1, r5
 8009aba:	4630      	mov	r0, r6
 8009abc:	f000 f838 	bl	8009b30 <_sbrk_r>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d124      	bne.n	8009b0e <_malloc_r+0x92>
 8009ac4:	230c      	movs	r3, #12
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	6033      	str	r3, [r6, #0]
 8009aca:	f000 f920 	bl	8009d0e <__malloc_unlock>
 8009ace:	e7e4      	b.n	8009a9a <_malloc_r+0x1e>
 8009ad0:	680b      	ldr	r3, [r1, #0]
 8009ad2:	1b5b      	subs	r3, r3, r5
 8009ad4:	d418      	bmi.n	8009b08 <_malloc_r+0x8c>
 8009ad6:	2b0b      	cmp	r3, #11
 8009ad8:	d90f      	bls.n	8009afa <_malloc_r+0x7e>
 8009ada:	600b      	str	r3, [r1, #0]
 8009adc:	18cc      	adds	r4, r1, r3
 8009ade:	50cd      	str	r5, [r1, r3]
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f000 f914 	bl	8009d0e <__malloc_unlock>
 8009ae6:	f104 000b 	add.w	r0, r4, #11
 8009aea:	1d23      	adds	r3, r4, #4
 8009aec:	f020 0007 	bic.w	r0, r0, #7
 8009af0:	1ac3      	subs	r3, r0, r3
 8009af2:	d0d3      	beq.n	8009a9c <_malloc_r+0x20>
 8009af4:	425a      	negs	r2, r3
 8009af6:	50e2      	str	r2, [r4, r3]
 8009af8:	e7d0      	b.n	8009a9c <_malloc_r+0x20>
 8009afa:	684b      	ldr	r3, [r1, #4]
 8009afc:	428c      	cmp	r4, r1
 8009afe:	bf16      	itet	ne
 8009b00:	6063      	strne	r3, [r4, #4]
 8009b02:	6013      	streq	r3, [r2, #0]
 8009b04:	460c      	movne	r4, r1
 8009b06:	e7eb      	b.n	8009ae0 <_malloc_r+0x64>
 8009b08:	460c      	mov	r4, r1
 8009b0a:	6849      	ldr	r1, [r1, #4]
 8009b0c:	e7cc      	b.n	8009aa8 <_malloc_r+0x2c>
 8009b0e:	1cc4      	adds	r4, r0, #3
 8009b10:	f024 0403 	bic.w	r4, r4, #3
 8009b14:	42a0      	cmp	r0, r4
 8009b16:	d005      	beq.n	8009b24 <_malloc_r+0xa8>
 8009b18:	1a21      	subs	r1, r4, r0
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f000 f808 	bl	8009b30 <_sbrk_r>
 8009b20:	3001      	adds	r0, #1
 8009b22:	d0cf      	beq.n	8009ac4 <_malloc_r+0x48>
 8009b24:	6025      	str	r5, [r4, #0]
 8009b26:	e7db      	b.n	8009ae0 <_malloc_r+0x64>
 8009b28:	20001e6c 	.word	0x20001e6c
 8009b2c:	20001e70 	.word	0x20001e70

08009b30 <_sbrk_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	2300      	movs	r3, #0
 8009b34:	4c05      	ldr	r4, [pc, #20]	; (8009b4c <_sbrk_r+0x1c>)
 8009b36:	4605      	mov	r5, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	6023      	str	r3, [r4, #0]
 8009b3c:	f7fc f844 	bl	8005bc8 <_sbrk>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_sbrk_r+0x1a>
 8009b44:	6823      	ldr	r3, [r4, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_sbrk_r+0x1a>
 8009b48:	602b      	str	r3, [r5, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	20001f84 	.word	0x20001f84

08009b50 <_raise_r>:
 8009b50:	291f      	cmp	r1, #31
 8009b52:	b538      	push	{r3, r4, r5, lr}
 8009b54:	4604      	mov	r4, r0
 8009b56:	460d      	mov	r5, r1
 8009b58:	d904      	bls.n	8009b64 <_raise_r+0x14>
 8009b5a:	2316      	movs	r3, #22
 8009b5c:	6003      	str	r3, [r0, #0]
 8009b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b62:	bd38      	pop	{r3, r4, r5, pc}
 8009b64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b66:	b112      	cbz	r2, 8009b6e <_raise_r+0x1e>
 8009b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b6c:	b94b      	cbnz	r3, 8009b82 <_raise_r+0x32>
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f000 f830 	bl	8009bd4 <_getpid_r>
 8009b74:	462a      	mov	r2, r5
 8009b76:	4601      	mov	r1, r0
 8009b78:	4620      	mov	r0, r4
 8009b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b7e:	f000 b817 	b.w	8009bb0 <_kill_r>
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d00a      	beq.n	8009b9c <_raise_r+0x4c>
 8009b86:	1c59      	adds	r1, r3, #1
 8009b88:	d103      	bne.n	8009b92 <_raise_r+0x42>
 8009b8a:	2316      	movs	r3, #22
 8009b8c:	6003      	str	r3, [r0, #0]
 8009b8e:	2001      	movs	r0, #1
 8009b90:	e7e7      	b.n	8009b62 <_raise_r+0x12>
 8009b92:	2400      	movs	r4, #0
 8009b94:	4628      	mov	r0, r5
 8009b96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b9a:	4798      	blx	r3
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	e7e0      	b.n	8009b62 <_raise_r+0x12>

08009ba0 <raise>:
 8009ba0:	4b02      	ldr	r3, [pc, #8]	; (8009bac <raise+0xc>)
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	6818      	ldr	r0, [r3, #0]
 8009ba6:	f7ff bfd3 	b.w	8009b50 <_raise_r>
 8009baa:	bf00      	nop
 8009bac:	20000088 	.word	0x20000088

08009bb0 <_kill_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	4c06      	ldr	r4, [pc, #24]	; (8009bd0 <_kill_r+0x20>)
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	4608      	mov	r0, r1
 8009bba:	4611      	mov	r1, r2
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	f7fb ff80 	bl	8005ac2 <_kill>
 8009bc2:	1c43      	adds	r3, r0, #1
 8009bc4:	d102      	bne.n	8009bcc <_kill_r+0x1c>
 8009bc6:	6823      	ldr	r3, [r4, #0]
 8009bc8:	b103      	cbz	r3, 8009bcc <_kill_r+0x1c>
 8009bca:	602b      	str	r3, [r5, #0]
 8009bcc:	bd38      	pop	{r3, r4, r5, pc}
 8009bce:	bf00      	nop
 8009bd0:	20001f84 	.word	0x20001f84

08009bd4 <_getpid_r>:
 8009bd4:	f7fb bf6e 	b.w	8005ab4 <_getpid>

08009bd8 <__sread>:
 8009bd8:	b510      	push	{r4, lr}
 8009bda:	460c      	mov	r4, r1
 8009bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be0:	f000 f896 	bl	8009d10 <_read_r>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	bfab      	itete	ge
 8009be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bea:	89a3      	ldrhlt	r3, [r4, #12]
 8009bec:	181b      	addge	r3, r3, r0
 8009bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bf2:	bfac      	ite	ge
 8009bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bf6:	81a3      	strhlt	r3, [r4, #12]
 8009bf8:	bd10      	pop	{r4, pc}

08009bfa <__swrite>:
 8009bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bfe:	461f      	mov	r7, r3
 8009c00:	898b      	ldrh	r3, [r1, #12]
 8009c02:	4605      	mov	r5, r0
 8009c04:	05db      	lsls	r3, r3, #23
 8009c06:	460c      	mov	r4, r1
 8009c08:	4616      	mov	r6, r2
 8009c0a:	d505      	bpl.n	8009c18 <__swrite+0x1e>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c14:	f000 f868 	bl	8009ce8 <_lseek_r>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	4632      	mov	r2, r6
 8009c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c20:	81a3      	strh	r3, [r4, #12]
 8009c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c26:	463b      	mov	r3, r7
 8009c28:	4628      	mov	r0, r5
 8009c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2e:	f000 b817 	b.w	8009c60 <_write_r>

08009c32 <__sseek>:
 8009c32:	b510      	push	{r4, lr}
 8009c34:	460c      	mov	r4, r1
 8009c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c3a:	f000 f855 	bl	8009ce8 <_lseek_r>
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	bf15      	itete	ne
 8009c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c4e:	81a3      	strheq	r3, [r4, #12]
 8009c50:	bf18      	it	ne
 8009c52:	81a3      	strhne	r3, [r4, #12]
 8009c54:	bd10      	pop	{r4, pc}

08009c56 <__sclose>:
 8009c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c5a:	f000 b813 	b.w	8009c84 <_close_r>
	...

08009c60 <_write_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4605      	mov	r5, r0
 8009c64:	4608      	mov	r0, r1
 8009c66:	4611      	mov	r1, r2
 8009c68:	2200      	movs	r2, #0
 8009c6a:	4c05      	ldr	r4, [pc, #20]	; (8009c80 <_write_r+0x20>)
 8009c6c:	6022      	str	r2, [r4, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	f7fb ff5e 	bl	8005b30 <_write>
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	d102      	bne.n	8009c7e <_write_r+0x1e>
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	b103      	cbz	r3, 8009c7e <_write_r+0x1e>
 8009c7c:	602b      	str	r3, [r5, #0]
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	20001f84 	.word	0x20001f84

08009c84 <_close_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	2300      	movs	r3, #0
 8009c88:	4c05      	ldr	r4, [pc, #20]	; (8009ca0 <_close_r+0x1c>)
 8009c8a:	4605      	mov	r5, r0
 8009c8c:	4608      	mov	r0, r1
 8009c8e:	6023      	str	r3, [r4, #0]
 8009c90:	f7fb ff6a 	bl	8005b68 <_close>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d102      	bne.n	8009c9e <_close_r+0x1a>
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	b103      	cbz	r3, 8009c9e <_close_r+0x1a>
 8009c9c:	602b      	str	r3, [r5, #0]
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	20001f84 	.word	0x20001f84

08009ca4 <_fstat_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	4c06      	ldr	r4, [pc, #24]	; (8009cc4 <_fstat_r+0x20>)
 8009caa:	4605      	mov	r5, r0
 8009cac:	4608      	mov	r0, r1
 8009cae:	4611      	mov	r1, r2
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	f7fb ff64 	bl	8005b7e <_fstat>
 8009cb6:	1c43      	adds	r3, r0, #1
 8009cb8:	d102      	bne.n	8009cc0 <_fstat_r+0x1c>
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	b103      	cbz	r3, 8009cc0 <_fstat_r+0x1c>
 8009cbe:	602b      	str	r3, [r5, #0]
 8009cc0:	bd38      	pop	{r3, r4, r5, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20001f84 	.word	0x20001f84

08009cc8 <_isatty_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	2300      	movs	r3, #0
 8009ccc:	4c05      	ldr	r4, [pc, #20]	; (8009ce4 <_isatty_r+0x1c>)
 8009cce:	4605      	mov	r5, r0
 8009cd0:	4608      	mov	r0, r1
 8009cd2:	6023      	str	r3, [r4, #0]
 8009cd4:	f7fb ff62 	bl	8005b9c <_isatty>
 8009cd8:	1c43      	adds	r3, r0, #1
 8009cda:	d102      	bne.n	8009ce2 <_isatty_r+0x1a>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	b103      	cbz	r3, 8009ce2 <_isatty_r+0x1a>
 8009ce0:	602b      	str	r3, [r5, #0]
 8009ce2:	bd38      	pop	{r3, r4, r5, pc}
 8009ce4:	20001f84 	.word	0x20001f84

08009ce8 <_lseek_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4605      	mov	r5, r0
 8009cec:	4608      	mov	r0, r1
 8009cee:	4611      	mov	r1, r2
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	4c05      	ldr	r4, [pc, #20]	; (8009d08 <_lseek_r+0x20>)
 8009cf4:	6022      	str	r2, [r4, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f7fb ff5a 	bl	8005bb0 <_lseek>
 8009cfc:	1c43      	adds	r3, r0, #1
 8009cfe:	d102      	bne.n	8009d06 <_lseek_r+0x1e>
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	b103      	cbz	r3, 8009d06 <_lseek_r+0x1e>
 8009d04:	602b      	str	r3, [r5, #0]
 8009d06:	bd38      	pop	{r3, r4, r5, pc}
 8009d08:	20001f84 	.word	0x20001f84

08009d0c <__malloc_lock>:
 8009d0c:	4770      	bx	lr

08009d0e <__malloc_unlock>:
 8009d0e:	4770      	bx	lr

08009d10 <_read_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4605      	mov	r5, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	4611      	mov	r1, r2
 8009d18:	2200      	movs	r2, #0
 8009d1a:	4c05      	ldr	r4, [pc, #20]	; (8009d30 <_read_r+0x20>)
 8009d1c:	6022      	str	r2, [r4, #0]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f7fb fee9 	bl	8005af6 <_read>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d102      	bne.n	8009d2e <_read_r+0x1e>
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	b103      	cbz	r3, 8009d2e <_read_r+0x1e>
 8009d2c:	602b      	str	r3, [r5, #0]
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	20001f84 	.word	0x20001f84

08009d34 <_init>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	bf00      	nop
 8009d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3a:	bc08      	pop	{r3}
 8009d3c:	469e      	mov	lr, r3
 8009d3e:	4770      	bx	lr

08009d40 <_fini>:
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d42:	bf00      	nop
 8009d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d46:	bc08      	pop	{r3}
 8009d48:	469e      	mov	lr, r3
 8009d4a:	4770      	bx	lr
